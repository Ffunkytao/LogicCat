SELECT (cooling_capacity_btu * usage_duration_hours / energy_efficiency_ratio) AS required_energy_btu FROM air_conditioner_info JOIN usage_records ON air_conditioner_info.ac_id = usage_records.ac_id WHERE air_conditioner_info.model = 'AC-1234' AND usage_records.mode = '制冷' AND usage_records.indoor_temperature_celsius = 30 AND usage_records.temperature_setting_celsius = 25;	air_conditioner	1
SELECT (1500 * 8 * 365 / 1000) AS total_energy_consumption_kwh;	air_conditioner	2
SELECT energy_efficiency_ratio * (1 - 0.1) AS energy_efficiency_ratio_high_humidity FROM air_conditioner_info WHERE ac_id = 'AC-5678';	air_conditioner	3
SELECT (100000 * 100 / 20 * 1.5) AS extreme_energy_consumption_kwh;	air_conditioner	4
SELECT (50 * 1.225 * 1005 * (35 - 20)) / (12000 * 1055.06 / 3600) AS required_time_hours;	air_conditioner	1
SELECT ((90 * 12 * 1800) + (90 * 6 * 1200) + (185 * 4 * 800)) / 1000 AS total_energy_consumption_kwh;	air_conditioner	2
SELECT heating_capacity_btu * (1 - 0.4) AS heating_capacity_low_temp FROM air_conditioner_info WHERE ac_id = '某空调ID';	air_conditioner	3
SELECT (50000 * 200 / (15 * 0.3)) * 1055.06 / 1000 AS extreme_energy_consumption_kwh;	air_conditioner	4
SELECT (aci.power_consumption_watts * 8 / 4.0) / 1000 * (1 + 0.05 * (ec.humidity_percent / 10)) AS energy_consumption_kwh FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制冷';	air_conditioner	1
SELECT ((90 * 12 * 2500 * (1 + 0.05 * (70 / 10))) + (90 * 10 * 2000 * (1 + 0.05 * (40 / 10))) + (185 * 8 * 1500 * (1 + 0.05 * (50 / 10)))) / 1000 AS total_energy_consumption_kwh;	air_conditioner	2
SELECT ec.energy_consumption_kwh * (1 + 0.05 * (hr.indoor_humidity_percent / 10)) * (1 + CASE WHEN ec.fan_speed = '高' THEN 0.10 WHEN ec.fan_speed = '中' THEN 0.05 ELSE 0 END) AS energy_consumption_high_humidity FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id JOIN humidity_records hr ON aci.ac_id = hr.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制冷';	air_conditioner	3
SELECT (6000 * 150 / (2.5 * 0.15)) / 1000 * (1 + 0.05 * (90 / 10)) AS extreme_energy_consumption_kwh;	air_conditioner	4
SELECT (60 * 1.225 * 1005 * (35 - 25)) / (15000 * 1055.06 / 3600 * (1 - 0.1 * (tr.outdoor_temperature_celsius - 25) / 5)) AS required_time_hours FROM air_conditioner_info aci JOIN temperature_records tr ON aci.ac_id = tr.ac_id WHERE aci.ac_id = 'AC-5678' AND tr.mode = '制冷';	air_conditioner	1
SELECT ((90 * 14 * 3000 * (1 + 0.1 * (35 - 25) / 5)) + (90 * 12 * 2500 * (1 + 0.1 * (5 - 25) / 5)) + (185 * 10 * 2000 * (1 + 0.1 * (20 - 25) / 5))) / 1000 AS total_energy_consumption_kwh;	air_conditioner	2
SELECT aci.heating_capacity_btu * (1 - 0.5) * (1 + CASE WHEN ec.fan_speed = '高' THEN 0.10 WHEN ec.fan_speed = '中' THEN 0.05 ELSE 0 END) AS heating_capacity_low_temp FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制热';	air_conditioner	3
SELECT (60000 * 200 / (2.0 * 0.1)) * 1055.06 / 1000 * (1 + 0.05 * (95 / 10)) AS Extreme_energy_consumption_kwh;	air_conditioner	4
SELECT SUM((1000 * 0.001 * (hr1.indoor_humidity_percent - hr2.indoor_humidity_percent) * (101325 / (287 * (tr.indoor_temperature_celsius + 273.15))))) AS removed_water_mass FROM humidity_records hr1 JOIN humidity_records hr2 ON hr1.ac_id = hr2.ac_id AND hr1.record_date = hr2.record_date JOIN temperature_records tr ON hr1.ac_id = tr.ac_id AND hr1.record_date = tr.record_date WHERE hr1.mode = 'cooling' AND hr1.indoor_humidity_percent = 60 AND hr2.indoor_humidity_percent = 40 AND tr.indoor_temperature_celsius = 25 AND tr.mode = 'cooling' GROUP BY hr1.ac_id;	air_conditioner	1
SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE power_consumption_watts IN (800, 1200, 1500) AND usage_duration_hours IN (4, 3, 5);	air_conditioner	2
SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE mode = 'cooling' AND temperature_setting_celsius < outdoor_temperature_celsius GROUP BY temperature_setting_celsius ORDER BY temperature_setting_celsius;	air_conditioner	3
SELECT cooling_capacity_btu * ((60 - (-10)) / 20) * 1 AS theoretical_energy_consumption_btu FROM air_conditioner_info WHERE cooling_capacity_btu = 10000;	air_conditioner	4
SELECT power_consumption_watts * usage_duration_hours * 3600 AS heat_transfer_joules FROM usage_records WHERE mode = 'heating' AND power_consumption_watts = 1500 AND indoor_temperature_celsius = 10 AND temperature_setting_celsius = 20;	air_conditioner	1
SELECT SUM(power_consumption_watts * usage_duration_hours) / SUM(usage_duration_hours) AS average_power_consumption_watts FROM usage_records WHERE power_consumption_watts IN (1000, 1200, 800) AND usage_duration_hours IN (2, 3, 4);	air_conditioner	2
SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE mode = 'heating' AND temperature_setting_celsius > outdoor_temperature_celsius GROUP BY temperature_setting_celsius ORDER BY temperature_setting_celsius;	air_conditioner	3
SELECT heating_capacity_btu * ((40 - (-30)) / 20) * 1 AS theoretical_energy_consumption_btu FROM air_conditioner_info WHERE heating_capacity_btu = 12000;	air_conditioner	4
SELECT model, manufacturer, cooling_capacity_btu, power_consumption_watts, (cooling_capacity_btu / power_consumption_watts) AS cooling_efficiency FROM air_conditioner_info ORDER BY cooling_efficiency DESC LIMIT 10;	air_conditioner	1
SELECT model, manufacturer, production_year, energy_efficiency_ratio, (energy_efficiency_ratio / production_year) AS efficiency_year_ratio FROM air_conditioner_info ORDER BY efficiency_year_ratio DESC LIMIT 5;	air_conditioner	2
SELECT model, manufacturer, noise_level_db, weight_kg, (noise_level_db / weight_kg) AS noise_weight_ratio FROM air_conditioner_info WHERE weight_kg > 0 ORDER BY noise_weight_ratio ASC LIMIT 5;	air_conditioner	3
SELECT model, manufacturer, cooling_capacity_btu, power_consumption_watts, (cooling_capacity_btu / power_consumption_watts) AS cooling_power_ratio FROM air_conditioner_info WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000 ORDER BY cooling_power_ratio DESC LIMIT 5;	air_conditioner	4
SELECT ur.usage_id, ai.model, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY total_energy_consumption DESC LIMIT 10;	air_conditioner	1
SELECT ur.usage_id, ai.model, ur.usage_date, ur.temperature_setting_celsius, ur.indoor_temperature_celsius, (ur.temperature_setting_celsius - ur.indoor_temperature_celsius) AS temperature_difference FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY temperature_difference DESC LIMIT 5;	air_conditioner	2
SELECT ur.usage_id, ai.model, ur.usage_date, ur.humidity_percent, ur.mode FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id WHERE ur.mode = '除湿' ORDER BY ur.humidity_percent ASC LIMIT 5;	air_conditioner	3
SELECT ur.usage_id, ai.model, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY total_energy_consumption DESC LIMIT 5;	air_conditioner	4
SELECT tr.temperature_id, ai.model, tr.record_date, tr.outdoor_temperature_celsius, tr.indoor_temperature_celsius, (tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS temperature_difference FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id ORDER BY temperature_difference DESC LIMIT 10;	air_conditioner	1
SELECT tr.temperature_id, ai.model, tr.record_date, tr.temperature_setting_celsius, tr.indoor_temperature_celsius, ABS(tr.indoor_temperature_celsius - tr.temperature_setting_celsius) AS temperature_deviation FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id ORDER BY temperature_deviation DESC LIMIT 5;	air_conditioner	2
SELECT tr.temperature_id, ai.model, tr.record_date, tr.mode, tr.indoor_temperature_celsius FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id WHERE tr.mode = '制冷' ORDER BY tr.indoor_temperature_celsius ASC LIMIT 5;	air_conditioner	3
WITH TemperatureDifference AS ( SELECT tr.ac_id, tr.record_date, tr.indoor_temperature_celsius, tr.outdoor_temperature_celsius, (tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS temperature_difference, aci.model, aci.heating_capacity_btu FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id WHERE tr.outdoor_temperature_celsius = -30 AND tr.indoor_temperature_celsius = 40 ) SELECT td.ac_id, td.record_date, td.indoor_temperature_celsius, td.outdoor_temperature_celsius, td.temperature_difference, td.model, (td.heating_capacity_btu * (td.temperature_difference / 10) * ur.usage_duration_hours) AS estimated_energy_consumption FROM TemperatureDifference td JOIN usage_records ur ON td.ac_id = ur.ac_id AND td.record_date = ur.usage_date ORDER BY td.temperature_difference DESC LIMIT 5;	air_conditioner	4
WITH HumidityDifference AS ( SELECT hr.ac_id, hr.record_date, hr.indoor_humidity_percent, hr.outdoor_humidity_percent, (hr.outdoor_humidity_percent - hr.indoor_humidity_percent) AS humidity_difference, aci.model FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id ) SELECT hd.ac_id, hd.record_date, hd.indoor_humidity_percent, hd.outdoor_humidity_percent, hd.humidity_difference, hd.model FROM HumidityDifference hd ORDER BY hd.humidity_difference DESC LIMIT 10; 	air_conditioner	1
WITH HumidityDeviation AS ( SELECT hr.ac_id, hr.record_date, hr.temperature_setting_celsius, hr.indoor_humidity_percent, (hr.indoor_humidity_percent - 50) AS humidity_deviation, aci.model FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id ) SELECT hd.ac_id, hd.record_date, hd.temperature_setting_celsius, hd.indoor_humidity_percent, hd.humidity_deviation, hd.model FROM HumidityDeviation hd ORDER BY ABS(hd.humidity_deviation) DESC LIMIT 5;	air_conditioner	2
SELECT hr.ac_id, hr.record_date, hr.mode, hr.indoor_humidity_percent, aci.model FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id WHERE hr.mode = '除湿' ORDER BY hr.indoor_humidity_percent ASC LIMIT 5;	air_conditioner	3
WITH HumidityDifference AS ( SELECT hr.ac_id, hr.record_date, hr.indoor_humidity_percent, hr.outdoor_humidity_percent, (hr.outdoor_humidity_percent - hr.indoor_humidity_percent) AS humidity_difference, aci.model, aci.power_consumption_watts FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id WHERE hr.outdoor_humidity_percent = 100 AND hr.indoor_humidity_percent = 0 ) SELECT hd.ac_id, hd.record_date, hd.indoor_humidity_percent, hd.outdoor_humidity_percent, hd.humidity_difference, hd.model, (hd.power_consumption_watts * (hd.humidity_difference / 50) * ur.usage_duration_hours) AS estimated_energy_consumption FROM HumidityDifference hd JOIN usage_records ur ON hd.ac_id = ur.ac_id AND hd.record_date = ur.usage_date ORDER BY hd.humidity_difference DESC LIMIT 5;	air_conditioner	4
WITH TotalEnergyConsumption AS ( SELECT ur.ac_id, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption, aci.model FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT tec.ac_id, tec.usage_date, tec.power_consumption_watts, tec.usage_duration_hours, tec.total_energy_consumption, tec.model FROM TotalEnergyConsumption tec ORDER BY tec.total_energy_consumption DESC LIMIT 10;	air_conditioner	1
WITH TemperatureDeviation AS ( SELECT ur.ac_id, ur.usage_date, ur.temperature_setting_celsius, ur.indoor_temperature_celsius, (ur.indoor_temperature_celsius - ur.temperature_setting_celsius) AS temperature_deviation, aci.model FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT td.ac_id, td.usage_date, td.temperature_setting_celsius, td.indoor_temperature_celsius, td.temperature_deviation, td.model FROM TemperatureDeviation td ORDER BY ABS(td.temperature_deviation) DESC LIMIT 5;	air_conditioner	2
SELECT ur.ac_id, ur.usage_date, ur.mode, ur.usage_duration_hours, aci.model FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id WHERE ur.mode = '制冷' ORDER BY ur.usage_duration_hours DESC LIMIT 5;	air_conditioner	3
WITH TotalEnergyConsumption AS ( SELECT ur.ac_id, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption, aci.model, aci.cooling_capacity_btu FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ) SELECT tec.ac_id, tec.usage_date, tec.power_consumption_watts, tec.usage_duration_hours, tec.total_energy_consumption, tec.model, (tec.cooling_capacity_btu * ((60 - 10) / 10) * tec.usage_duration_hours) AS estimated_energy_consumption FROM TotalEnergyConsumption tec ORDER BY tec.total_energy_consumption DESC LIMIT 5;	air_conditioner	4
WITH CoolingEfficiency AS ( SELECT manufacturer, (cooling_capacity_btu / power_consumption_watts) AS cooling_efficiency FROM air_conditioner_info ) SELECT manufacturer, AVG(cooling_efficiency) AS average_cooling_efficiency FROM CoolingEfficiency GROUP BY manufacturer ORDER BY average_cooling_efficiency DESC LIMIT 5;	air_conditioner	1
SELECT production_year, AVG(energy_efficiency_ratio) AS average_energy_efficiency_ratio FROM air_conditioner_info GROUP BY production_year ORDER BY average_energy_efficiency_ratio DESC LIMIT 3;	air_conditioner	2
WITH ManufacturerStats AS ( SELECT manufacturer, AVG(noise_level_db) AS average_noise_level, AVG(weight_kg) AS average_weight FROM air_conditioner_info GROUP BY manufacturer ) SELECT manufacturer, average_noise_level, average_weight FROM ManufacturerStats ORDER BY average_noise_level ASC, average_weight ASC LIMIT 3;	air_conditioner	3
WITH RefrigerantStats AS ( SELECT refrigerant_type, AVG(cooling_capacity_btu) AS average_cooling_capacity, AVG(power_consumption_watts) AS average_power_consumption FROM air_conditioner_info WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000 GROUP BY refrigerant_type ) SELECT refrigerant_type, average_cooling_capacity, average_power_consumption FROM RefrigerantStats ORDER BY average_cooling_capacity DESC, average_power_consumption ASC LIMIT 2;	air_conditioner	4
WITH TotalEnergyConsumption AS ( SELECT aci.model, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT model, AVG(total_energy_consumption) AS average_total_energy_consumption FROM TotalEnergyConsumption GROUP BY model ORDER BY average_total_energy_consumption DESC LIMIT 5;	air_conditioner	1
WITH TemperatureDeviation AS ( SELECT usage_date, (indoor_temperature_celsius - temperature_setting_celsius) AS temperature_deviation FROM usage_records ) SELECT usage_date, AVG(temperature_deviation) AS average_temperature_deviation FROM TemperatureDeviation GROUP BY usage_date ORDER BY average_temperature_deviation DESC LIMIT 3;	air_conditioner	2
SELECT mode, AVG(energy_consumption_kwh) AS average_energy_consumption FROM energy_consumption GROUP BY mode ORDER BY average_energy_consumption DESC LIMIT 1;	air_conditioner	3
WITH TotalEnergyConsumption AS ( SELECT aci.model, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption, aci.cooling_capacity_btu, ur.usage_duration_hours FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ) SELECT model, AVG(total_energy_consumption) AS average_total_energy_consumption, AVG(cooling_capacity_btu * ((60 - 10) / 10) * usage_duration_hours) AS estimated_energy_consumption FROM TotalEnergyConsumption GROUP BY model ORDER BY average_total_energy_consumption DESC LIMIT 3;	air_conditioner	4
SELECT aci.model, AVG(tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS avg_temperature_difference FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id GROUP BY aci.model ORDER BY avg_temperature_difference DESC LIMIT 5;	air_conditioner	1
SELECT tr.record_date, AVG(tr.indoor_temperature_celsius - tr.temperature_setting_celsius) AS avg_temperature_deviation FROM temperature_records tr GROUP BY tr.record_date ORDER BY avg_temperature_deviation DESC LIMIT 3;	air_conditioner	2
SELECT tr.mode, AVG(tr.indoor_temperature_celsius) AS avg_indoor_temperature FROM temperature_records tr GROUP BY tr.mode ORDER BY avg_indoor_temperature ASC LIMIT 1;	air_conditioner	3
WITH ExtremeCondition AS (SELECT 'extreme' AS condition_type, -30 AS outdoor_temp, 40 AS indoor_temp), AverageTempDifference AS (SELECT aci.model, AVG(tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS avg_temperature_difference FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id GROUP BY aci.model) SELECT atd.model, atd.avg_temperature_difference, (aci.heating_capacity_btu * (70 / 10) * 1) AS estimated_energy_consumption FROM AverageTempDifference atd JOIN air_conditioner_info aci ON atd.model = aci.model CROSS JOIN ExtremeCondition ec ORDER BY atd.avg_temperature_difference DESC LIMIT 3;	air_conditioner	4
SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE hr.mode = '除湿' GROUP BY humidity_range;	air_conditioner	1
SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, ec.temperature_setting_celsius, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE ec.mode = '制冷' GROUP BY humidity_range, ec.temperature_setting_celsius;	air_conditioner	2
WITH NormalEnvironment AS (SELECT CASE WHEN tr.humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN tr.humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, tr.mode, AVG(ec.energy_consumption_kwh) AS normal_energy_consumption FROM temperature_records tr JOIN energy_consumption ec ON tr.ac_id = ec.ac_id AND tr.record_date = ec.record_date WHERE tr.indoor_temperature_celsius <= 30 AND tr.humidity_percent <= 60 GROUP BY humidity_range, tr.mode), HighTempHighHumidity AS (SELECT CASE WHEN tr.humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN tr.humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, tr.mode, AVG(ec.energy_consumption_kwh) AS high_energy_consumption FROM temperature_records tr JOIN energy_consumption ec ON tr.ac_id = ec.ac_id AND tr.record_date = ec.record_date WHERE tr.indoor_temperature_celsius > 30 AND tr.humidity_percent > 60 GROUP BY humidity_range, tr.mode) SELECT ne.humidity_range, ne.mode, ne.normal_energy_consumption, hthh.high_energy_consumption, ((hthh.high_energy_consumption - ne.normal_energy_consumption) / ne.normal_energy_consumption) * 100 AS energy_increase_percentage FROM NormalEnvironment ne JOIN HighTempHighHumidity hthh ON ne.humidity_range = hthh.humidity_range AND ne.mode = hthh.mode;	air_conditioner	3
SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, ec.fan_speed, SUM(ec.energy_consumption_kwh * 2.0) AS estimated_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE hr.indoor_humidity_percent = 200 GROUP BY humidity_range, ec.fan_speed;	air_conditioner	4
SELECT ec.temperature_setting_celsius, ec.mode, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM energy_consumption ec GROUP BY ec.temperature_setting_celsius, ec.mode ORDER BY ec.temperature_setting_celsius, ec.mode;	air_conditioner	1
SELECT ur.fan_speed, CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN humidity_records hr ON ur.ac_id = hr.ac_id AND ur.usage_date = hr.record_date GROUP BY ur.fan_speed, humidity_range ORDER BY ur.fan_speed, humidity_range;	air_conditioner	2
SELECT CASE WHEN tr.outdoor_temperature_celsius < 10 THEN '<10°C' WHEN tr.outdoor_temperature_celsius BETWEEN 10 AND 25 THEN '10-25°C' ELSE '>25°C' END AS outdoor_temperature_range, ur.mode, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN temperature_records tr ON ur.ac_id = tr.ac_id AND ur.usage_date = tr.record_date GROUP BY outdoor_temperature_range, ur.mode ORDER BY outdoor_temperature_range, ur.mode;	air_conditioner	3
SELECT ur.fan_speed, CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN humidity_records hr ON ur.ac_id = hr.ac_id AND ur.usage_date = hr.record_date JOIN temperature_records tr ON ur.ac_id = tr.ac_id AND ur.usage_date = tr.record_date WHERE tr.outdoor_temperature_celsius = 60 GROUP BY ur.fan_speed, humidity_range ORDER BY ur.fan_speed, humidity_range;	air_conditioner	4
SELECT model FROM air_conditioner_info WHERE cooling_capacity_btu > 10000 AND energy_efficiency_ratio < 10 AND production_year >= 2010;	air_conditioner	1
SELECT model FROM air_conditioner_info WHERE heating_capacity_btu > 12000 AND noise_level_db < 50 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE warranty_period_months < 24);	air_conditioner	2
SELECT model FROM air_conditioner_info WHERE weight_kg > 50 AND power_consumption_watts < 1000 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE manufacturer = 'Unknown');	air_conditioner	3
SELECT model FROM air_conditioner_info WHERE refrigerant_type = 'R410A' AND production_year > 2020 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE cooling_capacity_btu < 5000);	air_conditioner	4
SELECT * FROM energy_consumption WHERE mode = '制冷' AND energy_consumption_kwh > (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '制冷') AND power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷')	air_conditioner	1
SELECT * FROM energy_consumption WHERE mode = '制热' AND ABS(temperature_setting_celsius - indoor_temperature_celsius) > 10 AND energy_consumption_kwh < (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '制热')	air_conditioner	2
SELECT * FROM energy_consumption WHERE mode = '除湿' AND humidity_percent > 70 AND energy_consumption_kwh < (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '除湿')	air_conditioner	3
SELECT * FROM energy_consumption WHERE mode = '送风' AND fan_speed = 10 AND power_consumption_watts = 0	air_conditioner	4
SELECT * FROM energy_consumption WHERE mode = '制冷' AND indoor_temperature_celsius > temperature_setting_celsius AND power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius > 40);	air_conditioner	1
SELECT * FROM energy_consumption WHERE mode = '制热' AND indoor_temperature_celsius < temperature_setting_celsius AND power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制热') AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE humidity_percent < 30);	air_conditioner	2
SELECT * FROM energy_consumption WHERE mode = '送风' AND fan_speed = '高档' AND ABS(indoor_temperature_celsius - temperature_setting_celsius) > 5 AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius < 10);	air_conditioner	3
SELECT * FROM energy_consumption WHERE mode = '极端制冷' AND indoor_temperature_celsius < -10 AND power_consumption_watts > 10000 AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius < -50);	air_conditioner	4
SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '制冷' AND ec.humidity_percent > 70 AND ec.power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND hr.outdoor_humidity_percent >= 20;	air_conditioner	1
SELECT * FROM energy_consumption WHERE mode = '除湿' AND humidity_percent > 60 AND power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '除湿') AND temperature_setting_celsius <= 30;	air_conditioner	2
SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '送风' AND ec.fan_speed = '低档' AND ABS(ec.humidity_percent - hr.outdoor_humidity_percent) > 30 AND hr.outdoor_humidity_percent >= 10;	air_conditioner	3
SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '极端除湿' AND ec.humidity_percent < 10 AND ec.power_consumption_watts > 5000 AND hr.outdoor_humidity_percent <= 90;	air_conditioner	4
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '制冷' AND ur.usage_duration_hours > 5 AND ec.power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND ec.outdoor_temperature_celsius >= 10;	air_conditioner	1
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '制热' AND ur.usage_duration_hours > 3 AND ec.power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制热') AND ec.indoor_temperature_celsius <= 25;	air_conditioner	2
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '送风' AND ur.fan_speed = '高档' AND ur.usage_duration_hours < 1 AND ec.outdoor_temperature_celsius <= 35;	air_conditioner	3
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '极端制热' AND ur.usage_duration_hours > 24 AND ur.power_consumption_watts > 10000 AND ec.outdoor_temperature_celsius <= 50;	air_conditioner	4
SELECT a.model, (a.cooling_capacity_btu / (a.power_consumption_watts * 3.412)) * (1 + (r.phase_change_heat_kj_per_kg * r.refrigerant_flow_rate_kg_per_s) / (c.air_heat_capacity_kj_per_kg_k * c.air_flow_rate_kg_per_s * 40)) AS theoretical_cop FROM air_conditioner_info a JOIN refrigerant_properties r ON a.refrigerant_type = r.refrigerant_type JOIN air_properties c ON c.temperature_celsius = 50 AND c.humidity_percent = 90 WHERE a.model = '特定型号';	air_conditioner	1
WITH monthly_energy AS (SELECT a.manufacturer, a.model, DATE_FORMAT(e.record_date, '%Y-%m') AS month, AVG(e.energy_consumption_kwh) AS avg_energy_consumption_kwh FROM energy_consumption e JOIN air_conditioner_info a ON e.ac_id = a.ac_id JOIN temperature_records t ON e.ac_id = t.ac_id AND e.record_date = t.record_date JOIN humidity_records h ON e.ac_id = h.ac_id AND e.record_date = h.record_date WHERE YEAR(e.record_date) = 2023 GROUP BY a.manufacturer, a.model, DATE_FORMAT(e.record_date, '%Y-%m')), energy_fluctuation AS (SELECT manufacturer, model, MAX(avg_energy_consumption_kwh) - MIN(avg_energy_consumption_kwh) AS energy_fluctuation_kwh FROM monthly_energy GROUP BY manufacturer, model) SELECT manufacturer, model, energy_fluctuation_kwh FROM energy_fluctuation ORDER BY energy_fluctuation_kwh DESC LIMIT 1;	air_conditioner	2
WITH low_temp_low_humidity_usage AS (SELECT u.ac_id, u.mode, SUM(u.usage_duration_hours) AS total_usage_hours, SUM(u.power_consumption_watts * u.usage_duration_hours) / 1000 AS total_energy_consumption_kwh FROM usage_records u JOIN temperature_records t ON u.ac_id = t.ac_id AND u.usage_date = t.record_date WHERE t.indoor_temperature_celsius < 10 AND t.humidity_percent < 30 GROUP BY u.ac_id, u.mode), shortest_usage_model AS (SELECT a.model, SUM(l.total_usage_hours) AS total_usage_hours FROM low_temp_low_humidity_usage l JOIN air_conditioner_info a ON l.ac_id = a.ac_id GROUP BY a.model ORDER BY total_usage_hours ASC LIMIT 1) SELECT s.model, l.mode, l.total_usage_hours, l.total_energy_consumption_kwh FROM low_temp_low_humidity_usage l JOIN air_conditioner_info a ON l.ac_id = a.ac_id JOIN shortest_usage_model s ON a.model = s.model;	air_conditioner	3
WITH theoretical_energy AS (SELECT (1000000 / 100) * 24 * 365 * 10 * POWER(1.05, 10) / 1000 AS total_energy_consumption_kwh), high_energy_models AS (SELECT a.model, (a.cooling_capacity_btu / a.energy_efficiency_ratio) * 24 * 365 * 10 * POWER(1.05, 10) / 1000 AS total_energy_consumption_kwh FROM air_conditioner_info a WHERE a.cooling_capacity_btu = 1000000 AND a.energy_efficiency_ratio = 100 AND EXISTS (SELECT 1 FROM temperature_records t WHERE t.ac_id = a.ac_id AND t.indoor_temperature_celsius - t.outdoor_temperature_celsius = 100)) SELECT model, total_energy_consumption_kwh FROM high_energy_models WHERE total_energy_consumption_kwh > 1000000;	air_conditioner	4
WITH power_consumption_variation AS (SELECT u.temperature_setting_celsius, (MAX(u.power_consumption_watts) - MIN(u.power_consumption_watts)) / AVG(u.power_consumption_watts) * 100 AS power_variation_rate FROM usage_records u JOIN air_conditioner_info a ON u.ac_id = a.ac_id WHERE a.model = '特定型号' GROUP BY u.temperature_setting_celsius) SELECT temperature_setting_celsius, power_variation_rate FROM power_consumption_variation ORDER BY power_variation_rate DESC LIMIT 1;	air_conditioner	1
WITH monthly_data AS (SELECT MONTH(u.usage_date) AS month, u.usage_duration_hours, e.energy_consumption_kwh FROM usage_records u JOIN energy_consumption e ON u.ac_id = e.ac_id AND u.usage_date = e.record_date WHERE YEAR(u.usage_date) = 2023), correlation_coefficients AS (SELECT month, (AVG(usage_duration_hours * energy_consumption_kwh) - AVG(usage_duration_hours) * AVG(energy_consumption_kwh)) / (STDDEV(usage_duration_hours) * STDDEV(energy_consumption_kwh)) AS correlation_coefficient FROM monthly_data GROUP BY month) SELECT month, correlation_coefficient FROM correlation_coefficients ORDER BY correlation_coefficient DESC LIMIT 1;	air_conditioner	2
WITH low_temp_low_humidity_usage AS (SELECT a.model, u.mode, SUM(u.usage_duration_hours) AS total_usage_hours FROM usage_records u JOIN air_conditioner_info a ON u.ac_id = a.ac_id WHERE u.indoor_temperature_celsius < 10 AND u.humidity_percent < 30 GROUP BY a.model, u.mode), shortest_usage_model AS (SELECT model, SUM(total_usage_hours) AS total_usage_hours FROM low_temp_low_humidity_usage GROUP BY model ORDER BY total_usage_hours ASC LIMIT 1) SELECT s.model, l.mode, l.total_usage_hours FROM low_temp_low_humidity_usage l JOIN shortest_usage_model s ON l.model = s.model;	air_conditioner	3
WITH extreme_usage AS (SELECT a.model, 24 * 365 * 1000 * POWER(1.02, 1000) AS total_usage_hours, (a.power_consumption_watts * 24 * 365 * 1000 * POWER(1.10, 1000)) / 1000 AS total_energy_consumption_kwh FROM air_conditioner_info a WHERE EXISTS (SELECT 1 FROM temperature_records t WHERE t.ac_id = a.ac_id AND t.indoor_temperature_celsius = 100 AND t.outdoor_temperature_celsius = -50)) SELECT model, total_usage_hours, total_energy_consumption_kwh FROM extreme_usage WHERE total_usage_hours > 10000000 AND total_energy_consumption_kwh > 100000000;	air_conditioner	4
WITH eer_by_mode AS (SELECT e.mode, AVG(a.cooling_capacity_btu / e.power_consumption_watts) AS eer FROM energy_consumption e JOIN air_conditioner_info a ON e.ac_id = a.ac_id WHERE a.model = 'Model-X' GROUP BY e.mode) SELECT mode, eer FROM eer_by_mode ORDER BY eer ASC LIMIT 1;	air_conditioner	1
WITH MonthlyData AS ( SELECT MONTH(ec.record_date) AS month, ec.energy_consumption_kwh, ec.outdoor_temperature_celsius FROM energy_consumption ec WHERE YEAR(ec.record_date) = 2023 ), CorrelationCoefficients AS ( SELECT month, (AVG(energy_consumption_kwh * outdoor_temperature_celsius) - AVG(energy_consumption_kwh) * AVG(outdoor_temperature_celsius)) / (STDDEV(energy_consumption_kwh) * STDDEV(outdoor_temperature_celsius)) AS correlation_coefficient FROM MonthlyData GROUP BY month ) SELECT month, correlation_coefficient FROM CorrelationCoefficients ORDER BY correlation_coefficient DESC LIMIT 1;	air_conditioner	2
WITH HighTempHighHumidity AS ( SELECT ec.ac_id, ec.mode, ec.energy_consumption_kwh, aci.model FROM energy_consumption ec JOIN air_conditioner_info aci ON ec.ac_id = aci.ac_id WHERE ec.outdoor_temperature_celsius > 35 AND ec.humidity_percent > 80 ), ModelModeEnergy AS ( SELECT model, mode, SUM(energy_consumption_kwh) AS total_energy_kwh FROM HighTempHighHumidity GROUP BY model, mode ), MaxEnergyModel AS ( SELECT model, SUM(total_energy_kwh) AS total_energy_kwh FROM ModelModeEnergy GROUP BY model ORDER BY total_energy_kwh DESC LIMIT 1 ) SELECT mme.model, mme.mode, mme.total_energy_kwh FROM ModelModeEnergy mme JOIN MaxEnergyModel mem ON mme.model = mem.model ORDER BY mme.model, mme.mode;	air_conditioner	3
WITH ExtremeEnergy AS ( SELECT aci.model, aci.power_consumption_watts, POWER(1.20, 1000) AS aging_factor FROM air_conditioner_info aci ), TotalEnergy AS ( SELECT model, (power_consumption_watts * 24 * 365 * 1000 * aging_factor) / 1000 AS total_energy_kwh FROM ExtremeEnergy ) SELECT model, total_energy_kwh FROM TotalEnergy WHERE total_energy_kwh > 1000000000;	air_conditioner	4
SELECT cooling_capacity_btu / (power_consumption_watts * 3.412) AS COP, cooling_capacity_btu / (1.0 * (45 - 5)) AS mass_flow_rate_kg_s FROM air_conditioner_info WHERE refrigerant_type = 'R-410A' AND cooling_capacity_btu = 18000 AND power_consumption_watts = 2000;	air_conditioner	1
SELECT air_conditioner_info.power_consumption_watts * 8 / 1000 AS total_energy_kWh, (22 - 15) * 1.005 * 1.225 * 50 / 8 * 3.412 AS heating_efficiency_BTU_h, (22 - 15) * 1.005 * 1.225 * 50 AS total_heat_change_kJ FROM usage_records JOIN air_conditioner_info ON usage_records.ac_id = air_conditioner_info.ac_id WHERE usage_records.mode = 'heating' AND usage_records.usage_duration_hours = 8 AND air_conditioner_info.power_consumption_watts = 1800;	air_conditioner	2
SELECT noise_level_db <= 55 AS is_noise_compliant, (SUBSTRING_INDEX(dimensions, 'x', 1) * SUBSTRING_INDEX(SUBSTRING_INDEX(dimensions, 'x', -2), 'x', 1) * SUBSTRING_INDEX(dimensions, 'x', -1)) * 1.5 <= (20 * 3 * 10000) AS is_space_sufficient FROM air_conditioner_info WHERE noise_level_db = 50 AND weight_kg = 30 AND dimensions = '80x20x50';	air_conditioner	3
SELECT cooling_capacity_btu / power_consumption_watts AS EER, cooling_capacity_btu / (1.5 * (10000 - (-273))) AS mass_flow_rate_kg_s, power_consumption_watts * 1 / 1000 AS total_energy_kWh FROM air_conditioner_info WHERE cooling_capacity_btu = 1000000 AND power_consumption_watts = 1000000;	air_conditioner	4
SELECT 0.5 * 1.225 * POWER(50, 2) * (Height_meters * Base_Width) * 1.2 AS Wind_Load FROM tower WHERE Name = 'Eiffel Tower';	architect	1
SELECT (Weight * 9.81) / (Base_Width * Base_Width) AS Pressure FROM tower WHERE Name = 'Eiffel Tower';	architect	2
SELECT CASE WHEN Cost_Usd = (SELECT AVG(Cost_Usd) FROM tower WHERE Height_meters = 300 AND Material = '钢') THEN '成正比' ELSE '不成正比' END AS Cost_Proportionality FROM tower WHERE Name = 'Eiffel Tower';	architect	3
SELECT CASE WHEN Vibration_Frequency = (1000 / (2 * Height_meters)) THEN '可能导致失效' ELSE '不会导致失效' END AS Failure_Risk FROM tower WHERE Name = 'Eiffel Tower';	architect	4
SELECT 0.5 * POWER(2 * PI() * Vibration_Frequency, 2) * Weight * POWER(0.1, 2) AS Energy_Consumption FROM tower WHERE Name = 'Tokyo Tower';	architect	1
SELECT Weight * 9.81 * (300 - 100) AS Potential_Energy_Change FROM tower WHERE Name = 'Tokyo Tower';	architect	2
SELECT CASE WHEN Maintenance_Cost = (SELECT AVG(Maintenance_Cost) FROM tower WHERE Height_meters = 300 AND Material = '钢') THEN '成正比' ELSE '不成正比' END AS Maintenance_Proportionality FROM tower WHERE Name = 'Tokyo Tower';	architect	3
SELECT CASE WHEN POWER(500, 2) > POWER(Wind_Resistance, 2) THEN '不足' ELSE '足够' END AS Wind_Resistance_Check FROM tower WHERE Name = 'Tokyo Tower';	architect	4
SELECT (POWER(PI(), 2) * 200e9 * (POWER(Base_Width, 4)/12)) / POWER(2 * Height_meters, 2) AS Critical_Buckling_Load FROM tower WHERE Name = 'CN Tower';	architect	1
SELECT (100000 * 2400 / 1000 * 50) AS Concrete_Cost, (100000 * 7850 / 1000 * 800) AS Steel_Cost, (100000 * 7850 / 1000 * 800) - (100000 * 2400 / 1000 * 50) AS Cost_Difference FROM tower WHERE Name = 'CN Tower';	architect	2
SELECT CASE WHEN Wind_Resistance > 40 THEN '不合理' ELSE '合理' END AS Wind_Resistance_Check FROM tower WHERE Name = 'CN Tower';	architect	3
SELECT (Weight * 9.81) / POWER(Base_Width, 2) AS Ground_Pressure FROM tower WHERE Name = 'CN Tower';	architect	4
SELECT 12e-6 * Height_meters * 50 AS Thermal_Expansion FROM tower WHERE Name = 'Burj Khalifa';	architect	1
SELECT 200e9 * 12e-6 * 40 AS Steel_Thermal_Stress, 30e9 * 10e-6 * 40 AS Concrete_Thermal_Stress FROM tower WHERE Name = 'Burj Khalifa';	architect	2
SELECT CASE WHEN (5000000 / 1200000) > 3 THEN '异常' ELSE '正常' END AS Maintenance_Status FROM tower WHERE Name = 'Burj Khalifa';	architect	3
SELECT (1e18 * 9.81) / (5515 * 9.81) AS Penetration_Depth FROM tower WHERE Name = 'Burj Khalifa';	architect	4
SELECT 0.5 * Weight * 9.81 * Base_Width AS Resist_Moment, 0.5 * 1.225 * POWER(60, 2) * (Height_meters * Base_Width) * (Height_meters / 2) AS Wind_Moment FROM tower WHERE Name = 'Shanghai Tower';	architect	1
SELECT (1e7 * 300) / (200e9 * 5) AS Steel_Deformation, (1e7 * 300) / (10e9 * 20) AS Wood_Deformation FROM tower WHERE Name = 'Shanghai Tower';	architect	2
SELECT CASE WHEN Height_meters > 150 AND Construction_year < 1880 THEN '不合理' ELSE '合理' END AS Construction_Validity FROM tower WHERE Name = 'Shanghai Tower';	architect	3
SELECT 1e25 * POWER(6.4e6 + Height_meters, 2) AS Delta_I, (8e37 / (8e37 + 1e25 * POWER(6.4e6 + Height_meters, 2))) * 7.2921159e-5 AS New_Angular_Velocity FROM tower WHERE Name = 'Shanghai Tower';	architect	4
SELECT 0.5 * 1.225 * POWER(100 * POWER(Height_meters / 10, 0.3), 2) * 0.7 AS Wind_Pressure FROM tower WHERE Name = 'CN Tower';	architect	1
SELECT Name, Height_meters, Cost_Usd, (Cost_Usd / POWER(Height_meters, 3)) AS Cost_Ratio FROM tower WHERE Name = 'CN Tower';	architect	2
SELECT Name, Height_meters, Material, Maintenance_Cost FROM tower WHERE Height_meters = 200 AND Material IN ('钢', '混凝土');	architect	3
SELECT Name, Vibration_Frequency, Maintenance_Cost, (1000 * POWER(Vibration_Frequency / 10, 3)) AS Calculated_Maintenance_Cost FROM tower WHERE Name = 'CN Tower';	architect	4
SELECT Name, Height_meters, Material, Vibration_Frequency, (1 / (2 * 3.14159)) * SQRT((200e9 * 5) / (7850 * (Base_Width * Base_Width) * POWER(Height_meters, 4))) AS Calculated_Frequency FROM tower WHERE Name = 'CN Tower';	architect	1
SELECT cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100) AS actual_frequency_ghz FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_base_frequency_ghz = 3.5 AND computer_info.cpu_max_frequency_ghz = 4.2 AND usage_records.cpu_usage_percent = 80;	computer	1
SELECT (ram_size_gb * ram_usage_percent / 100) / 25.6 AS actual_bandwidth_utilization FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.ram_size_gb = 16 AND computer_info.ram_type = 'DDR4' AND usage_records.ram_usage_percent = 75;	computer	2
SELECT (computer_info.battery_capacity_wh * battery_usage.battery_health_percent / 100) / battery_usage.power_consumption_watts AS runtime_hours FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 60 AND battery_usage.power_consumption_watts = 45 AND battery_usage.battery_health_percent = 90;	computer	3
SELECT cpu_cores * cpu_threads * (cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100)) AS total_computation_power FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_cores = 128 AND computer_info.cpu_threads = 256 AND computer_info.cpu_base_frequency_ghz = 1 AND computer_info.cpu_max_frequency_ghz = 10 AND usage_records.cpu_usage_percent = 200;	computer	4
SELECT gpu_vram_gb * (gpu_usage_percent / 100) * 448 AS data_transfer_volume_gb FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.gpu_vram_gb = 8 AND usage_records.gpu_usage_percent = 90;	computer	1
SELECT (storage_size_gb * 1024 * storage_usage_percent / 100) / 500 AS actual_bandwidth_s FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.storage_size_gb = 1024 AND computer_info.storage_type = 'SSD' AND usage_records.storage_usage_percent = 60;	computer	2
SELECT (screen_size_inches * (CAST(SUBSTRING_INDEX(screen_resolution, 'x', 1) AS UNSIGNED) * CAST(SUBSTRING_INDEX(screen_resolution, 'x', -1) AS UNSIGNED))) / (POW(SQRT(POW(CAST(SUBSTRING_INDEX(screen_resolution, 'x', 1) AS UNSIGNED), 2) + POW(CAST(SUBSTRING_INDEX(screen_resolution, 'x', -1) AS UNSIGNED), 2)) / screen_size_inches, 2)) AS actual_display_area FROM computer_info WHERE computer_info.screen_size_inches = 15.6 AND computer_info.screen_resolution = '1920x1080';	computer	3
SELECT (computer_info.battery_capacity_wh * battery_usage.battery_health_percent / 100) / battery_usage.power_consumption_watts AS runtime_hours FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 1000 AND battery_usage.power_consumption_watts = 500 AND battery_usage.battery_health_percent = 200;	computer	4
SELECT 25 + (75 * 4 * 3600 * (1 - 0.8)) / 500 AS internal_temperature_celsius FROM usage_records WHERE usage_records.power_consumption_watts = 75 AND usage_records.usage_duration_hours = 4;	computer	1
SELECT 100 * (usage_records.cpu_usage_percent / 100) AS cpu_actual_performance_gflops, 200 * (usage_records.gpu_usage_percent / 100) AS gpu_actual_performance_gflops, 50 * (usage_records.ram_usage_percent / 100) AS ram_actual_performance_gb_s, 500 * (usage_records.storage_usage_percent / 100) AS storage_actual_performance_mb_s FROM usage_records WHERE usage_records.cpu_usage_percent = 80 AND usage_records.gpu_usage_percent = 60 AND usage_records.ram_usage_percent = 50 AND usage_records.storage_usage_percent = 30;	computer	2
SELECT (60 * 90 / 100) - (50 * 3) AS remaining_battery_capacity_wh, CASE WHEN (60 * 90 / 100) - (50 * 3) <= 0 THEN '需要充电' ELSE '无需充电' END AS charging_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 60 AND usage_records.power_consumption_watts = 50 AND usage_records.usage_duration_hours = 3;	computer	3
SELECT 100 + (1000 * 24 * 3600 * (1 - 0.5)) / 500 AS internal_temperature_celsius, CASE WHEN 100 + (1000 * 24 * 3600 * (1 - 0.5)) / 500 > 1000 THEN '不可能实现' ELSE '可能实现' END AS feasibility_analysis FROM usage_records WHERE usage_records.cpu_usage_percent = 1000 AND usage_records.gpu_usage_percent = 800 AND usage_records.power_consumption_watts = 1000 AND usage_records.usage_duration_hours = 24;	computer	4
SELECT (30 * 1.5) / 0.9 AS actual_discharge_wh FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 60 AND usage_records.power_consumption_watts = 30 AND usage_records.usage_duration_hours = 1.5;	computer	1
SELECT (50 * 80 / 100) - (20 * 2) AS remaining_battery_capacity_wh, (50 - ((50 * 80 / 100) - (20 * 2))) / 0.85 AS required_charging_wh FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 50 AND usage_records.power_consumption_watts = 20 AND usage_records.usage_duration_hours = 2;	computer	2
SELECT 95 - ((18 * 4) / 80 * 0.1) AS remaining_battery_health_percent, CASE WHEN 95 - ((18 * 4) / 80 * 0.1) < 80 THEN '需要更换' ELSE '无需更换' END AS replacement_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 80 AND usage_records.power_consumption_watts = 18 AND usage_records.usage_duration_hours = 4;	computer	3
SELECT 500 - ((100 * 24) / 200 * CEIL((100 * 24) / 200) * 1) AS remaining_battery_health_percent, CASE WHEN 500 - ((100 * 24) / 200 * CEIL((100 * 24) / 200) * 1) <= 0 THEN '不可能实现' ELSE '可能实现' END AS feasibility_analysis FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 200 AND usage_records.power_consumption_watts = 100 AND usage_records.usage_duration_hours = 24;	computer	4
SELECT (65 + 85) * 1 * 3600 * 0.75 AS total_heat_dissipation_joules FROM performance_tests WHERE performance_tests.cpu_score = 1200 AND performance_tests.gpu_score = 800 AND performance_tests.overall_score = 950;	computer	1
SELECT cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1 AS calculated_overall_score, CASE WHEN cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1 <> overall_score THEN '存在性能瓶颈' ELSE '无性能瓶颈' END AS performance_bottleneck_analysis FROM performance_tests WHERE cpu_score = 1500 AND gpu_score = 1000 AND ram_score = 800 AND storage_score = 600 AND overall_score = 1200;	computer	2
SELECT temperature_celsius, CASE WHEN temperature_celsius <= 85 THEN '安全范围内' ELSE '超出安全范围' END AS temperature_safety_status, CASE WHEN temperature_celsius >= 85 THEN '需要改进散热系统' ELSE '无需改进散热系统' END AS cooling_system_analysis FROM performance_tests WHERE cpu_score = 1000 AND gpu_score = 700 AND ram_score = 500 AND storage_score = 400 AND overall_score = 800 AND temperature_celsius = 80 AND power_consumption_watts = 150;	computer	3
SELECT 20000 * 1 * 3600 AS total_energy_consumption_joules, CASE WHEN 20000 * 1 * 3600 > 1e12 THEN '不可能实现可持续运行' ELSE '可能实现可持续运行' END AS sustainability_analysis FROM performance_tests WHERE cpu_score = 100000 AND gpu_score = 80000 AND ram_score = 60000 AND storage_score = 40000 AND overall_score = 90000 AND temperature_celsius = 500 AND power_consumption_watts = 20000;	computer	4
SELECT ci.computer_id, ci.manufacturer, ci.model, ci.battery_capacity_wh, pt.power_consumption_watts, (ci.battery_capacity_wh / pt.power_consumption_watts) AS theoretical_runtime_hours FROM computer_info ci JOIN performance_tests pt ON ci.computer_id = pt.computer_id ORDER BY theoretical_runtime_hours DESC LIMIT 5;	computer	1
SELECT computer_id, manufacturer, model, cpu_cores, cpu_threads, (cpu_threads / cpu_cores) AS core_thread_ratio, ABS((cpu_threads / cpu_cores) - 2) AS ratio_difference FROM computer_info ORDER BY ratio_difference ASC LIMIT 3;	computer	2
SELECT computer_id, manufacturer, model, screen_size_inches, screen_resolution, ROUND(SQRT(POW(SUBSTRING_INDEX(screen_resolution, 'x', 1), 2) + POW(SUBSTRING_INDEX(screen_resolution, 'x', -1), 2)) / screen_size_inches, 2) AS ppi FROM computer_info ORDER BY ppi DESC LIMIT 10;	computer	3
SELECT computer_id, manufacturer, model, cpu_base_frequency_ghz, (100 / cpu_base_frequency_ghz) AS performance_increase_factor FROM computer_info ORDER BY performance_increase_factor DESC LIMIT 5;	computer	4
SELECT computer_id, manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz, ROUND(((cpu_max_frequency_ghz - cpu_base_frequency_ghz) / cpu_base_frequency_ghz) * 100, 2) AS frequency_increase_percentage FROM computer_info ORDER BY frequency_increase_percentage DESC LIMIT 5;	computer	1
SELECT computer_id, manufacturer, model, ram_size_gb, storage_size_gb, (ram_size_gb / storage_size_gb) AS ram_storage_ratio, ABS((ram_size_gb / storage_size_gb) - 0.1) AS ratio_difference FROM computer_info ORDER BY ratio_difference ASC LIMIT 3;	computer	2
SELECT computer_id, manufacturer, model, weight_kg, battery_capacity_wh, (battery_capacity_wh / weight_kg) AS battery_capacity_per_kg FROM computer_info ORDER BY battery_capacity_per_kg DESC LIMIT 10;	computer	3
SELECT computer_id, manufacturer, model, gpu_vram_gb, (1024 / gpu_vram_gb) AS vram_increase_factor FROM computer_info ORDER BY vram_increase_factor DESC LIMIT 5;	computer	4
SELECT computer_id, SUM(power_consumption_watts * usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY computer_id ORDER BY total_energy_consumption_wh DESC LIMIT 5;	computer	1
SELECT computer_id, AVG(cpu_usage_percent) AS avg_cpu_usage, AVG(gpu_usage_percent) AS avg_gpu_usage, (AVG(cpu_usage_percent) - AVG(gpu_usage_percent)) AS usage_difference FROM usage_records GROUP BY computer_id ORDER BY usage_difference DESC LIMIT 3;	computer	2
SELECT computer_id, SUM(temperature_celsius * usage_duration_hours) / SUM(usage_duration_hours) AS avg_temperature FROM usage_records GROUP BY computer_id ORDER BY avg_temperature DESC LIMIT 10;	computer	3
SELECT computer_id, SUM(power_consumption_watts * 1000) AS total_energy_consumption_wh FROM usage_records GROUP BY computer_id ORDER BY total_energy_consumption_wh DESC LIMIT 5;	computer	4
SELECT computer_id, battery_capacity_wh, power_consumption_watts, (battery_capacity_wh / power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage ORDER BY theoretical_runtime_hours DESC LIMIT 5;	computer	1
SELECT computer_id, (battery_health_percent / usage_duration_hours) AS health_usage_ratio FROM battery_usage ORDER BY health_usage_ratio ASC LIMIT 3;	computer	2
SELECT computer_id, SUM(temperature_celsius * usage_duration_hours) / SUM(usage_duration_hours) AS avg_temperature FROM battery_usage GROUP BY computer_id ORDER BY avg_temperature DESC LIMIT 10;	computer	3
SELECT computer_id, (10000 / power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage ORDER BY theoretical_runtime_hours DESC LIMIT 5;	computer	4
SELECT computer_id, SUM(power_consumption_watts * 1) AS total_energy_consumption_wh, SUM(power_consumption_watts * 1) / COUNT(*) * (1 - (25 / AVG(temperature_celsius))) AS avg_cooling_power_w FROM performance_tests GROUP BY computer_id ORDER BY (total_energy_consumption_wh / avg_cooling_power_w) DESC LIMIT 5;	computer	1
SELECT computer_id, (cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1) AS weighted_score FROM performance_tests ORDER BY weighted_score DESC LIMIT 3;	computer	2
SELECT computer_id, power_consumption_watts / (temperature_celsius - 25) AS cooling_efficiency_w_per_c FROM performance_tests ORDER BY cooling_efficiency_w_per_c ASC LIMIT 10;	computer	3
SELECT computer_id, (100000 * 0.4 + 100000 * 0.3 + 100000 * 0.2 + 100000 * 0.1) / (cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1) AS performance_increase_factor FROM performance_tests ORDER BY performance_increase_factor DESC LIMIT 5;	computer	4
SELECT manufacturer, AVG(cpu_base_frequency_ghz) AS avg_base_frequency, AVG(cpu_max_frequency_ghz) AS avg_max_frequency, (AVG(cpu_max_frequency_ghz) - AVG(cpu_base_frequency_ghz)) / AVG(cpu_base_frequency_ghz) * 100 AS frequency_increase_percentage FROM computer_info GROUP BY manufacturer ORDER BY frequency_increase_percentage DESC;	computer	1
SELECT ram_type, AVG(ram_size_gb) / AVG(storage_size_gb) AS ram_storage_ratio FROM computer_info GROUP BY ram_type ORDER BY ram_storage_ratio DESC;	computer	2
SELECT screen_size_inches, AVG(battery_capacity_wh) AS avg_battery_capacity, AVG(weight_kg) AS avg_weight, AVG(battery_capacity_wh) / AVG(weight_kg) AS battery_capacity_per_kg FROM computer_info GROUP BY screen_size_inches ORDER BY battery_capacity_per_kg DESC;	computer	3
SELECT production_year, 100 / AVG(cpu_cores) AS core_increase_factor FROM computer_info GROUP BY production_year ORDER BY core_increase_factor DESC;	computer	4
SELECT usage_type, AVG(power_consumption_watts) AS avg_power_consumption, AVG(usage_duration_hours) AS avg_usage_duration, AVG(power_consumption_watts) * AVG(usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY usage_type ORDER BY total_energy_consumption_wh DESC;	computer	1
SELECT MONTH(usage_date) AS usage_month, AVG(cpu_usage_percent) AS avg_cpu_usage, AVG(gpu_usage_percent) AS avg_gpu_usage, AVG(ram_usage_percent) AS avg_ram_usage, (AVG(cpu_usage_percent) - AVG(gpu_usage_percent)) AS usage_difference FROM usage_records GROUP BY usage_month ORDER BY usage_difference DESC;	computer	2
SELECT usage_type, AVG(temperature_celsius) AS avg_temperature, AVG(usage_duration_hours) AS avg_usage_duration, AVG(temperature_celsius) / AVG(usage_duration_hours) AS temperature_increase_per_hour FROM usage_records GROUP BY usage_type ORDER BY temperature_increase_per_hour DESC;	computer	3
SELECT usage_type, 10000 * AVG(usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY usage_type ORDER BY total_energy_consumption_wh DESC;	computer	4
SELECT YEAR(usage_date) AS usage_year, AVG(battery_health_percent) AS avg_battery_health, AVG(usage_duration_hours) AS avg_usage_duration, AVG(battery_health_percent) / AVG(usage_duration_hours) AS battery_health_decay_rate FROM battery_usage GROUP BY usage_year ORDER BY battery_health_decay_rate DESC;	computer	1
SELECT CASE WHEN battery_capacity_wh <= 50 THEN '0-50Wh' WHEN battery_capacity_wh > 50 AND battery_capacity_wh <= 100 THEN '50-100Wh' ELSE '100Wh以上' END AS capacity_range, AVG(battery_capacity_wh) AS avg_battery_capacity, AVG(power_consumption_watts) AS avg_power_consumption, AVG(usage_duration_hours) AS avg_usage_duration, AVG(battery_capacity_wh) / AVG(power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage GROUP BY capacity_range ORDER BY theoretical_runtime_hours DESC;	computer	2
SELECT MONTH(usage_date) AS usage_month, AVG(temperature_celsius) AS avg_temperature, AVG(battery_health_percent) AS avg_battery_health FROM battery_usage GROUP BY usage_month ORDER BY avg_temperature DESC;	computer	3
SELECT CASE WHEN battery_health_percent <= 50 THEN '0-50%' WHEN battery_health_percent > 50 AND battery_health_percent <= 80 THEN '50-80%' ELSE '80-100%' END AS health_range, 10000 / AVG(power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage GROUP BY health_range ORDER BY theoretical_runtime_hours DESC;	computer	4
SELECT test_type, AVG(power_consumption_watts) AS avg_power_consumption, 1 AS avg_test_duration, AVG(power_consumption_watts) * 1 AS total_energy_consumption_wh FROM performance_tests GROUP BY test_type ORDER BY total_energy_consumption_wh DESC;	computer	1
SELECT YEAR(test_date) AS test_year, AVG(cpu_score) AS avg_cpu_score, AVG(gpu_score) AS avg_gpu_score, AVG(overall_score) AS avg_overall_score, ABS((AVG(cpu_score) / AVG(gpu_score)) - 1) AS cpu_gpu_score_ratio_difference FROM performance_tests GROUP BY test_year ORDER BY cpu_gpu_score_ratio_difference ASC;	computer	2
SELECT test_type, AVG(temperature_celsius) AS avg_temperature, 1 AS avg_test_duration, AVG(temperature_celsius) / 1 AS temperature_increase_per_hour FROM performance_tests GROUP BY test_type ORDER BY temperature_increase_per_hour DESC;	computer	3
SELECT test_type, (100000 * 0.4 + 100000 * 0.3 + 100000 * 0.2 + 100000 * 0.1) / (AVG(cpu_score) * 0.4 + AVG(gpu_score) * 0.3 + AVG(ram_score) * 0.2 + AVG(storage_score) * 0.1) AS performance_increase_factor FROM performance_tests GROUP BY test_type ORDER BY performance_increase_factor DESC;	computer	4
SELECT manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz FROM computer_info WHERE cpu_base_frequency_ghz > 3.0 AND cpu_max_frequency_ghz < 4.0;	computer	1
SELECT manufacturer, model, ram_size_gb, storage_size_gb FROM computer_info WHERE ram_size_gb > 16 AND storage_size_gb < 512;	computer	2
SELECT manufacturer, model, screen_size_inches, weight_kg FROM computer_info WHERE screen_size_inches > 15 AND weight_kg > 2.5;	computer	3
SELECT manufacturer, model, battery_capacity_wh, cpu_cores FROM computer_info WHERE cpu_cores < 8;	computer	4
SELECT computer_id, power_consumption_watts, usage_duration_hours, (power_consumption_watts * usage_duration_hours) AS total_energy_consumption_wh FROM usage_records WHERE power_consumption_watts > 100 AND usage_duration_hours > 2 AND (power_consumption_watts * usage_duration_hours) < 500;	computer	1
SELECT computer_id, cpu_usage_percent, gpu_usage_percent, ABS(cpu_usage_percent - gpu_usage_percent) AS usage_difference FROM usage_records WHERE cpu_usage_percent > 80 AND gpu_usage_percent > 60 AND ABS(cpu_usage_percent - gpu_usage_percent) > 20;	computer	2
SELECT computer_id, temperature_celsius, usage_duration_hours, (temperature_celsius / usage_duration_hours) AS temperature_increase_per_hour FROM usage_records WHERE temperature_celsius > 70 AND usage_duration_hours > 1 AND (temperature_celsius / usage_duration_hours) < 10;	computer	3
SELECT computer_id, 1000 AS assumed_power_consumption, usage_duration_hours, (1000 * usage_duration_hours) AS total_energy_consumption_wh, temperature_celsius FROM usage_records WHERE (1000 * usage_duration_hours) > 5000 AND temperature_celsius < 50;	computer	4
SELECT computer_id, battery_health_percent, power_consumption_watts, usage_duration_hours, (power_consumption_watts / usage_duration_hours) AS energy_consumption_per_hour FROM battery_usage WHERE battery_health_percent > 80 AND (power_consumption_watts / usage_duration_hours) > 50;	computer	1
SELECT computer_id, battery_capacity_wh, battery_health_percent, usage_duration_hours, ((100 - battery_health_percent) / usage_duration_hours) AS health_decay_rate_per_hour FROM battery_usage WHERE battery_capacity_wh > 60 AND ((100 - battery_health_percent) / usage_duration_hours) > 2;	computer	2
SELECT computer_id, temperature_celsius, usage_duration_hours FROM battery_usage WHERE temperature_celsius > 40 AND usage_duration_hours < 0.5;	computer	3
SELECT computer_id, 500 AS assumed_battery_capacity, power_consumption_watts, usage_duration_hours, (power_consumption_watts / usage_duration_hours) AS energy_consumption_per_hour, battery_health_percent FROM battery_usage WHERE (power_consumption_watts / usage_duration_hours) > 100 AND battery_health_percent < 90;	computer	4
SELECT computer_id, power_consumption_watts, 1 AS test_duration_hours, (power_consumption_watts * 1) AS total_energy_consumption_wh FROM performance_tests WHERE power_consumption_watts > 200 AND 1 > 1 AND (power_consumption_watts * 1) < 1000;	computer	1
SELECT computer_id, cpu_score, gpu_score, ram_score, storage_score, (0.4 * cpu_score + 0.3 * gpu_score + 0.2 * ram_score + 0.1 * storage_score) AS overall_score FROM performance_tests WHERE cpu_score > 8000 AND gpu_score > 9000 AND (0.4 * cpu_score + 0.3 * gpu_score + 0.2 * ram_score + 0.1 * storage_score) < 8500;	computer	2
SELECT computer_id, temperature_celsius, 1 AS test_duration_hours, (temperature_celsius / 1) AS temperature_increase_per_hour FROM performance_tests WHERE temperature_celsius > 75 AND 1 > 1 AND (temperature_celsius / 1) < 10;	computer	3
SELECT computer_id, 1000 AS assumed_power_consumption, 1 AS test_duration_hours, (1000 * 1) AS total_energy_consumption_wh, temperature_celsius, (1000 / (temperature_celsius - 25)) AS cooling_efficiency_w_per_c FROM performance_tests WHERE (1000 * 1) > 5000 AND (1000 / (temperature_celsius - 25)) < 20;	computer	4
SELECT ci.computer_id, ci.cpu_base_frequency_ghz, ci.cpu_max_frequency_ghz, ur.cpu_usage_percent, ur.power_consumption_watts, ci.cpu_base_frequency_ghz + (ci.cpu_max_frequency_ghz - ci.cpu_base_frequency_ghz) * (ur.cpu_usage_percent / 100) AS actual_frequency_ghz, ur.power_consumption_watts / (ci.cpu_base_frequency_ghz + (ci.cpu_max_frequency_ghz - ci.cpu_base_frequency_ghz) * (ur.cpu_usage_percent / 100)) AS power_frequency_ratio FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 80 AND ur.power_consumption_watts = 95;	computer	1
SELECT computer_info.computer_id, ram_size_gb, ram_usage_percent, ram_type, ram_size_gb * (ram_usage_percent / 100) * 25.6 AS current_memory_bandwidth_gbs, ram_size_gb * 25.6 AS max_memory_bandwidth_gbs, (ram_size_gb * (ram_usage_percent / 100) * 25.6) / (ram_size_gb * 25.6) AS memory_bandwidth_usage_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE ram_size_gb = 16 AND ram_usage_percent = 75 AND ram_type = 'DDR4';	computer	2
SELECT computer_info.computer_id, computer_info.battery_capacity_wh, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, CASE WHEN (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 >= 80 THEN '正常' ELSE '不正常' END AS battery_health_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 56 AND battery_usage.usage_duration_hours = 4 AND battery_usage.power_consumption_watts = 14;	computer	3
SELECT computer_info.computer_id, computer_info.cpu_cores, computer_info.cpu_threads, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, usage_records.power_consumption_watts, usage_records.power_consumption_watts / (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)) AS power_frequency_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_cores = 128 AND computer_info.cpu_threads = 256 AND computer_info.cpu_base_frequency_ghz = 1.0 AND computer_info.cpu_max_frequency_ghz = 10.0 AND usage_records.cpu_usage_percent = 200;	computer	4
SELECT computer_info.computer_id, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, usage_records.power_consumption_watts, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, SQRT(usage_records.power_consumption_watts / (1.25e-8 * (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)))) AS estimated_voltage FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.cpu_usage_percent = 90 AND usage_records.power_consumption_watts = 120 AND computer_info.cpu_base_frequency_ghz = 2.0 AND computer_info.cpu_max_frequency_ghz = 4.5;	computer	1
SELECT computer_info.computer_id, computer_info.ram_size_gb, usage_records.ram_usage_percent, usage_records.power_consumption_watts, computer_info.ram_size_gb * (usage_records.ram_usage_percent / 100) * 25.6 AS current_memory_bandwidth_gbs, (computer_info.ram_size_gb * (usage_records.ram_usage_percent / 100) * 25.6) / usage_records.power_consumption_watts AS memory_bandwidth_power_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.ram_usage_percent = 80 AND usage_records.power_consumption_watts = 85 AND computer_info.ram_size_gb = 32 AND computer_info.ram_type = 'DDR4';	computer	2
SELECT computer_info.computer_id, computer_info.battery_capacity_wh, usage_records.usage_duration_hours, usage_records.power_consumption_watts, (usage_records.usage_duration_hours * usage_records.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, CASE WHEN (usage_records.usage_duration_hours * usage_records.power_consumption_watts) / computer_info.battery_capacity_wh * 100 >= 80 THEN '正常' ELSE '不正常' END AS battery_health_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.usage_duration_hours = 8 AND usage_records.power_consumption_watts = 60 AND computer_info.battery_capacity_wh = 70;	computer	3
SELECT computer_info.computer_id, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, usage_records.power_consumption_watts, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, SQRT(usage_records.power_consumption_watts / (1.25e-8 * (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)))) AS estimated_voltage FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.cpu_usage_percent = 500 AND usage_records.power_consumption_watts = 1000 AND computer_info.cpu_base_frequency_ghz = 0.5 AND computer_info.cpu_max_frequency_ghz = 20.0;	computer	4
SELECT computer_info.computer_id, computer_info.battery_capacity_wh, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, (battery_usage.usage_duration_hours / (computer_info.battery_capacity_wh / battery_usage.power_consumption_watts)) * 100 AS discharge_efficiency_percent FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.usage_duration_hours = 10 AND battery_usage.power_consumption_watts = 50 AND computer_info.battery_capacity_wh = 60;	computer	1
SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / (battery_usage.battery_health_percent / 100) AS actual_battery_capacity_wh FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 85 AND battery_usage.usage_duration_hours = 8 AND battery_usage.power_consumption_watts = 45;	computer	2
SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, computer_info.battery_capacity_wh, CASE WHEN battery_usage.battery_health_percent < 80 THEN '需要更换' ELSE '无需更换' END AS battery_replacement_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 75 AND battery_usage.usage_duration_hours = 6 AND battery_usage.power_consumption_watts = 40;	computer	3
SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, computer_info.battery_capacity_wh, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / (battery_usage.battery_health_percent / 100) AS actual_battery_capacity_wh, CASE WHEN battery_usage.battery_health_percent > 100 THEN '电池可能膨胀或过热' ELSE '电池状态正常' END AS battery_physical_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 200 AND battery_usage.usage_duration_hours = 24 AND battery_usage.power_consumption_watts = 200 AND computer_info.battery_capacity_wh = 100;	computer	4
SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.power_consumption_watts, performance_tests.temperature_celsius, (performance_tests.cpu_score + performance_tests.gpu_score) / performance_tests.power_consumption_watts AS performance_per_watt, (performance_tests.cpu_score + performance_tests.gpu_score) / (performance_tests.power_consumption_watts * (1 + 0.02 * (performance_tests.temperature_celsius - 25))) AS performance_per_watt_with_temperature FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 1200 AND performance_tests.gpu_score = 1500 AND performance_tests.power_consumption_watts = 200 AND performance_tests.temperature_celsius = 75;	computer	1
SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.ram_score, performance_tests.storage_score, performance_tests.overall_score, (performance_tests.cpu_score / performance_tests.overall_score) * 100 AS cpu_contribution_percent, (performance_tests.gpu_score / performance_tests.overall_score) * 100 AS gpu_contribution_percent, (performance_tests.ram_score / performance_tests.overall_score) * 100 AS ram_contribution_percent, (performance_tests.storage_score / performance_tests.overall_score) * 100 AS storage_contribution_percent FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 1000 AND performance_tests.gpu_score = 1200 AND performance_tests.ram_score = 800 AND performance_tests.storage_score = 600 AND performance_tests.overall_score = 3600;	computer	2
SELECT computer_info.computer_id, performance_tests.overall_score, performance_tests.temperature_celsius, performance_tests.power_consumption_watts, (performance_tests.power_consumption_watts / performance_tests.temperature_celsius) * 100 AS cooling_efficiency, performance_tests.overall_score * (1 - 0.01 * (performance_tests.temperature_celsius - 25)) AS adjusted_performance_score FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.overall_score = 3000 AND performance_tests.temperature_celsius = 80 AND performance_tests.power_consumption_watts = 180;	computer	3
SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.overall_score, performance_tests.power_consumption_watts, performance_tests.temperature_celsius, (performance_tests.cpu_score + performance_tests.gpu_score) / performance_tests.power_consumption_watts AS performance_per_watt, CASE WHEN performance_tests.temperature_celsius > 150 THEN '硬件可能熔毁或爆炸' ELSE '硬件状态正常' END AS hardware_status FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 10000 AND performance_tests.gpu_score = 15000 AND performance_tests.overall_score = 25000 AND performance_tests.power_consumption_watts = 5000 AND performance_tests.temperature_celsius = 200;	computer	4
WITH TotalPowerConsumption AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts) AS total_power_consumption FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100 GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_power_consumption FROM TotalPowerConsumption ORDER BY total_power_consumption DESC LIMIT 5;	computer	1
WITH YearlyEnergyConsumption AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours / 1000) AS total_energy_kwh FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_energy_kwh FROM YearlyEnergyConsumption ORDER BY total_energy_kwh DESC LIMIT 10;	computer	2
WITH LowBatteryHealthComputers AS (SELECT bu.computer_id, ci.manufacturer, ci.model, bu.battery_health_percent, ci.battery_capacity_wh, bu.usage_duration_hours FROM battery_usage bu JOIN computer_info ci ON bu.computer_id = ci.computer_id WHERE bu.battery_health_percent < 80), AggregatedData AS (SELECT computer_id, manufacturer, model, battery_health_percent, AVG(battery_capacity_wh) OVER () AS avg_battery_capacity, AVG(usage_duration_hours) OVER () AS avg_usage_duration FROM LowBatteryHealthComputers) SELECT DISTINCT computer_id, manufacturer, model, battery_health_percent, avg_battery_capacity, avg_usage_duration FROM AggregatedData ORDER BY battery_health_percent ASC;	computer	3
WITH ExtremeUsagePower AS (SELECT ci.computer_id, ci.manufacturer, ci.model, (1000 * ci.cpu_base_frequency_ghz / 100) AS cpu_power, (500 * ci.gpu_vram_gb / 100) AS gpu_power, (200 * ci.ram_size_gb / 100) AS ram_power, (150 * ci.storage_size_gb / 100) AS storage_power, (1000 * ci.cpu_base_frequency_ghz / 100 + 500 * ci.gpu_vram_gb / 100 + 200 * ci.ram_size_gb / 100 + 150 * ci.storage_size_gb / 100) AS total_power FROM computer_info ci) SELECT computer_id, manufacturer, model, total_power FROM ExtremeUsagePower WHERE total_power > 10000 ORDER BY total_power DESC;	computer	4
WITH HeatGeneration AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours * 3600) AS total_heat_joules FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100 GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_heat_joules FROM HeatGeneration ORDER BY total_heat_joules DESC LIMIT 5;	computer	1
WITH YearlyEnergyConsumption AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours / 1000) AS total_energy_kwh FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_energy_kwh / 365 AS avg_daily_energy_kwh FROM YearlyEnergyConsumption ORDER BY avg_daily_energy_kwh DESC LIMIT 10;	computer	2
WITH OldLowBatteryComputers AS (SELECT ci.computer_id, ci.manufacturer, ci.model, ci.production_year, ci.battery_capacity_wh, bu.usage_duration_hours FROM computer_info ci JOIN battery_usage bu ON ci.computer_id = bu.computer_id WHERE ci.production_year < 2018 AND bu.battery_health_percent < 70), AggregatedData AS (SELECT computer_id, manufacturer, model, production_year, AVG(battery_capacity_wh) OVER () AS avg_battery_capacity, AVG(usage_duration_hours) OVER () AS avg_usage_duration FROM OldLowBatteryComputers) SELECT DISTINCT computer_id, manufacturer, model, production_year, avg_battery_capacity, avg_usage_duration FROM AggregatedData ORDER BY production_year ASC;	computer	3
WITH TheoreticalMaxPower AS (SELECT ci.computer_id, ci.manufacturer, ci.model, (200 * ci.cpu_base_frequency_ghz) AS cpu_max_power, (ci.gpu_vram_gb * 10) AS gpu_power, (ci.ram_size_gb * 5) AS ram_power, (ci.storage_size_gb * 2) AS storage_power, (200 * ci.cpu_base_frequency_ghz + ci.gpu_vram_gb * 10 + ci.ram_size_gb * 5 + ci.storage_size_gb * 2) AS total_max_power FROM computer_info ci) SELECT computer_id, manufacturer, model, total_max_power FROM TheoreticalMaxPower WHERE total_max_power > 50000 ORDER BY total_max_power DESC;	computer	4
WITH DischargeRate AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours) AS discharge_rate_wh FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100 GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, discharge_rate_wh FROM DischargeRate ORDER BY discharge_rate_wh DESC LIMIT 5;	computer	1
WITH YearlyUsage AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.usage_duration_hours) AS total_usage_hours FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_usage_hours FROM YearlyUsage ORDER BY total_usage_hours DESC LIMIT 10;	computer	2
WITH OldLowBatteryComputers AS (SELECT ci.computer_id, ci.manufacturer, ci.model, ci.production_year, ci.battery_capacity_wh, bu.usage_duration_hours FROM computer_info ci JOIN battery_usage bu ON ci.computer_id = bu.computer_id WHERE ci.production_year < 2018 AND bu.battery_health_percent < 70), AggregatedData AS (SELECT computer_id, manufacturer, model, production_year, AVG(battery_capacity_wh) OVER () AS avg_battery_capacity, AVG(usage_duration_hours) OVER () AS avg_usage_duration FROM OldLowBatteryComputers) SELECT DISTINCT computer_id, manufacturer, model, production_year, avg_battery_capacity, avg_usage_duration FROM AggregatedData ORDER BY production_year ASC;	computer	3
WITH TheoreticalRuntime AS (SELECT ci.computer_id, ci.manufacturer, ci.model, ci.battery_capacity_wh, ur.power_consumption_watts, (ci.battery_capacity_wh / ur.power_consumption_watts) AS theoretical_runtime_hours FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100) SELECT computer_id, manufacturer, model, theoretical_runtime_hours FROM TheoreticalRuntime WHERE theoretical_runtime_hours > 1000 ORDER BY theoretical_runtime_hours DESC;	computer	4
SELECT ((1013 - DataValue) / 1013) * 100 AS PressureChangePercentage FROM DataCollectionRecord WHERE DataType = '压力' AND CollectorId IN (SELECT Id FROM DataCollector WHERE ElevationMeters = 5000);	DataCollector	1
SELECT (COUNT(CASE WHEN DataValue BETWEEN 20 AND 30 THEN 1 END) * 100.0 / COUNT(*)) AS Probability FROM DataCollectionRecord WHERE DataType = '温度' AND DATE(CollectionTime) = CURDATE();	DataCollector	2
SELECT Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes FROM DataCollector WHERE Status = '维修' AND InstallationLocation = '工厂A';	DataCollector	3
SELECT CollectorId, COUNT(*) AS TotalCollections, SUM(LENGTH(DataValue)) / 1024 AS TotalDataSizeKB, (SUM(LENGTH(DataValue)) / 1024 / 1024 / 1024) AS TotalDataSizeGB, CASE WHEN COUNT(*) > 1000000 THEN '不可行：数据量过大' ELSE '可行：数据量在可接受范围内' END AS Feasibility FROM DataCollectionRecord WHERE DATE(CollectionTime) BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() AND CollectorId IN (SELECT Id FROM DataCollector WHERE CollectorModel = '高频采集器') GROUP BY CollectorId;	DataCollector	4
SELECT DataCollector.Id, DataCollector.InstallationLocation, DataCollector.ElevationMeters, DataCollectionRecord.DataValue AS Temperature, 1013 * POWER(1 - (0.0065 * DataCollector.ElevationMeters) / 288.15, (9.80665 * 0.0289644) / (8.3144598 * 0.0065)) AS Pressure_hPa FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Status = '停机' AND DataCollector.ElevationMeters = 3000 AND DataCollectionRecord.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DataCollector.Id);	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE Status = '运行';	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.ManufactureDate, DataCollector.InstallationDate, DataCollector.Manufacturer, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE Status = '维修' AND InstallationLocation = '化工厂';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE Status = '运行';	DataCollector	4
SELECT DataCollector.Id, DataCollector.Latitude, DataCollectionRecord.DataValue AS Temperature, (7.2921 * POWER(10, -5)) * 6371000 * COS(RADIANS(DataCollector.Latitude)) AS LinearVelocity_mps FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Latitude = 60 AND DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DataCollector.Id);	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Latitude = 45;	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.Latitude = 30 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 1 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 1 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Latitude = 90;	DataCollector	4
SELECT DataCollector.Id, DataCollector.Latitude, DataCollectionRecord.DataValue AS Temperature, DEGREES(ASIN(SIN(RADIANS(DataCollector.Latitude)) * SIN(RADIANS(23.44)) + COS(RADIANS(DataCollector.Latitude)) * COS(RADIANS(23.44)) * COS(RADIANS(0)))) AS SolarElevationAngle FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Longitude = 0 AND DataCollectionRecord.DataType = '温度' AND DATE(DataCollectionRecord.CollectionTime) = CURDATE() ORDER BY DataCollectionRecord.CollectionTime DESC LIMIT 1;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Longitude = 120;	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Longitude, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.Longitude = -90 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Longitude = 180;	DataCollector	4
SELECT DataCollector.Id, DataCollector.ElevationMeters, DataCollectionRecord.DataValue AS Pressure_hPa, ((1013 - DataCollectionRecord.DataValue) / 1013) * 100 AS PressureChangePercentage FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.ElevationMeters = 5000 AND DataCollectionRecord.DataType = '压力' ORDER BY DataCollectionRecord.CollectionTime DESC LIMIT 1;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.ElevationMeters = 3000;	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.ElevationMeters = 1000 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.ElevationMeters = 8848;	DataCollector	4
SELECT DataCollector.Id, DataCollectionRecord.DataValue AS Temperature_Celsius, (DataCollectionRecord.DataValue * 9 / 5 + 32) AS Temperature_Fahrenheit FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.DataUnit = '摄氏度' AND DataCollectionRecord.DataValue = 25;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '温度' AND DataValue = 30);	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Longitude, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.DataValue = -10 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '温度' AND DataValue = 1000);	DataCollector	4
SELECT DataCollector.Id, DataCollectionRecord.DataValue AS RelativeHumidity, (DataCollectionRecord.DataValue / 100 * 3.169 * 1000) / (461.5 * 298.15) AS AbsoluteHumidity_gpm3 FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '湿度' AND DataCollectionRecord.DataUnit = '百分比' AND DataCollectionRecord.DataValue = 80;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 60);	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Longitude, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '湿度' AND DataCollectionRecord.DataValue = 95 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 200);	DataCollector	4
SELECT dcr.Id AS RecordId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (dcr.DataValue / 1013.25) AS PressureInAtm, CASE WHEN (dcr.DataValue / 1013.25) > 1 THEN '高压环境，可能影响设备密封性和结构强度' WHEN (dcr.DataValue / 1013.25) < 1 THEN '低压环境，可能影响设备性能' ELSE '标准大气压，设备运行正常' END AS PressureImpact FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa';	DataCollector	1
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.2 AS TotalDataKB, COUNT(dcr.Id) * 0.2 / 1024 AS TotalDataMB, COUNT(dcr.Id) * 0.2 / 1024 / 1024 AS TotalDataGB, CASE WHEN COUNT(dcr.Id) * 0.2 / 1024 / 1024 > 1000 THEN '需要大容量存储设备（如TB级硬盘）' WHEN COUNT(dcr.Id) * 0.2 / 1024 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 500 AND dcr.DataUnit = 'hPa' AND dcr.CollectionTime BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;	DataCollector	2
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dc.ElevationMeters, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 2000 AND dc.Status = '运行' THEN '高压环境（如深海或高压工业设备），可能导致设备密封失效或结构变形' ELSE '环境条件正常' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 2000 AND dc.Status = '运行' THEN '建议定期检查设备密封性和结构强度，确保设备正常运行' ELSE '无需特殊维护' END AS MaintenanceRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 2000 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';	DataCollector	3
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 100000 AND dcr.DataUnit = 'hPa';	DataCollector	4
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = -273.15 AND dcr.DataUnit = '°C' THEN '绝对零度，分子和原子热运动停止' ELSE '非绝对零度' END AS PhysicalMeaning, CASE WHEN dcr.DataValue = -273.15 AND dcr.DataUnit = '°C' THEN '极端低温可能导致设备材料脆化或电子元件失效' ELSE '温度在正常范围内，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = -273.15 AND dcr.DataUnit = '°C';	DataCollector	1
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.5 AS TotalDataKB, COUNT(dcr.Id) * 0.5 / 1024 AS TotalDataMB, CASE WHEN COUNT(dcr.Id) * 0.5 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '湿度' AND dcr.DataValue = 0 AND dcr.DataUnit = '%' AND dcr.CollectionTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;	DataCollector	2
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' THEN '真空环境（如太空或实验室真空室）' ELSE '非真空环境' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' THEN '真空环境可能导致设备散热不良或材料挥发' ELSE '环境条件正常，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';	DataCollector	3
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = -1000 AND dcr.DataUnit = '°C';	DataCollector	4
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (dcr.DataValue + 273.15) AS TemperatureInKelvin, CASE WHEN dcr.DataValue = 1000 THEN '高温可能导致设备内部材料膨胀、电子元件失效或散热系统超负荷运行' ELSE '温度在正常范围内，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = 1000 AND dcr.DataUnit = '°C';	DataCollector	1
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.5 AS TotalDataKB, COUNT(dcr.Id) * 0.5 / 1024 AS TotalDataMB, CASE WHEN COUNT(dcr.Id) * 0.5 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '湿度' AND dcr.DataValue = 100 AND dcr.DataUnit = '%' AND dcr.CollectionTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;	DataCollector	2
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' THEN '海平面环境，可能受到季节性气候变化的影响' ELSE '非海平面环境' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' THEN '建议定期检查设备防护措施，确保设备在极端天气下正常运行' ELSE '环境条件稳定，无需特殊维护' END AS MaintenanceRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';	DataCollector	3
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = 1000000 AND dcr.DataUnit = '°C';	DataCollector	4
SELECT ((T1.AverageValue - T2.AverageValue) / (DC1.ElevationMeters - DC2.ElevationMeters)) AS TemperatureLapseRate FROM DataCollector DC1 JOIN DataCollectionRecord T1 ON DC1.Id = T1.CollectorId JOIN DataCollector DC2 ON DC2.ElevationMeters = DC1.ElevationMeters - 100 JOIN DataCollectionRecord T2 ON DC2.Id = T2.CollectorId WHERE DC1.ElevationMeters = 3000 AND T1.DataType = '温度' AND T2.DataType = '温度' AND T1.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DC1.Id AND DataType = '温度') AND T2.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DC2.Id AND DataType = '温度');	DataCollector	1
SELECT SUM(DataValue) AS TotalSum, AVG(POWER(DataValue - (SELECT AVG(DataValue) FROM DataCollectionRecord WHERE DataType = '温度' AND CollectorId = DC.Id AND CollectionTime >= DATE_SUB(NOW(), INTERVAL 24 HOUR)), 2)) AS Variance FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '温度' AND DCR.CollectionTime >= DATE_SUB(NOW(), INTERVAL 24 HOUR) GROUP BY DC.Id;	DataCollector	2
SELECT DC.InstallationLocation, AVG(DCR.DataValue) AS AverageTemperature, (SELECT AVG(DCR2.DataValue) FROM DataCollectionRecord DCR2 JOIN DataCollector DC2 ON DCR2.CollectorId = DC2.Id WHERE DC2.InstallationLocation LIKE '%郊区%' AND DCR2.DataType = '温度') AS SuburbAverageTemperature FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DC.InstallationLocation LIKE '%市中心%' AND DCR.DataType = '温度' GROUP BY DC.InstallationLocation;	DataCollector	3
SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN MAX(DCR.DataValue) >= 1500 THEN '采集器可能损坏' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '温度' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY DC.Id;	DataCollector	4
SELECT AVG(DCR.DataValue) AS AverageValue, AVG(DCR.DataValue) - (1.96 * (1 / SQRT(COUNT(DCR.DataValue)))) AS LowerBound, AVG(DCR.DataValue) + (1.96 * (1 / SQRT(COUNT(DCR.DataValue)))) AS UpperBound FROM DataCollectionRecord DCR WHERE DCR.DataType = '温度' AND DCR.DataAccuracy = 95 GROUP BY DCR.CollectorId;	DataCollector	1
SELECT SUM(DCR.DataValue) AS TotalSum, STDDEV(DCR.DataValue) / SQRT(COUNT(DCR.DataValue)) AS StandardError FROM DataCollectionRecord DCR WHERE DCR.DataType = '湿度' AND DCR.DataAccuracy = 98 AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCR.CollectorId;	DataCollector	2
SELECT DCR.AverageValue, DC.ElevationMeters, DCR.DataAccuracy FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCR.DataAccuracy = 99 AND DC.ElevationMeters = 0;	DataCollector	3
SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN MAX(DCR.DataAccuracy) > 100 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR WHERE DCR.DataType = '湿度' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY DCR.CollectorId;	DataCollector	4
SELECT (1 - (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataValue <= 100 AND DataType = '温度') / (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataType = '温度')) AS ExceedProbability FROM DataCollectionRule DCR WHERE DCR.DataType = '温度' AND DCR.ThresholdValue = 100;	DataCollector	1
SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, (DCRec.DataValue - 75) / 3 AS ZScore FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '湿度' AND DCR.ThresholdValue = 80 AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCRec.DataValue;	DataCollector	2
SELECT DCRec.AverageValue, DC.ElevationMeters FROM DataCollectionRecord DCRec JOIN DataCollector DC ON DCRec.CollectorId = DC.Id JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '压力' AND DCR.ThresholdValue = 110 AND DC.ElevationMeters = 500;	DataCollector	3
SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '温度' AND DCR.ThresholdValue = 1000 AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();	DataCollector	4
SELECT (1 - (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataValue <= 30 AND DataType = '温度') / (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataType = '温度')) AS ExceedProbability FROM DataCollectionRule DCR WHERE DCR.DataType = '温度' AND DCR.ThresholdValue = 30 AND DCR.ConditionOperator = '>';	DataCollector	1
SELECT SUM(CASE WHEN DCRec.DataValue < 60 THEN 1 ELSE 0 END) AS BelowCount, (DCRec.DataValue - 65) / 3 AS ZScore FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '湿度' AND DCR.ThresholdValue = 60 AND DCR.ConditionOperator = '<' AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCRec.DataValue;	DataCollector	2
SELECT DCRec.AverageValue, DC.ElevationMeters FROM DataCollectionRecord DCRec JOIN DataCollector DC ON DCRec.CollectorId = DC.Id JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '压力' AND DCR.ThresholdValue = 101.3 AND DCR.ConditionOperator = '=' AND DC.ElevationMeters = 0;	DataCollector	3
SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '温度' AND DCR.ThresholdValue = 1000 AND DCR.ConditionOperator = '>' AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();	DataCollector	4
SELECT COUNT(*) AS TotalCount, 2 / SQRT(COUNT(*)) AS StandardError FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.CollectionFrequency = '每分钟' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();	DataCollector	1
SELECT SUM(DCR.DataValue) AS TotalSum, AVG(POWER(DCR.DataValue - 60, 2)) AS Variance FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '湿度' AND DCRule.CollectionFrequency = '每小时' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW();	DataCollector	2
SELECT DCRule.CollectionFrequency, AVG(DCR.DataValue) AS AveragePressure, STDDEV(DCR.DataValue) AS StandardDeviation FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCRule.CollectionFrequency = '每分钟' AND DC.ElevationMeters = 0;	DataCollector	3
SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN DCRule.CollectionFrequency = '每秒' AND COUNT(*) > 31536000 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY DCRule.CollectionFrequency;	DataCollector	4
SELECT AVG(DCR.DataValue) AS AverageValue, AVG(DCR.DataValue) - (1.96 * (2 / SQRT(COUNT(*)))) AS LowerBound, AVG(DCR.DataValue) + (1.96 * (2 / SQRT(COUNT(*)))) AS UpperBound, CASE WHEN MAX(DCR.DataValue) > DCRule.ThresholdValue THEN '需要发送通知' ELSE '无需发送通知' END AS NotificationStatus FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.ActionType = '通知' GROUP BY DCRule.ThresholdValue;	DataCollector	1
SELECT SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, (DCR.DataValue - 70) / 3 AS ZScore FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '湿度' AND DCRule.ActionType = '处理' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCR.DataValue;	DataCollector	2
SELECT AVG(DCR.DataValue) AS AveragePressure, DCRule.ThresholdValue, CASE WHEN AVG(DCR.DataValue) BETWEEN 101.3 - 0.5 AND 101.3 + 0.5 THEN '无需发送通知' ELSE '需要发送通知' END AS NotificationStatus FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCRule.ActionType = '通知' AND DC.ElevationMeters = 0 GROUP BY DCRule.ThresholdValue;	DataCollector	3
SELECT SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.ActionType = '处理' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();	DataCollector	4
SELECT 1.225 * 50 AS Mass, 1.225 * 50 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '公众' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '政府' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%' AND DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '企业' AND DCNR.NotificationContent LIKE '%压力数据超出阈值110kPa%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '公众' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%' AND DCNR.NotificationMethod = '广播';	DataCollector	4
SELECT DCNR.RecipientCount * (1.225 * 50 * 1.005 * (30 - 25)) AS TotalHeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '农业生产者' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT 1.225 * 10000 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '邮件' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT 1.225 * 10000 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '成功' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '失败' AND DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '成功' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '失败' AND DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT TIMESTAMPDIFF(SECOND, NotificationTime, AcknowledgedTime) AS TimeDifferenceInSeconds, (1.225 * 10000) * 1.005 * (30 - 25) AS HeatRequiredInKJ FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT RecipientCount * 0.01 AS TotalCost, RecipientCount * 0.95 AS SuccessfullySentCount FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	2
SELECT NotificationContent, AcknowledgedTime FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%压力数据超出阈值110kPa%';	DataCollector	3
SELECT RecipientCount * 10000 AS TotalCost, CASE WHEN RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '9999-12-31 23:59:59' AND NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT TIMESTAMPDIFF(SECOND, dc.CollectionTime, dcn.NotificationTime) AS TimeDifferenceInSeconds, (1.225 * 10000) * 1.005 * (30 - 25) AS HeatRequiredInKJ FROM DataCollectionNotificationRecord dcn JOIN DataCollectionRecord dc ON dcn.TriggerId = dc.Id WHERE dcn.NotificationTime = '2023-10-01 12:00:00' AND dcn.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT RecipientCount * 0.01 AS TotalCost, RecipientCount * 0.95 AS SuccessfullySentCount FROM DataCollectionNotificationRecord WHERE NotificationTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	2
SELECT NotificationContent, NotificationTime FROM DataCollectionNotificationRecord WHERE NotificationTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%压力数据超出阈值110kPa%';	DataCollector	3
SELECT RecipientCount * 10000 AS TotalCost, CASE WHEN RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord WHERE NotificationTime = '9999-12-31 23:59:59' AND NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
