SELECT (cooling_capacity_btu * usage_duration_hours / energy_efficiency_ratio) AS required_energy_btu FROM air_conditioner_info JOIN usage_records ON air_conditioner_info.ac_id = usage_records.ac_id WHERE air_conditioner_info.model = 'AC-1234' AND usage_records.mode = '制冷' AND usage_records.indoor_temperature_celsius = 30 AND usage_records.temperature_setting_celsius = 25;	air_conditioner	1
SELECT (cooling_capacity_btu * usage_duration_hours / energy_efficiency_ratio) AS required_energy_btu FROM air_conditioner_info JOIN usage_records ON air_conditioner_info.ac_id = usage_records.ac_id WHERE air_conditioner_info.model = 'AC-1234' AND usage_records.mode = 'cooling' AND usage_records.indoor_temperature_celsius = 30 AND usage_records.temperature_setting_celsius = 25;	air_conditioner	2
SELECT energy_efficiency_ratio * (1 - 0.1) AS energy_efficiency_ratio_high_humidity FROM air_conditioner_info WHERE ac_id = 'AC-5678';	air_conditioner	3
SELECT (100000 * 100 / 20 * 1.5) AS extreme_energy_consumption_kwh;	air_conditioner	4
SELECT (50 * 1.225 * 1005 * (35 - 20)) / (12000 * 1055.06 / 3600) AS required_time_hours;	air_conditioner	1
SELECT ((90 * 12 * 1800) + (90 * 6 * 1200) + (185 * 4 * 800)) / 1000 AS total_energy_consumption_kwh;	air_conditioner	2
SELECT heating_capacity_btu * (1 - 0.4) AS heating_capacity_low_temp FROM air_conditioner_info WHERE ac_id = '某空调ID';	air_conditioner	3
SELECT (50000 * 200 / (15 * 0.3)) * 1055.06 / 1000 AS extreme_energy_consumption_kwh;	air_conditioner	4
SELECT (aci.power_consumption_watts * 8 / 4.0) / 1000 * (1 + 0.05 * (ec.humidity_percent / 10)) AS energy_consumption_kwh FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制冷';	air_conditioner	1
SELECT ((90 * 12 * 2500 * (1 + 0.05 * (70 / 10))) + (90 * 10 * 2000 * (1 + 0.05 * (40 / 10))) + (185 * 8 * 1500 * (1 + 0.05 * (50 / 10)))) / 1000 AS total_energy_consumption_kwh;	air_conditioner	2
SELECT ec.energy_consumption_kwh * (1 + 0.05 * (hr.indoor_humidity_percent / 10)) * (1 + CASE WHEN ec.fan_speed = '高' THEN 0.10 WHEN ec.fan_speed = '中' THEN 0.05 ELSE 0 END) AS energy_consumption_high_humidity FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id JOIN humidity_records hr ON aci.ac_id = hr.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制冷';	air_conditioner	3
SELECT (6000 * 150 / (2.5 * 0.15)) / 1000 * (1 + 0.05 * (90 / 10)) AS extreme_energy_consumption_kwh;	air_conditioner	4
SELECT (60 * 1.225 * 1005 * (35 - 25)) / (15000 * 1055.06 / 3600 * (1 - 0.1 * (tr.outdoor_temperature_celsius - 25) / 5)) AS required_time_hours FROM air_conditioner_info aci JOIN temperature_records tr ON aci.ac_id = tr.ac_id WHERE aci.ac_id = 'AC-5678' AND tr.mode = '制冷';	air_conditioner	1
SELECT ((90 * 14 * 3000 * (1 + 0.1 * (35 - 25) / 5)) + (90 * 12 * 2500 * (1 + 0.1 * (5 - 25) / 5)) + (185 * 10 * 2000 * (1 + 0.1 * (20 - 25) / 5))) / 1000 AS total_energy_consumption_kwh;	air_conditioner	2
SELECT aci.heating_capacity_btu * (1 - 0.5) * (1 + CASE WHEN ec.fan_speed = '高' THEN 0.10 WHEN ec.fan_speed = '中' THEN 0.05 ELSE 0 END) AS heating_capacity_low_temp FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制热';	air_conditioner	3
SELECT (60000 * 200 / (2.0 * 0.1)) * 1055.06 / 1000 * (1 + 0.05 * (95 / 10)) AS Extreme_energy_consumption_kwh;	air_conditioner	4
SELECT SUM((1000 * 0.001 * (hr1.indoor_humidity_percent - hr2.indoor_humidity_percent) * (101325 / (287 * (tr.indoor_temperature_celsius + 273.15))))) AS removed_water_mass FROM humidity_records hr1 JOIN humidity_records hr2 ON hr1.ac_id = hr2.ac_id AND hr1.record_date = hr2.record_date JOIN temperature_records tr ON hr1.ac_id = tr.ac_id AND hr1.record_date = tr.record_date WHERE hr1.mode = 'cooling' AND hr1.indoor_humidity_percent = 60 AND hr2.indoor_humidity_percent = 40 AND tr.indoor_temperature_celsius = 25 AND tr.mode = 'cooling' GROUP BY hr1.ac_id;	air_conditioner	1
SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE power_consumption_watts IN (800, 1200, 1500) AND usage_duration_hours IN (4, 3, 5);	air_conditioner	2
SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE mode = 'cooling' AND temperature_setting_celsius < outdoor_temperature_celsius GROUP BY temperature_setting_celsius ORDER BY temperature_setting_celsius;	air_conditioner	3
SELECT cooling_capacity_btu * ((60 - (-10)) / 20) * 1 AS theoretical_energy_consumption_btu FROM air_conditioner_info WHERE cooling_capacity_btu = 10000;	air_conditioner	4
SELECT power_consumption_watts * usage_duration_hours * 3600 AS heat_transfer_joules FROM usage_records WHERE mode = 'heating' AND power_consumption_watts = 1500 AND indoor_temperature_celsius = 10 AND temperature_setting_celsius = 20;	air_conditioner	1
SELECT SUM(power_consumption_watts * usage_duration_hours) / SUM(usage_duration_hours) AS average_power_consumption_watts FROM usage_records WHERE power_consumption_watts IN (1000, 1200, 800) AND usage_duration_hours IN (2, 3, 4);	air_conditioner	2
SELECT SUM(power_consumption_watts * usage_duration_hours / 1000.0) AS total_energy_consumption_kwh FROM usage_records WHERE mode = 'heating' AND temperature_setting_celsius > outdoor_temperature_celsius GROUP BY temperature_setting_celsius ORDER BY temperature_setting_celsius;	air_conditioner	3
SELECT heating_capacity_btu * ((40 - (-30)) / 20) * 1 AS theoretical_energy_consumption_btu FROM air_conditioner_info WHERE heating_capacity_btu = 12000;	air_conditioner	4
SELECT model, manufacturer, cooling_capacity_btu, power_consumption_watts, (cooling_capacity_btu * 1.0 / power_consumption_watts) AS cooling_efficiency FROM air_conditioner_info ORDER BY cooling_efficiency DESC LIMIT 10;	air_conditioner	1
SELECT model, manufacturer, production_year, energy_efficiency_ratio, (energy_efficiency_ratio * 1.0 / production_year) AS efficiency_year_ratio  FROM air_conditioner_info  ORDER BY efficiency_year_ratio DESC  LIMIT 5;	air_conditioner	2
SELECT model, manufacturer, noise_level_db, weight_kg, (noise_level_db * 1.0 / weight_kg) AS noise_weight_ratio FROM air_conditioner_info WHERE weight_kg > 0 ORDER BY noise_weight_ratio ASC LIMIT 5;	air_conditioner	3
SELECT model, manufacturer, cooling_capacity_btu, power_consumption_watts, (cooling_capacity_btu * 1.0 / power_consumption_watts) AS cooling_power_ratio FROM air_conditioner_info WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000 ORDER BY cooling_power_ratio DESC LIMIT 5;	air_conditioner	4
SELECT ur.usage_id, ai.model, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY total_energy_consumption DESC LIMIT 10;	air_conditioner	1
SELECT ur.usage_id, ai.model, ur.usage_date, ur.temperature_setting_celsius, ur.indoor_temperature_celsius, (ur.temperature_setting_celsius - ur.indoor_temperature_celsius) AS temperature_difference FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY temperature_difference DESC LIMIT 5;	air_conditioner	2
SELECT ur.usage_id, ai.model, ur.usage_date, ur.humidity_percent, ur.mode  FROM usage_records ur  JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id  WHERE ur.mode = '除湿'  ORDER BY ur.humidity_percent ASC  LIMIT 5;	air_conditioner	3
SELECT ur.usage_id, ai.model, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ORDER BY total_energy_consumption DESC LIMIT 5;	air_conditioner	4
SELECT tr.temperature_id, ai.model, tr.record_date, tr.outdoor_temperature_celsius, tr.indoor_temperature_celsius, (tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS temperature_difference FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id ORDER BY temperature_difference DESC LIMIT 10;	air_conditioner	1
SELECT tr.temperature_id, ai.model, tr.record_date, tr.temperature_setting_celsius, tr.indoor_temperature_celsius, ABS(tr.indoor_temperature_celsius - tr.temperature_setting_celsius) AS temperature_deviation FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id ORDER BY temperature_deviation DESC LIMIT 5;	air_conditioner	2
SELECT tr.temperature_id, ai.model, tr.record_date, tr.mode, tr.indoor_temperature_celsius  FROM temperature_records tr  JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id  WHERE tr.mode = '制冷'  ORDER BY tr.indoor_temperature_celsius ASC  LIMIT 5;	air_conditioner	3
WITH TemperatureDifference AS (     SELECT          tr.ac_id,          tr.record_date,          tr.indoor_temperature_celsius,          tr.outdoor_temperature_celsius,          (tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS temperature_difference,          aci.model,          aci.heating_capacity_btu      FROM temperature_records tr      JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id      WHERE tr.outdoor_temperature_celsius = -30 AND tr.indoor_temperature_celsius = 40 )  SELECT      td.ac_id,      td.record_date,      td.indoor_temperature_celsius,      td.outdoor_temperature_celsius,      td.temperature_difference,      td.model,      (td.heating_capacity_btu * (td.temperature_difference / 10) * ur.usage_duration_hours) AS estimated_energy_consumption  FROM TemperatureDifference td  JOIN usage_records ur ON td.ac_id = ur.ac_id AND td.record_date = ur.usage_date  ORDER BY td.temperature_difference DESC  LIMIT 5;	air_conditioner	4
WITH HumidityDifference AS (     SELECT          hr.ac_id,          hr.record_date,          hr.indoor_humidity_percent,          hr.outdoor_humidity_percent,          (hr.outdoor_humidity_percent - hr.indoor_humidity_percent) AS humidity_difference,          aci.model      FROM humidity_records hr      JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id )  SELECT      hd.ac_id,      hd.record_date,      hd.indoor_humidity_percent,      hd.outdoor_humidity_percent,      hd.humidity_difference,      hd.model  FROM HumidityDifference hd  ORDER BY hd.humidity_difference DESC  LIMIT 10;	air_conditioner	1
WITH HumidityDeviation AS (   SELECT hr.ac_id, hr.record_date, hr.temperature_setting_celsius, hr.indoor_humidity_percent,           (hr.indoor_humidity_percent - 50) AS humidity_deviation, aci.model    FROM humidity_records hr    JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id ) SELECT hd.ac_id, hd.record_date, hd.temperature_setting_celsius, hd.indoor_humidity_percent,         hd.humidity_deviation, hd.model  FROM HumidityDeviation hd  ORDER BY ABS(hd.humidity_deviation) DESC  LIMIT 5;	air_conditioner	2
SELECT hr.ac_id, hr.record_date, hr.mode, hr.indoor_humidity_percent, aci.model  FROM humidity_records hr  JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id  WHERE hr.mode = '除湿'  ORDER BY hr.indoor_humidity_percent ASC  LIMIT 5;	air_conditioner	3
WITH HumidityDifference AS (   SELECT      hr.ac_id,      hr.record_date,      hr.indoor_humidity_percent,      hr.outdoor_humidity_percent,      (hr.outdoor_humidity_percent - hr.indoor_humidity_percent) AS humidity_difference,      aci.model,      aci.power_consumption_watts    FROM humidity_records hr    JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id    WHERE hr.outdoor_humidity_percent = 100 AND hr.indoor_humidity_percent = 0 )  SELECT    hd.ac_id,    hd.record_date,    hd.indoor_humidity_percent,    hd.outdoor_humidity_percent,    hd.humidity_difference,    hd.model,    (hd.power_consumption_watts * (hd.humidity_difference / 50) * ur.usage_duration_hours) AS estimated_energy_consumption  FROM HumidityDifference hd  JOIN usage_records ur ON hd.ac_id = ur.ac_id AND hd.record_date = ur.usage_date  ORDER BY hd.humidity_difference DESC  LIMIT 5;	air_conditioner	4
WITH TotalEnergyConsumption AS (   SELECT ur.ac_id, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours,           (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption,           aci.model    FROM usage_records ur    JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id )  SELECT tec.ac_id, tec.usage_date, tec.power_consumption_watts, tec.usage_duration_hours,         tec.total_energy_consumption, tec.model  FROM TotalEnergyConsumption tec  ORDER BY tec.total_energy_consumption DESC  LIMIT 10;	air_conditioner	1
WITH TemperatureDeviation AS (     SELECT          ur.ac_id,          ur.usage_date,          ur.temperature_setting_celsius,          ur.indoor_temperature_celsius,          (ur.indoor_temperature_celsius - ur.temperature_setting_celsius) AS temperature_deviation,          aci.model      FROM usage_records ur      JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id )  SELECT      td.ac_id,      td.usage_date,      td.temperature_setting_celsius,      td.indoor_temperature_celsius,      td.temperature_deviation,      td.model  FROM TemperatureDeviation td  ORDER BY ABS(td.temperature_deviation) DESC  LIMIT 5;	air_conditioner	2
SELECT ur.ac_id, ur.usage_date, ur.mode, ur.usage_duration_hours, aci.model  FROM usage_records ur  JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id  WHERE ur.mode = '制冷'  ORDER BY ur.usage_duration_hours DESC  LIMIT 5;	air_conditioner	3
WITH TotalEnergyConsumption AS (     SELECT ur.ac_id, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours,             (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption,             aci.model, aci.cooling_capacity_btu      FROM usage_records ur      JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id      WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ) SELECT tec.ac_id, tec.usage_date, tec.power_consumption_watts, tec.usage_duration_hours,         tec.total_energy_consumption, tec.model,         (tec.cooling_capacity_btu * ((60 - 10) / 10) * tec.usage_duration_hours) AS estimated_energy_consumption  FROM TotalEnergyConsumption tec  ORDER BY tec.total_energy_consumption DESC  LIMIT 5;	air_conditioner	4
WITH CoolingEfficiency AS (     SELECT manufacturer,             (cooling_capacity_btu * 1.0 / power_consumption_watts) AS cooling_efficiency      FROM air_conditioner_info  ) SELECT manufacturer,         AVG(cooling_efficiency) AS average_cooling_efficiency  FROM CoolingEfficiency  GROUP BY manufacturer  ORDER BY average_cooling_efficiency DESC  LIMIT 5;	air_conditioner	1
SELECT production_year, AVG(energy_efficiency_ratio) AS average_energy_efficiency_ratio FROM air_conditioner_info GROUP BY production_year ORDER BY average_energy_efficiency_ratio DESC LIMIT 3;	air_conditioner	2
WITH ManufacturerStats AS (   SELECT      manufacturer,      AVG(noise_level_db) AS average_noise_level,      AVG(weight_kg) AS average_weight    FROM air_conditioner_info    GROUP BY manufacturer )  SELECT    manufacturer,    average_noise_level,    average_weight  FROM ManufacturerStats  ORDER BY average_noise_level ASC, average_weight ASC  LIMIT 3;	air_conditioner	3
WITH RefrigerantStats AS (   SELECT      refrigerant_type,     AVG(cooling_capacity_btu) AS average_cooling_capacity,     AVG(power_consumption_watts) AS average_power_consumption   FROM air_conditioner_info   WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000   GROUP BY refrigerant_type ) SELECT    refrigerant_type,   average_cooling_capacity,   average_power_consumption FROM RefrigerantStats ORDER BY average_cooling_capacity DESC, average_power_consumption ASC LIMIT 2;	air_conditioner	4
WITH TotalEnergyConsumption AS (     SELECT          aci.model,         (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption     FROM          usage_records ur     JOIN          air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT      model,     AVG(total_energy_consumption) AS average_total_energy_consumption FROM      TotalEnergyConsumption GROUP BY      model ORDER BY      average_total_energy_consumption DESC LIMIT 5;	air_conditioner	1
WITH TemperatureDeviation AS (   SELECT usage_date, (indoor_temperature_celsius - temperature_setting_celsius) AS temperature_deviation    FROM usage_records  )  SELECT usage_date, AVG(temperature_deviation) AS average_temperature_deviation  FROM TemperatureDeviation  GROUP BY usage_date  ORDER BY average_temperature_deviation DESC  LIMIT 3;	air_conditioner	2
SELECT mode, AVG(energy_consumption_kwh) AS average_energy_consumption FROM energy_consumption GROUP BY mode ORDER BY average_energy_consumption DESC LIMIT 1;	air_conditioner	3
WITH TotalEnergyConsumption AS (   SELECT      aci.model,      (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption,     aci.cooling_capacity_btu,     ur.usage_duration_hours   FROM usage_records ur   JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id   WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ) SELECT    model,    AVG(total_energy_consumption) AS average_total_energy_consumption,   AVG(cooling_capacity_btu * ((60 - 10) / 10) * usage_duration_hours) AS estimated_energy_consumption FROM TotalEnergyConsumption GROUP BY model ORDER BY average_total_energy_consumption DESC LIMIT 3;	air_conditioner	4
SELECT aci.model, AVG(tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS avg_temperature_difference FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id GROUP BY aci.model ORDER BY avg_temperature_difference DESC LIMIT 5;	air_conditioner	1
SELECT tr.record_date, AVG(tr.indoor_temperature_celsius - tr.temperature_setting_celsius) AS avg_temperature_deviation FROM temperature_records tr GROUP BY tr.record_date ORDER BY avg_temperature_deviation DESC LIMIT 3;	air_conditioner	2
SELECT tr.mode, AVG(tr.indoor_temperature_celsius) AS avg_indoor_temperature FROM temperature_records tr GROUP BY tr.mode ORDER BY avg_indoor_temperature ASC LIMIT 1;	air_conditioner	3
WITH ExtremeCondition AS (     SELECT 'extreme' AS condition_type, -30 AS outdoor_temp, 40 AS indoor_temp ), AverageTempDifference AS (     SELECT          aci.model,          AVG(tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS avg_temperature_difference      FROM temperature_records tr      JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id      GROUP BY aci.model ) SELECT      atd.model,      atd.avg_temperature_difference,      (aci.heating_capacity_btu * (70 / 10) * 1) AS estimated_energy_consumption  FROM AverageTempDifference atd  JOIN air_conditioner_info aci ON atd.model = aci.model  CROSS JOIN ExtremeCondition ec  ORDER BY atd.avg_temperature_difference DESC  LIMIT 3;	air_conditioner	4
SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE hr.mode = '除湿' GROUP BY humidity_range;	air_conditioner	1
SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, ec.temperature_setting_celsius, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE ec.mode = '制冷' GROUP BY humidity_range, ec.temperature_setting_celsius;	air_conditioner	2
WITH NormalEnvironment AS (     SELECT          CASE              WHEN tr.humidity_percent BETWEEN 0 AND 30 THEN '0-30%'             WHEN tr.humidity_percent BETWEEN 30 AND 60 THEN '30-60%'             ELSE '60-100%'         END AS humidity_range,         tr.mode,         AVG(ec.energy_consumption_kwh) AS normal_energy_consumption     FROM temperature_records tr     JOIN energy_consumption ec ON tr.ac_id = ec.ac_id AND tr.record_date = ec.record_date     WHERE tr.indoor_temperature_celsius <= 30 AND tr.humidity_percent <= 60     GROUP BY humidity_range, tr.mode ), HighTempHighHumidity AS (     SELECT          CASE              WHEN tr.humidity_percent BETWEEN 0 AND 30 THEN '0-30%'             WHEN tr.humidity_percent BETWEEN 30 AND 60 THEN '30-60%'             ELSE '60-100%'         END AS humidity_range,         tr.mode,         AVG(ec.energy_consumption_kwh) AS high_energy_consumption     FROM temperature_records tr     JOIN energy_consumption ec ON tr.ac_id = ec.ac_id AND tr.record_date = ec.record_date     WHERE tr.indoor_temperature_celsius > 30 AND tr.humidity_percent > 60     GROUP BY humidity_range, tr.mode ) SELECT      ne.humidity_range,     ne.mode,     ne.normal_energy_consumption,     hthh.high_energy_consumption,     ((hthh.high_energy_consumption - ne.normal_energy_consumption) / ne.normal_energy_consumption) * 100 AS energy_increase_percentage FROM NormalEnvironment ne JOIN HighTempHighHumidity hthh ON ne.humidity_range = hthh.humidity_range AND ne.mode = hthh.mode;	air_conditioner	3
SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, ec.fan_speed, SUM(ec.energy_consumption_kwh * 2.0) AS estimated_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE hr.indoor_humidity_percent = 200 GROUP BY humidity_range, ec.fan_speed;	air_conditioner	4
SELECT ec.temperature_setting_celsius, ec.mode, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM energy_consumption ec GROUP BY ec.temperature_setting_celsius, ec.mode ORDER BY ec.temperature_setting_celsius, ec.mode;	air_conditioner	1
SELECT ur.fan_speed, CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN humidity_records hr ON ur.ac_id = hr.ac_id AND ur.usage_date = hr.record_date GROUP BY ur.fan_speed, humidity_range ORDER BY ur.fan_speed, humidity_range;	air_conditioner	2
SELECT CASE WHEN tr.outdoor_temperature_celsius < 10 THEN '<10°C' WHEN tr.outdoor_temperature_celsius BETWEEN 10 AND 25 THEN '10-25°C' ELSE '>25°C' END AS outdoor_temperature_range, ur.mode, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN temperature_records tr ON ur.ac_id = tr.ac_id AND ur.usage_date = tr.record_date GROUP BY outdoor_temperature_range, ur.mode ORDER BY outdoor_temperature_range, ur.mode;	air_conditioner	3
SELECT ur.fan_speed, CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN humidity_records hr ON ur.ac_id = hr.ac_id AND ur.usage_date = hr.record_date JOIN temperature_records tr ON ur.ac_id = tr.ac_id AND ur.usage_date = tr.record_date WHERE tr.outdoor_temperature_celsius = 60 GROUP BY ur.fan_speed, humidity_range ORDER BY ur.fan_speed, humidity_range;	air_conditioner	4
SELECT model FROM air_conditioner_info WHERE cooling_capacity_btu > 10000 AND energy_efficiency_ratio < 10 AND production_year >= 2010;	air_conditioner	1
SELECT model FROM air_conditioner_info WHERE heating_capacity_btu > 12000 AND noise_level_db < 50 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE warranty_period_months < 24);	air_conditioner	2
SELECT model FROM air_conditioner_info WHERE weight_kg > 50 AND power_consumption_watts < 1000 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE manufacturer = 'Unknown');	air_conditioner	3
SELECT model FROM air_conditioner_info WHERE refrigerant_type = 'R410A' AND production_year > 2020 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE cooling_capacity_btu < 5000);	air_conditioner	4
SELECT * FROM energy_consumption WHERE mode = '制冷' AND energy_consumption_kwh > (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '制冷') AND power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷');	air_conditioner	1
SELECT * FROM energy_consumption WHERE mode = '制热' AND ABS(temperature_setting_celsius - indoor_temperature_celsius) > 10 AND energy_consumption_kwh < (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '制热');	air_conditioner	2
SELECT * FROM energy_consumption WHERE mode = '除湿' AND humidity_percent > 70 AND energy_consumption_kwh < (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '除湿');	air_conditioner	3
SELECT * FROM energy_consumption WHERE mode = '送风' AND fan_speed = 10 AND power_consumption_watts = 0;	air_conditioner	4
SELECT * FROM energy_consumption WHERE mode = '制冷' AND indoor_temperature_celsius > temperature_setting_celsius AND power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius > 40);	air_conditioner	1
SELECT * FROM energy_consumption WHERE mode = '制热' AND indoor_temperature_celsius < temperature_setting_celsius AND power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制热') AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE humidity_percent < 30);	air_conditioner	2
SELECT * FROM energy_consumption WHERE mode = '送风' AND fan_speed = '高档' AND ABS(indoor_temperature_celsius - temperature_setting_celsius) > 5 AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius < 10);	air_conditioner	3
SELECT * FROM energy_consumption WHERE mode = '极端制冷' AND indoor_temperature_celsius < -10 AND power_consumption_watts > 10000 AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius < -50);	air_conditioner	4
SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '制冷' AND ec.humidity_percent > 70 AND ec.power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND hr.outdoor_humidity_percent >= 20;	air_conditioner	1
SELECT * FROM energy_consumption WHERE mode = '除湿' AND humidity_percent > 60 AND power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '除湿') AND temperature_setting_celsius <= 30;	air_conditioner	2
SELECT ec.* FROM energy_consumption ec  JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date  WHERE ec.mode = '送风' AND ec.fan_speed = '低档'  AND ABS(ec.humidity_percent - hr.outdoor_humidity_percent) > 30  AND hr.outdoor_humidity_percent >= 10;	air_conditioner	3
SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '极端除湿' AND ec.humidity_percent < 10 AND ec.power_consumption_watts > 5000 AND hr.outdoor_humidity_percent <= 90;	air_conditioner	4
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '制冷' AND ur.usage_duration_hours > 5 AND ec.power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND ec.outdoor_temperature_celsius >= 10;	air_conditioner	1
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '制热' AND ur.usage_duration_hours > 3 AND ec.power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制热') AND ec.indoor_temperature_celsius <= 25;	air_conditioner	2
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '送风' AND ur.fan_speed = '高档' AND ur.usage_duration_hours < 1 AND ec.outdoor_temperature_celsius <= 35;	air_conditioner	3
SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '极端制热' AND ur.usage_duration_hours > 24 AND ur.power_consumption_watts > 10000 AND ec.outdoor_temperature_celsius <= 50;	air_conditioner	4
SELECT a.model, (a.cooling_capacity_btu / (a.power_consumption_watts * 3.412)) * (1 + (r.phase_change_heat_kj_per_kg * r.refrigerant_flow_rate_kg_per_s) / (c.air_heat_capacity_kj_per_kg_k * c.air_flow_rate_kg_per_s * 40)) AS theoretical_cop FROM air_conditioner_info a JOIN refrigerant_properties r ON a.refrigerant_type = r.refrigerant_type JOIN air_properties c ON c.temperature_celsius = 50 AND c.humidity_percent = 90 WHERE a.model = '特定型号';	air_conditioner	1
WITH monthly_energy AS (   SELECT      a.manufacturer,      a.model,      strftime('%Y-%m', e.record_date) AS month,      AVG(e.energy_consumption_kwh) AS avg_energy_consumption_kwh    FROM energy_consumption e    JOIN air_conditioner_info a ON e.ac_id = a.ac_id    JOIN temperature_records t ON e.ac_id = t.ac_id AND e.record_date = t.record_date    JOIN humidity_records h ON e.ac_id = h.ac_id AND e.record_date = h.record_date    WHERE strftime('%Y', e.record_date) = '2023'    GROUP BY a.manufacturer, a.model, strftime('%Y-%m', e.record_date) ),  energy_fluctuation AS (   SELECT      manufacturer,      model,      MAX(avg_energy_consumption_kwh) - MIN(avg_energy_consumption_kwh) AS energy_fluctuation_kwh    FROM monthly_energy    GROUP BY manufacturer, model )  SELECT    manufacturer,    model,    energy_fluctuation_kwh  FROM energy_fluctuation  ORDER BY energy_fluctuation_kwh DESC  LIMIT 1;	air_conditioner	2
WITH low_temp_low_humidity_usage AS (     SELECT          u.ac_id,          u.mode,          SUM(u.usage_duration_hours) AS total_usage_hours,          SUM(u.power_consumption_watts * u.usage_duration_hours) / 1000 AS total_energy_consumption_kwh      FROM usage_records u      JOIN temperature_records t ON u.ac_id = t.ac_id AND u.usage_date = t.record_date      WHERE t.indoor_temperature_celsius < 10 AND t.humidity_percent < 30      GROUP BY u.ac_id, u.mode ),  shortest_usage_model AS (     SELECT          a.model,          SUM(l.total_usage_hours) AS total_usage_hours      FROM low_temp_low_humidity_usage l      JOIN air_conditioner_info a ON l.ac_id = a.ac_id      GROUP BY a.model      ORDER BY total_usage_hours ASC      LIMIT 1 )  SELECT      s.model,      l.mode,      l.total_usage_hours,      l.total_energy_consumption_kwh  FROM low_temp_low_humidity_usage l  JOIN air_conditioner_info a ON l.ac_id = a.ac_id  JOIN shortest_usage_model s ON a.model = s.model;	air_conditioner	3
WITH theoretical_energy AS (         SELECT (1000000 / 100) * 24 * 365 * 10 * POWER(1.05, 10) / 1000 AS total_energy_consumption_kwh     ),     high_energy_models AS (         SELECT              a.model,             (a.cooling_capacity_btu / a.energy_efficiency_ratio) * 24 * 365 * 10 * POWER(1.05, 10) / 1000 AS total_energy_consumption_kwh         FROM air_conditioner_info a         WHERE a.cooling_capacity_btu = 1000000              AND a.energy_efficiency_ratio = 100              AND EXISTS (                 SELECT 1                  FROM temperature_records t                  WHERE t.ac_id = a.ac_id                      AND t.indoor_temperature_celsius - t.outdoor_temperature_celsius = 100             )     )     SELECT model, total_energy_consumption_kwh      FROM high_energy_models      WHERE total_energy_consumption_kwh > 1000000;	air_conditioner	4
WITH power_consumption_variation AS (     SELECT          u.temperature_setting_celsius,          (MAX(u.power_consumption_watts) - MIN(u.power_consumption_watts)) * 100.0 / AVG(u.power_consumption_watts) AS power_variation_rate      FROM usage_records u      JOIN air_conditioner_info a ON u.ac_id = a.ac_id      WHERE a.model = '特定型号'      GROUP BY u.temperature_setting_celsius )  SELECT temperature_setting_celsius, power_variation_rate  FROM power_consumption_variation  ORDER BY power_variation_rate DESC  LIMIT 1;	air_conditioner	1
WITH monthly_data AS (   SELECT      strftime('%m', u.usage_date) AS month,     u.usage_duration_hours,     e.energy_consumption_kwh   FROM usage_records u   JOIN energy_consumption e ON u.ac_id = e.ac_id AND u.usage_date = e.record_date   WHERE strftime('%Y', u.usage_date) = '2023' ), correlation_coefficients AS (   SELECT      month,     (AVG(usage_duration_hours * energy_consumption_kwh) - AVG(usage_duration_hours) * AVG(energy_consumption_kwh)) /     (sqrt(AVG(usage_duration_hours * usage_duration_hours) - AVG(usage_duration_hours) * AVG(usage_duration_hours)) *      sqrt(AVG(energy_consumption_kwh * energy_consumption_kwh) - AVG(energy_consumption_kwh) * AVG(energy_consumption_kwh)))     AS correlation_coefficient   FROM monthly_data   GROUP BY month ) SELECT month, correlation_coefficient FROM correlation_coefficients ORDER BY correlation_coefficient DESC LIMIT 1;	air_conditioner	2
WITH low_temp_low_humidity_usage AS (     SELECT a.model, u.mode, SUM(u.usage_duration_hours) AS total_usage_hours      FROM usage_records u      JOIN air_conditioner_info a ON u.ac_id = a.ac_id      WHERE u.indoor_temperature_celsius < 10 AND u.humidity_percent < 30      GROUP BY a.model, u.mode ),  shortest_usage_model AS (     SELECT model, SUM(total_usage_hours) AS total_usage_hours      FROM low_temp_low_humidity_usage      GROUP BY model      ORDER BY total_usage_hours ASC      LIMIT 1 )  SELECT s.model, l.mode, l.total_usage_hours  FROM low_temp_low_humidity_usage l  JOIN shortest_usage_model s ON l.model = s.model;	air_conditioner	3
WITH extreme_usage AS (         SELECT a.model,                 24 * 365 * 1000 * POWER(1.02, 1000) AS total_usage_hours,                 (a.power_consumption_watts * 24 * 365 * 1000 * POWER(1.10, 1000)) / 1000 AS total_energy_consumption_kwh          FROM air_conditioner_info a          WHERE EXISTS (             SELECT 1              FROM temperature_records t              WHERE t.ac_id = a.ac_id              AND t.indoor_temperature_celsius = 100              AND t.outdoor_temperature_celsius = -50         )     )      SELECT model, total_usage_hours, total_energy_consumption_kwh      FROM extreme_usage      WHERE total_usage_hours > 10000000      AND total_energy_consumption_kwh > 100000000;	air_conditioner	4
WITH eer_by_mode AS (     SELECT e.mode, AVG(a.cooling_capacity_btu * 1.0 / e.power_consumption_watts) AS eer      FROM energy_consumption e      JOIN air_conditioner_info a ON e.ac_id = a.ac_id      WHERE a.model = 'Model-X'      GROUP BY e.mode )  SELECT mode, eer  FROM eer_by_mode  ORDER BY eer ASC  LIMIT 1;	air_conditioner	1
WITH MonthlyData AS (   SELECT      CAST(strftime('%m', ec.record_date) AS INTEGER) AS month,      ec.energy_consumption_kwh,      ec.outdoor_temperature_celsius    FROM energy_consumption ec    WHERE CAST(strftime('%Y', ec.record_date) AS INTEGER) = 2023 ),  CorrelationCoefficients AS (   SELECT      month,      (AVG(energy_consumption_kwh * outdoor_temperature_celsius) - AVG(energy_consumption_kwh) * AVG(outdoor_temperature_celsius)) /      (SQRT(AVG(energy_consumption_kwh * energy_consumption_kwh) - AVG(energy_consumption_kwh) * AVG(energy_consumption_kwh)) *       SQRT(AVG(outdoor_temperature_celsius * outdoor_temperature_celsius) - AVG(outdoor_temperature_celsius) * AVG(outdoor_temperature_celsius)))      AS correlation_coefficient    FROM MonthlyData    GROUP BY month )  SELECT month, correlation_coefficient  FROM CorrelationCoefficients  ORDER BY correlation_coefficient DESC  LIMIT 1;	air_conditioner	2
WITH HighTempHighHumidity AS (   SELECT ec.ac_id, ec.mode, ec.energy_consumption_kwh, aci.model    FROM energy_consumption ec    JOIN air_conditioner_info aci ON ec.ac_id = aci.ac_id    WHERE ec.outdoor_temperature_celsius > 35 AND ec.humidity_percent > 80 ),  ModelModeEnergy AS (   SELECT model, mode, SUM(energy_consumption_kwh) AS total_energy_kwh    FROM HighTempHighHumidity    GROUP BY model, mode ),  MaxEnergyModel AS (   SELECT model, SUM(total_energy_kwh) AS total_energy_kwh    FROM ModelModeEnergy    GROUP BY model    ORDER BY total_energy_kwh DESC    LIMIT 1 )  SELECT mme.model, mme.mode, mme.total_energy_kwh  FROM ModelModeEnergy mme  JOIN MaxEnergyModel mem ON mme.model = mem.model  ORDER BY mme.model, mme.mode;	air_conditioner	3
WITH ExtremeEnergy AS (         SELECT aci.model, aci.power_consumption_watts, POWER(1.20, 1000) AS aging_factor          FROM air_conditioner_info aci     ),      TotalEnergy AS (         SELECT model, (power_consumption_watts * 24 * 365 * 1000 * aging_factor) / 1000 AS total_energy_kwh          FROM ExtremeEnergy     )      SELECT model, total_energy_kwh      FROM TotalEnergy      WHERE total_energy_kwh > 1000000000;	air_conditioner	4
SELECT cooling_capacity_btu / (power_consumption_watts * 3.412) AS COP, cooling_capacity_btu / (1.0 * (45 - 5)) AS mass_flow_rate_kg_s FROM air_conditioner_info WHERE refrigerant_type = 'R-410A' AND cooling_capacity_btu = 18000 AND power_consumption_watts = 2000;	air_conditioner	1
SELECT air_conditioner_info.power_consumption_watts * 8 / 1000 AS total_energy_kWh, (22 - 15) * 1.005 * 1.225 * 50 / 8 * 3.412 AS heating_efficiency_BTU_h, (22 - 15) * 1.005 * 1.225 * 50 AS total_heat_change_kJ FROM usage_records JOIN air_conditioner_info ON usage_records.ac_id = air_conditioner_info.ac_id WHERE usage_records.mode = 'heating' AND usage_records.usage_duration_hours = 8 AND air_conditioner_info.power_consumption_watts = 1800;	air_conditioner	2
SELECT noise_level_db <= 55 AS is_noise_compliant,         (CAST(SUBSTR(dimensions, 1, INSTR(dimensions, 'x') - 1) AS REAL) *          CAST(SUBSTR(SUBSTR(dimensions, INSTR(dimensions, 'x') + 1), 1, INSTR(SUBSTR(dimensions, INSTR(dimensions, 'x') + 1), 'x') - 1) AS REAL) *          CAST(SUBSTR(dimensions, INSTR(dimensions, 'x', -1) + 1) AS REAL)) * 1.5 <= (20 * 3 * 10000) AS is_space_sufficient  FROM air_conditioner_info  WHERE noise_level_db = 50 AND weight_kg = 30 AND dimensions = '80x20x50';	air_conditioner	3
SELECT cooling_capacity_btu / power_consumption_watts AS EER, cooling_capacity_btu / (1.5 * (10000 - (-273))) AS mass_flow_rate_kg_s, power_consumption_watts * 1 / 1000 AS total_energy_kWh FROM air_conditioner_info WHERE cooling_capacity_btu = 1000000 AND power_consumption_watts = 1000000;	air_conditioner	4
SELECT 0.5 * 1.225 * POWER(50, 2) * (Height_meters * Base_Width) * 1.2 AS Wind_Load FROM tower WHERE Name = 'Eiffel Tower';	architect	1
SELECT (Weight * 9.81) / (Base_Width * Base_Width) AS Pressure FROM tower WHERE Name = 'Eiffel Tower';	architect	2
SELECT CASE WHEN Cost_Usd = (SELECT AVG(Cost_Usd) FROM tower WHERE Height_meters = 300 AND Material = '钢') THEN '成正比' ELSE '不成正比' END AS Cost_Proportionality FROM tower WHERE Name = 'Eiffel Tower';	architect	3
SELECT CASE WHEN Vibration_Frequency = (1000.0 / (2 * Height_meters)) THEN '可能导致失效' ELSE '不会导致失效' END AS Failure_Risk FROM tower WHERE Name = 'Eiffel Tower';	architect	4
SELECT 0.5 * POWER(2 * PI() * Vibration_Frequency, 2) * Weight * POWER(0.1, 2) AS Energy_Consumption FROM tower WHERE Name = 'Tokyo Tower';	architect	1
SELECT Weight * 9.81 * (300 - 100) AS Potential_Energy_Change FROM tower WHERE Name = 'Tokyo Tower';	architect	2
SELECT CASE WHEN Maintenance_Cost = (SELECT AVG(Maintenance_Cost) FROM tower WHERE Height_meters = 300 AND Material = '钢') THEN '成正比' ELSE '不成正比' END AS Maintenance_Proportionality FROM tower WHERE Name = 'Tokyo Tower';	architect	3
SELECT CASE WHEN POWER(500, 2) > POWER(Wind_Resistance, 2) THEN '不足' ELSE '足够' END AS Wind_Resistance_Check FROM tower WHERE Name = 'Tokyo Tower';	architect	4
SELECT (POWER(PI(), 2) * 200e9 * (POWER(Base_Width, 4)/12)) / POWER(2 * Height_meters, 2) AS Critical_Buckling_Load FROM tower WHERE Name = 'CN Tower';	architect	1
SELECT (100000 * 2400 / 1000 * 50) AS Concrete_Cost, (100000 * 7850 / 1000 * 800) AS Steel_Cost, (100000 * 7850 / 1000 * 800) - (100000 * 2400 / 1000 * 50) AS Cost_Difference FROM tower WHERE Name = 'CN Tower';	architect	2
SELECT CASE WHEN Wind_Resistance > 40 THEN '不合理' ELSE '合理' END AS Wind_Resistance_Check FROM tower WHERE Name = 'CN Tower';	architect	3
SELECT (Weight * 9.81) / (Base_Width * Base_Width) AS Ground_Pressure FROM tower WHERE Name = 'CN Tower';	architect	4
SELECT 12e-6 * Height_meters * 50 AS Thermal_Expansion FROM tower WHERE Name = 'Burj Khalifa';	architect	1
SELECT 200e9 * 12e-6 * 40 AS Steel_Thermal_Stress, 30e9 * 10e-6 * 40 AS Concrete_Thermal_Stress FROM tower WHERE Name = 'Burj Khalifa';	architect	2
SELECT CASE WHEN (5000000 / 1200000) > 3 THEN '异常' ELSE '正常' END AS Maintenance_Status FROM tower WHERE Name = 'Burj Khalifa';	architect	3
SELECT (1e18 * 9.81) / (5515 * 9.81) AS Penetration_Depth FROM tower WHERE Name = 'Burj Khalifa';	architect	4
SELECT 0.5 * Weight * 9.81 * Base_Width AS Resist_Moment, 0.5 * 1.225 * POWER(60, 2) * (height_meters * Base_Width) * (height_meters / 2) AS Wind_Moment FROM tower WHERE Name = 'Shanghai Tower';	architect	1
SELECT (1e7 * 300) / (200e9 * 5) AS Steel_Deformation, (1e7 * 300) / (10e9 * 20) AS Wood_Deformation FROM tower WHERE Name = 'Shanghai Tower';	architect	2
SELECT CASE WHEN Height_meters > 150 AND construction_year < 1880 THEN '不合理' ELSE '合理' END AS Construction_Validity FROM tower WHERE Name = 'Shanghai Tower';	architect	3
SELECT 1e25 * POWER(6.4e6 + Height_meters, 2) AS Delta_I, (8e37 / (8e37 + 1e25 * POWER(6.4e6 + Height_meters, 2))) * 7.2921159e-5 AS New_Angular_Velocity FROM tower WHERE Name = 'Shanghai Tower';	architect	4
SELECT 0.5 * 1.225 * POWER(100 * POWER(Height_meters / 10, 0.3), 2) * 0.7 AS Wind_Pressure FROM tower WHERE Name = 'CN Tower';	architect	1
SELECT Name, Height_meters, Cost_Usd, (Cost_Usd / (Height_meters * Height_meters * Height_meters)) AS Cost_Ratio FROM tower WHERE Name = 'CN Tower';	architect	2
SELECT Name, Height_meters, Material, Maintenance_Cost FROM tower WHERE Height_meters = 200 AND Material IN ('钢', '混凝土');	architect	3
SELECT Name, Vibration_Frequency, Maintenance_Cost, (1000 * POWER(Vibration_Frequency / 10, 3)) AS Calculated_Maintenance_Cost FROM tower WHERE Name = 'CN Tower';	architect	4
SELECT Name, Height_meters, Material, Vibration_Frequency, (1 / (2 * 3.14159)) * SQRT((200e9 * 5) / (7850 * (Base_Width * Base_Width) * POWER(Height_meters, 4))) AS Calculated_Frequency FROM tower WHERE Name = 'CN Tower';	architect	1
SELECT cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100) AS actual_frequency_ghz FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_base_frequency_ghz = 3.5 AND computer_info.cpu_max_frequency_ghz = 4.2 AND usage_records.cpu_usage_percent = 80;	computer	1
SELECT (ram_size_gb * ram_usage_percent / 100) / 25.6 AS actual_bandwidth_utilization FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.ram_size_gb = 16 AND computer_info.ram_type = 'DDR4' AND usage_records.ram_usage_percent = 75;	computer	2
SELECT (computer_info.battery_capacity_wh * battery_usage.battery_health_percent / 100) / battery_usage.power_consumption_watts AS runtime_hours FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 60 AND battery_usage.power_consumption_watts = 45 AND battery_usage.battery_health_percent = 90;	computer	3
SELECT cpu_cores * cpu_threads * (cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100)) AS total_computation_power FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_cores = 128 AND computer_info.cpu_threads = 256 AND computer_info.cpu_base_frequency_ghz = 1 AND computer_info.cpu_max_frequency_ghz = 10 AND usage_records.cpu_usage_percent = 200;	computer	4
SELECT gpu_vram_gb * (gpu_usage_percent / 100.0) * 448 AS data_transfer_volume_gb  FROM computer_info  JOIN usage_records ON computer_info.computer_id = usage_records.computer_id  WHERE computer_info.gpu_vram_gb = 8 AND usage_records.gpu_usage_percent = 90;	computer	1
SELECT (storage_size_gb * 1024 * storage_usage_percent / 100) / 500 AS actual_bandwidth_s FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.storage_size_gb = 1024 AND computer_info.storage_type = 'SSD' AND usage_records.storage_usage_percent = 60;	computer	2
SELECT (screen_size_inches * (CAST(substr(screen_resolution, 1, instr(screen_resolution, 'x') - 1) AS INTEGER) * CAST(substr(screen_resolution, instr(screen_resolution, 'x') + 1) AS INTEGER))) / (POWER(SQRT(POWER(CAST(substr(screen_resolution, 1, instr(screen_resolution, 'x') - 1) AS INTEGER), 2) + POWER(CAST(substr(screen_resolution, instr(screen_resolution, 'x') + 1) AS INTEGER), 2)) / screen_size_inches, 2)) AS actual_display_area FROM computer_info WHERE computer_info.screen_size_inches = 15.6 AND computer_info.screen_resolution = '1920x1080';	computer	3
SELECT (computer_info.battery_capacity_wh * battery_usage.battery_health_percent / 100) / battery_usage.power_consumption_watts AS runtime_hours FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 1000 AND battery_usage.power_consumption_watts = 500 AND battery_usage.battery_health_percent = 200;	computer	4
SELECT 25 + (75 * 4 * 3600 * (1 - 0.8)) / 500 AS internal_temperature_celsius FROM usage_records WHERE usage_records.power_consumption_watts = 75 AND usage_records.usage_duration_hours = 4;	computer	1
SELECT 100 * (cpu_usage_percent / 100.0) AS cpu_actual_performance_gflops, 200 * (gpu_usage_percent / 100.0) AS gpu_actual_performance_gflops, 50 * (ram_usage_percent / 100.0) AS ram_actual_performance_gb_s, 500 * (storage_usage_percent / 100.0) AS storage_actual_performance_mb_s FROM usage_records WHERE cpu_usage_percent = 80 AND gpu_usage_percent = 60 AND ram_usage_percent = 50 AND storage_usage_percent = 30;	computer	2
SELECT (60 * 90 / 100) - (50 * 3) AS remaining_battery_capacity_wh, CASE WHEN (60 * 90 / 100) - (50 * 3) <= 0 THEN '需要充电' ELSE '无需充电' END AS charging_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 60 AND usage_records.power_consumption_watts = 50 AND usage_records.usage_duration_hours = 3;	computer	3
SELECT 100 + (1000 * 24 * 3600 * (1 - 0.5)) / 500 AS internal_temperature_celsius, CASE WHEN 100 + (1000 * 24 * 3600 * (1 - 0.5)) / 500 > 1000 THEN '不可能实现' ELSE '可能实现' END AS feasibility_analysis FROM usage_records WHERE usage_records.cpu_usage_percent = 1000 AND usage_records.gpu_usage_percent = 800 AND usage_records.power_consumption_watts = 1000 AND usage_records.usage_duration_hours = 24;	computer	4
SELECT (30 * 1.5) / 0.9 AS actual_discharge_wh FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 60 AND usage_records.power_consumption_watts = 30 AND usage_records.usage_duration_hours = 1.5;	computer	1
SELECT (50 * 80 / 100) - (20 * 2) AS remaining_battery_capacity_wh, (50 - ((50 * 80 / 100) - (20 * 2))) / 0.85 AS required_charging_wh FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 50 AND usage_records.power_consumption_watts = 20 AND usage_records.usage_duration_hours = 2;	computer	2
SELECT 95 - ((18 * 4) / 80 * 0.1) AS remaining_battery_health_percent, CASE WHEN 95 - ((18 * 4) / 80 * 0.1) < 80 THEN '需要更换' ELSE '无需更换' END AS replacement_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 80 AND usage_records.power_consumption_watts = 18 AND usage_records.usage_duration_hours = 4;	computer	3
SELECT 500 - ((100 * 24) / 200 * CEIL((100 * 24) / 200) * 1) AS remaining_battery_health_percent,  CASE WHEN 500 - ((100 * 24) / 200 * CEIL((100 * 24) / 200) * 1) <= 0 THEN '不可能实现' ELSE '可能实现' END AS feasibility_analysis  FROM computer_info  JOIN usage_records ON computer_info.computer_id = usage_records.computer_id  WHERE computer_info.battery_capacity_wh = 200  AND usage_records.power_consumption_watts = 100  AND usage_records.usage_duration_hours = 24;	computer	4
SELECT (65 + 85) * 1 * 3600 * 0.75 AS total_heat_dissipation_joules FROM performance_tests WHERE performance_tests.cpu_score = 1200 AND performance_tests.gpu_score = 800 AND performance_tests.overall_score = 950;	computer	1
SELECT cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1 AS calculated_overall_score, CASE WHEN cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1 != overall_score THEN '存在性能瓶颈' ELSE '无性能瓶颈' END AS performance_bottleneck_analysis FROM performance_tests WHERE cpu_score = 1500 AND gpu_score = 1000 AND ram_score = 800 AND storage_score = 600 AND overall_score = 1200;	computer	2
SELECT temperature_celsius,         CASE WHEN temperature_celsius <= 85 THEN '安全范围内' ELSE '超出安全范围' END AS temperature_safety_status,         CASE WHEN temperature_celsius >= 85 THEN '需要改进散热系统' ELSE '无需改进散热系统' END AS cooling_system_analysis  FROM performance_tests  WHERE cpu_score = 1000    AND gpu_score = 700    AND ram_score = 500    AND storage_score = 400    AND overall_score = 800    AND temperature_celsius = 80    AND power_consumption_watts = 150;	computer	3
SELECT 20000 * 1 * 3600 AS total_energy_consumption_joules, CASE WHEN 20000 * 1 * 3600 > 1e12 THEN '不可能实现可持续运行' ELSE '可能实现可持续运行' END AS sustainability_analysis FROM performance_tests WHERE cpu_score = 100000 AND gpu_score = 80000 AND ram_score = 60000 AND storage_score = 40000 AND overall_score = 90000 AND temperature_celsius = 500 AND power_consumption_watts = 20000;	computer	4
SELECT ci.computer_id, ci.manufacturer, ci.model, ci.battery_capacity_wh, pt.power_consumption_watts, (ci.battery_capacity_wh / pt.power_consumption_watts) AS theoretical_runtime_hours FROM computer_info ci JOIN performance_tests pt ON ci.computer_id = pt.computer_id ORDER BY theoretical_runtime_hours DESC LIMIT 5;	computer	1
SELECT computer_id, manufacturer, model, cpu_cores, cpu_threads, (cpu_threads * 1.0 / cpu_cores) AS core_thread_ratio, ABS((cpu_threads * 1.0 / cpu_cores) - 2) AS ratio_difference FROM computer_info ORDER BY ratio_difference ASC LIMIT 3;	computer	2
SELECT computer_id, manufacturer, model, screen_size_inches, screen_resolution,         ROUND(SQRT(POWER(CAST(SUBSTR(screen_resolution, 1, INSTR(screen_resolution, 'x') - 1) AS REAL), 2) +                    POWER(CAST(SUBSTR(screen_resolution, INSTR(screen_resolution, 'x') + 1) AS REAL), 2)) / screen_size_inches, 2) AS ppi  FROM computer_info  ORDER BY ppi DESC  LIMIT 10;	computer	3
SELECT computer_id, manufacturer, model, cpu_base_frequency_ghz, (100.0 / cpu_base_frequency_ghz) AS performance_increase_factor FROM computer_info ORDER BY performance_increase_factor DESC LIMIT 5;	computer	4
SELECT computer_id, manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz, ROUND(((cpu_max_frequency_ghz - cpu_base_frequency_ghz) / cpu_base_frequency_ghz) * 100, 2) AS frequency_increase_percentage FROM computer_info ORDER BY frequency_increase_percentage DESC LIMIT 5;	computer	1
SELECT computer_id, manufacturer, model, ram_size_gb, storage_size_gb, (ram_size_gb * 1.0 / storage_size_gb) AS ram_storage_ratio, ABS((ram_size_gb * 1.0 / storage_size_gb) - 0.1) AS ratio_difference FROM computer_info ORDER BY ratio_difference ASC LIMIT 3;	computer	2
SELECT computer_id, manufacturer, model, weight_kg, battery_capacity_wh, (battery_capacity_wh * 1.0 / weight_kg) AS battery_capacity_per_kg FROM computer_info ORDER BY battery_capacity_per_kg DESC LIMIT 10;	computer	3
SELECT computer_id, manufacturer, model, gpu_vram_gb, (1024.0 / gpu_vram_gb) AS vram_increase_factor FROM computer_info ORDER BY vram_increase_factor DESC LIMIT 5;	computer	4
SELECT computer_id, SUM(power_consumption_watts * usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY computer_id ORDER BY total_energy_consumption_wh DESC LIMIT 5;	computer	1
SELECT computer_id, AVG(cpu_usage_percent) AS avg_cpu_usage, AVG(gpu_usage_percent) AS avg_gpu_usage, (AVG(cpu_usage_percent) - AVG(gpu_usage_percent)) AS usage_difference FROM usage_records GROUP BY computer_id ORDER BY usage_difference DESC LIMIT 3;	computer	2
SELECT computer_id, SUM(temperature_celsius * usage_duration_hours) / SUM(usage_duration_hours) AS avg_temperature FROM usage_records GROUP BY computer_id ORDER BY avg_temperature DESC LIMIT 10;	computer	3
SELECT computer_id, SUM(power_consumption_watts * 1000) AS total_energy_consumption_wh FROM usage_records GROUP BY computer_id ORDER BY total_energy_consumption_wh DESC LIMIT 5;	computer	4
SELECT computer_id, battery_capacity_wh, power_consumption_watts, (battery_capacity_wh / power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage ORDER BY theoretical_runtime_hours DESC LIMIT 5;	computer	1
SELECT computer_id, (battery_health_percent / usage_duration_hours) AS health_usage_ratio FROM battery_usage ORDER BY health_usage_ratio ASC LIMIT 3;	computer	2
SELECT computer_id, SUM(temperature_celsius * usage_duration_hours) / SUM(usage_duration_hours) AS avg_temperature FROM battery_usage GROUP BY computer_id ORDER BY avg_temperature DESC LIMIT 10;	computer	3
SELECT computer_id, (10000 / power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage ORDER BY theoretical_runtime_hours DESC LIMIT 5;	computer	4
SELECT computer_id, SUM(power_consumption_watts) AS total_energy_consumption_wh, SUM(power_consumption_watts) / COUNT(*) * (1 - (25.0 / AVG(temperature_celsius))) AS avg_cooling_power_w FROM performance_tests GROUP BY computer_id ORDER BY (total_energy_consumption_wh / avg_cooling_power_w) DESC LIMIT 5;	computer	1
SELECT computer_id, (cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1) AS weighted_score FROM performance_tests ORDER BY weighted_score DESC LIMIT 3;	computer	2
SELECT computer_id, power_consumption_watts / (temperature_celsius - 25) AS cooling_efficiency_w_per_c FROM performance_tests ORDER BY cooling_efficiency_w_per_c ASC LIMIT 10;	computer	3
SELECT computer_id, (100000 * 0.4 + 100000 * 0.3 + 100000 * 0.2 + 100000 * 0.1) / (cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1) AS performance_increase_factor FROM performance_tests ORDER BY performance_increase_factor DESC LIMIT 5;	computer	4
SELECT manufacturer, AVG(cpu_base_frequency_ghz) AS avg_base_frequency, AVG(cpu_max_frequency_ghz) AS avg_max_frequency, (AVG(cpu_max_frequency_ghz) - AVG(cpu_base_frequency_ghz)) / AVG(cpu_base_frequency_ghz) * 100 AS frequency_increase_percentage FROM computer_info GROUP BY manufacturer ORDER BY frequency_increase_percentage DESC;	computer	1
SELECT ram_type, AVG(ram_size_gb) / AVG(storage_size_gb) AS ram_storage_ratio FROM computer_info GROUP BY ram_type ORDER BY ram_storage_ratio DESC;	computer	2
SELECT screen_size_inches, AVG(battery_capacity_wh) AS avg_battery_capacity, AVG(weight_kg) AS avg_weight, AVG(battery_capacity_wh) / AVG(weight_kg) AS battery_capacity_per_kg FROM computer_info GROUP BY screen_size_inches ORDER BY battery_capacity_per_kg DESC;	computer	3
SELECT production_year, 100.0 / AVG(cpu_cores) AS core_increase_factor FROM computer_info GROUP BY production_year ORDER BY core_increase_factor DESC;	computer	4
SELECT usage_type, AVG(power_consumption_watts) AS avg_power_consumption, AVG(usage_duration_hours) AS avg_usage_duration, AVG(power_consumption_watts) * AVG(usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY usage_type ORDER BY total_energy_consumption_wh DESC;	computer	1
SELECT strftime('%m', usage_date) AS usage_month, AVG(cpu_usage_percent) AS avg_cpu_usage, AVG(gpu_usage_percent) AS avg_gpu_usage, AVG(ram_usage_percent) AS avg_ram_usage, (AVG(cpu_usage_percent) - AVG(gpu_usage_percent)) AS usage_difference FROM usage_records GROUP BY usage_month ORDER BY usage_difference DESC;	computer	2
SELECT usage_type, AVG(temperature_celsius) AS avg_temperature, AVG(usage_duration_hours) AS avg_usage_duration, AVG(temperature_celsius) / AVG(usage_duration_hours) AS temperature_increase_per_hour FROM usage_records GROUP BY usage_type ORDER BY temperature_increase_per_hour DESC;	computer	3
SELECT usage_type, 10000 * AVG(usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY usage_type ORDER BY total_energy_consumption_wh DESC;	computer	4
SELECT strftime('%Y', usage_date) AS usage_year,         AVG(battery_health_percent) AS avg_battery_health,         AVG(usage_duration_hours) AS avg_usage_duration,         AVG(battery_health_percent) / AVG(usage_duration_hours) AS battery_health_decay_rate  FROM battery_usage  GROUP BY usage_year  ORDER BY battery_health_decay_rate DESC;	computer	1
SELECT CASE WHEN battery_capacity_wh <= 50 THEN '0-50Wh' WHEN battery_capacity_wh > 50 AND battery_capacity_wh <= 100 THEN '50-100Wh' ELSE '100Wh以上' END AS capacity_range, AVG(battery_capacity_wh) AS avg_battery_capacity, AVG(power_consumption_watts) AS avg_power_consumption, AVG(usage_duration_hours) AS avg_usage_duration, AVG(battery_capacity_wh) / AVG(power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage GROUP BY capacity_range ORDER BY theoretical_runtime_hours DESC;	computer	2
SELECT strftime('%m', usage_date) AS usage_month, AVG(temperature_celsius) AS avg_temperature, AVG(battery_health_percent) AS avg_battery_health FROM battery_usage GROUP BY usage_month ORDER BY avg_temperature DESC;	computer	3
SELECT CASE WHEN battery_health_percent <= 50 THEN '0-50%' WHEN battery_health_percent > 50 AND battery_health_percent <= 80 THEN '50-80%' ELSE '80-100%' END AS health_range, 10000.0 / AVG(power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage GROUP BY health_range ORDER BY theoretical_runtime_hours DESC;	computer	4
SELECT test_type, AVG(power_consumption_watts) AS avg_power_consumption, 1 AS avg_test_duration, AVG(power_consumption_watts) * 1 AS total_energy_consumption_wh FROM performance_tests GROUP BY test_type ORDER BY total_energy_consumption_wh DESC;	computer	1
SELECT strftime('%Y', test_date) AS test_year, AVG(cpu_score) AS avg_cpu_score, AVG(gpu_score) AS avg_gpu_score, AVG(overall_score) AS avg_overall_score, ABS((AVG(cpu_score) / AVG(gpu_score)) - 1) AS cpu_gpu_score_ratio_difference FROM performance_tests GROUP BY test_year ORDER BY cpu_gpu_score_ratio_difference ASC;	computer	2
SELECT test_type, AVG(temperature_celsius) AS avg_temperature, 1 AS avg_test_duration, AVG(temperature_celsius) / 1 AS temperature_increase_per_hour FROM performance_tests GROUP BY test_type ORDER BY temperature_increase_per_hour DESC;	computer	3
SELECT test_type, (100000 * 0.4 + 100000 * 0.3 + 100000 * 0.2 + 100000 * 0.1) / (AVG(cpu_score) * 0.4 + AVG(gpu_score) * 0.3 + AVG(ram_score) * 0.2 + AVG(storage_score) * 0.1) AS performance_increase_factor FROM performance_tests GROUP BY test_type ORDER BY performance_increase_factor DESC;	computer	4
SELECT manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz FROM computer_info WHERE cpu_base_frequency_ghz > 3.0 AND cpu_max_frequency_ghz < 4.0;	computer	1
SELECT manufacturer, model, ram_size_gb, storage_size_gb FROM computer_info WHERE ram_size_gb > 16 AND storage_size_gb < 512;	computer	2
SELECT manufacturer, model, screen_size_inches, weight_kg FROM computer_info WHERE screen_size_inches > 15 AND weight_kg <= 2.5;	computer	3
SELECT manufacturer, model, 200 AS battery_capacity_wh, cpu_cores FROM computer_info WHERE cpu_cores < 8;	computer	4
SELECT computer_id, power_consumption_watts, usage_duration_hours, (power_consumption_watts * usage_duration_hours) AS total_energy_consumption_wh  FROM usage_records  WHERE power_consumption_watts > 100  AND usage_duration_hours > 2  AND (power_consumption_watts * usage_duration_hours) < 500;	computer	1
SELECT computer_id, cpu_usage_percent, gpu_usage_percent, ABS(cpu_usage_percent - gpu_usage_percent) AS usage_difference FROM usage_records WHERE cpu_usage_percent > 80 AND gpu_usage_percent > 60 AND ABS(cpu_usage_percent - gpu_usage_percent) <= 20;	computer	2
SELECT computer_id, temperature_celsius, usage_duration_hours, (temperature_celsius / usage_duration_hours) AS temperature_increase_per_hour FROM usage_records WHERE temperature_celsius > 70 AND usage_duration_hours > 1 AND (temperature_celsius / usage_duration_hours) < 10;	computer	3
SELECT computer_id, 1000 AS assumed_power_consumption, usage_duration_hours, (1000 * usage_duration_hours) AS total_energy_consumption_wh, temperature_celsius FROM usage_records WHERE (1000 * usage_duration_hours) > 5000 AND temperature_celsius >= 50;	computer	4
SELECT computer_id, battery_health_percent, power_consumption_watts, usage_duration_hours, (power_consumption_watts / usage_duration_hours) AS energy_consumption_per_hour FROM battery_usage WHERE battery_health_percent > 80 AND (power_consumption_watts / usage_duration_hours) <= 50;	computer	1
SELECT computer_id, battery_capacity_wh, battery_health_percent, usage_duration_hours, ((100 - battery_health_percent) / usage_duration_hours) AS health_decay_rate_per_hour FROM battery_usage WHERE battery_capacity_wh > 60 AND ((100 - battery_health_percent) / usage_duration_hours) <= 2;	computer	2
SELECT computer_id, temperature_celsius, usage_duration_hours FROM battery_usage WHERE temperature_celsius > 40 AND usage_duration_hours >= 0.5;	computer	3
SELECT computer_id, 500 AS assumed_battery_capacity, power_consumption_watts, usage_duration_hours, (power_consumption_watts / usage_duration_hours) AS energy_consumption_per_hour, battery_health_percent FROM battery_usage WHERE (power_consumption_watts / usage_duration_hours) > 100 AND battery_health_percent >= 90;	computer	4
SELECT computer_id, power_consumption_watts, 1 AS test_duration_hours, (power_consumption_watts * 1) AS total_energy_consumption_wh FROM performance_tests WHERE power_consumption_watts > 200 AND 1 > 1 AND (power_consumption_watts * 1) < 1000;	computer	1
SELECT computer_id, cpu_score, gpu_score, ram_score, storage_score, (0.4 * cpu_score + 0.3 * gpu_score + 0.2 * ram_score + 0.1 * storage_score) AS overall_score FROM performance_tests WHERE cpu_score > 8000 AND gpu_score > 9000 AND (0.4 * cpu_score + 0.3 * gpu_score + 0.2 * ram_score + 0.1 * storage_score) < 8500;	computer	2
SELECT computer_id, temperature_celsius, 1 AS test_duration_hours, (temperature_celsius / 1) AS temperature_increase_per_hour FROM performance_tests WHERE temperature_celsius > 75 AND 1 > 1 AND (temperature_celsius / 1) < 10;	computer	3
SELECT computer_id, 1000 AS assumed_power_consumption, 1 AS test_duration_hours, (1000 * 1) AS total_energy_consumption_wh, temperature_celsius, (1000 / (temperature_celsius - 25)) AS cooling_efficiency_w_per_c FROM performance_tests WHERE (1000 * 1) > 5000 AND (1000 / (temperature_celsius - 25)) < 20;	computer	4
SELECT ci.computer_id, ci.cpu_base_frequency_ghz, ci.cpu_max_frequency_ghz, ur.cpu_usage_percent, ur.power_consumption_watts, ci.cpu_base_frequency_ghz + (ci.cpu_max_frequency_ghz - ci.cpu_base_frequency_ghz) * (ur.cpu_usage_percent / 100.0) AS actual_frequency_ghz, ur.power_consumption_watts / (ci.cpu_base_frequency_ghz + (ci.cpu_max_frequency_ghz - ci.cpu_base_frequency_ghz) * (ur.cpu_usage_percent / 100.0)) AS power_frequency_ratio FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 80 AND ur.power_consumption_watts = 95;	computer	1
SELECT computer_info.computer_id, ram_size_gb, ram_usage_percent, ram_type, ram_size_gb * (ram_usage_percent / 100) * 25.6 AS current_memory_bandwidth_gbs, ram_size_gb * 25.6 AS max_memory_bandwidth_gbs, (ram_size_gb * (ram_usage_percent / 100) * 25.6) / (ram_size_gb * 25.6) AS memory_bandwidth_usage_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE ram_size_gb = 16 AND ram_usage_percent = 75 AND ram_type = 'DDR4';	computer	2
SELECT computer_info.computer_id, computer_info.battery_capacity_wh, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, CASE WHEN (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 >= 80 THEN '正常' ELSE '不正常' END AS battery_health_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 56 AND battery_usage.usage_duration_hours = 4 AND battery_usage.power_consumption_watts = 14;	computer	3
SELECT computer_info.computer_id, computer_info.cpu_cores, computer_info.cpu_threads, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100.0) AS actual_frequency_ghz, usage_records.power_consumption_watts, usage_records.power_consumption_watts / (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100.0)) AS power_frequency_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_cores = 128 AND computer_info.cpu_threads = 256 AND computer_info.cpu_base_frequency_ghz = 1.0 AND computer_info.cpu_max_frequency_ghz = 10.0 AND usage_records.cpu_usage_percent = 200;	computer	4
SELECT computer_info.computer_id, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, usage_records.power_consumption_watts, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, SQRT(usage_records.power_consumption_watts / (1.25e-8 * (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)))) AS estimated_voltage FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.cpu_usage_percent = 90 AND usage_records.power_consumption_watts = 120 AND computer_info.cpu_base_frequency_ghz = 2.0 AND computer_info.cpu_max_frequency_ghz = 4.5;	computer	1
SELECT computer_info.computer_id, computer_info.ram_size_gb, usage_records.ram_usage_percent, usage_records.power_consumption_watts, computer_info.ram_size_gb * (usage_records.ram_usage_percent / 100.0) * 25.6 AS current_memory_bandwidth_gbs, (computer_info.ram_size_gb * (usage_records.ram_usage_percent / 100.0) * 25.6) / usage_records.power_consumption_watts AS memory_bandwidth_power_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.ram_usage_percent = 80 AND usage_records.power_consumption_watts = 85 AND computer_info.ram_size_gb = 32 AND computer_info.ram_type = 'DDR4';	computer	2
SELECT computer_info.computer_id, computer_info.battery_capacity_wh, usage_records.usage_duration_hours, usage_records.power_consumption_watts, (usage_records.usage_duration_hours * usage_records.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, CASE WHEN (usage_records.usage_duration_hours * usage_records.power_consumption_watts) / computer_info.battery_capacity_wh * 100 >= 80 THEN '正常' ELSE '不正常' END AS battery_health_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.usage_duration_hours = 8 AND usage_records.power_consumption_watts = 60 AND computer_info.battery_capacity_wh = 70;	computer	3
SELECT computer_info.computer_id, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, usage_records.power_consumption_watts, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, SQRT(usage_records.power_consumption_watts / (1.25e-8 * (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)))) AS estimated_voltage FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.cpu_usage_percent = 500 AND usage_records.power_consumption_watts = 1000 AND computer_info.cpu_base_frequency_ghz = 0.5 AND computer_info.cpu_max_frequency_ghz = 20.0;	computer	4
SELECT computer_info.computer_id, computer_info.battery_capacity_wh, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, (battery_usage.usage_duration_hours / (computer_info.battery_capacity_wh / battery_usage.power_consumption_watts)) * 100 AS discharge_efficiency_percent FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.usage_duration_hours = 10 AND battery_usage.power_consumption_watts = 50 AND computer_info.battery_capacity_wh = 60;	computer	1
SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / (battery_usage.battery_health_percent / 100.0) AS actual_battery_capacity_wh FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 85 AND battery_usage.usage_duration_hours = 8 AND battery_usage.power_consumption_watts = 45;	computer	2
SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, computer_info.battery_capacity_wh, CASE WHEN battery_usage.battery_health_percent < 80 THEN '需要更换' ELSE '无需更换' END AS battery_replacement_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 75 AND battery_usage.usage_duration_hours = 6 AND battery_usage.power_consumption_watts = 40;	computer	3
SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, computer_info.battery_capacity_wh, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / (battery_usage.battery_health_percent / 100) AS actual_battery_capacity_wh, CASE WHEN battery_usage.battery_health_percent > 100 THEN '电池可能膨胀或过热' ELSE '电池状态正常' END AS battery_physical_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 200 AND battery_usage.usage_duration_hours = 24 AND battery_usage.power_consumption_watts = 200 AND computer_info.battery_capacity_wh = 100;	computer	4
SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.power_consumption_watts, performance_tests.temperature_celsius, (performance_tests.cpu_score + performance_tests.gpu_score) / performance_tests.power_consumption_watts AS performance_per_watt, (performance_tests.cpu_score + performance_tests.gpu_score) / (performance_tests.power_consumption_watts * (1 + 0.02 * (performance_tests.temperature_celsius - 25))) AS performance_per_watt_with_temperature  FROM computer_info  JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id  WHERE performance_tests.cpu_score = 1200 AND performance_tests.gpu_score = 1500 AND performance_tests.power_consumption_watts = 200 AND performance_tests.temperature_celsius = 75;	computer	1
SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.ram_score, performance_tests.storage_score, performance_tests.overall_score, (performance_tests.cpu_score * 100.0 / performance_tests.overall_score) AS cpu_contribution_percent, (performance_tests.gpu_score * 100.0 / performance_tests.overall_score) AS gpu_contribution_percent, (performance_tests.ram_score * 100.0 / performance_tests.overall_score) AS ram_contribution_percent, (performance_tests.storage_score * 100.0 / performance_tests.overall_score) AS storage_contribution_percent FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 1000 AND performance_tests.gpu_score = 1200 AND performance_tests.ram_score = 800 AND performance_tests.storage_score = 600 AND performance_tests.overall_score = 3600;	computer	2
SELECT computer_info.computer_id, performance_tests.overall_score, performance_tests.temperature_celsius, performance_tests.power_consumption_watts, (performance_tests.power_consumption_watts * 1.0 / performance_tests.temperature_celsius) * 100 AS cooling_efficiency, performance_tests.overall_score * (1 - 0.01 * (performance_tests.temperature_celsius - 25)) AS adjusted_performance_score FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.overall_score = 3000 AND performance_tests.temperature_celsius = 80 AND performance_tests.power_consumption_watts = 180;	computer	3
SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.overall_score, performance_tests.power_consumption_watts, performance_tests.temperature_celsius, (performance_tests.cpu_score + performance_tests.gpu_score) / performance_tests.power_consumption_watts AS performance_per_watt, CASE WHEN performance_tests.temperature_celsius > 150 THEN '硬件可能熔毁或爆炸' ELSE '硬件状态正常' END AS hardware_status FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 10000 AND performance_tests.gpu_score = 15000 AND performance_tests.overall_score = 25000 AND performance_tests.power_consumption_watts = 5000 AND performance_tests.temperature_celsius = 200;	computer	4
WITH TotalPowerConsumption AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          SUM(ur.power_consumption_watts) AS total_power_consumption      FROM computer_info ci      JOIN usage_records ur ON ci.computer_id = ur.computer_id      WHERE ur.cpu_usage_percent = 100          AND ur.gpu_usage_percent = 100          AND ur.ram_usage_percent = 100          AND ur.storage_usage_percent = 100      GROUP BY ci.computer_id, ci.manufacturer, ci.model )  SELECT computer_id, manufacturer, model, total_power_consumption  FROM TotalPowerConsumption  ORDER BY total_power_consumption DESC  LIMIT 5;	computer	1
WITH YearlyEnergyConsumption AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          SUM(ur.power_consumption_watts * ur.usage_duration_hours / 1000) AS total_energy_kwh      FROM computer_info ci      JOIN usage_records ur ON ci.computer_id = ur.computer_id      WHERE ur.usage_date >= date('now', '-1 year')     GROUP BY ci.computer_id, ci.manufacturer, ci.model ) SELECT computer_id, manufacturer, model, total_energy_kwh  FROM YearlyEnergyConsumption  ORDER BY total_energy_kwh DESC  LIMIT 10;	computer	2
WITH LowBatteryHealthComputers AS (     SELECT bu.computer_id, ci.manufacturer, ci.model, bu.battery_health_percent, ci.battery_capacity_wh, bu.usage_duration_hours      FROM battery_usage bu      JOIN computer_info ci ON bu.computer_id = ci.computer_id      WHERE bu.battery_health_percent < 80 ),  AggregatedData AS (     SELECT computer_id, manufacturer, model, battery_health_percent,             AVG(battery_capacity_wh) OVER () AS avg_battery_capacity,             AVG(usage_duration_hours) OVER () AS avg_usage_duration      FROM LowBatteryHealthComputers )  SELECT DISTINCT computer_id, manufacturer, model, battery_health_percent, avg_battery_capacity, avg_usage_duration  FROM AggregatedData  ORDER BY battery_health_percent ASC;	computer	3
WITH ExtremeUsagePower AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          (1000.0 * ci.cpu_base_frequency_ghz / 100) AS cpu_power,          (500.0 * ci.gpu_vram_gb / 100) AS gpu_power,          (200.0 * ci.ram_size_gb / 100) AS ram_power,          (150.0 * ci.storage_size_gb / 100) AS storage_power,          (1000.0 * ci.cpu_base_frequency_ghz / 100 + 500.0 * ci.gpu_vram_gb / 100 + 200.0 * ci.ram_size_gb / 100 + 150.0 * ci.storage_size_gb / 100) AS total_power      FROM computer_info ci )  SELECT computer_id, manufacturer, model, total_power  FROM ExtremeUsagePower  WHERE total_power > 10000  ORDER BY total_power DESC;	computer	4
WITH HeatGeneration AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          SUM(ur.power_consumption_watts * ur.usage_duration_hours * 3600) AS total_heat_joules      FROM          computer_info ci      JOIN          usage_records ur ON ci.computer_id = ur.computer_id      WHERE          ur.cpu_usage_percent = 100          AND ur.gpu_usage_percent = 100          AND ur.ram_usage_percent = 100          AND ur.storage_usage_percent = 100      GROUP BY          ci.computer_id, ci.manufacturer, ci.model )  SELECT      computer_id,      manufacturer,      model,      total_heat_joules  FROM      HeatGeneration  ORDER BY      total_heat_joules DESC  LIMIT 5;	computer	1
WITH YearlyEnergyConsumption AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          SUM(ur.power_consumption_watts * ur.usage_duration_hours / 1000) AS total_energy_kwh      FROM          computer_info ci      JOIN          usage_records ur ON ci.computer_id = ur.computer_id      WHERE          ur.usage_date >= date('now', '-1 year')     GROUP BY          ci.computer_id, ci.manufacturer, ci.model ) SELECT      computer_id,      manufacturer,      model,      total_energy_kwh / 365 AS avg_daily_energy_kwh  FROM      YearlyEnergyConsumption  ORDER BY      avg_daily_energy_kwh DESC  LIMIT 10;	computer	2
WITH OldLowBatteryComputers AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          ci.production_year,          ci.battery_capacity_wh,          bu.usage_duration_hours      FROM computer_info ci      JOIN battery_usage bu ON ci.computer_id = bu.computer_id      WHERE ci.production_year < 2018      AND bu.battery_health_percent < 70 ),  AggregatedData AS (     SELECT          computer_id,          manufacturer,          model,          production_year,          (SELECT AVG(battery_capacity_wh) FROM OldLowBatteryComputers) AS avg_battery_capacity,          (SELECT AVG(usage_duration_hours) FROM OldLowBatteryComputers) AS avg_usage_duration      FROM OldLowBatteryComputers )  SELECT DISTINCT      computer_id,      manufacturer,      model,      production_year,      avg_battery_capacity,      avg_usage_duration  FROM AggregatedData  ORDER BY production_year ASC;	computer	3
WITH TheoreticalMaxPower AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          (200 * ci.cpu_base_frequency_ghz) AS cpu_max_power,          (ci.gpu_vram_gb * 10) AS gpu_power,          (ci.ram_size_gb * 5) AS ram_power,          (ci.storage_size_gb * 2) AS storage_power,          (200 * ci.cpu_base_frequency_ghz + ci.gpu_vram_gb * 10 + ci.ram_size_gb * 5 + ci.storage_size_gb * 2) AS total_max_power      FROM computer_info ci )  SELECT      computer_id,      manufacturer,      model,      total_max_power  FROM TheoreticalMaxPower  WHERE total_max_power > 50000  ORDER BY total_max_power DESC;	computer	4
WITH DischargeRate AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          SUM(ur.power_consumption_watts * ur.usage_duration_hours) AS discharge_rate_wh      FROM          computer_info ci      JOIN          usage_records ur ON ci.computer_id = ur.computer_id      WHERE          ur.cpu_usage_percent = 100          AND ur.gpu_usage_percent = 100          AND ur.ram_usage_percent = 100          AND ur.storage_usage_percent = 100      GROUP BY          ci.computer_id, ci.manufacturer, ci.model )  SELECT      computer_id,      manufacturer,      model,      discharge_rate_wh  FROM      DischargeRate  ORDER BY      discharge_rate_wh DESC  LIMIT 5;	computer	1
WITH YearlyUsage AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          SUM(ur.usage_duration_hours) AS total_usage_hours      FROM computer_info ci      JOIN usage_records ur ON ci.computer_id = ur.computer_id      WHERE ur.usage_date >= date('now', '-1 year')      GROUP BY ci.computer_id, ci.manufacturer, ci.model )  SELECT      computer_id,      manufacturer,      model,      total_usage_hours  FROM YearlyUsage  ORDER BY total_usage_hours DESC  LIMIT 10;	computer	2
WITH OldLowBatteryComputers AS (     SELECT ci.computer_id, ci.manufacturer, ci.model, ci.production_year, ci.battery_capacity_wh, bu.usage_duration_hours      FROM computer_info ci      JOIN battery_usage bu ON ci.computer_id = bu.computer_id      WHERE ci.production_year < 2018 AND bu.battery_health_percent < 70 ),  AggregatedData AS (     SELECT computer_id, manufacturer, model, production_year,             AVG(battery_capacity_wh) OVER () AS avg_battery_capacity,             AVG(usage_duration_hours) OVER () AS avg_usage_duration      FROM OldLowBatteryComputers )  SELECT DISTINCT computer_id, manufacturer, model, production_year, avg_battery_capacity, avg_usage_duration  FROM AggregatedData  ORDER BY production_year ASC;	computer	3
WITH TheoreticalRuntime AS (     SELECT          ci.computer_id,          ci.manufacturer,          ci.model,          ci.battery_capacity_wh,          ur.power_consumption_watts,          (ci.battery_capacity_wh * 1.0 / ur.power_consumption_watts) AS theoretical_runtime_hours      FROM computer_info ci      JOIN usage_records ur ON ci.computer_id = ur.computer_id      WHERE ur.cpu_usage_percent = 100          AND ur.gpu_usage_percent = 100          AND ur.ram_usage_percent = 100          AND ur.storage_usage_percent = 100 )  SELECT      computer_id,      manufacturer,      model,      theoretical_runtime_hours  FROM TheoreticalRuntime  WHERE theoretical_runtime_hours > 1000  ORDER BY theoretical_runtime_hours DESC;	computer	4
SELECT ((1013 - DataValue) / 1013.0) * 100 AS PressureChangePercentage FROM DataCollectionRecord WHERE DataType = '压力' AND CollectorId IN (SELECT Id FROM DataCollector WHERE ElevationMeters = 5000);	DataCollector	1
SELECT (COUNT(CASE WHEN DataValue BETWEEN 20 AND 30 THEN 1 END) * 100.0 / COUNT(*)) AS Probability FROM DataCollectionRecord WHERE DataType = '温度' AND DATE(CollectionTime) = DATE('now');	DataCollector	2
SELECT Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes FROM DataCollector WHERE Status = '维修' AND InstallationLocation = '工厂A';	DataCollector	3
SELECT CollectorId, COUNT(*) AS TotalCollections, SUM(LENGTH(DataValue)) / 1024.0 AS TotalDataSizeKB, (SUM(LENGTH(DataValue)) / 1024.0 / 1024.0 / 1024.0) AS TotalDataSizeGB, CASE WHEN COUNT(*) > 1000000 THEN '不可行：数据量过大' ELSE '可行：数据量在可接受范围内' END AS Feasibility FROM DataCollectionRecord WHERE date(CollectionTime) BETWEEN date('now','-1 year') AND date('now') AND CollectorId IN (SELECT Id FROM DataCollector WHERE CollectorModel = '高频采集器') GROUP BY CollectorId;	DataCollector	4
SELECT DataCollector.Id, DataCollector.InstallationLocation, DataCollector.ElevationMeters, DataCollectionRecord.DataValue AS Temperature, 1013 * POWER(1 - (0.0065 * DataCollector.ElevationMeters) / 288.15, (9.80665 * 0.0289644) / (8.3144598 * 0.0065)) AS Pressure_hPa FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Status = '停机' AND DataCollector.ElevationMeters = 3000 AND DataCollectionRecord.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DataCollector.Id);	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024.0 AS TotalDataSizeMB FROM DataCollector WHERE Status = '运行';	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.ManufactureDate, DataCollector.InstallationDate, DataCollector.Manufacturer, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE Status = '维修' AND InstallationLocation = '化工厂';	DataCollector	3
SELECT Id, CollectorModel, InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024.0 / 1024.0 AS TotalDataSizeTB FROM DataCollector WHERE Status = '运行';	DataCollector	4
SELECT DataCollector.Id, DataCollector.Latitude, DataCollectionRecord.DataValue AS Temperature, (7.2921 * POWER(10, -5)) * 6371000 * COS(RADIANS(DataCollector.Latitude)) AS LinearVelocity_mps FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Latitude = 60 AND DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DataCollector.Id);	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Latitude = 45;	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.Latitude = 30 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 1 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 1 * 60 * 60 * 24 * 365) / 1024.0 / 1024.0 / 1024.0 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Latitude = 90;	DataCollector	4
SELECT DataCollector.Id, DataCollector.Latitude, DataCollectionRecord.DataValue AS Temperature, DEGREES(ASIN(SIN(RADIANS(DataCollector.Latitude)) * SIN(RADIANS(23.44)) + COS(RADIANS(DataCollector.Latitude)) * COS(RADIANS(23.44)) * COS(RADIANS(0)))) AS SolarElevationAngle FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Longitude = 0 AND DataCollectionRecord.DataType = '温度' AND DATE(DataCollectionRecord.CollectionTime) = DATE('now') ORDER BY DataCollectionRecord.CollectionTime DESC LIMIT 1;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Longitude = 120;	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Longitude, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.Longitude = -90 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024.0 / 1024.0 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Longitude = 180;	DataCollector	4
SELECT DataCollector.Id, DataCollector.ElevationMeters, DataCollectionRecord.DataValue AS Pressure_hPa, ((1013.0 - DataCollectionRecord.DataValue) / 1013.0) * 100.0 AS PressureChangePercentage FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.ElevationMeters = 5000 AND DataCollectionRecord.DataType = '压力' ORDER BY DataCollectionRecord.CollectionTime DESC LIMIT 1;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.ElevationMeters = 3000;	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.ElevationMeters = 1000 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024.0 / 1024.0 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.ElevationMeters = 8848;	DataCollector	4
SELECT DataCollector.Id, DataCollectionRecord.DataValue AS Temperature_Celsius, (DataCollectionRecord.DataValue * 9 / 5 + 32) AS Temperature_Fahrenheit  FROM DataCollector  JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId  WHERE DataCollectionRecord.DataType = '温度'  AND DataCollectionRecord.DataUnit = '摄氏度'  AND DataCollectionRecord.DataValue = 25;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '温度' AND DataValue = 30);	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Longitude, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.DataValue = -10 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024.0 / 1024.0 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '温度' AND DataValue = 1000);	DataCollector	4
SELECT DataCollector.Id, DataCollectionRecord.DataValue AS RelativeHumidity, (DataCollectionRecord.DataValue / 100.0 * 3.169 * 1000.0) / (461.5 * 298.15) AS AbsoluteHumidity_gpm3 FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '湿度' AND DataCollectionRecord.DataUnit = '百分比' AND DataCollectionRecord.DataValue = 80;	DataCollector	1
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 60);	DataCollector	2
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Longitude, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '湿度' AND DataCollectionRecord.DataValue = 95 AND DataCollector.Status = '运行';	DataCollector	3
SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024.0 / 1024.0 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 200);	DataCollector	4
SELECT dcr.Id AS RecordId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (dcr.DataValue / 1013.25) AS PressureInAtm, CASE WHEN (dcr.DataValue / 1013.25) > 1 THEN '高压环境，可能影响设备密封性和结构强度' WHEN (dcr.DataValue / 1013.25) < 1 THEN '低压环境，可能影响设备性能' ELSE '标准大气压，设备运行正常' END AS PressureImpact FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa';	DataCollector	1
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.2 AS TotalDataKB, COUNT(dcr.Id) * 0.2 / 1024 AS TotalDataMB, COUNT(dcr.Id) * 0.2 / 1024 / 1024 AS TotalDataGB, CASE WHEN COUNT(dcr.Id) * 0.2 / 1024 / 1024 > 1000 THEN '需要大容量存储设备（如TB级硬盘）' WHEN COUNT(dcr.Id) * 0.2 / 1024 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 500 AND dcr.DataUnit = 'hPa' AND dcr.CollectionTime BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;	DataCollector	2
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dc.ElevationMeters, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 2000 AND dc.Status = '运行' THEN '高压环境（如深海或高压工业设备），可能导致设备密封失效或结构变形' ELSE '环境条件正常' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 2000 AND dc.Status = '运行' THEN '建议定期检查设备密封性和结构强度，确保设备正常运行' ELSE '无需特殊维护' END AS MaintenanceRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 2000 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';	DataCollector	3
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 100000 AND dcr.DataUnit = 'hPa';	DataCollector	4
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = -273.15 AND dcr.DataUnit = '°C' THEN '绝对零度，分子和原子热运动停止' ELSE '非绝对零度' END AS PhysicalMeaning, CASE WHEN dcr.DataValue = -273.15 AND dcr.DataUnit = '°C' THEN '极端低温可能导致设备材料脆化或电子元件失效' ELSE '温度在正常范围内，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = -273.15 AND dcr.DataUnit = '°C';	DataCollector	1
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.5 AS TotalDataKB, COUNT(dcr.Id) * 0.5 / 1024 AS TotalDataMB, CASE WHEN COUNT(dcr.Id) * 0.5 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '湿度' AND dcr.DataValue = 0 AND dcr.DataUnit = '%' AND dcr.CollectionTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;	DataCollector	2
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' THEN '真空环境（如太空或实验室真空室）' ELSE '非真空环境' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' THEN '真空环境可能导致设备散热不良或材料挥发' ELSE '环境条件正常，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';	DataCollector	3
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = -1000 AND dcr.DataUnit = '°C';	DataCollector	4
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (dcr.DataValue + 273.15) AS TemperatureInKelvin, CASE WHEN dcr.DataValue = 1000 THEN '高温可能导致设备内部材料膨胀、电子元件失效或散热系统超负荷运行' ELSE '温度在正常范围内，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = 1000 AND dcr.DataUnit = '°C';	DataCollector	1
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.5 AS TotalDataKB, COUNT(dcr.Id) * 0.5 / 1024 AS TotalDataMB, CASE WHEN COUNT(dcr.Id) * 0.5 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '湿度' AND dcr.DataValue = 100 AND dcr.DataUnit = '%' AND dcr.CollectionTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;	DataCollector	2
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' THEN '海平面环境，可能受到季节性气候变化的影响' ELSE '非海平面环境' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' THEN '建议定期检查设备防护措施，确保设备在极端天气下正常运行' ELSE '环境条件稳定，无需特殊维护' END AS MaintenanceRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';	DataCollector	3
SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit,  (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB,  (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB,  (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024 AS TotalDataGB,  (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024 / 1024 AS TotalDataTB,  (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024 / 1024 / 1024 AS TotalDataPB,  CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024.0 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis  FROM DataCollectionRecord dcr  JOIN DataCollector dc ON dcr.CollectorId = dc.Id  WHERE dcr.DataType = '温度' AND dcr.DataValue = 1000000 AND dcr.DataUnit = '°C';	DataCollector	4
SELECT ((T1.AverageValue - T2.AverageValue) / (DC1.ElevationMeters - DC2.ElevationMeters)) AS TemperatureLapseRate  FROM DataCollector DC1  JOIN DataCollectionRecord T1 ON DC1.Id = T1.CollectorId  JOIN DataCollector DC2 ON DC2.ElevationMeters = DC1.ElevationMeters - 100  JOIN DataCollectionRecord T2 ON DC2.Id = T2.CollectorId  WHERE DC1.ElevationMeters = 3000  AND T1.DataType = '温度'  AND T2.DataType = '温度'  AND T1.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DC1.Id AND DataType = '温度')  AND T2.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DC2.Id AND DataType = '温度');	DataCollector	1
SELECT SUM(DataValue) AS TotalSum, AVG(POWER(DataValue - (SELECT AVG(DataValue) FROM DataCollectionRecord WHERE DataType = '温度' AND CollectorId = DC.Id AND CollectionTime >= datetime('now', '-24 hours')), 2)) AS Variance FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '温度' AND DCR.CollectionTime >= datetime('now', '-24 hours') GROUP BY DC.Id;	DataCollector	2
SELECT DC.InstallationLocation, AVG(DCR.DataValue) AS AverageTemperature, (SELECT AVG(DCR2.DataValue) FROM DataCollectionRecord DCR2 JOIN DataCollector DC2 ON DCR2.CollectorId = DC2.Id WHERE DC2.InstallationLocation LIKE '%郊区%' AND DCR2.DataType = '温度') AS SuburbAverageTemperature FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DC.InstallationLocation LIKE '%市中心%' AND DCR.DataType = '温度' GROUP BY DC.InstallationLocation;	DataCollector	3
SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN MAX(DCR.DataValue) >= 1500 THEN '采集器可能损坏' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '温度' AND DCR.CollectionTime BETWEEN datetime('now','-1 year') AND datetime('now') GROUP BY DC.Id;	DataCollector	4
SELECT AVG(DCR.DataValue) AS AverageValue, AVG(DCR.DataValue) - (1.96 * (1.0 / SQRT(COUNT(DCR.DataValue)))) AS LowerBound, AVG(DCR.DataValue) + (1.96 * (1.0 / SQRT(COUNT(DCR.DataValue)))) AS UpperBound FROM DataCollectionRecord DCR WHERE DCR.DataType = '温度' AND DCR.DataAccuracy = 95 GROUP BY DCR.CollectorId;	DataCollector	1
SELECT SUM(DCR.DataValue) AS TotalSum,         STDEV(DCR.DataValue) / SQRT(COUNT(DCR.DataValue)) AS StandardError  FROM DataCollectionRecord DCR  WHERE DCR.DataType = '湿度'    AND DCR.DataAccuracy = 98    AND DCR.CollectionTime BETWEEN datetime('now', '-24 hours') AND datetime('now')  GROUP BY DCR.CollectorId;	DataCollector	2
SELECT DCR.AverageValue, DC.ElevationMeters, DCR.DataAccuracy FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCR.DataAccuracy = 99 AND DC.ElevationMeters = 0;	DataCollector	3
SELECT SUM(DCR.DataValue) AS TotalSum,         CASE WHEN MAX(DCR.DataAccuracy) > 100 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status  FROM DataCollectionRecord DCR  WHERE DCR.DataType = '湿度'    AND DCR.CollectionTime BETWEEN datetime('now','-1 year') AND datetime('now')  GROUP BY DCR.CollectorId;	DataCollector	4
SELECT (1.0 - (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataValue <= 100 AND DataType = '温度') / CAST((SELECT COUNT(*) FROM DataCollectionRecord WHERE DataType = '温度') AS REAL)) AS ExceedProbability FROM DataCollectionRule DCR WHERE DCR.DataType = '温度' AND DCR.ThresholdValue = 100;	DataCollector	1
SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, (DCRec.DataValue - 75) / 3 AS ZScore  FROM DataCollectionRecord DCRec  JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType  WHERE DCRec.DataType = '湿度'  AND DCR.ThresholdValue = 80  AND DCRec.CollectionTime BETWEEN datetime('now', '-24 hours') AND datetime('now')  GROUP BY DCRec.DataValue;	DataCollector	2
SELECT DCRec.AverageValue, DC.ElevationMeters  FROM DataCollectionRecord DCRec  JOIN DataCollector DC ON DCRec.CollectorId = DC.Id  JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType  WHERE DCRec.DataType = '压力'  AND DCR.ThresholdValue = 110  AND DC.ElevationMeters = 500;	DataCollector	3
SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount,         CASE WHEN SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) > 0              THEN '采集器可能失效'              ELSE '采集器正常工作' END AS Status  FROM DataCollectionRecord DCRec  JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType  WHERE DCRec.DataType = '温度'    AND DCR.ThresholdValue = 1000    AND DCRec.CollectionTime BETWEEN datetime('now', '-1 year') AND datetime('now');	DataCollector	4
SELECT (1.0 - (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataValue > 30 AND DataType = '温度') * 1.0 / (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataType = '温度')) AS ExceedProbability FROM DataCollectionRule WHERE DataType = '温度' AND ThresholdValue = 30 AND ConditionOperator = '>';	DataCollector	1
SELECT SUM(CASE WHEN DCRec.DataValue < 60 THEN 1 ELSE 0 END) AS BelowCount, (DCRec.DataValue - 65) / 3 AS ZScore FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '湿度' AND DCR.ThresholdValue = 60 AND DCR.ConditionOperator = '<' AND DCRec.CollectionTime BETWEEN datetime('now', '-24 hours') AND datetime('now') GROUP BY DCRec.DataValue;	DataCollector	2
SELECT DCRec.AverageValue, DC.ElevationMeters  FROM DataCollectionRecord DCRec  JOIN DataCollector DC ON DCRec.CollectorId = DC.Id  JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType  WHERE DCRec.DataType = '压力'  AND DCR.ThresholdValue = 101.3  AND DCR.ConditionOperator = '='  AND DC.ElevationMeters = 0;	DataCollector	3
SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '温度' AND DCR.ThresholdValue = 1000 AND DCR.ConditionOperator = '>' AND DCRec.CollectionTime BETWEEN datetime('now', '-1 year') AND datetime('now');	DataCollector	4
SELECT COUNT(*) AS TotalCount, 2.0 / SQRT(COUNT(*)) AS StandardError  FROM DataCollectionRecord DCR  JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType  WHERE DCR.DataType = '温度'  AND DCRule.CollectionFrequency = '每分钟'  AND DCR.CollectionTime BETWEEN datetime('now', '-1 day') AND datetime('now');	DataCollector	1
SELECT SUM(DCR.DataValue) AS TotalSum, AVG(POWER(DCR.DataValue - 60, 2)) AS Variance  FROM DataCollectionRecord DCR  JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType  WHERE DCR.DataType = '湿度'  AND DCRule.CollectionFrequency = '每小时'  AND DCR.CollectionTime BETWEEN datetime('now', '-30 days') AND datetime('now');	DataCollector	2
SELECT DCRule.CollectionFrequency, AVG(DCR.DataValue) AS AveragePressure, STDEV(DCR.DataValue) AS StandardDeviation  FROM DataCollectionRecord DCR  JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType  JOIN DataCollector DC ON DCR.CollectorId = DC.Id  WHERE DCR.DataType = '压力'  AND DCRule.CollectionFrequency = '每分钟'  AND DC.ElevationMeters = 0;	DataCollector	3
SELECT SUM(DCR.DataValue) AS TotalSum,         CASE             WHEN DCRule.CollectionFrequency = '每秒' AND COUNT(*) > 31536000             THEN '采集器可能失效'             ELSE '采集器正常工作'         END AS Status  FROM DataCollectionRecord DCR  JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType  WHERE DCR.DataType = '温度'    AND DCR.CollectionTime BETWEEN datetime('now', '-1 year') AND datetime('now') GROUP BY DCRule.CollectionFrequency;	DataCollector	4
SELECT AVG(DCR.DataValue) AS AverageValue, AVG(DCR.DataValue) - (1.96 * (2.0 / SQRT(COUNT(*)))) AS LowerBound, AVG(DCR.DataValue) + (1.96 * (2.0 / SQRT(COUNT(*)))) AS UpperBound, CASE WHEN MAX(DCR.DataValue) > DCRule.ThresholdValue THEN '需要发送通知' ELSE '无需发送通知' END AS NotificationStatus FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.ActionType = '通知' GROUP BY DCRule.ThresholdValue;	DataCollector	1
SELECT SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount,         (DCR.DataValue - 70) / 3 AS ZScore  FROM DataCollectionRecord DCR  JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType  WHERE DCR.DataType = '湿度'    AND DCRule.ActionType = '处理'    AND DCR.CollectionTime BETWEEN datetime('now', '-24 hours') AND datetime('now') GROUP BY DCR.DataValue;	DataCollector	2
SELECT AVG(DCR.DataValue) AS AveragePressure, DCRule.ThresholdValue, CASE WHEN AVG(DCR.DataValue) BETWEEN 101.3 - 0.5 AND 101.3 + 0.5 THEN '无需发送通知' ELSE '需要发送通知' END AS NotificationStatus FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCRule.ActionType = '通知' AND DC.ElevationMeters = 0 GROUP BY DCRule.ThresholdValue;	DataCollector	3
SELECT SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.ActionType = '处理' AND DCR.CollectionTime BETWEEN datetime('now', '-1 year') AND datetime('now');	DataCollector	4
SELECT 1.225 * 50 AS Mass, 1.225 * 50 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '公众' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '政府' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%' AND DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '企业' AND DCNR.NotificationContent LIKE '%压力数据超出阈值110kPa%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '公众' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%' AND DCNR.NotificationMethod = '广播';	DataCollector	4
SELECT DCNR.RecipientCount * (1.225 * 50 * 1.005 * (30 - 25)) AS TotalHeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '农业生产者' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT 1.225 * 10000 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '邮件' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost,         CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus  FROM DataCollectionNotificationRecord DCNR  WHERE DCNR.NotificationMethod = '广播'    AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT 1.225 * 10000 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '成功' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '失败' AND DCNR.NotificationMethod = '短信';	DataCollector	2
SELECT DCNR.NotificationContent, DCNR.RecipientType  FROM DataCollectionNotificationRecord DCNR  WHERE DCNR.NotificationStatus = '成功'  AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	3
SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '失败' AND DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT (strftime('%s', AcknowledgedTime) - strftime('%s', NotificationTime)) AS TimeDifferenceInSeconds, (1.225 * 10000) * 1.005 * (30 - 25) AS HeatRequiredInKJ FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT RecipientCount * 0.01 AS TotalCost, RecipientCount * 0.95 AS SuccessfullySentCount FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	2
SELECT NotificationContent, AcknowledgedTime FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%压力数据超出阈值110kPa%';	DataCollector	3
SELECT RecipientCount * 10000 AS TotalCost, CASE WHEN RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '9999-12-31 23:59:59' AND NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT (strftime('%s', dcn.NotificationTime) - strftime('%s', dc.CollectionTime)) AS TimeDifferenceInSeconds, (1.225 * 10000) * 1.005 * (30 - 25) AS HeatRequiredInKJ FROM DataCollectionNotificationRecord dcn JOIN DataCollectionRecord dc ON dcn.TriggerId = dc.Id WHERE dcn.NotificationTime = '2023-10-01 12:00:00' AND dcn.NotificationContent LIKE '%温度数据超出阈值30°C%';	DataCollector	1
SELECT RecipientCount * 0.01 AS TotalCost, RecipientCount * 0.95 AS SuccessfullySentCount  FROM DataCollectionNotificationRecord  WHERE NotificationTime = '2023-10-01 12:00:00'  AND NotificationContent LIKE '%湿度数据超出阈值80%';	DataCollector	2
SELECT NotificationContent, NotificationTime FROM DataCollectionNotificationRecord WHERE NotificationTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%压力数据超出阈值110kPa%';	DataCollector	3
SELECT RecipientCount * 10000 AS TotalCost, CASE WHEN RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord WHERE NotificationTime = '9999-12-31 23:59:59' AND NotificationContent LIKE '%温度数据超出阈值1000°C%';	DataCollector	4
SELECT Headphone_Id, Sound_Pressure_Level_Db, Sensitivity_Db, (Sound_Pressure_Level_Db * Sensitivity_Db) AS Product FROM audio_data ORDER BY Product ASC;	earphone	1
SELECT Headphone_Id, Total_Harmonic_Distortion_Percent, Impedance_Ohms, (Total_Harmonic_Distortion_Percent / Impedance_Ohms) AS Distortion_Impedance_Ratio FROM audio_data ORDER BY Distortion_Impedance_Ratio DESC LIMIT 10;	earphone	2
SELECT Headphone_Id, Battery_Life_Hours, Weight_Grams, (Battery_Life_Hours / Weight_Grams) AS Battery_Weight_Ratio FROM headphones WHERE Is_Wireless = 1 ORDER BY Battery_Weight_Ratio ASC;	earphone	3
SELECT Headphone_Id, Sound_Pressure_Level_Db, 100000 AS Max_Input_Power_Mw, (Sound_Pressure_Level_Db / 100000.0) AS Sound_Power_Ratio  FROM audio_data  ORDER BY Sound_Power_Ratio DESC  LIMIT 5;	earphone	4
SELECT Headphone_Id, Sensitivity_Db, Impedance_Ohms, (Sensitivity_Db / Impedance_Ohms) AS Sensitivity_Impedance_Ratio  FROM audio_data  ORDER BY Sensitivity_Impedance_Ratio DESC  LIMIT 10;	earphone	1
SELECT Headphone_Id, Weight_Grams, Battery_Life_Hours, (Weight_Grams * Battery_Life_Hours) AS Weight_Battery_Product FROM headphones ORDER BY Weight_Battery_Product ASC LIMIT 5;	earphone	2
SELECT Headphone_Id, Model, Price_Usd FROM headphones WHERE Noise_Cancellation = 1 AND Microphone = 1 ORDER BY Price_Usd ASC LIMIT 5;	earphone	3
SELECT Headphone_Id, Battery_Life_Hours, 10000 AS Weight_Grams, (Battery_Life_Hours / 10000.0) AS Battery_Weight_Ratio FROM headphones ORDER BY Battery_Weight_Ratio DESC LIMIT 5;	earphone	4
SELECT Manufacturer_Id, Manufacturer_Name, (Revenue_Usd / Employees) AS Revenue_Per_Employee  FROM manufacturers  ORDER BY Revenue_Per_Employee DESC  LIMIT 5;	earphone	1
SELECT Manufacturer_Id, Manufacturer_Name, (Profit_Usd * Market_Share_Percent) AS Profit_Market_Index FROM manufacturers ORDER BY Profit_Market_Index DESC LIMIT 10;	earphone	2
SELECT Manufacturer_Id, Manufacturer_Name, Founded_Year FROM manufacturers ORDER BY Founded_Year ASC LIMIT 3;	earphone	3
SELECT Manufacturer_Id, Manufacturer_Name, (Revenue_Usd / 1000000.0) AS Extreme_Revenue_Per_Employee  FROM manufacturers  ORDER BY Extreme_Revenue_Per_Employee DESC  LIMIT 5;	earphone	4
SELECT Record_Id, Headphone_Id, User_Id, (Battery_Consumed_Percent / Usage_Duration_Minutes) AS Battery_Consumption_Rate FROM usage_records ORDER BY Battery_Consumption_Rate DESC LIMIT 10;	earphone	1
SELECT Record_Id, Headphone_Id, User_Id, (POWER(Volume_Level_Percent, 2) * Usage_Duration_Minutes) AS Volume_Energy_Index FROM usage_records ORDER BY Volume_Energy_Index DESC LIMIT 5;	earphone	2
SELECT Record_Id, Headphone_Id, User_Id, Usage_Duration_Minutes, Battery_Consumed_Percent, Noise_Cancellation_Used FROM usage_records WHERE Noise_Cancellation_Used = 1 AND Battery_Consumed_Percent > 50 ORDER BY Usage_Duration_Minutes ASC LIMIT 3;	earphone	3
SELECT Record_Id, Headphone_Id, User_Id, (SUM(Battery_Consumed_Percent) * 1000000 / Usage_Duration_Minutes) AS Total_Battery_Consumption FROM usage_records GROUP BY Record_Id, Headphone_Id, User_Id ORDER BY Total_Battery_Consumption DESC;	earphone	4
SELECT Headphone_Id, AVG(Battery_Consumed_Percent / (Usage_Duration_Minutes / 60.0)) AS Average_Power_Consumption  FROM usage_records  GROUP BY Headphone_Id  ORDER BY Average_Power_Consumption DESC;	earphone	1
SELECT User_Id, AVG(2.0 / (1.0 / Audio_Quality_Rating + 1.0 / Comfort_Rating)) AS Harmonic_Mean  FROM usage_records  WHERE Audio_Quality_Rating > 0 AND Comfort_Rating > 0  GROUP BY User_Id  ORDER BY Harmonic_Mean DESC  LIMIT 5;	earphone	2
SELECT Headphone_Id, Noise_Cancellation_Used, AVG(Battery_Consumed_Percent) AS Avg_Battery_Consumed_Percent FROM usage_records GROUP BY Headphone_Id, Noise_Cancellation_Used ORDER BY Avg_Battery_Consumed_Percent ASC;	earphone	3
SELECT User_Id, SUM(Battery_Consumed_Percent * POWER(1000.0 / 100, 3)) AS Theoretical_Power_Consumption FROM usage_records GROUP BY User_Id ORDER BY Theoretical_Power_Consumption DESC;	earphone	4
SELECT Country, SUM(Profit_Usd) / (SUM(Employees) * 1000.0) AS Profit_Density FROM manufacturers GROUP BY Country ORDER BY Profit_Density DESC;	earphone	1
SELECT Founded_Year, SQRT(SUM(Profit_Usd * Market_Share_Percent)) AS Profit_Market_Index FROM manufacturers GROUP BY Founded_Year ORDER BY Profit_Market_Index DESC LIMIT 10;	earphone	2
SELECT Country, COUNT(*) AS Manufacturer_Count FROM manufacturers WHERE (2023 - Founded_Year) > 50 GROUP BY Country ORDER BY Manufacturer_Count DESC;	earphone	3
SELECT Country, SUM(Revenue_Usd) / 1000000000 AS Theoretical_Per_Capita_Output FROM manufacturers GROUP BY Country ORDER BY Theoretical_Per_Capita_Output ASC;	earphone	4
SELECT Driver_Type, AVG(Impedance_Ohms / Sensitivity_Db) AS Impedance_Sensitivity_Ratio FROM headphones GROUP BY Driver_Type ORDER BY Impedance_Sensitivity_Ratio ASC;	earphone	1
SELECT (h.Price_Usd / 100) AS price_range, SQRT(AVG(a.Sound_Pressure_Level_Db * a.Total_Harmonic_Distortion_Percent)) AS geometric_mean FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id GROUP BY price_range ORDER BY geometric_mean DESC;	earphone	2
SELECT Is_Wireless, AVG(Weight_Grams / Battery_Life_Hours) AS weight_to_battery_ratio FROM headphones GROUP BY Is_Wireless ORDER BY weight_to_battery_ratio ASC;	earphone	3
SELECT Water_Resistance, AVG(1000000.0 / Weight_Grams) AS price_per_gram FROM headphones GROUP BY Water_Resistance ORDER BY price_per_gram DESC;	earphone	4
SELECT Driver_Type, AVG(Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)) AS max_sound_pressure_level FROM audio_data GROUP BY Driver_Type ORDER BY max_sound_pressure_level DESC;	earphone	1
SELECT Bluetooth_Version, (LOG10(AVG(CAST(SUBSTR(Frequency_Response_Hz, INSTR(Frequency_Response_Hz, '-') + 1) AS REAL) / CAST(SUBSTR(Frequency_Response_Hz, 1, INSTR(Frequency_Response_Hz, '-') - 1) AS REAL))) * AVG(Total_Harmonic_Distortion_Percent)) AS quality_metric FROM audio_data GROUP BY Bluetooth_Version ORDER BY quality_metric ASC;	earphone	2
SELECT Audio_Codec, AVG(Audio_Quality_Rating) AS avg_audio_quality FROM usage_records JOIN audio_data ON usage_records.Headphone_Id = audio_data.Headphone_Id GROUP BY Audio_Codec ORDER BY avg_audio_quality DESC;	earphone	3
SELECT Driver_Type, AVG(Total_Harmonic_Distortion_Percent / 0.0000001) AS improvement_factor FROM audio_data GROUP BY Driver_Type ORDER BY improvement_factor DESC;	earphone	4
SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (     SELECT Headphone_Id     FROM audio_data     WHERE Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw) > 120 ) AND Headphone_Id NOT IN (     SELECT Headphone_Id     FROM audio_data     WHERE Sound_Pressure_Level_Db >= 120 );	earphone	1
SELECT Headphone_Id, Model  FROM headphones  WHERE Headphone_Id IN (     SELECT Headphone_Id      FROM audio_data      WHERE LOG10(CAST(SUBSTR(Frequency_Response_Hz, INSTR(Frequency_Response_Hz, '-') + 1) AS REAL) / CAST(SUBSTR(Frequency_Response_Hz, 1, INSTR(Frequency_Response_Hz, '-') - 1) AS REAL)) * Total_Harmonic_Distortion_Percent > 5 )  AND Headphone_Id NOT IN (     SELECT Headphone_Id      FROM usage_records      WHERE Audio_Quality_Rating >= 4 );	earphone	2
SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE CAST(SUBSTR(Bluetooth_Version, 1, INSTR(Bluetooth_Version || '.', '.') - 1) AS INTEGER) * 10 + CAST(SUBSTR(Bluetooth_Version, INSTR(Bluetooth_Version, '.') + 1) AS INTEGER) >= 50) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Audio_Codec = 'LDAC');	earphone	3
SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE Total_Harmonic_Distortion_Percent / 0.0000001 > 100000000) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM headphones WHERE Price_Usd >= 100);	earphone	4
SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level_Db - Sensitivity_Db) / 10)) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Impedance_Ohms BETWEEN 16 AND 64);	earphone	1
SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE CAST(SUBSTR(Frequency_Response_Hz, 1, INSTR(Frequency_Response_Hz, '-') - 1) AS REAL) <= 20 AND CAST(SUBSTR(Frequency_Response_Hz, INSTR(Frequency_Response_Hz, '-') + 1) AS REAL) >= 20000) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Total_Harmonic_Distortion_Percent >= 1 / (SELECT AVG(Audio_Quality_Rating) FROM usage_records WHERE usage_records.Headphone_Id = audio_data.Headphone_Id));	earphone	2
SELECT Headphone_Id, Model FROM headphones WHERE Is_Wireless = 1 AND Headphone_Id NOT IN (SELECT Headphone_Id FROM headphones WHERE Battery_Life_Hours >= Weight_Grams / 100);	earphone	3
SELECT Headphone_Id, Model FROM headphones WHERE Water_Resistance = 'IPX7' AND Headphone_Id NOT IN (SELECT Headphone_Id FROM headphones WHERE Price_Usd >= 1000000);	earphone	4
SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE (Profit_Usd / Employees) >= 50000 AND Manufacturer_Id NOT IN (SELECT Manufacturer_Id FROM manufacturers WHERE (Profit_Usd / Revenue_Usd) * 100 >= 15);	earphone	1
SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE (POWER(Founded_Year, 2) * Market_Share_Percent) > 1000000 AND Manufacturer_Id NOT IN (SELECT Manufacturer_Id FROM manufacturers WHERE Employees >= 1000);	earphone	2
SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE (2023 - Founded_Year) > 30 AND Manufacturer_Id NOT IN (SELECT Manufacturer_Id FROM manufacturers WHERE Market_Share_Percent >= 5);	earphone	3
SELECT Manufacturer_Id, Manufacturer_Name  FROM manufacturers  WHERE Employees > 1000000 AND (1000000000000.0 / Employees) < 10;	earphone	4
SELECT Record_Id, Headphone_Id FROM usage_records  WHERE Battery_Consumed_Percent = Usage_Duration_Minutes * 0.8  AND Record_Id NOT IN (SELECT Record_Id FROM usage_records WHERE Usage_Duration_Minutes BETWEEN 30 AND 600);	earphone	1
SELECT Record_Id, Headphone_Id, User_Id  FROM usage_records  WHERE (Volume_Level_Percent * Volume_Level_Percent) * Usage_Duration_Minutes > 100000  AND Audio_Quality_Rating < 3;	earphone	2
SELECT Record_Id, Headphone_Id, User_Id FROM usage_records WHERE Noise_Cancellation_Used = 1 AND Battery_Consumed_Percent <= Usage_Duration_Minutes * 0.5;	earphone	3
SELECT Record_Id, Headphone_Id, User_Id FROM usage_records WHERE Battery_Consumed_Percent * POWER(1000.0/NULLIF(Volume_Level_Percent,0), 3) > 1000 AND Battery_Consumed_Percent < 1000;	earphone	4
SELECT a.Headphone_Id, h.Model, a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw) AS Max_SPL_Db  FROM audio_data a  JOIN headphones h ON a.Headphone_Id = h.Headphone_Id  ORDER BY Max_SPL_Db DESC  LIMIT 10;	earphone	1
SELECT Audio_Id, Headphone_Id,         LOG10(CAST(SUBSTR(Frequency_Response_Hz, INSTR(Frequency_Response_Hz, '-') + 1) AS REAL) /               CAST(SUBSTR(Frequency_Response_Hz, 1, INSTR(Frequency_Response_Hz, '-') - 1) AS REAL)) *         Total_Harmonic_Distortion_Percent AS Metric  FROM audio_data  ORDER BY Metric ASC  LIMIT 5;	earphone	2
SELECT Bluetooth_Version, AVG(Audio_Quality_Rating) AS Avg_Audio_Quality_Rating FROM audio_data JOIN usage_records ON audio_data.Headphone_Id = usage_records.Headphone_Id WHERE Audio_Codec = 'LDAC' GROUP BY Bluetooth_Version ORDER BY Avg_Audio_Quality_Rating DESC;	earphone	3
SELECT audio_data.Headphone_Id, headphones.Model, audio_data.Sensitivity_Db + 10 * LOG10(audio_data.Max_Input_Power_Mw) AS Max_SPL_Db FROM audio_data JOIN headphones ON audio_data.Headphone_Id = headphones.Headphone_Id ORDER BY Max_SPL_Db DESC LIMIT 10;	earphone	4
SELECT Headphone_Id, Model, Sensitivity_Db / SQRT(Impedance_Ohms) AS Efficiency_Ratio FROM headphones ORDER BY Efficiency_Ratio DESC LIMIT 5;	earphone	1
SELECT Audio_Id, Headphone_Id,         (CAST(SUBSTR(Frequency_Response_Hz, INSTR(Frequency_Response_Hz, '-') + 1) AS REAL) -          CAST(SUBSTR(Frequency_Response_Hz, 1, INSTR(Frequency_Response_Hz, '-') - 1) AS REAL)) *          Total_Harmonic_Distortion_Percent AS Metric  FROM audio_data  ORDER BY Metric DESC  LIMIT 10;	earphone	2
SELECT Headphone_Id, Model, Battery_Life_Hours / Weight_Grams AS Battery_Density FROM headphones WHERE Is_Wireless = 1 ORDER BY Battery_Density ASC LIMIT 5;	earphone	3
SELECT Headphone_Id, Model, 1000000 / NULLIF(Weight_Grams, 0) AS Price_Per_Gram FROM headphones ORDER BY Price_Per_Gram DESC LIMIT 3;	earphone	4
SELECT Manufacturer_Id, Manufacturer_Name, Revenue_Usd / (Employees * 1000) AS Revenue_Density FROM manufacturers ORDER BY Revenue_Density DESC LIMIT 5;	earphone	1
SELECT Manufacturer_Id, Manufacturer_Name, SQRT(Profit_Usd * Market_Share_Percent) AS Geometric_Mean FROM manufacturers ORDER BY Geometric_Mean DESC LIMIT 10;	earphone	2
SELECT Manufacturer_Id, Manufacturer_Name, Founded_Year, Market_Share_Percent FROM manufacturers WHERE Founded_Year < 1973 AND Market_Share_Percent < 5 ORDER BY Founded_Year ASC;	earphone	3
SELECT Manufacturer_Id, Manufacturer_Name, 1000000000000 / NULLIF(Employees, 0) AS Per_Capita_Revenue FROM manufacturers WHERE Employees > 100000000 ORDER BY Per_Capita_Revenue ASC;	earphone	4
SELECT Audio_Id, Headphone_Id, Sound_Pressure_Level_Db * Sensitivity_Db AS Product FROM audio_data ORDER BY Product ASC;	earphone	1
SELECT Record_Id, Headphone_Id, (2.0 / (1.0 / Audio_Quality_Rating + 1.0 / Comfort_Rating)) * Usage_Duration_Minutes AS Experience_Index FROM usage_records ORDER BY Experience_Index DESC;	earphone	2
SELECT Record_Id, Headphone_Id, Usage_Duration_Minutes, Volume_Level_Percent, Battery_Consumed_Percent FROM usage_records WHERE Volume_Level_Percent > 80 AND Battery_Consumed_Percent < Usage_Duration_Minutes * 1 ORDER BY Usage_Duration_Minutes ASC LIMIT 5;	earphone	3
SELECT Headphone_Id, (Battery_Consumed_Percent * 1000000 / NULLIF(Usage_Duration_Minutes, 0)) AS Theoretical_Power_Consumption FROM usage_records ORDER BY Theoretical_Power_Consumption DESC LIMIT 3;	earphone	4
SELECT User_Id, AVG(Battery_Consumed_Percent / NULLIF(Usage_Duration_Minutes, 0)) AS Energy_Consumption_Rate FROM usage_records GROUP BY User_Id ORDER BY Energy_Consumption_Rate DESC;	earphone	1
SELECT Headphone_Id, (2.0 / (1.0 / AVG(Audio_Quality_Rating) + 1.0 / AVG(Comfort_Rating))) * COUNT(*) AS Composite_Index  FROM usage_records  GROUP BY Headphone_Id  ORDER BY Composite_Index DESC;	earphone	2
SELECT Headphone_Id,         CAST(SUM(CASE WHEN Noise_Cancellation_Used = 1 AND Volume_Level_Percent > 85 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS Noise_Cancellation_Ratio  FROM usage_records  GROUP BY Headphone_Id  ORDER BY Noise_Cancellation_Ratio ASC;	earphone	3
SELECT User_Id, SUM(Battery_Consumed_Percent) * 100000000 / NULLIF(SUM(Usage_Duration_Minutes), 0) AS Lifetime_Power_Consumption FROM usage_records GROUP BY User_Id ORDER BY Lifetime_Power_Consumption DESC;	earphone	4
SELECT Country, SUM(Revenue_Usd) / (SUM(Employees) * 1000) AS Energy_Density FROM manufacturers GROUP BY Country ORDER BY Energy_Density DESC;	earphone	1
SELECT (Founded_Year / 10) * 10 AS Decade, AVG(SQRT(Profit_Usd * Market_Share_Percent)) AS Geometric_Mean FROM manufacturers WHERE Profit_Usd > 0 AND Market_Share_Percent > 0 GROUP BY Decade ORDER BY Geometric_Mean DESC;	earphone	2
SELECT Country, COUNT(*) AS Manufacturer_Count FROM manufacturers WHERE (2023 - Founded_Year) > 30 AND (Profit_Usd / Revenue_Usd) < 0.1 GROUP BY Country ORDER BY Manufacturer_Count ASC;	earphone	3
SELECT Country, (1000000000000.0 / NULLIF(SUM(Employees), 0)) AS Theoretical_Per_Capita_Output FROM manufacturers WHERE Employees > 100000000 GROUP BY Country ORDER BY Theoretical_Per_Capita_Output ASC;	earphone	4
SELECT Driver_Type, AVG(Sensitivity_Db / SQRT(Impedance_Ohms)) AS Efficiency_Indicator  FROM headphones  WHERE Impedance_Ohms > 0  GROUP BY Driver_Type  ORDER BY Efficiency_Indicator DESC;	earphone	1
SELECT Manufacturer_Id, AVG(Price_Usd) * (AVG(CAST(substr(Frequency_Response_Hz, instr(Frequency_Response_Hz, '-') + 1) AS REAL)) - AVG(CAST(substr(Frequency_Response_Hz, 1, instr(Frequency_Response_Hz, '-') - 1) AS REAL))) AS Composite_Indicator FROM headphones GROUP BY Manufacturer_Id ORDER BY Composite_Indicator DESC;	earphone	2
SELECT Is_Wireless, AVG(Battery_Life_Hours) / AVG(Weight_Grams) AS Battery_Efficiency  FROM headphones  GROUP BY Is_Wireless  ORDER BY Battery_Efficiency ASC;	earphone	3
SELECT Water_Resistance, 1000000.0 / NULLIF(AVG(Weight_Grams), 0) AS Price_Per_Gram FROM headphones GROUP BY Water_Resistance ORDER BY Price_Per_Gram DESC;	earphone	4
SELECT Driver_Type, POWER(10, AVG(Sensitivity_Db) / 10.0) * POWER(10, AVG(Sensitivity_Db) / 10.0) / AVG(Impedance_Ohms) AS Power FROM headphones WHERE Impedance_Ohms > 0 GROUP BY Driver_Type ORDER BY Power DESC;	earphone	1
SELECT Bluetooth_Version, SQRT(AVG(LOG10(CAST(substr(Frequency_Response_Hz, instr(Frequency_Response_Hz, '-') + 1) AS REAL) / CAST(substr(Frequency_Response_Hz, 1, instr(Frequency_Response_Hz, '-') - 1) AS REAL))) * AVG(Total_Harmonic_Distortion_Percent)) AS Metric FROM audio_data WHERE Frequency_Response_Hz LIKE '%-%' AND Total_Harmonic_Distortion_Percent > 0 GROUP BY Bluetooth_Version ORDER BY Metric DESC;	earphone	2
SELECT Audio_Jack_Type, SUM(CASE WHEN Audio_Codec IN ('LDAC', 'AAC') THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS High_Quality_Codec_Ratio FROM audio_data GROUP BY Audio_Jack_Type ORDER BY High_Quality_Codec_Ratio DESC;	earphone	3
SELECT h.Manufacturer_Id, AVG(a.Total_Harmonic_Distortion_Percent) / 0.0000000001 AS Improvement_Factor  FROM audio_data a  JOIN headphones h ON a.Headphone_Id = h.Headphone_Id  GROUP BY h.Manufacturer_Id  ORDER BY Improvement_Factor DESC  LIMIT 5;	earphone	4
SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE a.Sensitivity_Db + 10 * LOG(10, a.Max_Input_Power_Mw) > 120 AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Sound_Pressure_Level_Db >= 120);	earphone	1
SELECT h.Headphone_Id, h.Model  FROM headphones h  JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id  WHERE (LOG10(CAST(SUBSTR(a.Frequency_Response_Hz, INSTR(a.Frequency_Response_Hz, '-') + 1) AS REAL) / CAST(SUBSTR(a.Frequency_Response_Hz, 1, INSTR(a.Frequency_Response_Hz, '-') - 1) AS REAL)) * a.Total_Harmonic_Distortion_Percent) > 5  AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM usage_records WHERE Audio_Quality_Rating >= 4);	earphone	2
SELECT h.Headphone_Id, h.Model  FROM headphones h  JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id  WHERE (CAST(SUBSTR(a.Bluetooth_Version, 1, INSTR(a.Bluetooth_Version, '.')-1) AS INTEGER) * 10 + CAST(SUBSTR(a.Bluetooth_Version, INSTR(a.Bluetooth_Version, '.')+1) AS INTEGER)) >= 50  AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Audio_Codec IN ('LDAC', 'AAC'));	earphone	3
SELECT h.Headphone_Id, h.Model  FROM audio_data a  JOIN headphones h ON a.Headphone_Id = h.Headphone_Id  WHERE a.Total_Harmonic_Distortion_Percent / 0.0000000001 > 10000000000  AND h.Price_Usd < 1000;	earphone	4
SELECT h.Headphone_Id, h.Model  FROM headphones h  JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id  WHERE a.Max_Input_Power_Mw >= POWER(10, (a.Sound_Pressure_Level_Db - a.Sensitivity_Db) / 10)  AND h.Headphone_Id NOT IN (SELECT h2.Headphone_Id FROM headphones h2 WHERE h2.Impedance_Ohms BETWEEN 16 AND 64);	earphone	1
SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE CAST(substr(a.Frequency_Response_Hz, 1, instr(a.Frequency_Response_Hz, '-') - 1) AS REAL) <= 20   AND CAST(substr(a.Frequency_Response_Hz, instr(a.Frequency_Response_Hz, '-') + 1) AS REAL) >= 20000   AND h.Headphone_Id NOT IN (     SELECT Headphone_Id      FROM usage_records      WHERE Total_Harmonic_Distortion_Percent < 1.0 / Audio_Quality_Rating   );	earphone	2
SELECT Headphone_Id, Model, Price_Usd FROM headphones WHERE Water_Resistance = 'IPX7' AND Price_Usd < 100;	earphone	3
SELECT Headphone_Id, Model, Battery_Life_Hours, (Battery_Life_Hours / 100000) AS extreme_ratio FROM headphones WHERE (Battery_Life_Hours / 100000) > 0.1 ORDER BY extreme_ratio DESC;	earphone	4
SELECT h.Headphone_Id, h.Model, a.Sound_Pressure_Level_Db AS actual_spl, (a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw)) AS theoretical_spl  FROM headphones h  JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id  WHERE ABS((a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw)) - a.Sound_Pressure_Level_Db) > 10;	earphone	1
SELECT h.Headphone_Id, h.Model, SQRT(LOG10(CAST(substr(a.Frequency_Response_Hz, instr(a.Frequency_Response_Hz, '-') + 1) AS REAL) / CAST(substr(a.Frequency_Response_Hz, 1, instr(a.Frequency_Response_Hz, '-') - 1) AS REAL)) * a.Total_Harmonic_Distortion_Percent) AS G_mean FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id ORDER BY G_mean DESC LIMIT 5;	earphone	2
SELECT h.Headphone_Id, h.Model, h.Battery_Life_Hours, h.Weight_Grams, (h.Battery_Life_Hours * 1.0 / h.Weight_Grams) AS battery_weight_ratio  FROM headphones h  JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id  WHERE h.Noise_Cancellation = 1  AND h.Is_Wireless = 1  AND a.Audio_Codec = 'SBC'  AND (h.Battery_Life_Hours * 1.0 / h.Weight_Grams) < 0.5;	earphone	3
SELECT h.Headphone_Id, h.Model, (h.Sensitivity_Db + 10 * LOG10(100000000)) AS theoretical_spl FROM headphones h ORDER BY theoretical_spl DESC LIMIT 3;	earphone	4
SELECT m.Manufacturer_Id, m.Manufacturer_Name,         SUM(CASE WHEN h.Price_Usd > 500 THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS high_end_ratio,         CAST(m.Profit_Usd AS REAL) / m.Employees AS profit_per_employee  FROM manufacturers m  JOIN headphones h ON m.Manufacturer_Id = h.Manufacturer_Id  GROUP BY m.Manufacturer_Id, m.Manufacturer_Name, m.Profit_Usd, m.Employees;	earphone	1
SELECT m.Manufacturer_Id, m.Manufacturer_Name, SQRT(m.Market_Share_Percent * AVG(h.Price_Usd)) AS composite_index  FROM manufacturers m  JOIN headphones h ON m.Manufacturer_Id = h.Manufacturer_Id  GROUP BY m.Manufacturer_Id, m.Manufacturer_Name, m.Market_Share_Percent  ORDER BY composite_index DESC;	earphone	2
SELECT m.Manufacturer_Id, m.Manufacturer_Name, m.Founded_Year, m.Market_Share_Percent, AVG(h.Price_Usd) AS avg_price FROM manufacturers m JOIN headphones h ON m.Manufacturer_Id = h.Manufacturer_Id WHERE m.Founded_Year < 1993 GROUP BY m.Manufacturer_Id, m.Manufacturer_Name, m.Founded_Year, m.Market_Share_Percent HAVING m.Market_Share_Percent < (AVG(h.Price_Usd) / 100);	earphone	3
SELECT m.Manufacturer_Id, m.Manufacturer_Name, m.Employees, (1000000000000.0 / NULLIF(m.Employees, 0)) AS theoretical_output_per_employee FROM manufacturers m WHERE m.Employees > 100000000 ORDER BY theoretical_output_per_employee ASC;	earphone	4
SELECT h.Model, AVG(ABS((u.Usage_Duration_Minutes / 60.0 / h.Battery_Life_Hours) * 100 - u.Battery_Consumed_Percent)) AS deviation FROM usage_records u JOIN headphones h ON u.Headphone_Id = h.Headphone_Id GROUP BY h.Model;	earphone	1
SELECT u.User_Id, (POWER(u.Volume_Level_Percent, 2) * u.Usage_Duration_Minutes) / h.Impedance_Ohms AS energy_index  FROM usage_records u  JOIN headphones h ON u.Headphone_Id = h.Headphone_Id  ORDER BY energy_index DESC  LIMIT 10;	earphone	2
SELECT h.Headphone_Id, h.Model, h.Battery_Life_Hours, (h.Battery_Life_Hours / (AVG(u.Battery_Consumed_Percent) / 100)) AS actual_efficiency  FROM headphones h  JOIN usage_records u ON h.Headphone_Id = u.Headphone_Id  WHERE h.Is_Wireless = 1  GROUP BY h.Headphone_Id, h.Model, h.Battery_Life_Hours  HAVING actual_efficiency < 0.8 * h.Battery_Life_Hours;	earphone	3
SELECT u.Record_Id, u.Headphone_Id, u.Volume_Level_Percent, u.Battery_Consumed_Percent, (u.Battery_Consumed_Percent * POWER(10000.0 / NULLIF(u.Volume_Level_Percent, 0), 3)) AS theoretical_consumption FROM usage_records u ORDER BY theoretical_consumption DESC;	earphone	4
SELECT (Sales * 1000000000 / 1) * 2.5 AS Total_Carbon_Emission FROM company WHERE Sales = 100 AND Net_Profit_Margin = 10;	gas	1
SELECT (5000 - (3000 / (1 + 1))) AS New_Equity_Needed;	gas	2
WITH CurrentData AS (         SELECT Sales, Number_Employees, Revenue_Growth_Rate          FROM company          WHERE Revenue_Growth_Rate = 5 AND Net_Profit_Margin = 8 AND Number_Employees = 100000     )     SELECT ((Sales * POWER(1 + 0.10, 5) - Sales) / 1000000) - Number_Employees AS Additional_Employees_Needed      FROM CurrentData;	gas	3
WITH CompanyData AS (         SELECT Sales, Net_Profit_Margin          FROM company          WHERE Sales = 1000 AND Net_Profit_Margin = 50     )      SELECT ((Sales * Net_Profit_Margin / 100) / 100) / ((1000000000000 * 2.5 / 1000000) / 100) AS Years_Offset      FROM CompanyData;	gas	4
WITH GasData AS (SELECT Stock_Liters, Carbon_Emission FROM gas WHERE Stock_Liters = 1000000000 AND Carbon_Emission = 2.5) SELECT (Stock_Liters * Carbon_Emission * 44 / 12) / 1000000 AS Total_CO2_Tons FROM GasData;	gas	1
WITH CurrentData AS (     SELECT Sales, Number_Employees, Revenue_Growth_Rate, Net_Profit_Margin      FROM company      WHERE Revenue_Growth_Rate = 8 AND Net_Profit_Margin = 12 AND Number_Employees = 50000 )  SELECT ((Sales * POWER(1 + Revenue_Growth_Rate / 100, 3) * (15 / 100)) / Number_Employees) - 800000 AS Required_Sales_Increase_Per_Employee  FROM CurrentData;	gas	2
WITH GasData AS (         SELECT Minimum_Stock_Liters, Capacity_Liters          FROM gas_station, gas          WHERE Minimum_Stock_Liters = 1000000 AND Capacity_Liters = 5000000     )      SELECT CASE          WHEN (100000 * 30) > Capacity_Liters          THEN (100000 * 30) - Capacity_Liters          ELSE 0      END AS Additional_Capacity_Needed      FROM GasData;	gas	3
WITH CompanyData AS (     SELECT Market_Value, Net_Profit_Margin      FROM company      WHERE Market_Value = 10000 AND Net_Profit_Margin = 20 )  SELECT ((Market_Value * Net_Profit_Margin / 100) / 2000) * 31.1035 / 19.32 / 1000000 / 2500 AS Olympic_Pools_Filled  FROM CompanyData;	gas	4
WITH GasData AS (SELECT Stock_Liters FROM gas WHERE Stock_Liters = 500000000) SELECT (Stock_Liters * 35) / 1000000 AS Total_Energy_Petajoules FROM GasData;	gas	1
WITH CurrentData AS (     SELECT Sales, Number_Employees, Net_Profit_Margin      FROM company      WHERE Sales = 800 AND Net_Profit_Margin = 15 AND Number_Employees = 200000 )  SELECT ((1200 * 1000000000 * 0.18) / Number_Employees) - 400000 AS Required_Sales_Increase_Per_Employee  FROM CurrentData;	gas	2
WITH GasData AS (     SELECT Minimum_Stock_Liters, Capacity_Liters      FROM gas_station, gas      WHERE Minimum_Stock_Liters = 2000000 AND Capacity_Liters = 10000000 )  SELECT CASE      WHEN (150000 * 60) > Capacity_Liters      THEN (150000 * 60) - Capacity_Liters      ELSE 0      END AS Additional_Capacity_Needed  FROM GasData;	gas	3
WITH CompanyData AS (     SELECT Market_Value, Net_Profit_Margin      FROM company      WHERE Market_Value = 50000 AND Net_Profit_Margin = 25 )  SELECT ((Market_Value * Net_Profit_Margin / 100) / 5000) * 0.2 / 3.52 / 1000000 / (7140 * 1) AS Football_Fields_Filled  FROM CompanyData;	gas	4
WITH CompanyData AS (SELECT Sales FROM company WHERE Sales = 500) SELECT (Sales * 1000000000 / 1) * 2.5 / 1000000 AS Total_Carbon_Emission_Tons FROM CompanyData;	gas	1
SELECT (Net_Profit_Margin / 100.0) * Sales AS Net_Profit, ((Net_Profit_Margin / 100.0) * Sales) / Number_Employees AS Net_Profit_Per_Employee FROM company WHERE Sales = 50 AND Net_Profit_Margin = 15 AND Number_Employees = 100000;	gas	2
SELECT Sales * (1 + Revenue_Growth_Rate / 100) AS Projected_Sales, (Sales * (1 + Revenue_Growth_Rate / 100)) * (Net_Profit_Margin / 100) AS Projected_Net_Profit FROM company WHERE Sales = 30 AND Revenue_Growth_Rate = 5 AND Net_Profit_Margin = 10;	gas	3
SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 1000 AND Profits = 500 AND Number_Employees = 10000000 AND Number_Branches = 100000;	gas	4
SELECT (10000000 * 1000000) / Carbon_Emission AS Total_Fuel_Sold_Liters FROM gas WHERE Carbon_Emission = 2.5;	gas	1
WITH Current_Data AS (         SELECT Sales, (Net_Profit_Margin / 100) * Sales AS Current_Net_Profit, Debt_Equity_Ratio          FROM company          WHERE Sales = 80 AND Net_Profit_Margin = 12 AND Debt_Equity_Ratio = 0.8     ),      Target_Net_Profit AS (         SELECT Current_Net_Profit * 1.2 AS Target_Net_Profit          FROM Current_Data     )      SELECT (Target_Net_Profit / (Net_Profit_Margin / 100)) - Sales AS Required_Sales_Increase      FROM company, Target_Net_Profit      WHERE Sales = 80 AND Net_Profit_Margin = 12;	gas	2
SELECT 'Current Revenue Growth Rate: 8%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~26%' AS Required_Growth_Rate FROM company WHERE Sales = 40 AND Revenue_Growth_Rate = 8;	gas	3
SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 10000 AND Profits = 5000 AND Number_Employees = 100000000 AND Number_Branches = 1000000;	gas	4
SELECT (Stock_Liters * Carbon_Emission * 0.20) / Carbon_Emission AS Required_Reduction_Liters FROM gas WHERE Stock_Liters = 5000000 AND Carbon_Emission = 2.8;	gas	1
SELECT ((Market_Value * 2 * (Profits / Market_Value)) / Profits) * Number_Employees - Number_Employees AS Required_Employee_Increase FROM company WHERE Market_Value = 300 AND Profits = 45 AND Number_Employees = 150000;	gas	2
SELECT 'Current Revenue Growth Rate: 6%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~22.47%' AS Required_Growth_Rate FROM company WHERE Sales = 60 AND Revenue_Growth_Rate = 6;	gas	3
SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 1000000 AND Profits = 500000 AND Number_Employees = 1000000000 AND Number_Branches = 100000000;	gas	4
SELECT Stock_Liters * (Sulfur_Content - 30) * 1e-6 AS Required_Sulfur_Reduction FROM gas WHERE Stock_Liters = 10000000 AND Sulfur_Content = 50;	gas	1
WITH Current_Equity AS (     SELECT Assets / (1 + Debt_Equity_Ratio) AS Current_Equity      FROM company      WHERE Assets = 2000 AND Debt_Equity_Ratio = 1.5 ),  Target_Assets AS (     SELECT Assets * 1.5 AS Target_Assets      FROM company      WHERE Assets = 2000 ),  Target_Equity AS (     SELECT Target_Assets / (1 + 1.2) AS Target_Equity      FROM Target_Assets )  SELECT Target_Equity - Current_Equity AS Required_Equity_Increase  FROM Current_Equity, Target_Equity;	gas	2
SELECT 'Current Revenue Growth Rate: 4%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~9.86%' AS Required_Growth_Rate FROM company WHERE Sales = 50 AND Revenue_Growth_Rate = 4;	gas	3
SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 100000000 AND Profits = 50000000 AND Number_Employees = 10000000000 AND Number_Branches = 1000000000;	gas	4
SELECT (Stock_Liters * Carbon_Emission * 0.15) / Carbon_Emission AS Required_Reduction_Liters FROM gas WHERE Stock_Liters = 8000000 AND Carbon_Emission = 3.2;	gas	1
SELECT ((Market_Value * 2 * (Profits / Market_Value)) / Profits) * Number_Employees - Number_Employees AS Required_Employee_Increase FROM company WHERE Market_Value = 2500 AND Profits = 400 AND Number_Employees = 120000;	gas	2
SELECT 'Current Revenue Growth Rate: 5%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~12.66%' AS Required_Growth_Rate FROM company WHERE Sales = 70 AND Revenue_Growth_Rate = 5;	gas	3
SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 10000000000 AND Profits = 5000000000 AND Number_Employees = 100000000000 AND Number_Branches = 10000000000;	gas	4
SELECT (Stock_Liters * Carbon_Emission * 0.25) / Carbon_Emission AS Required_Reduction_Liters FROM gas WHERE Stock_Liters = 12000000 AND Carbon_Emission = 2.7;	gas	1
WITH Current_Equity AS (     SELECT Assets / (1 + Debt_Equity_Ratio) AS Current_Equity      FROM company      WHERE Assets = 3000 AND Debt_Equity_Ratio = 1.8 ),  Target_Assets AS (     SELECT 4500 AS Target_Assets ),  Target_Equity AS (     SELECT Target_Assets / (1 + 1.5) AS Target_Equity      FROM Target_Assets )  SELECT Target_Equity - Current_Equity AS Required_Equity_Increase  FROM Current_Equity, Target_Equity;	gas	2
SELECT 'Current Revenue Growth Rate: 7%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~7.46%' AS Required_Growth_Rate FROM company WHERE Sales = 90 AND Revenue_Growth_Rate = 7;	gas	3
SELECT Sales / Number_Employees AS Average_Sales_Per_Employee,         Profits / Number_Employees AS Average_Profit_Per_Employee,         Sales / Number_Branches AS Average_Sales_Per_Branch,         Profits / Number_Branches AS Average_Profit_Per_Branch  FROM company  WHERE Sales = 100000000000 AND Profits = 50000000000 AND Number_Employees = 1000000000000 AND Number_Branches = 100000000000;	gas	4
SELECT CEIL((Stock_Liters * Density) / (Vehicle_Capacity - (Distance / 100 * Fuel_Consumption * Density))) AS Required_Vehicles FROM (SELECT 30000000 AS Stock_Liters, 0.85 AS Density, 1000 AS Distance, 30 AS Fuel_Consumption, 20000 AS Vehicle_Capacity) AS data;	gas	1
SELECT (Target_Profits / (Profits / Sales)) AS Target_Sales FROM (SELECT 1200 AS Sales, 180 AS Profits, 360 AS Target_Profits) AS data;	gas	2
SELECT 'Current Revenue Growth Rate: 4%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~12.66%' AS Required_Growth_Rate FROM company WHERE Sales = 70 AND Revenue_Growth_Rate = 4;	gas	3
SELECT Number_Employees * 1000000 AS Total_Severance_Cost, (Market_Value / 0.05) * 5000 AS Total_Carbon_Emission FROM company WHERE Market_Value = 100000000000000 AND Number_Employees = 10000000;	gas	4
SELECT Daily_Sales * Energy_Per_Liter AS Total_Energy_Release FROM (SELECT 50000 AS Daily_Sales, 35 AS Energy_Per_Liter) AS data;	gas	1
SELECT Sales * (Net_Profit_Margin / 100.0) AS Net_Profit, (Sales * (Net_Profit_Margin / 100.0)) * 0.25 AS Reinvestment_Amount FROM company WHERE Sales = 75 AND Net_Profit_Margin = 8;	gas	2
SELECT 'Current Revenue Growth Rate: 5%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~6.67%' AS Required_Growth_Rate FROM company WHERE Revenue_Growth_Rate = 5;	gas	3
SELECT Stock_Liters * Carbon_Emission AS Total_Carbon_Emission, Stock_Liters * Carbon_Emission * 100 AS Global_Carbon_Emission FROM gas WHERE Stock_Liters = 1000000000 AND Carbon_Emission = 100;	gas	4
SELECT Annual_Carbon_Emission * Years * Trees_Per_Ton AS Total_Trees_Needed FROM (SELECT 10000000 AS Annual_Carbon_Emission, 5 AS Years, 100 AS Trees_Per_Ton);	gas	1
WITH Future_Sales AS (     SELECT Sales * 1.20 AS Future_Sales      FROM company      WHERE Sales = 5000 ),  Future_Profits AS (     SELECT Future_Sales * 0.15 AS Future_Profits      FROM Future_Sales ),  Current_Equity AS (     SELECT Assets / (1 + Debt_Equity_Ratio) AS Current_Equity      FROM company      WHERE Assets = 20000 AND Debt_Equity_Ratio = 1.2 ),  Future_Equity AS (     SELECT Current_Equity + Future_Profits AS Future_Equity      FROM Current_Equity, Future_Profits )  SELECT Future_Equity, 2 * Future_Equity AS Future_Assets  FROM Future_Equity;	gas	2
SELECT Number_Branches * 10 AS Additional_Employees FROM company WHERE Number_Employees = 100000 AND Number_Branches = 500;	gas	3
SELECT (Market_Value * (Net_Profit_Margin / 100)) / Competitor_Market_Value AS Competitors_Acquired FROM (SELECT 10000000000000 AS Market_Value, 50 AS Net_Profit_Margin, 500000000000 AS Competitor_Market_Value) AS data;	gas	4
SELECT (50000 * 85) / 1000 AS Total_CO2_Kilograms FROM gas WHERE Carbon_Emission = 85;	gas	1
SELECT (100000 * (1.5 + 0.3)) * (1 - 0.15) AS Net_Profit FROM gas WHERE Stock_Liters = 100000;	gas	2
SELECT CASE WHEN (15000 - 10000) / 2000 < 5 THEN '会触发预警' ELSE '不会触发预警' END AS Inventory_Warning FROM gas WHERE Stock_Liters = 15000 AND Minimum_Stock_Liters = 10000;	gas	3
SELECT (10000000 * 1000) / 1000 AS CO2_Emission_Kilograms, (10000000 * 1000) / 1000 * (SELECT COUNT(*) FROM gas) AS Global_CO2_Emission_Kilograms FROM gas WHERE Stock_Liters = 10000000 AND Carbon_Emission = 1000;	gas	4
SELECT (20000 * 50 * 64.07 / 32.06 / 1000000) AS SO2_Mass_Kilograms FROM gas WHERE Stock_Liters = 20000 AND Sulfur_Content = 50;	gas	1
SELECT (80000 * (2.0 + 0.5)) * (1 - 0.12) AS Net_Profit, (80000 * (2.0 + 0.5)) * (1 - 0.12) * 0.3 AS Environmental_Investment FROM gas WHERE Stock_Liters = 80000;	gas	2
SELECT CASE WHEN (8000 - 5000) / 1500 < 3 THEN '会触发预警，提前' || (3 - (8000 - 5000) / 1500) || '天' ELSE '不会触发预警' END AS Inventory_Warning FROM gas WHERE Stock_Liters = 8000 AND Minimum_Stock_Liters = 5000;	gas	3
SELECT (100000000 * 500) / 1000 AS CO2_Emission_Kilograms, (1000000000000 * 500) / 1000 AS Global_CO2_Emission_Kilograms FROM gas WHERE Stock_Liters = 100000000 AND Carbon_Emission = 500;	gas	4
SELECT SUM(Stock_Liters * 34.2) AS Total_Energy_MJ FROM gas WHERE Brand = 'Shell';	gas	1
SELECT SUM(Stock_Liters * 0.5) AS Total_Tax_Revenue FROM gas WHERE Brand = 'BP' AND Fuel_Type = '柴油';	gas	2
SELECT CASE WHEN Stock_Liters < Minimum_Stock_Liters THEN '需要紧急补货' ELSE '无需补货' END AS Replenishment_Status FROM gas WHERE Supplier = 'ExxonMobil';	gas	3
SELECT SUM(1000000 * 2.5) AS Total_Carbon_Emission FROM gas WHERE Supplier = 'Chevron';	gas	4
SELECT SUM((Stock_Liters * 24 * 0.2778) / 0.2) AS Total_Distance_km FROM gas WHERE Brand = 'Total' AND Fuel_Type = '液化天然气';	gas	1
SELECT SUM(Stock_Liters * 0.5 * 0.3) AS Environmental_Fund FROM gas WHERE Brand = 'BP' AND Fuel_Type = '柴油';	gas	2
SELECT CASE WHEN Stock_Liters < Minimum_Stock_Liters THEN '需要紧急补货' ELSE '无需补货' END AS Replenishment_Status, (7 * 500) + (Minimum_Stock_Liters - Stock_Liters) AS Replenishment_Volume FROM gas WHERE Supplier = 'ExxonMobil';	gas	3
SELECT (5000000 * 3) / 1000000000.0 AS Total_Carbon_Emission_Tonnes FROM gas WHERE Supplier = 'BP';	gas	4
SELECT SUM(g.Stock_Liters) * 2.68 AS Total_Carbon_Emission_kg  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'Shell' AND g.Fuel_Type = '柴油';	gas	1
SELECT gs.Station_ID, gs.Location, g.Stock_Liters / gs.Capacity_Liters AS Stock_Capacity_Ratio  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil' AND g.Stock_Liters > gs.Capacity_Liters;	gas	2
SELECT gs.Station_ID, gs.Location FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID WHERE sc.Company_ID = '指定公司ID' AND g.Stock_Liters < g.Minimum_Stock_Liters;	gas	3
SELECT COUNT(*) * 10000000 * 0.85 AS Total_Weight_kg, CASE WHEN COUNT(*) * 10000000 * 0.85 > COUNT(*) * 10000000 * 1 THEN '超过承重能力' ELSE '未超过承重能力' END AS Weight_Status FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters * g.Sulfur_Content) / 1000000 AS Total_Sulfur_Content_kg  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  WHERE g.Brand = 'Shell' AND g.Quality_Grade = '高级';	gas	1
SELECT AVG(g.Price_Liter) AS Avg_Price_Per_Liter, AVG(g.Price_Liter) - 1.5 AS Price_Difference  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'BP';	gas	2
SELECT gs.Station_ID, gs.Location, g.Last_Delivery_Date, g.Next_Delivery_Date  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil' AND g.Next_Delivery_Date < g.Last_Delivery_Date;	gas	3
SELECT SUM(g.Stock_Liters - 1) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters) * 35.8 AS Total_Energy_Density_MJ FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '柴油';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 1.2) AS Stock_Sales_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';	gas	2
SELECT g.Supplier, SUM(g.Stock_Liters) / (SELECT SUM(g2.Stock_Liters) FROM gas g2 JOIN gas_station gs2 ON g2.Station_ID = gs2.Station_ID JOIN station_company sc2 ON gs2.Station_ID = sc2.Station_ID JOIN company c2 ON sc2.Company_ID = c2.Company_ID WHERE c2.Company = 'ExxonMobil') * 100 AS Stock_Percentage FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil' GROUP BY g.Supplier;	gas	3
SELECT SUM(g.Stock_Liters - 0.1) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters) * 0.8 AS Total_VOC_Emission_g  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  WHERE g.Brand = 'Shell' AND g.Fuel_Type = '汽油';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.3) AS Stock_Profit_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';	gas	2
SELECT COUNT(*) AS High_Frequency_Stations FROM (     SELECT gs.Station_ID     FROM gas g     JOIN gas_station gs ON g.Station_ID = gs.Station_ID     JOIN station_company sc ON gs.Station_ID = sc.Station_ID     JOIN company c ON sc.Company_ID = c.Company_ID     WHERE c.Company = 'BP'     GROUP BY gs.Station_ID     HAVING COUNT(g.Last_Delivery_Date) / (CAST(strftime('%Y', MAX(g.Last_Delivery_Date)) AS INTEGER) - CAST(strftime('%Y', MIN(g.Last_Delivery_Date)) AS INTEGER) + 1) > 12 );	gas	3
SELECT COUNT(*) * 1000000000 * 0.85 AS Total_Weight_Increase_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters) * 0.25 * 0.45 AS Total_Cooling_Energy_MJ  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  WHERE g.Brand = 'Shell' AND g.Fuel_Type = '液化天然气';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 1.8) AS Stock_Market_Value_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';	gas	2
SELECT COUNT(*) AS Low_Frequency_Stations FROM (     SELECT gs.Station_ID     FROM gas g     JOIN gas_station gs ON g.Station_ID = gs.Station_ID     JOIN station_company sc ON gs.Station_ID = sc.Station_ID     JOIN company c ON sc.Company_ID = c.Company_ID     WHERE c.Company = 'ExxonMobil'     GROUP BY gs.Station_ID     HAVING COUNT(g.Last_Delivery_Date) / (CAST(strftime('%Y', MAX(g.Last_Delivery_Date)) AS INTEGER) - CAST(strftime('%Y', MIN(g.Last_Delivery_Date)) AS INTEGER) + 1) < 6 );	gas	3
SELECT SUM(g.Stock_Liters - 0.01) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters * g.Sulfur_Content) * 2 / 1000000 AS Total_SOx_Emission_g FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '柴油';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.7) AS Stock_Asset_Ratio  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil';	gas	2
SELECT COUNT(DISTINCT gs.Station_ID) AS Weekend_Delivery_Stations  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'BP'  AND (strftime('%w', g.Last_Delivery_Date) = '0' OR strftime('%w', g.Last_Delivery_Date) = '6');	gas	3
SELECT COUNT(*) * 10000000000 * 0.85 AS Total_Weight_Increase_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters) * 0.05 AS Total_NOx_Emission_g  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  WHERE g.Brand = 'Shell' AND g.Fuel_Type = '汽油';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.001) AS Stock_Employee_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';	gas	2
SELECT COUNT(DISTINCT gs.Station_ID) AS Holiday_Delivery_Stations  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil'  AND g.Last_Delivery_Date IN ('2023-01-01', '2023-07-04', '2023-12-25');	gas	3
SELECT SUM(g.Stock_Liters - 0.001) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters) * 0.25 * 0.45 * 5 / 100 AS Total_Cooling_Loss_MJ FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '液化天然气';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.0001) AS Stock_Branch_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';	gas	2
SELECT COUNT(DISTINCT gs.Station_ID) AS Weekday_Delivery_Stations FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP' AND strftime('%w', g.Last_Delivery_Date) BETWEEN '1' AND '5';	gas	3
SELECT COUNT(*) * 100000000000 * 0.85 AS Total_Weight_Increase_kg  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'Chevron';	gas	4
SELECT SUM(g.Stock_Liters) * 0.02 AS Total_PM_Emission_g FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '柴油';	gas	1
SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.005) AS Stock_Revenue_Growth_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';	gas	2
SELECT COUNT(DISTINCT gs.Station_ID) AS Quarter_End_Delivery_Stations  FROM gas g  JOIN gas_station gs ON g.Station_ID = gs.Station_ID  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil'  AND strftime('%m', g.Last_Delivery_Date) IN ('03', '06', '09', '12');	gas	3
SELECT SUM(g.Stock_Liters - 0.0001) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';	gas	4
SELECT g.GeneratorID, g.GeneratorName, g.RatedPower, s.SensorID, s.SensorType, sd.DataValue AS StartTemp, sd2.DataValue AS EndTemp, (sd2.DataValue - sd.DataValue) AS DeltaT FROM generators g JOIN sensors s ON g.GeneratorID = s.GeneratorID JOIN sensordata sd ON s.SensorID = sd.SensorID JOIN sensordata sd2 ON s.SensorID = sd2.SensorID WHERE s.SensorType = '温度传感器' AND g.RatedPower = 500 AND sd.DataValue = 20 AND sd2.DataValue = 80;	generators	1
SELECT g.GeneratorID, g.GeneratorName, g.RatedPower, ps.TotalCapacity, (g.RatedPower / ps.TotalCapacity) * 100 AS LoadRate, CASE WHEN (SELECT SUM(g2.RatedPower) FROM generators g2 JOIN generatorstationassociation gsa2 ON g2.GeneratorID = gsa2.GeneratorID WHERE gsa2.StationID = ps.StationID) <= ps.TotalCapacity THEN '足够' ELSE '不足' END AS CapacityStatus FROM generators g JOIN generatorstationassociation gsa ON g.GeneratorID = gsa.GeneratorID JOIN powerstations ps ON gsa.StationID = ps.StationID WHERE ps.TotalCapacity = 1000 AND g.RatedPower IN (200, 300, 150, 250, 100);	generators	2
SELECT g.GeneratorID, g.GeneratorName, g.RatedPower, g.ContinualTime, (g.RatedPower * g.ContinualTime) AS TotalEnergy FROM generators g WHERE g.ContinualTime = 100 AND g.RatedPower = 500;	generators	3
SELECT g.GeneratorID, g.GeneratorName, g.RatedPower, s.SensorID, s.SensorType, sd.DataValue AS StartTemp, sd2.DataValue AS EndTemp, (sd2.DataValue - sd.DataValue) AS DeltaT, '极端温度变化可能导致材料失效' AS MaterialImpactWarning  FROM generators g  JOIN sensors s ON g.GeneratorID = s.GeneratorID  JOIN sensordata sd ON s.SensorID = sd.SensorID  JOIN sensordata sd2 ON s.SensorID = sd2.SensorID  WHERE s.SensorType = '温度传感器'  AND g.RatedPower = 10000  AND sd.DataValue = -273.15  AND sd2.DataValue = 1000;	generators	4
SELECT g.GeneratorID, g.GeneratorName, g.RatedPower, s.SensorID, s.SensorType, sd.DataValue AS FlowRate, (1000 * 9.81 * sd.DataValue * g.Flux) AS HydraulicPower, ((1000 * 9.81 * sd.DataValue * g.Flux) / g.RatedPower) * 100 AS Efficiency  FROM generators g  JOIN sensors s ON g.GeneratorID = s.GeneratorID  JOIN sensordata sd ON s.SensorID = sd.SensorID  WHERE s.SensorType = '流量传感器' AND sd.DataValue = 50 AND g.RatedPower = 500;	generators	1
SELECT RatedPower / RatedVoltage AS RatedCurrent FROM generators WHERE RatedPower = 500 AND RatedVoltage = 10;	generators	1
SELECT SUM(RatedPower) * 1 AS TotalPowerGenerated FROM generators WHERE GeneratorID IN (SELECT GeneratorID FROM generatorstationassociation WHERE StationID = (SELECT StationID FROM powerstations WHERE TotalCapacity = 1000));	generators	2
SELECT CASE WHEN Status = 2 THEN '不能正常发电' ELSE '能正常发电' END AS GeneratorStatus FROM generators WHERE Status = 2;	generators	3
SELECT Maxpower * (100000 / RatedRotationSpeed) * (1000000 / Flux) AS NewMaxPower FROM generators WHERE Maxpower = 1000 AND RatedRotationSpeed = 3000 AND Flux = 1000;	generators	4
SELECT TotalCapacity * 0.9 * 1 AS ActualOutputEnergy FROM powerstations WHERE StationName = '西江';	generators	1
SELECT SUM(PowerGenerated) AS TotalPowerGenerated FROM operationrecords WHERE GeneratorID IN (SELECT GeneratorID FROM generatorstationassociation WHERE StationID = (SELECT StationID FROM powerstations WHERE StationName = '西江')) AND StartTime >= '2023-10-01 00:00:00' AND EndTime <= '2023-10-01 23:59:59';	generators	2
SELECT CASE WHEN DataValue > 100 THEN '异常' ELSE '正常' END AS Status FROM sensordata WHERE SensorID IN (SELECT SensorID FROM sensors WHERE SensorType = '温度传感器' AND GeneratorID = (SELECT GeneratorID FROM generators WHERE GeneratorName = '某发电机名称')) AND DataValue = 200;	generators	3
SELECT SUM(Maxpower) AS TotalOutputPower FROM generators WHERE GeneratorID IN (SELECT GeneratorID FROM generatorstationassociation WHERE StationID = (SELECT StationID FROM powerstations WHERE StationName = '西江'));	generators	4
SELECT (ps.TotalCapacity * 0.85) / AVG(g.RatedVoltage) AS TotalCurrent FROM powerstations ps JOIN generatorstationassociation gsa ON ps.StationID = gsa.StationID JOIN generators g ON gsa.GeneratorID = g.GeneratorID WHERE ps.StationID = 1;	generators	1
SELECT SUM(RatedPower) AS TotalRunningPower FROM generators WHERE Status = 1;	generators	2
SELECT CASE WHEN sd.DataValue > 10 THEN '异常' ELSE '正常' END AS Status FROM sensordata sd JOIN sensors s ON sd.SensorID = s.SensorID WHERE s.SensorType = '压力传感器' AND sd.DataValue = 50;	generators	3
SELECT SUM(Maxpower) AS TotalOutputPower FROM generators WHERE GeneratorID IN (SELECT GeneratorID FROM generatorstationassociation WHERE StationID = 1);	generators	4
SELECT 0.5 * 10 * POWER((RatedRotationSpeed * 2 * PI() / 60), 2) AS KineticEnergy FROM generators WHERE GeneratorID = 1;	generators	1
SELECT RatedPower * ContinualTime * 0.95 AS TotalPowerGenerated FROM generators WHERE GeneratorID = 1;	generators	2
SELECT CASE WHEN (strftime('%Y', 'now') - strftime('%Y', ManufactureDate)) > 30 THEN '超过设计寿命' ELSE '未超过设计寿命' END AS DesignLifeStatus FROM generators WHERE GeneratorID = 1;	generators	3
SELECT Maxpower * POWER(100000.0 / RatedRotationSpeed, 3) * (1000000.0 / Flux) AS HypotheticalMaxPower FROM generators WHERE GeneratorID = 1;	generators	4
SELECT DataValue - (DataValue * 0.02) AS MinTemperature, DataValue + (DataValue * 0.02) AS MaxTemperature FROM sensordata WHERE SensorID = (SELECT SensorID FROM sensors WHERE SensorType = '温度传感器' AND DataValue = 150);	generators	1
SELECT DataValue * 0.01 AS MeasurementError FROM sensordata WHERE SensorID = (SELECT SensorID FROM sensors WHERE SensorType = '压力传感器' AND DataValue = 50);	generators	2
SELECT CASE WHEN DataValue > 100 THEN '异常' ELSE '正常' END AS Status FROM sensordata WHERE SensorID = (SELECT SensorID FROM sensors WHERE SensorType = '震动传感器' AND DataValue = 200);	generators	3
SELECT DataValue * 0.005 AS MeasurementError FROM sensordata WHERE SensorID = (SELECT SensorID FROM sensors WHERE SensorType = '流量传感器' AND DataValue = 1000000);	generators	4
SELECT (RatedPower / (Flux * 10 * 9.81 * 1000)) * 100 AS Efficiency FROM generators WHERE RatedPower = 500 AND RatedVoltage = 10 AND RatedRotationSpeed = 1500 AND Flux = 50;	generators	1
SELECT Maxpower * ContinualTime AS TotalEnergy FROM generators WHERE Maxpower = 1000 AND ContinualTime = 200;	generators	2
SELECT GeneratorID, GeneratorName, Status FROM generators WHERE Status = 2;	generators	3
SELECT SensorType, DataValue FROM sensordata JOIN sensors ON sensordata.SensorID = sensors.SensorID WHERE sensors.SensorType = '温度传感器' AND DataValue > 1000;	generators	4
SELECT Profit / PriceTurbo AS SalesQuantity FROM manufacturers WHERE Profit = 5000 AND PriceTurbo = 200;	generators	2
SELECT Id, ModelName, WeightGrams, (WeightGrams / 1000.0) * 9.8 * 1 AS Potential_Energy FROM TabletBasicInfo;	ipad	1
SELECT      tbi.Id,      tbi.ModelName,      tbi.WeightGrams,      strftime('%Y', tbi.ReleaseDate) AS Year,      SUM((tbi.WeightGrams / 1000.0) * 9.8 * 1) AS Total_Potential_Energy_Change  FROM TabletBasicInfo tbi  GROUP BY tbi.Id, tbi.ModelName, tbi.WeightGrams, strftime('%Y', tbi.ReleaseDate)  ORDER BY tbi.WeightGrams, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbi.ModelName, tbi.WeightGrams, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.WeightGrams < (SELECT AVG(WeightGrams) FROM TabletBasicInfo) GROUP BY tbi.Id, tbi.ModelName, tbi.WeightGrams ORDER BY tbi.WeightGrams;	ipad	3
SELECT tbi.Id, tbi.ModelName, tbi.WeightGrams, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.WeightGrams = 100000 GROUP BY tbi.Id, tbi.ModelName, tbi.WeightGrams;	ipad	4
SELECT Id, ModelName, ScreenSizeInches, (ScreenSizeInches * ScreenSizeInches * 16 * 9) / (16 * 16 + 9 * 9) AS Screen_Area FROM TabletBasicInfo;	ipad	1
SELECT      tbi.Id,      tbi.ModelName,      tbi.ScreenSizeInches,      strftime('%Y', tbi.ReleaseDate) AS Year,      SUM((POWER(tbi.ScreenSizeInches, 2) * 16 * 9) / (POWER(16, 2) + POWER(9, 2))) AS Total_Screen_Area_Change  FROM TabletBasicInfo tbi  GROUP BY tbi.Id, tbi.ModelName, tbi.ScreenSizeInches, strftime('%Y', tbi.ReleaseDate)  ORDER BY tbi.ScreenSizeInches, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbi.ModelName, tbi.ScreenSizeInches, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ScreenSizeInches > (SELECT AVG(ScreenSizeInches) FROM TabletBasicInfo) GROUP BY tbi.Id, tbi.ModelName, tbi.ScreenSizeInches ORDER BY tbi.ScreenSizeInches;	ipad	3
SELECT tbi.Id, tbi.ModelName, tbi.ScreenSizeInches, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ScreenSizeInches = 1000 GROUP BY tbi.Id, tbi.ModelName, tbi.ScreenSizeInches;	ipad	4
SELECT Id, ModelName, Dimensions,         substr(Dimensions, 1, instr(Dimensions, 'x') - 1) *         substr(Dimensions, instr(Dimensions, 'x') + 1, instr(substr(Dimensions, instr(Dimensions, 'x') + 1), 'x') - 1) *         substr(Dimensions, instr(Dimensions, 'x', -1) + 1) AS Volume  FROM TabletBasicInfo;	ipad	1
SELECT tbi.Id, tbi.ModelName, tbi.Dimensions, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(CAST(substr(tbi.Dimensions, 1, instr(tbi.Dimensions, 'x') - 1) AS REAL) * CAST(substr(substr(tbi.Dimensions, instr(tbi.Dimensions, 'x') + 1), 1, instr(substr(tbi.Dimensions, instr(tbi.Dimensions, 'x') + 1), 'x') - 1) AS REAL) * CAST(substr(tbi.Dimensions, instr(tbi.Dimensions, 'x', -1) + 1) AS REAL)) AS Total_Volume_Change FROM TabletBasicInfo tbi GROUP BY tbi.Id, tbi.ModelName, tbi.Dimensions, strftime('%Y', tbi.ReleaseDate) ORDER BY tbi.Dimensions, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbi.ModelName, tbi.Dimensions, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE CAST(SUBSTR(tbi.Dimensions, 1, INSTR(tbi.Dimensions, 'x')-1) AS REAL) * CAST(SUBSTR(tbi.Dimensions, INSTR(tbi.Dimensions, 'x')+1, INSTR(SUBSTR(tbi.Dimensions, INSTR(tbi.Dimensions, 'x')+1), 'x')-1) AS REAL) * CAST(SUBSTR(tbi.Dimensions, INSTR(tbi.Dimensions, 'x', -1)+1) AS REAL) > (SELECT AVG(CAST(SUBSTR(Dimensions, 1, INSTR(Dimensions, 'x')-1) AS REAL) * CAST(SUBSTR(Dimensions, INSTR(Dimensions, 'x')+1, INSTR(SUBSTR(Dimensions, INSTR(Dimensions, 'x')+1), 'x')-1) AS REAL) * CAST(SUBSTR(Dimensions, INSTR(Dimensions, 'x', -1)+1) AS REAL)) FROM TabletBasicInfo) GROUP BY tbi.Id, tbi.ModelName, tbi.Dimensions ORDER BY tbi.Dimensions;	ipad	3
SELECT tbi.Id, tbi.ModelName, tbi.Dimensions, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.Dimensions = '10000x10000x10000' GROUP BY tbi.Id, tbi.ModelName, tbi.Dimensions;	ipad	4
SELECT Id, ModelName, ResolutionWidth, ResolutionHeight, ScreenSizeInches, SQRT(ResolutionWidth * ResolutionWidth + ResolutionHeight * ResolutionHeight) / ScreenSizeInches AS PPI FROM TabletBasicInfo;	ipad	1
SELECT tbi.Id, tbi.ModelName, tbi.ResolutionWidth, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(SQRT(POWER(tbi.ResolutionWidth, 2) + POWER(tbi.ResolutionHeight, 2)) / tbi.ScreenSizeInches) AS Total_PPI_Change FROM TabletBasicInfo tbi GROUP BY tbi.Id, tbi.ModelName, tbi.ResolutionWidth, strftime('%Y', tbi.ReleaseDate) ORDER BY tbi.ResolutionWidth, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbi.ModelName, tbi.ResolutionWidth, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ResolutionWidth > (SELECT AVG(ResolutionWidth) FROM TabletBasicInfo) GROUP BY tbi.Id, tbi.ModelName, tbi.ResolutionWidth ORDER BY tbi.ResolutionWidth;	ipad	3
SELECT tbi.Id, tbi.ModelName, tbi.ResolutionWidth, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ResolutionWidth = 100000 GROUP BY tbi.Id, tbi.ModelName, tbi.ResolutionWidth;	ipad	4
SELECT Id, ModelName, ResolutionWidth, ResolutionHeight, ScreenSizeInches, SQRT(ResolutionWidth * ResolutionWidth + ResolutionHeight * ResolutionHeight) / ScreenSizeInches AS PPI FROM TabletBasicInfo;	ipad	1
SELECT tbi.Id, tbi.ModelName, tbi.ResolutionHeight, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(SQRT(tbi.ResolutionWidth * tbi.ResolutionWidth + tbi.ResolutionHeight * tbi.ResolutionHeight) / tbi.ScreenSizeInches) AS Total_PPI_Change FROM TabletBasicInfo tbi GROUP BY tbi.Id, tbi.ModelName, tbi.ResolutionHeight, strftime('%Y', tbi.ReleaseDate) ORDER BY tbi.ResolutionHeight, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbi.ModelName, tbi.ResolutionHeight, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ResolutionHeight > (SELECT AVG(ResolutionHeight) FROM TabletBasicInfo) GROUP BY tbi.Id, tbi.ModelName, tbi.ResolutionHeight ORDER BY tbi.ResolutionHeight;	ipad	3
SELECT tbi.Id, tbi.ModelName, tbi.ResolutionHeight, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tbi.ResolutionHeight = 100000 GROUP BY tbi.Id, tbi.ModelName, tbi.ResolutionHeight;	ipad	4
SELECT Id, ModelName, BatteryCapacityMAh, BatteryCapacityMAh / (SELECT AVG(DischargeRateMA) FROM TabletBatteryPerformance) AS Theoretical_Life_Hours FROM TabletBasicInfo;	ipad	1
SELECT tbi.Id, tbi.ModelName, tbi.BatteryCapacityMAh, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tbi.BatteryCapacityMAh / (SELECT AVG(DischargeRateMA) FROM TabletBatteryPerformance)) AS Total_Theoretical_Life_Change FROM TabletBasicInfo tbi GROUP BY tbi.Id, tbi.ModelName, tbi.BatteryCapacityMAh, strftime('%Y', tbi.ReleaseDate) ORDER BY tbi.BatteryCapacityMAh, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbi.ModelName, tbi.BatteryCapacityMAh, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.BatteryCapacityMAh > (SELECT AVG(BatteryCapacityMAh) FROM TabletBasicInfo) GROUP BY tbi.Id, tbi.ModelName, tbi.BatteryCapacityMAh ORDER BY tbi.BatteryCapacityMAh;	ipad	3
SELECT tbi.Id, tbi.ModelName, tbi.BatteryCapacityMAh, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tbi.BatteryCapacityMAh = 1000000 GROUP BY tbi.Id, tbi.ModelName, tbi.BatteryCapacityMAh;	ipad	4
SELECT Id, CPUCores, CPUSpeedGHz, CPUCores * CPUSpeedGHz AS Theoretical_Max_Power_GHz FROM TabletPerformanceData;	ipad	1
SELECT tbi.Id, tpd.CPUCores, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tpd.CPUCores * tpd.CPUSpeedGHz) AS Total_Theoretical_Power_Change FROM TabletBasicInfo tbi JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId GROUP BY tbi.Id, tpd.CPUCores, strftime('%Y', tbi.ReleaseDate) ORDER BY tpd.CPUCores, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tpd.CPUCores, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tpd.CPUCores > (SELECT AVG(CPUCores) FROM TabletPerformanceData) GROUP BY tbi.Id, tpd.CPUCores ORDER BY tpd.CPUCores;	ipad	3
SELECT tbi.Id, tpd.CPUCores, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tpd.CPUCores = 1000 GROUP BY tbi.Id, tpd.CPUCores;	ipad	4
SELECT Id, CPUSpeedGHz, CPUCores, CPUSpeedGHz * CPUCores AS Theoretical_Max_Power_GHz FROM TabletPerformanceData;	ipad	1
SELECT tbi.Id, tpd.CPUSpeedGHz, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tpd.CPUSpeedGHz * tpd.CPUCores) AS Total_Theoretical_Power_Change FROM TabletBasicInfo tbi JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId GROUP BY tbi.Id, tpd.CPUSpeedGHz, strftime('%Y', tbi.ReleaseDate) ORDER BY tpd.CPUSpeedGHz, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tpd.CPUSpeedGHz, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tpd.CPUSpeedGHz > (SELECT AVG(CPUSpeedGHz) FROM TabletPerformanceData) GROUP BY tbi.Id, tpd.CPUSpeedGHz ORDER BY tpd.CPUSpeedGHz;	ipad	3
SELECT tbi.Id, tpd.CPUSpeedGHz, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance  FROM TabletBasicInfo tbi  LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId  LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId  LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  WHERE tpd.CPUSpeedGHz = 1000  GROUP BY tbi.Id, tpd.CPUSpeedGHz;	ipad	4
SELECT Id, RAMGB, RAMGB * (SELECT AVG(RAMGB) FROM TabletPerformanceData) / (SELECT AVG(RAMGB) FROM TabletPerformanceData) AS Theoretical_Max_Throughput_GBs FROM TabletPerformanceData;	ipad	1
SELECT tbi.Id, tpd.RAMGB, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tpd.RAMGB * (SELECT AVG(RAMGB) FROM TabletPerformanceData) / (SELECT AVG(RAMGB) FROM TabletPerformanceData)) AS Total_Theoretical_Throughput_Change FROM TabletBasicInfo tbi JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId GROUP BY tbi.Id, tpd.RAMGB, strftime('%Y', tbi.ReleaseDate) ORDER BY tpd.RAMGB, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tpd.RAMGB, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tpd.RAMGB > (SELECT AVG(RAMGB) FROM TabletPerformanceData) GROUP BY tbi.Id, tpd.RAMGB ORDER BY tpd.RAMGB;	ipad	3
SELECT tbi.Id, tpd.RAMGB, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tpd.RAMGB = 1000 GROUP BY tbi.Id, tpd.RAMGB;	ipad	4
SELECT Id, AntutuScore, CPUCores, CAST(AntutuScore AS REAL) / CPUCores AS Theoretical_Max_Power_Per_Core FROM TabletPerformanceData;	ipad	1
SELECT tbi.Id, tpd.AntutuScore, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tpd.AntutuScore / tpd.CPUCores) AS Total_Theoretical_Power_Change FROM TabletBasicInfo tbi JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId GROUP BY tbi.Id, tpd.AntutuScore, strftime('%Y', tbi.ReleaseDate) ORDER BY tpd.AntutuScore, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tpd.AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life  FROM TabletBasicInfo tbi  LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId  LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId  WHERE tpd.AntutuScore > (SELECT AVG(AntutuScore) FROM TabletPerformanceData)  GROUP BY tbi.Id, tpd.AntutuScore  ORDER BY tpd.AntutuScore;	ipad	3
SELECT tbi.Id, tpd.AntutuScore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tpd.AntutuScore = 1000000 GROUP BY tbi.Id, tpd.AntutuScore;	ipad	4
SELECT Id, GeekbenchSingleCore, CPUSpeedGHz, CAST(GeekbenchSingleCore AS REAL) / CPUSpeedGHz AS Theoretical_Single_Core_Power_Per_GHz FROM TabletPerformanceData;	ipad	1
SELECT tbi.Id, tpd.GeekbenchSingleCore, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tpd.GeekbenchSingleCore / tpd.CPUSpeedGHz) AS Total_Theoretical_Power_Change FROM TabletBasicInfo tbi JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId GROUP BY tbi.Id, tpd.GeekbenchSingleCore, strftime('%Y', tbi.ReleaseDate) ORDER BY tpd.GeekbenchSingleCore, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tpd.GeekbenchSingleCore, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tpd.GeekbenchSingleCore > (SELECT AVG(GeekbenchSingleCore) FROM TabletPerformanceData) GROUP BY tbi.Id, tpd.GeekbenchSingleCore ORDER BY tpd.GeekbenchSingleCore;	ipad	3
SELECT tbi.Id, tpd.GeekbenchSingleCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance  FROM TabletBasicInfo tbi  LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId  LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId  LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  WHERE tpd.GeekbenchSingleCore = 100000  GROUP BY tbi.Id, tpd.GeekbenchSingleCore;	ipad	4
SELECT Id, CPUSpeedGHz, ThermalThrottlingPercent, CPUSpeedGHz * (ThermalThrottlingPercent / 100.0) AS Theoretical_Max_Performance_Loss_GHz FROM TabletPerformanceData;	ipad	1
SELECT tbi.Id, tpd.ThermalThrottlingPercent, strftime('%Y', tbi.ReleaseDate) AS Year, SUM(tpd.CPUSpeedGHz * (tpd.ThermalThrottlingPercent / 100.0)) AS Total_Theoretical_Loss_Change FROM TabletBasicInfo tbi JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId GROUP BY tbi.Id, tpd.ThermalThrottlingPercent, strftime('%Y', tbi.ReleaseDate) ORDER BY tpd.ThermalThrottlingPercent, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tpd.ThermalThrottlingPercent, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tpd.ThermalThrottlingPercent > (SELECT AVG(ThermalThrottlingPercent) FROM TabletPerformanceData) GROUP BY tbi.Id, tpd.ThermalThrottlingPercent ORDER BY tpd.ThermalThrottlingPercent;	ipad	3
SELECT tbi.Id, tpd.ThermalThrottlingPercent, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.BatteryLifeHours) AS Total_Battery_Life, AVG(tpd.CPUSpeedGHz * (tpd.ThermalThrottlingPercent / 100.0)) AS Avg_Performance_Loss, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tpd.ThermalThrottlingPercent = 1000 GROUP BY tbi.Id, tpd.ThermalThrottlingPercent;	ipad	4
SELECT tbi.Id, tbi.BatteryCapacityMAh, tbp.BatteryLifeHours, (tbi.BatteryCapacityMAh * 3.7) / tbp.BatteryLifeHours AS Theoretical_Max_Energy_Consumption_Wh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.Id, tbp.BatteryLifeHours, strftime('%Y', tbi.ReleaseDate) AS Year, SUM((tbi.BatteryCapacityMAh * 3.7) / tbp.BatteryLifeHours) AS Total_Theoretical_Energy_Consumption_Change FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId GROUP BY tbi.Id, tbp.BatteryLifeHours, strftime('%Y', tbi.ReleaseDate) ORDER BY tbp.BatteryLifeHours, strftime('%Y', tbi.ReleaseDate);	ipad	2
SELECT tbi.Id, tbp.BatteryLifeHours, AVG(tpd.AntutuScore) AS Avg_AntutuScore, AVG(tpd.GeekbenchSingleCore) AS Avg_GeekbenchSingleCore, AVG(tpd.GeekbenchMultiCore) AS Avg_GeekbenchMultiCore, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.ChargingTimeMinutes) AS Total_Charging_Time FROM TabletBasicInfo tbi LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.BatteryLifeHours < (SELECT AVG(BatteryLifeHours) FROM TabletBatteryPerformance) GROUP BY tbi.Id, tbp.BatteryLifeHours ORDER BY tbp.BatteryLifeHours;	ipad	3
SELECT tbi.Id, tbp.BatteryLifeHours, COUNT(tbp.Id) AS Battery_Performance_Count, SUM(tbp.ChargingTimeMinutes) AS Total_Charging_Time, AVG(tpd.ThermalThrottlingPercent) AS Avg_Thermal_Throttling, AVG(tcp.LowLightPerformanceDB) AS Avg_LowLight_Performance  FROM TabletBasicInfo tbi  LEFT JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId  LEFT JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId  LEFT JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  WHERE tbp.BatteryLifeHours = 1000  GROUP BY tbi.Id, tbp.BatteryLifeHours;	ipad	4
SELECT tbi.ModelName, tbp.ChargingTimeMinutes, tbi.BatteryCapacityMAh, (tbi.BatteryCapacityMAh * 3.7) / (tbp.ChargingTimeMinutes * 60) AS TheoreticalChargingPowerWatt FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM((tbi.BatteryCapacityMAh * 3.7) / (tbp.ChargingTimeMinutes * 60)) AS TotalTheoreticalChargingPowerChange, AVG(tbp.ChargingTimeMinutes) AS AvgChargingTimeMinutes FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now','-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.ChargingTimeMinutes, tbp.BatteryHealthPercent, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.ChargingTimeMinutes <= 60 ORDER BY tbp.ChargingTimeMinutes;	ipad	3
SELECT tbi.ModelName, tbp.ChargingTimeMinutes, tbp.BatteryHealthPercent, tbp.TemperatureCelsius, tbp.DischargeRateMA, tbp.FastChargingWattage, (tbp.FastChargingWattage * 10000 / 60) AS TotalEnergyConsumedWh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.ChargingTimeMinutes = 10000;	ipad	4
SELECT tbi.ModelName, tbp.StandbyTimeHours, tbi.BatteryCapacityMAh, (tbi.BatteryCapacityMAh * 3.7) / tbp.StandbyTimeHours AS TheoreticalStandbyEnergyConsumptionWh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM((tbi.BatteryCapacityMAh * 3.7) / tbp.StandbyTimeHours) AS TotalTheoreticalStandbyEnergyConsumptionChange, AVG(tbp.StandbyTimeHours) AS AvgStandbyTimeHours FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.StandbyTimeHours, tbp.BatteryHealthPercent, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.StandbyTimeHours >= 300 ORDER BY tbp.StandbyTimeHours DESC;	ipad	3
SELECT tbi.ModelName, tbp.StandbyTimeHours, tbp.BatteryHealthPercent, tbp.TemperatureCelsius, tbp.DischargeRateMA, (tbi.BatteryCapacityMAh * 3.7) / tbp.StandbyTimeHours AS TheoreticalStandbyEnergyConsumptionWh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.StandbyTimeHours = 10000;	ipad	4
SELECT tbi.ModelName, tbp.FastChargingWattage, tbi.BatteryCapacityMAh, (tbi.BatteryCapacityMAh * 3.7) / (tbp.FastChargingWattage * 60) AS TheoreticalChargingTimeMinutes FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM((tbi.BatteryCapacityMAh * 3.7) / (tbp.FastChargingWattage * 60)) AS TotalTheoreticalChargingTimeChange, AVG(tbp.FastChargingWattage) AS AvgFastChargingWattage FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.FastChargingWattage, tbp.BatteryHealthPercent, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.FastChargingWattage >= 30 ORDER BY tbp.FastChargingWattage DESC;	ipad	3
SELECT tbi.ModelName, tbp.FastChargingWattage, tbp.BatteryHealthPercent, tbp.TemperatureCelsius, tbp.DischargeRateMA, (tbi.BatteryCapacityMAh * 3.7) / (tbp.FastChargingWattage * 60) AS TheoreticalChargingTimeMinutes FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.FastChargingWattage = 10000;	ipad	4
SELECT tbi.ModelName, tbp.BatteryHealthPercent, tbi.BatteryCapacityMAh, tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0) AS TheoreticalMaxBatteryCapacityMAh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM(tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0)) AS TotalTheoreticalMaxCapacityChange, AVG(tbp.BatteryHealthPercent) AS AvgBatteryHealthPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.BatteryHealthPercent, tbp.BatteryLifeHours, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.BatteryHealthPercent <= 50 ORDER BY tbp.BatteryHealthPercent ASC;	ipad	3
SELECT tbi.ModelName, tbp.BatteryHealthPercent, tbp.BatteryLifeHours, tbp.TemperatureCelsius, tbp.DischargeRateMA, tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0) AS TheoreticalMaxBatteryCapacityMAh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.BatteryHealthPercent = 1000;	ipad	4
SELECT tbi.ModelName, tbp.ChargeCycles, tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0) AS TheoreticalMaxBatteryCapacityMAh, (tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0)) / (tbi.BatteryCapacityMAh * tbp.ChargeCycles) AS TheoreticalBatteryLifeYears FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM((tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100)) / (tbi.BatteryCapacityMAh * tbp.ChargeCycles)) AS TotalTheoreticalBatteryLifeChange, AVG(tbp.ChargeCycles) AS AvgChargeCycles FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.ChargeCycles, tbp.BatteryHealthPercent, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.ChargeCycles >= 500 ORDER BY tbp.ChargeCycles DESC;	ipad	3
sqlite3 SELECT tbi.ModelName, tbp.ChargeCycles, tbp.BatteryHealthPercent, tbp.TemperatureCelsius, tbp.DischargeRateMA, (tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0)) / (tbi.BatteryCapacityMAh * tbp.ChargeCycles) AS TheoreticalBatteryLifeYears FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.ChargeCycles = 100000;	ipad	4
SELECT tbi.ModelName, tbp.DischargeRateMA, tbi.BatteryCapacityMAh, tbi.BatteryCapacityMAh / tbp.DischargeRateMA AS TheoreticalDischargeTimeHours FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM(tbi.BatteryCapacityMAh / tbp.DischargeRateMA) AS TotalTheoreticalDischargeTimeChange, AVG(tbp.DischargeRateMA) AS AvgDischargeRateMA FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.DischargeRateMA, tbp.BatteryHealthPercent, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.DischargeRateMA >= 500 ORDER BY tbp.DischargeRateMA DESC;	ipad	3
SELECT tbi.ModelName, tbp.DischargeRateMA, tbp.BatteryHealthPercent, tbp.TemperatureCelsius, tbi.BatteryCapacityMAh / tbp.DischargeRateMA AS TheoreticalDischargeTimeHours FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.DischargeRateMA = 100000;	ipad	4
SELECT tbi.ModelName, tbp.TemperatureCelsius, tbi.BatteryCapacityMAh, tbi.BatteryCapacityMAh * (tbp.TemperatureCelsius / 100) AS TheoreticalMaxChargingPowerWatt FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM(tbi.BatteryCapacityMAh * (tbp.TemperatureCelsius / 100)) AS TotalTheoreticalMaxChargingPowerChange, AVG(tbp.TemperatureCelsius) AS AvgTemperatureCelsius FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now','-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tbp.TemperatureCelsius, tbp.BatteryHealthPercent, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore, tpd.ThermalThrottlingPercent FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tbp.TemperatureCelsius >= 40 ORDER BY tbp.TemperatureCelsius DESC;	ipad	3
SELECT tbi.ModelName, tbp.TemperatureCelsius, tbp.BatteryHealthPercent, tbi.BatteryCapacityMAh * (tbp.TemperatureCelsius / 100) AS TheoreticalMaxChargingPowerWatt FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbp.TemperatureCelsius = 1000;	ipad	4
SELECT tbi.ModelName, tcp.RearCameraMP, tcp.RearCameraMP * (10.0 / 15.0) AS TheoreticalMaxResolutionPixels FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM(tcp.RearCameraMP * (10.0 / 15.0)) AS TotalTheoreticalMaxResolutionChange, AVG(tcp.RearCameraMP) AS AvgRearCameraMP FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tbi.ReleaseDate BETWEEN date('now','-1 year') AND date('now') GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tcp.RearCameraMP, tbi.StorageOptionsGB, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId WHERE tcp.RearCameraMP >= 12 ORDER BY tcp.RearCameraMP DESC;	ipad	3
SELECT tbi.ModelName, tcp.RearCameraMP, tcp.RearCameraMP * (10.0 / 15.0) AS TheoreticalMaxResolutionPixels FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.RearCameraMP = 1000;	ipad	4
SELECT tbi.ModelName, tcp.FrontCameraMP, SQRT(POWER(4000, 2) + POWER(3000, 2)) / 10 AS PixelDensityPPI FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.FrontCameraMP = 12;	ipad	1
SELECT tbi.ModelName, tcp.FrontCameraMP, 5 * (1 + 0.25 * 2) AS EstimatedStorageMB FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.FrontCameraMP = 8;	ipad	2
SELECT tbi.ModelName, tcp.FrontCameraMP, tbi.StorageOptionsGB, tbi.StorageOptionsGB * 1024 / 3 AS MaxPhotos FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.FrontCameraMP = 5 AND tbi.StorageOptionsGB = 32;	ipad	3
SELECT tbi.ModelName, tcp.FrontCameraMP, tbi.StorageOptionsGB, tbi.BatteryCapacityMAh, tbp.DischargeRateMA, tbi.StorageOptionsGB * 1024 / 100 AS MaxPhotos, tbi.BatteryCapacityMAh / tbp.DischargeRateMA AS BatteryLifeHours FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tcp.FrontCameraMP = 100 AND tbi.StorageOptionsGB = 128 AND tbi.BatteryCapacityMAh = 10000 AND tbp.DischargeRateMA = 1000;	ipad	4
SELECT tbi.ModelName, tcp.ApertureRear, POWER(10.0 / tcp.ApertureRear, 2) AS TheoreticalMaxLightIntakeLumens  FROM TabletBasicInfo tbi  JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId;	ipad	1
SELECT tbi.ModelName, SUM(POWER(10 / tcp.ApertureRear, 2)) AS TotalTheoreticalMaxLightIntakeChange, AVG(tcp.ApertureRear) AS AvgApertureRear  FROM TabletBasicInfo tbi  JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now')  GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tcp.ApertureRear, tcp.LowLightPerformanceDB, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore  FROM TabletBasicInfo tbi  JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId  WHERE tcp.ApertureRear >= 2.8  ORDER BY tcp.ApertureRear DESC;	ipad	3
SELECT tbi.ModelName, tcp.ApertureRear, POWER(10.0 / tcp.ApertureRear, 2) AS TheoreticalMaxLightIntakeLumens FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.ApertureRear = 0.1;	ipad	4
SELECT tbi.ModelName, tcp.ApertureFront, tcp.ApertureRear, POWER(tcp.ApertureFront / tcp.ApertureRear, 2) AS LightIntakeRatio FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.ApertureFront = 2.0 AND tcp.ApertureRear = 1.8;	ipad	1
SELECT tbi.ModelName, tcp.ApertureFront, tcp.ApertureRear, 100 * (1 / POWER(tcp.ApertureFront, 2)) AS FrontEquivalentBrightness, 100 * (1 / POWER(tcp.ApertureRear, 2)) AS RearEquivalentBrightness FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.ApertureFront = 2.4 AND tcp.ApertureRear = 1.6;	ipad	2
SELECT tbi.ModelName, tcp.ApertureFront, tbi.StorageOptionsGB, tbi.StorageOptionsGB * 1024 / 4 AS MaxPhotos FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.ApertureFront = 2.2 AND tbi.StorageOptionsGB = 64;	ipad	3
SELECT tbi.ModelName, tcp.ApertureFront, tcp.ApertureRear, tbi.ResolutionWidth, tbi.ResolutionHeight, 100 * (1 / POWER(tcp.ApertureFront, 2)) AS FrontEquivalentBrightness, 100 * (1 / POWER(tcp.ApertureRear, 2)) AS RearEquivalentBrightness, CASE WHEN (100 * (1 / POWER(tcp.ApertureFront, 2))) <= tbi.ResolutionWidth AND (100 * (1 / POWER(tcp.ApertureRear, 2))) <= tbi.ResolutionHeight THEN 'Yes' ELSE 'No' END AS CanDisplayFullImage FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.ApertureFront = 0.5 AND tcp.ApertureRear = 0.3 AND tbi.ResolutionWidth = 2560 AND tbi.ResolutionHeight = 1600;	ipad	4
SELECT tbi.ModelName, tcp.VideoResolution, tcp.FrameRateFPS, (CAST(SUBSTR(tcp.VideoResolution, 1, INSTR(tcp.VideoResolution, 'x') - 1) AS INTEGER) * CAST(SUBSTR(tcp.VideoResolution, INSTR(tcp.VideoResolution, 'x') + 1) AS INTEGER) * tcp.FrameRateFPS * 24) / (1024 * 1024) AS TheoreticalMaxVideoDataMBps FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId;	ipad	1
SELECT tbi.ModelName,         SUM((CAST(SUBSTR(tcp.VideoResolution, 1, INSTR(tcp.VideoResolution, 'x') - 1) AS INTEGER) *              CAST(SUBSTR(tcp.VideoResolution, INSTR(tcp.VideoResolution, 'x') + 1) AS INTEGER) *              tcp.FrameRateFPS * 24) / (1024 * 1024)) AS TotalTheoreticalMaxVideoDataChange,         AVG(CAST(SUBSTR(tcp.VideoResolution, 1, INSTR(tcp.VideoResolution, 'x') - 1) AS INTEGER) *             CAST(SUBSTR(tcp.VideoResolution, INSTR(tcp.VideoResolution, 'x') + 1) AS INTEGER)) AS AvgVideoResolution  FROM TabletBasicInfo tbi  JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  WHERE tbi.ReleaseDate BETWEEN date('now', '-1 year') AND date('now')  GROUP BY tbi.ModelName;	ipad	2
SELECT tbi.ModelName, tcp.VideoResolution, tbi.StorageOptionsGB, tpd.AntutuScore, tpd.GeekbenchSingleCore, tpd.GeekbenchMultiCore  FROM TabletBasicInfo tbi  JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  JOIN TabletPerformanceData tpd ON tbi.Id = tpd.TabletId  WHERE CAST(SUBSTR(tcp.VideoResolution, 1, INSTR(tcp.VideoResolution, 'x')-1) AS INTEGER) * CAST(SUBSTR(tcp.VideoResolution, INSTR(tcp.VideoResolution, 'x')+1) AS INTEGER) >= 3840 * 2160  ORDER BY CAST(SUBSTR(tcp.VideoResolution, 1, INSTR(tcp.VideoResolution, 'x')-1) AS INTEGER) * CAST(SUBSTR(tcp.VideoResolution, INSTR(tcp.VideoResolution, 'x')+1) AS INTEGER) DESC;	ipad	3
SELECT tbi.ModelName, tcp.VideoResolution, (CAST(SUBSTR(tcp.VideoResolution, 1, INSTR(tcp.VideoResolution, 'x') - 1) AS REAL) * CAST(SUBSTR(tcp.VideoResolution, INSTR(tcp.VideoResolution, 'x') + 1) AS REAL) * tcp.FrameRateFPS * 24) / (1024 * 1024) AS TheoreticalMaxVideoDataMBps FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.VideoResolution = '100000x100000';	ipad	4
SELECT tbi.ModelName, tbi.BatteryCapacityMAh, tbp.DischargeRateMA, tbi.BatteryCapacityMAh / tbp.DischargeRateMA AS TheoreticalBatteryLifeHours  FROM TabletBasicInfo tbi  JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId  WHERE tbi.BatteryCapacityMAh = 10000 AND tbp.DischargeRateMA = 2000;	ipad	1
SELECT tbi.ModelName, tbi.ResolutionWidth, tbi.ResolutionHeight, tbi.ScreenSizeInches, SQRT(tbi.ResolutionWidth * tbi.ResolutionWidth + tbi.ResolutionHeight * tbi.ResolutionHeight) / tbi.ScreenSizeInches AS PixelDensityPPI FROM TabletBasicInfo tbi WHERE tbi.ResolutionWidth = 2560 AND tbi.ResolutionHeight = 1600 AND tbi.ScreenSizeInches = 10.5;	ipad	2
SELECT tbi.ModelName, tbi.BatteryCapacityMAh, tbp.BatteryHealthPercent, tbi.BatteryCapacityMAh * (tbp.BatteryHealthPercent / 100.0) AS ActualBatteryCapacityMAh FROM TabletBasicInfo tbi JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tbi.BatteryCapacityMAh = 8000 AND tbp.BatteryHealthPercent = 85;	ipad	3
SELECT tbi.ModelName, tbi.BatteryCapacityMAh, tbp.DischargeRateMA, tbi.BatteryCapacityMAh / tbp.DischargeRateMA AS TheoreticalBatteryLifeHours  FROM TabletBasicInfo tbi  JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId  WHERE tbi.BatteryCapacityMAh = 50000 AND tbp.DischargeRateMA = 5000;	ipad	4
SELECT tbi.ModelName, tcp.ApertureRear, tcp.ApertureFront, POWER(tcp.ApertureFront / tcp.ApertureRear, 2) AS LightIntakeRatio FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.ApertureRear = 2.0 AND tcp.ApertureFront = 2.4;	ipad	1
SELECT tbi.ModelName, tcp.OpticalZoomX, tcp.DigitalZoomX, 10.0 / tcp.OpticalZoomX AS OpticalZoomEquivalentDistance, 10.0 / tcp.DigitalZoomX AS DigitalZoomEquivalentDistance FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.OpticalZoomX = 5 AND tcp.DigitalZoomX = 10;	ipad	2
SELECT tbi.ModelName, tcp.RearCameraMP, tcp.FrontCameraMP, tcp.RearCameraMP * 0.3 AS RearCameraStorageMB, tcp.FrontCameraMP * 0.3 AS FrontCameraStorageMB FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.RearCameraMP = 12 AND tcp.FrontCameraMP = 8;	ipad	3
SELECT tbi.ModelName, tcp.OpticalZoomX, tcp.DigitalZoomX, tbi.ResolutionWidth, tbi.ResolutionHeight, 1000.0 / tcp.OpticalZoomX AS OpticalZoomEquivalentDistance, 1000.0 / tcp.DigitalZoomX AS DigitalZoomEquivalentDistance, CASE WHEN (1000.0 / tcp.OpticalZoomX) <= tbi.ResolutionWidth AND (1000.0 / tcp.DigitalZoomX) <= tbi.ResolutionHeight THEN 'Yes' ELSE 'No' END AS CanDisplayFullImage FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.OpticalZoomX = 100 AND tcp.DigitalZoomX = 200 AND tbi.ResolutionWidth = 2560 AND tbi.ResolutionHeight = 1600;	ipad	4
SELECT tbi.ModelName, tcp.DigitalZoomX, tbi.ResolutionHeight, tbi.ScreenSizeInches, 2 * tcp.DigitalZoomX * (tbi.ResolutionHeight / tbi.ScreenSizeInches) AS EquivalentHeightPixels FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.DigitalZoomX = 10 AND tbi.ScreenSizeInches = 10 AND tbi.ResolutionHeight = 1600;	ipad	1
SELECT tbi.ModelName, tcp.DigitalZoomX, tbi.ResolutionWidth, 50.0 / tcp.DigitalZoomX AS EquivalentDistanceMeters, (tbi.ResolutionWidth / (50.0 / tcp.DigitalZoomX)) * 50 AS PixelWidth FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.DigitalZoomX = 20 AND tbi.ResolutionWidth = 2560;	ipad	2
SELECT tbi.ModelName, tcp.DigitalZoomX, 10 * (1 + 0.2 * tcp.DigitalZoomX) AS EstimatedStorageMB FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.DigitalZoomX = 5;	ipad	3
SELECT tbi.ModelName, tcp.DigitalZoomX, tbi.ResolutionWidth, tbi.ResolutionHeight, 1000 / tcp.DigitalZoomX AS EquivalentDistanceMeters, CASE WHEN (1000 / tcp.DigitalZoomX) <= tbi.ResolutionWidth AND (1000 / tcp.DigitalZoomX) <= tbi.ResolutionHeight THEN 'Yes' ELSE 'No' END AS CanDisplayFullImage FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.DigitalZoomX = 1000 AND tbi.ResolutionWidth = 2560 AND tbi.ResolutionHeight = 1600;	ipad	4
SELECT tbi.ModelName, tcp.LowLightPerformanceDB, 1.0 * POWER(10, tcp.LowLightPerformanceDB / 10.0) AS MinLightIntensityLux  FROM TabletBasicInfo tbi  JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId  WHERE tcp.LowLightPerformanceDB = -10;	ipad	1
SELECT tbi.ModelName, tcp.LowLightPerformanceDB, tbi.ResolutionWidth, tbi.ResolutionHeight, 0.1 * POWER(10, tcp.LowLightPerformanceDB / 10) AS MinLightIntensityLux, 10 * LOG(0.1 * POWER(10, tcp.LowLightPerformanceDB / 10) * tbi.ResolutionWidth * tbi.ResolutionHeight) / LOG(10) AS SNR FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.LowLightPerformanceDB = -15 AND tbi.ResolutionWidth = 2560 AND tbi.ResolutionHeight = 1600;	ipad	2
SELECT tbi.ModelName, tcp.LowLightPerformanceDB, tbi.BatteryCapacityMAh, tbp.DischargeRateMA, 0.5 * POWER(10, tcp.LowLightPerformanceDB / 10) AS MinLightIntensityLux, tbi.BatteryCapacityMAh / tbp.DischargeRateMA AS BatteryLifeHours FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId JOIN TabletBatteryPerformance tbp ON tbi.Id = tbp.TabletId WHERE tcp.LowLightPerformanceDB = -12 AND tbi.BatteryCapacityMAh = 8000 AND tbp.DischargeRateMA = 500;	ipad	3
SELECT tbi.ModelName, tcp.LowLightPerformanceDB, tbi.ResolutionWidth, tbi.ResolutionHeight, 0.0001 * POWER(10, tcp.LowLightPerformanceDB / 10) AS MinLightIntensityLux, 10 * LOG10(0.0001 * POWER(10, tcp.LowLightPerformanceDB / 10) * tbi.ResolutionWidth * tbi.ResolutionHeight) AS SNR FROM TabletBasicInfo tbi JOIN TabletCameraPerformance tcp ON tbi.Id = tcp.TabletId WHERE tcp.LowLightPerformanceDB = -100 AND tbi.ResolutionWidth = 2560 AND tbi.ResolutionHeight = 1600;	ipad	4
SELECT c.Customer_ID, c.First_Name, c.Last_Name, c.Gender, c.Date_Of_Birth, c.Email, c.Phone_Number, c.Address, c.City, c.Province, c.Country, c.Postal_Code, c.Membership_Level, SUM(od.Quantity * p.Weight) AS Total_Weight  FROM Customer c  JOIN Orders o ON c.Customer_ID = o.Customer_ID  JOIN Order_Detail od ON o.Order_ID = od.Order_ID  JOIN Phone p ON od.Phone_ID = p.Phone_ID  GROUP BY c.Customer_ID  ORDER BY Total_Weight DESC  LIMIT 10;	phone_market	1
SELECT c.Customer_ID, c.First_Name, c.Last_Name, c.Gender, c.Date_Of_Birth, c.Email, c.Phone_Number, c.Address, c.City, c.Province, c.Country, c.Postal_Code, c.Membership_Level, c.Created_At, c.Updated_At, AVG(o.Total_Amount) AS Avg_Order_Amount  FROM Customer c  JOIN Orders o ON c.Customer_ID = o.Customer_ID  GROUP BY c.Customer_ID, c.First_Name, c.Last_Name, c.Gender, c.Date_Of_Birth, c.Email, c.Phone_Number, c.Address, c.City, c.Province, c.Country, c.Postal_Code, c.Membership_Level, c.Created_At, c.Updated_At  ORDER BY Avg_Order_Amount ASC;	phone_market	2
SELECT DISTINCT c.Customer_ID, c.First_Name, c.Last_Name, c.Gender, c.Date_Of_Birth, c.Email, c.Phone_Number, c.Address, c.City, c.Province, c.Country, c.Postal_Code, c.Membership_Level  FROM Customer c  JOIN Orders o ON c.Customer_ID = o.Customer_ID  JOIN Order_Detail od ON o.Order_ID = od.Order_ID  JOIN Phone p ON od.Phone_ID = p.Phone_ID  WHERE p.Screen_Size > 6 AND p.Battery_Capacity > 4000  ORDER BY c.Membership_Level DESC;	phone_market	3
SELECT c.Customer_ID, c.First_Name, c.Last_Name, c.Gender, c.Date_Of_Birth, c.Email, c.Phone_Number, c.Address, c.City, c.Province, c.Country, c.Postal_Code, c.Membership_Level, SUM(od.Unit_Price * od.Quantity * 1000) AS Total_Order_Amount  FROM Customer c  JOIN Orders o ON c.Customer_ID = o.Customer_ID  JOIN Order_Detail od ON o.Order_ID = od.Order_ID  GROUP BY c.Customer_ID  ORDER BY Total_Order_Amount DESC  LIMIT 5;	phone_market	4
SELECT Email, Phone_Number, Date_Of_Birth,         (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) -         (strftime('%m-%d', 'now') < strftime('%m-%d', Date_Of_Birth)) AS Age  FROM Customer  ORDER BY Age DESC  LIMIT 10;	phone_market	1
WITH OrderIntervals AS (     SELECT          Customer_ID,          Order_Date,          JULIANDAY(LEAD(Order_Date) OVER (PARTITION BY Customer_ID ORDER BY Order_Date)) - JULIANDAY(Order_Date) AS Days_Between_Orders      FROM Orders ) SELECT      c.Phone_Number,      c.Email,      AVG(oi.Days_Between_Orders) AS Avg_Order_Interval  FROM Customer c  LEFT JOIN OrderIntervals oi ON c.Customer_ID = oi.Customer_ID  GROUP BY c.Customer_ID, c.Phone_Number, c.Email  HAVING AVG(oi.Days_Between_Orders) IS NOT NULL  ORDER BY Avg_Order_Interval ASC;	phone_market	2
SELECT Email, Phone_Number, Membership_Level  FROM Customer  WHERE (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) > 60  AND Membership_Level = '钻石'  ORDER BY Date_Of_Birth ASC;	phone_market	3
SELECT Phone_Number, (     CAST(SUBSTR(Phone_Number, 1, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 2, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 3, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 4, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 5, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 6, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 7, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 8, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 9, 1) AS INTEGER) +      CAST(SUBSTR(Phone_Number, 10, 1) AS INTEGER) ) AS Total_Sum  FROM Customer  ORDER BY Total_Sum DESC  LIMIT 5;	phone_market	4
SELECT City, AVG(strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth) - (strftime('%m-%d', 'now') < strftime('%m-%d', Date_Of_Birth))) AS Avg_Age FROM Customer GROUP BY City ORDER BY Avg_Age DESC LIMIT 5;	phone_market	1
SELECT c.Province, AVG((o.Total_Amount - sub.Avg_Amount) * (o.Total_Amount - sub.Avg_Amount)) AS Variance_Total_Amount FROM Customer c JOIN Orders o ON c.Customer_ID = o.Customer_ID JOIN (SELECT c.Province, AVG(o.Total_Amount) AS Avg_Amount FROM Customer c JOIN Orders o ON c.Customer_ID = o.Customer_ID GROUP BY c.Province) sub ON c.Province = sub.Province GROUP BY c.Province ORDER BY Variance_Total_Amount DESC;	phone_market	2
SELECT Email, Phone_Number, Membership_Level FROM Customer WHERE Province IN ('沿海省份1', '沿海省份2') AND Membership_Level IN ('黄金', '钻石') ORDER BY City ASC;	phone_market	3
SELECT City, (COUNT(Customer_ID) * 100) / 1000 AS Customer_Density  FROM Customer  GROUP BY City  ORDER BY Customer_Density DESC  LIMIT 3;	phone_market	4
SELECT First_Name || ' ' || Last_Name AS Full_Name, (LENGTH(First_Name) + LENGTH(Last_Name)) AS Name_Length FROM Customer ORDER BY Name_Length DESC LIMIT 10;	phone_market	1
SELECT First_Name || ' ' || Last_Name AS Full_Name, CAST(LENGTH(First_Name) AS REAL) / NULLIF(LENGTH(Last_Name), 0) AS Name_Ratio FROM Customer ORDER BY Name_Ratio ASC;	phone_market	2
SELECT Email, Phone_Number, First_Name || ' ' || Last_Name AS Full_Name FROM Customer WHERE First_Name LIKE 'A%' AND Last_Name LIKE '%Z' ORDER BY Full_Name ASC;	phone_market	3
SELECT First_Name || ' ' || Last_Name AS Full_Name, (LENGTH(First_Name) + LENGTH(Last_Name)) * 1000 AS Full_Name_Length FROM Customer ORDER BY Full_Name_Length DESC LIMIT 5;	phone_market	4
SELECT Gender, AVG(strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth) - (strftime('%m-%d', 'now') < strftime('%m-%d', Date_Of_Birth))) AS Avg_Age FROM Customer GROUP BY Gender ORDER BY Avg_Age DESC;	phone_market	1
SELECT Gender, SQRT(AVG((Age - Avg_Age) * (Age - Avg_Age))) AS Age_StdDev  FROM (     SELECT Gender,             (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth) -              (CASE WHEN strftime('%m-%d', 'now') < strftime('%m-%d', Date_Of_Birth) THEN 1 ELSE 0 END)) AS Age,            AVG(strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth) -                 (CASE WHEN strftime('%m-%d', 'now') < strftime('%m-%d', Date_Of_Birth) THEN 1 ELSE 0 END))                 OVER (PARTITION BY Gender) AS Avg_Age      FROM Customer ) AS Age_Data  GROUP BY Gender  ORDER BY Age_StdDev DESC;	phone_market	2
SELECT First_Name, Last_Name, Email, Phone_Number FROM Customer WHERE (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) > 50 AND Gender = 'Female' ORDER BY Date_Of_Birth ASC;	phone_market	3
SELECT Gender, AVG((strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth) - (CASE WHEN (strftime('%m-%d', 'now') < strftime('%m-%d', Date_Of_Birth)) THEN 1 ELSE 0 END)) + 100) AS Avg_Age FROM Customer GROUP BY Gender ORDER BY Avg_Age DESC;	phone_market	4
SELECT Email, LENGTH(SUBSTR(Email, INSTR(Email, '@') + 1)) AS Domain_Length FROM Customer ORDER BY Domain_Length DESC LIMIT 10;	phone_market	1
SELECT Phone_Number,         (CAST(SUBSTR(Phone_Number, 1, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 2, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 3, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 4, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 5, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 6, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 7, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 8, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 9, 1) AS INTEGER) +          CAST(SUBSTR(Phone_Number, 10, 1) AS INTEGER)) AS Digit_Sum  FROM Customer  ORDER BY Digit_Sum DESC;	phone_market	2
SELECT First_Name, Last_Name, Email, Phone_Number FROM Customer WHERE Email LIKE '%@gmail.com' AND Phone_Number LIKE '138%' ORDER BY Email ASC;	phone_market	3
SELECT Email, (LENGTH(Email) - LENGTH(SUBSTR(Email, 1, INSTR(Email, '@') - 1)) - 1) * 1000 AS Domain_Length FROM Customer ORDER BY Domain_Length DESC LIMIT 5;	phone_market	4
SELECT Membership_Level, AVG(JULIANDAY('now') - JULIANDAY(Created_At)) AS Avg_Days  FROM Customer  GROUP BY Membership_Level  ORDER BY Avg_Days DESC  LIMIT 5;	phone_market	1
SELECT Membership_Level, AVG((Days_Since_Created - Avg_Days) * (Days_Since_Created - Avg_Days)) AS Created_At_Variance FROM (SELECT Membership_Level, (julianday('now') - julianday(Created_At)) AS Days_Since_Created, AVG(julianday('now') - julianday(Created_At)) OVER (PARTITION BY Membership_Level) AS Avg_Days FROM Customer) AS Days_Data GROUP BY Membership_Level ORDER BY Created_At_Variance DESC;	phone_market	2
SELECT First_Name, Last_Name, Email, Phone_Number  FROM Customer  WHERE Membership_Level = '钻石' AND Created_At >= date('now', '-1 year')  ORDER BY Created_At ASC;	phone_market	3
SELECT Membership_Level, AVG(JULIANDAY('now') - JULIANDAY(DATE(Created_At, '-100 years'))) AS Avg_Days FROM Customer GROUP BY Membership_Level ORDER BY Avg_Days DESC LIMIT 3;	phone_market	4
SELECT od.Order_ID, (od.Quantity * p.Weight) AS Total_Weight FROM Order_Detail od JOIN Phone p ON od.Phone_ID = p.Phone_ID ORDER BY Total_Weight DESC LIMIT 10;	phone_market	1
SELECT od.Order_Detail_ID, od.Total_Price / (od.Quantity * (SELECT Weight FROM Phone WHERE Phone_ID = od.Phone_ID)) AS Price_Weight_Ratio FROM Order_Detail od ORDER BY Price_Weight_Ratio ASC;	phone_market	2
SELECT od.Order_ID, od.Total_Price  FROM Order_Detail od  JOIN Phone p ON od.Phone_ID = p.Phone_ID  WHERE od.Quantity > 10 AND p.Weight < 200  ORDER BY od.Total_Price DESC;	phone_market	3
SELECT od.Order_Detail_ID, (od.Quantity * 1000) * (SELECT Weight FROM Phone WHERE Phone_ID = od.Phone_ID) AS Total_Weight FROM Order_Detail od ORDER BY Total_Weight DESC LIMIT 5;	phone_market	4
SELECT Order_ID, (Quantity * Unit_Price) AS Total_Price FROM Order_Detail ORDER BY Total_Price DESC LIMIT 10;	phone_market	1
SELECT Order_Detail_ID, Total_Price / Quantity AS Price_Quantity_Ratio FROM Order_Detail WHERE Quantity > 0 ORDER BY Price_Quantity_Ratio ASC;	phone_market	2
SELECT Order_ID, Total_Price FROM Order_Detail WHERE Quantity > 5 AND Unit_Price < 1000 ORDER BY Total_Price DESC;	phone_market	3
SELECT Order_Detail_ID, (Quantity * 1000) * Unit_Price AS Total_Price FROM Order_Detail WHERE Quantity > 0 AND Unit_Price > 0 ORDER BY Total_Price DESC LIMIT 5;	phone_market	4
SELECT Order_ID, (Total_Price - Discount + Tax) AS Net_Price FROM Order_Detail ORDER BY Net_Price DESC LIMIT 10;	phone_market	1
SELECT Order_Detail_ID, (Total_Price - Discount + Tax) / Total_Price AS Net_Price_Ratio FROM Order_Detail WHERE Total_Price > 0 ORDER BY Net_Price_Ratio ASC;	phone_market	2
SELECT Order_ID, (Total_Price - Discount + Tax) AS Net_Price FROM Order_Detail WHERE (Total_Price - Discount + Tax) > 1000 AND Tax < 50 ORDER BY Net_Price DESC;	phone_market	3
SELECT Order_Detail_ID, (Total_Price * 10000) - Discount + Tax AS Net_Price FROM Order_Detail ORDER BY Net_Price DESC LIMIT 5;	phone_market	4
SELECT Order_ID, datetime(Updated_At, '+' || Warranty_Period || ' months') AS Warranty_End_Date  FROM Order_Detail  ORDER BY Warranty_End_Date DESC  LIMIT 10;	phone_market	1
SELECT Order_Detail_ID,         (JULIANDAY(DATETIME(Updated_At, '+' || Warranty_Period || ' months')) - JULIANDAY('now')) AS Days_Remaining  FROM Order_Detail  ORDER BY Days_Remaining ASC;	phone_market	2
SELECT Order_ID, datetime(Updated_At, '+' || Warranty_Period || ' months') AS Warranty_End_Date FROM Order_Detail WHERE Warranty_Period > 12 AND Updated_At >= date('now', '-1 year') ORDER BY Warranty_End_Date ASC;	phone_market	3
SELECT Order_Detail_ID,             datetime(Updated_At, '+' || (Warranty_Period + 1000) || ' months') AS Warranty_End_Date      FROM Order_Detail      ORDER BY Warranty_End_Date DESC      LIMIT 5;	phone_market	4
SELECT Order_ID, julianday('now') - julianday(Order_Date) AS Days_Since_Order FROM Orders ORDER BY Days_Since_Order DESC LIMIT 10;	phone_market	1
SELECT o.Customer_ID,         COUNT(o.Order_ID) * 1.0 / (JULIANDAY('now') - JULIANDAY(MIN(o.Order_Date))) AS Order_Frequency_Ratio  FROM Orders o  GROUP BY o.Customer_ID  ORDER BY Order_Frequency_Ratio ASC;	phone_market	2
SELECT Order_ID, Order_Date FROM Orders WHERE Order_Date >= date('now','-1 year') AND Order_Status = 'Delivered' ORDER BY Order_Date ASC;	phone_market	3
SELECT Order_ID, JULIANDAY(DATE(Order_Date, '+100 years')) - JULIANDAY('now') AS Days_Since_Order FROM Orders ORDER BY Days_Since_Order DESC LIMIT 5;	phone_market	4
SELECT Payment_Method, AVG(Total_Amount) AS Avg_Total_Amount FROM Orders GROUP BY Payment_Method ORDER BY Avg_Total_Amount DESC;	phone_market	1
SELECT Payment_Method, STDEV(Total_Amount) AS Standard_Deviation FROM Orders GROUP BY Payment_Method ORDER BY Standard_Deviation DESC;	phone_market	2
SELECT Order_ID, Total_Amount FROM Orders WHERE Total_Amount > 1000 AND Payment_Method = '支付宝' ORDER BY Total_Amount DESC;	phone_market	3
SELECT Payment_Method, AVG(Total_Amount * 10000) AS Average_Amount FROM Orders GROUP BY Payment_Method ORDER BY Average_Amount DESC LIMIT 3;	phone_market	4
SELECT Shipping_Address, COUNT(Order_ID) AS Order_Count FROM Orders GROUP BY Shipping_Address ORDER BY Order_Count DESC LIMIT 10;	phone_market	1
SELECT Shipping_Method, AVG(Total_Amount) AS Average_Amount FROM Orders GROUP BY Shipping_Method ORDER BY Average_Amount ASC;	phone_market	2
SELECT Order_ID, Order_Date FROM Orders WHERE Payment_Status = 'Paid' AND Shipping_Method = '快递' ORDER BY Order_Date ASC;	phone_market	3
SELECT Shipping_Address, COUNT(Order_ID) * 1000 AS Order_Count FROM Orders GROUP BY Shipping_Address ORDER BY Order_Count DESC LIMIT 5;	phone_market	4
SELECT Order_ID, (Discount / Tax) AS Discount_Tax_Ratio FROM Orders WHERE Tax > 0 ORDER BY Discount_Tax_Ratio DESC LIMIT 10;	phone_market	1
SELECT Order_ID, (SUM((Discount - avg_discount) * (Tax - avg_tax)) / (SQRT(SUM((Discount - avg_discount) * (Discount - avg_discount)) * SUM((Tax - avg_tax) * (Tax - avg_tax))))) AS Correlation_Coefficient FROM Orders, (SELECT AVG(Discount) AS avg_discount, AVG(Tax) AS avg_tax FROM Orders) AS avg_table GROUP BY Order_ID ORDER BY Correlation_Coefficient DESC;	phone_market	2
SELECT Order_ID, Discount FROM Orders WHERE Discount > 100 AND Tax < 50 ORDER BY Discount DESC;	phone_market	3
SELECT Order_ID, (Discount * 10000.0) / Tax AS Ratio FROM Orders ORDER BY Ratio DESC LIMIT 5;	phone_market	4
SELECT Brand, AVG(LENGTH(Phone_Name)) AS Avg_Name_Length FROM Phone GROUP BY Brand ORDER BY Avg_Name_Length DESC;	phone_market	1
SELECT Brand, STDEV(LENGTH(Phone_Name)) AS Name_Length_StdDev FROM Phone GROUP BY Brand ORDER BY Name_Length_StdDev DESC;	phone_market	2
SELECT Phone_ID, Phone_Name FROM Phone WHERE Brand = 'Apple' AND LENGTH(Phone_Name) > 10 ORDER BY Phone_Name ASC;	phone_market	3
SELECT Brand, AVG(LENGTH(Phone_Name)) * 1000 AS Avg_Name_Length FROM Phone GROUP BY Brand ORDER BY Avg_Name_Length DESC LIMIT 3;	phone_market	4
SELECT (Battery_Capacity * 3.7) / ((Screen_Size * 2.54 * Screen_Size * 2.54) * (substr(Screen_Resolution, 1, instr(Screen_Resolution, 'x') - 1) * substr(Screen_Resolution, instr(Screen_Resolution, 'x') + 1)) * 0.00001 + 5) AS Battery_Life_Hours FROM Phone WHERE Model = '某手机型号';	phone_market	1
WITH Price_Calculation AS (     SELECT          Phone_ID,          Price AS Initial_Price,          Price * POWER(1 - 0.20, 5) AS Price_After_5_Years,          Price * POWER(1 - 0.20, 3) AS Price_After_3_Years      FROM Phone      WHERE Model = '某手机型号' )  SELECT      pc.Phone_ID,      pc.Initial_Price,      pc.Price_After_5_Years,      pc.Price_After_3_Years,      pc.Price_After_3_Years * (1 - 0.15) AS Discounted_Price_For_Gold_Member  FROM Price_Calculation pc;	phone_market	2
SELECT date(Order_Date, '+' || Warranty_Period || ' months') AS Warranty_End_Date FROM Orders JOIN Order_Detail ON Orders.Order_ID = Order_Detail.Order_ID JOIN Phone ON Order_Detail.Phone_ID = Phone.Phone_ID WHERE Phone.Model = '某手机型号' AND Orders.Order_Date = '2021-06-01';	phone_market	3
WITH Phone_Power_Calculation AS (     SELECT Phone_ID, Battery_Capacity, Screen_Size, Screen_Resolution, Processor, Weight      FROM Phone      WHERE Model = '某手机型号' ), Screen_Power_Calculation AS (     SELECT Phone_ID,             (Screen_Size * 2.54 * Screen_Size * 2.54) AS Screen_Area,             (Screen_Resolution / 1000) * (Screen_Resolution / 1000) * 0.00001 AS Screen_Power      FROM Phone_Power_Calculation ), Total_Power_Calculation AS (     SELECT ppc.Phone_ID,             ppc.Battery_Capacity,             ppc.Processor,             ppc.Weight,             spc.Screen_Power,             (spc.Screen_Power + ppc.Processor) AS Total_Power      FROM Phone_Power_Calculation ppc      JOIN Screen_Power_Calculation spc ON ppc.Phone_ID = spc.Phone_ID ) SELECT tpc.Phone_ID,         (tpc.Battery_Capacity * 3.7 / tpc.Total_Power) AS Battery_Life_Hours,         ((tpc.Battery_Capacity * 3.7 / 1000) / tpc.Weight) AS Energy_Density_Wh_Kg  FROM Total_Power_Calculation tpc;	phone_market	4
SELECT (Screen_Size * 2.54 * Screen_Size * 2.54) * (substr(Screen_Resolution, 1, instr(Screen_Resolution, 'x') - 1) * substr(Screen_Resolution, instr(Screen_Resolution, 'x') + 1)) * 500 * 0.00001 AS Screen_Power_Consumption FROM Phone WHERE Model = '某手机型号';	phone_market	1
WITH Pixel_Density_Calculation AS (     SELECT          Phone_ID,          Screen_Size,          Screen_Resolution,          SQRT(POWER(SUBSTR(Screen_Resolution, 1, INSTR(Screen_Resolution, 'x') - 1), 2) +               POWER(SUBSTR(Screen_Resolution, INSTR(Screen_Resolution, 'x') + 1), 2)) / Screen_Size AS PPI      FROM Phone      WHERE Model = '某手机型号' )  SELECT      pdc.Phone_ID,      pdc.Screen_Size,      pdc.Screen_Resolution,      pdc.PPI AS Original_PPI,      SQRT(POWER(SUBSTR(pdc.Screen_Resolution, 1, INSTR(pdc.Screen_Resolution, 'x') - 1), 2) +           POWER(SUBSTR(pdc.Screen_Resolution, INSTR(pdc.Screen_Resolution, 'x') + 1), 2)) / 7.5 AS New_PPI  FROM Pixel_Density_Calculation pdc;	phone_market	2
SELECT Model, Screen_Size, CASE WHEN Screen_Size <= 6.5 THEN '适合单手操作' ELSE '不适合单手操作' END AS Single_Hand_Usability FROM Phone WHERE Model = '某手机型号' UNION ALL SELECT Model, 7.5 AS Screen_Size, CASE WHEN 7.5 <= 6.5 THEN '适合单手操作' ELSE '不适合单手操作' END AS Single_Hand_Usability FROM Phone WHERE Model = '某手机型号';	phone_market	3
WITH Screen_Power_Calculation AS (     SELECT          Phone_ID,          Screen_Size,          Screen_Resolution,          Battery_Capacity      FROM Phone      WHERE Model = '某手机型号' ),  Power_Usage AS (     SELECT          spc.Phone_ID,          (spc.Screen_Size * 2.54 * spc.Screen_Size * 2.54) AS Screen_Area,         (CAST(SUBSTR(spc.Screen_Resolution, 1, INSTR(spc.Screen_Resolution, 'x') - 1) AS REAL) *           CAST(SUBSTR(spc.Screen_Resolution, INSTR(spc.Screen_Resolution, 'x') + 1) AS REAL)) AS Total_Pixels,         (spc.Screen_Size * 2.54 * spc.Screen_Size * 2.54) *          (CAST(SUBSTR(spc.Screen_Resolution, 1, INSTR(spc.Screen_Resolution, 'x') - 1) AS REAL) *           CAST(SUBSTR(spc.Screen_Resolution, INSTR(spc.Screen_Resolution, 'x') + 1) AS REAL)) * 1000 * 0.00001 AS Screen_Power      FROM Screen_Power_Calculation spc )  SELECT      pu.Phone_ID,      pu.Screen_Power,      (spc.Battery_Capacity * 3.7 / pu.Screen_Power) AS Battery_Life_Hours  FROM Power_Usage pu  JOIN Screen_Power_Calculation spc ON pu.Phone_ID = spc.Phone_ID;	phone_market	4
SELECT (Screen_Size * 2.54 * Screen_Size * 2.54) * (SUBSTR(Screen_Resolution, 1, INSTR(Screen_Resolution, 'x') - 1) * SUBSTR(Screen_Resolution, INSTR(Screen_Resolution, 'x') + 1)) * 500 * 0.00001 AS Screen_Power_Consumption FROM Phone WHERE Model = '某手机型号';	phone_market	1
WITH Pixel_Density_Calculation AS (     SELECT          Phone_ID,          Screen_Size,          Screen_Resolution,          SQRT(POWER(SUBSTR(Screen_Resolution, 1, INSTR(Screen_Resolution, 'x') - 1), 2) + POWER(SUBSTR(Screen_Resolution, INSTR(Screen_Resolution, 'x') + 1), 2)) / Screen_Size AS PPI      FROM Phone      WHERE Model = '某手机型号' )  SELECT      pdc.Phone_ID,      pdc.Screen_Size,      pdc.Screen_Resolution,      pdc.PPI AS Original_PPI,      SQRT(POWER(SUBSTR(pdc.Screen_Resolution, 1, INSTR(pdc.Screen_Resolution, 'x') - 1), 2) + POWER(SUBSTR(pdc.Screen_Resolution, INSTR(pdc.Screen_Resolution, 'x') + 1), 2)) / 7.5 AS New_PPI  FROM Pixel_Density_Calculation pdc;	phone_market	2
SELECT Model, Screen_Size, Screen_Resolution, CASE WHEN (SQRT(POWER(substr(Screen_Resolution, 1, instr(Screen_Resolution, 'x')-1), 2) + POWER(substr(Screen_Resolution, instr(Screen_Resolution, 'x')+1), 2)) / Screen_Size) >= 300 THEN '适合日常使用' ELSE '不适合日常使用' END AS Clarity_Suitability FROM Phone WHERE Model = 'SM-S9010' UNION ALL SELECT Model, 7.5 AS Screen_Size, Screen_Resolution, CASE WHEN (SQRT(POWER(substr(Screen_Resolution, 1, instr(Screen_Resolution, 'x')-1), 2) + POWER(substr(Screen_Resolution, instr(Screen_Resolution, 'x')+1), 2)) / 7.5) >= 300 THEN '适合日常使用' ELSE '不适合日常使用' END AS Clarity_Suitability FROM Phone WHERE Model = 'SM-S9010';	phone_market	3
WITH Screen_Power_Calculation AS (         SELECT Phone_ID, Screen_Size, Screen_Resolution, Battery_Capacity          FROM Phone          WHERE Model = 'A2884'     ),      Power_Usage AS (         SELECT              spc.Phone_ID,              (spc.Screen_Size * 2.54 * spc.Screen_Size * 2.54) AS Screen_Area,              (CAST(substr(spc.Screen_Resolution, 1, instr(spc.Screen_Resolution, 'x') - 1) AS REAL) *               CAST(substr(spc.Screen_Resolution, instr(spc.Screen_Resolution, 'x') + 1) AS REAL)) AS Total_Pixels,              (spc.Screen_Size * 2.54 * spc.Screen_Size * 2.54) *              (CAST(substr(spc.Screen_Resolution, 1, instr(spc.Screen_Resolution, 'x') - 1) AS REAL) *               CAST(substr(spc.Screen_Resolution, instr(spc.Screen_Resolution, 'x') + 1) AS REAL)) * 1000 * 0.00001 AS Screen_Power          FROM Screen_Power_Calculation spc     )      SELECT          pu.Phone_ID,          pu.Screen_Power,          (spc.Battery_Capacity * 3.7 / pu.Screen_Power) AS Battery_Life_Hours      FROM Power_Usage pu      JOIN Screen_Power_Calculation spc ON pu.Phone_ID = spc.Phone_ID;	phone_market	4
SELECT Model, Storage_Capacity, RAM_Capacity, (400 / 500) * 100 AS Storage_Bandwidth_Utilization, (15 / 20) * 100 AS RAM_Bandwidth_Utilization FROM Phone WHERE Model = '2201123C';	phone_market	1
WITH Storage_Calculation AS (     SELECT          Phone_ID,          Storage_Capacity,          RAM_Capacity,          20 AS OS_Storage,          2 AS OS_RAM,          10 * 5 AS App_Storage,          10 * 0.5 AS App_RAM      FROM Phone      WHERE Model = 'NOH-AN00' )  SELECT      sc.Phone_ID,      (sc.Storage_Capacity - sc.OS_Storage - sc.App_Storage) AS Remaining_Storage,      (sc.RAM_Capacity - sc.OS_RAM - sc.App_RAM) AS Remaining_RAM  FROM Storage_Calculation sc;	phone_market	2
SELECT Model, Storage_Capacity, RAM_Capacity, (Storage_Capacity - 20 - (1000 * 5 + 500 * 10) / 1024) AS Remaining_Storage_Space FROM Phone WHERE Model = '某手机型号';	phone_market	3
WITH Storage_Calculation AS (     SELECT          Phone_ID,          Storage_Capacity,          RAM_Capacity,          50 AS OS_Storage,          8 AS OS_RAM,          100 * 10 AS App_Storage,          100 * 2 AS App_RAM      FROM Phone      WHERE Model = '某手机型号' ),  Bandwidth_Utilization AS (     SELECT          Phone_ID,          150 AS Actual_Speed,          200 AS Max_Bandwidth      FROM Phone      WHERE Model = '某手机型号' )  SELECT      sc.Phone_ID,      (sc.Storage_Capacity - sc.OS_Storage - sc.App_Storage) AS Remaining_Storage,      (sc.RAM_Capacity - sc.OS_RAM - sc.App_RAM) AS Remaining_RAM,      (bu.Actual_Speed * 1.0 / bu.Max_Bandwidth) AS Bandwidth_Utilization  FROM Storage_Calculation sc  JOIN Bandwidth_Utilization bu ON sc.Phone_ID = bu.Phone_ID;	phone_market	4
SELECT Model, Battery_Capacity, (Battery_Capacity * 3.7) / (2 + 3) AS Battery_Life_Hours FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210');	phone_market	1
WITH Charging_Time_Calculation AS (     SELECT          Phone_ID,          Battery_Capacity,          18 AS Charging_Power,          0.9 AS Charging_Efficiency,          3.7 AS Voltage      FROM Phone      WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210') ) SELECT      ctc.Phone_ID,      (ctc.Battery_Capacity * ctc.Voltage) / (ctc.Charging_Power * ctc.Charging_Efficiency) AS Charging_Time_Hours,      (ctc.Battery_Capacity * ctc.Voltage) / (30 * ctc.Charging_Efficiency) AS Charging_Time_Hours_With_Higher_Power  FROM Charging_Time_Calculation ctc;	phone_market	2
SELECT Model, Battery_Capacity, (Battery_Capacity * 3.7) / 1.5 AS Battery_Life_Hours FROM Phone WHERE Model = '某手机型号';	phone_market	3
WITH Power_Calculation AS (     SELECT          Phone_ID,          Battery_Capacity,          Weight,          200 AS Screen_Power,          300 AS Processor_Power,          3.7 AS Voltage      FROM Phone      WHERE Model = '某手机型号' )  SELECT      pc.Phone_ID,      (pc.Battery_Capacity * pc.Voltage) / (pc.Screen_Power + pc.Processor_Power) AS Battery_Life_Hours,      ((pc.Battery_Capacity * pc.Voltage) / 1000) / pc.Weight AS Energy_Density_Wh_Kg  FROM Power_Calculation pc;	phone_market	4
SELECT Model, Camera_Resolution, (Camera_Resolution * 1000000 * 1.4) AS Total_Sensor_Area, (1 / POWER(1.8, 2)) AS Light_Intake FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210');	phone_market	1
WITH Storage_Calculation AS (         SELECT              Phone_ID,              Storage_Capacity,              10 AS OS_Storage,              5 * 100 AS Photo_Storage          FROM Phone          WHERE Operating_System = 'iOS' AND Camera_Resolution = '12MP'     )      SELECT          sc.Phone_ID,          sc.Photo_Storage AS Total_Photo_Storage,          (sc.Storage_Capacity - sc.OS_Storage - sc.Photo_Storage / 1024) AS Remaining_Storage      FROM Storage_Calculation sc;	phone_market	2
SELECT Model, Camera_Resolution, (3840 * 2160) AS "4K_Pixel_Count", (3840 * 2160 * 100.0 / Camera_Resolution) AS "Used_Pixel_Percentage" FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210');	phone_market	3
WITH Storage_Calculation AS (     SELECT          Phone_ID,          Storage_Capacity,          100 AS OS_Storage,          50 * 1000 AS Photo_Storage      FROM Phone      WHERE Operating_System = 'Android' AND Camera_Resolution = '200MP' ),  Camera_Calculation AS (     SELECT          Phone_ID,          200000000 * 0.8 AS Total_Sensor_Area,          1 / (0.95 * 0.95) AS Light_Intake      FROM Phone      WHERE Operating_System = 'Android' AND Camera_Resolution = '200MP' )  SELECT      sc.Phone_ID,      sc.Photo_Storage / 1024 AS Total_Photo_Storage_GB,      (sc.Storage_Capacity - sc.OS_Storage - sc.Photo_Storage / 1024) AS Remaining_Storage,      cc.Total_Sensor_Area,      cc.Light_Intake  FROM Storage_Calculation sc  JOIN Camera_Calculation cc ON sc.Phone_ID = cc.Phone_ID;	phone_market	4
SELECT Model, Color, 348 AS Shell_Temperature_K FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210') AND Color = 'Black';	phone_market	1
WITH Price_Calculation AS (     SELECT Phone_ID, Color, Price, Processor      FROM Phone      WHERE Color = '黑色' AND Processor = 100000 ),  Silver_Price AS (     SELECT pc.Phone_ID, pc.Price * 1.1 AS Silver_Price      FROM Price_Calculation pc      WHERE pc.Color = '黑色' ),  Performance_Price AS (     SELECT sp.Phone_ID, sp.Silver_Price * POWER(1.05, (120000 - 100000) / 10000) AS Final_Price      FROM Silver_Price sp )  SELECT pp.Phone_ID, pp.Final_Price  FROM Performance_Price pp;	phone_market	2
SELECT Model, Color, Processor, Price, Price * 1.15 AS Golden_Price, Price * 1.15 * 0.8 AS Low_End_Golden_Price FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210') AND Color = 'Black' AND Processor = (SELECT Processor FROM Phone WHERE Processor = '高端型号');	phone_market	3
WITH Temperature_Calculation AS (     SELECT Phone_ID, Color, 100 AS Processor_Power, 0.95 AS Emissivity, 25 AS Ambient_Temperature      FROM Phone      WHERE Color = '彩虹色' ),  Price_Calculation AS (     SELECT Phone_ID, Color, Price      FROM Phone      WHERE Color = '黑色' AND Processor = 1000000 )  SELECT      tc.Phone_ID,      POWER((tc.Processor_Power / (tc.Emissivity * 5.67e-8 * 0.01)) + POWER(tc.Ambient_Temperature + 273, 4), 0.25) - 273 AS Surface_Temperature,      pc.Price * 1.5 AS Rainbow_Price  FROM Temperature_Calculation tc  JOIN Price_Calculation pc ON tc.Phone_ID = pc.Phone_ID;	phone_market	4
SELECT Model, Weight, (Weight + (1000 * 0.5)) * Stock_Quantity AS Total_Packaging_Weight FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210');	phone_market	1
WITH Weight_Adjustment AS (     SELECT          Phone_ID,          Weight,          Price,          Stock_Quantity,          (250 - Weight) * 10 AS Price_Increase_250,          (150 - Weight) * 10 AS Price_Decrease_150      FROM Phone      WHERE Model = '某手机型号' )  SELECT      wa.Phone_ID,      wa.Price + wa.Price_Increase_250 AS New_Price_250,      (wa.Price + wa.Price_Increase_250) * wa.Stock_Quantity AS Total_Value_250,      wa.Price + wa.Price_Decrease_150 AS New_Price_150,      (wa.Price + wa.Price_Decrease_150) * wa.Stock_Quantity AS Total_Value_150  FROM Weight_Adjustment wa;	phone_market	2
SELECT Model, Price, Stock_Quantity, Stock_Quantity + ((6000 - Price) / 100 * 10) AS Stock_At_6000, Stock_Quantity + ((4000 - Price) / 100 * 10) AS Stock_At_4000 FROM Phone WHERE Model IN ('A2884', 'SM-S9010', '2201123C', 'NOH-AN00', 'NE2210');	phone_market	3
WITH Weight_Adjustment AS (     SELECT          Phone_ID,          Weight,          Price,          Stock_Quantity,          (2000 - Weight) * 100 AS Price_Increase_2000,          (500 - Weight) * 100 AS Price_Decrease_500      FROM Phone      WHERE Model = '某手机型号' ),  Stock_Adjustment AS (     SELECT          wa.Phone_ID,          wa.Price + wa.Price_Increase_2000 AS New_Price_2000,          wa.Stock_Quantity + ((wa.Price + wa.Price_Increase_2000 - wa.Price) / 100 * -100) AS New_Stock_2000,          wa.Price + wa.Price_Decrease_500 AS New_Price_500,          wa.Stock_Quantity + ((wa.Price + wa.Price_Decrease_500 - wa.Price) / 100 * -100) AS New_Stock_500      FROM Weight_Adjustment wa )  SELECT      sa.Phone_ID,      sa.New_Price_2000,      sa.New_Stock_2000,      sa.New_Price_500,      sa.New_Stock_500  FROM Stock_Adjustment sa;	phone_market	4
SELECT Orders.Order_ID, SUM(Order_Detail.Quantity * Phone.Weight / 1000) AS Total_Weight, SUM(Order_Detail.Quantity * Phone.Weight / 1000) * 10 AS Total_Shipping_Cost FROM Orders JOIN Order_Detail ON Orders.Order_ID = Order_Detail.Order_ID JOIN Phone ON Order_Detail.Phone_ID = Phone.Phone_ID WHERE Orders.Shipping_Method = '快递' GROUP BY Orders.Order_ID;	phone_market	1
WITH Order_Calculation AS (     SELECT          o.Order_ID,          o.Customer_ID,          SUM(od.Quantity * od.Unit_Price) AS Total_Amount,          c.Membership_Level      FROM Orders o      JOIN Order_Detail od ON o.Order_ID = od.Order_ID      JOIN Customer c ON o.Customer_ID = c.Customer_ID      WHERE c.Membership_Level = '黄金'      GROUP BY o.Order_ID )  SELECT      oc.Order_ID,      oc.Total_Amount,      oc.Total_Amount * 0.1 AS Discount,      (oc.Total_Amount - oc.Total_Amount * 0.1) * 0.05 AS Tax,      oc.Total_Amount - (oc.Total_Amount * 0.1) + ((oc.Total_Amount - oc.Total_Amount * 0.1) * 0.05) AS Final_Amount  FROM Order_Calculation oc;	phone_market	2
SELECT Order_ID, datetime(Created_at, '+2 days') AS Earliest_Delivery_Date FROM Orders WHERE Order_Status = 'Shipped' AND Shipping_Method = '快递' AND Shipping_Address LIKE '%北京市%' AND Created_at = '2023-10-01';	phone_market	3
WITH Shipping_Calculation AS (     SELECT          o.Order_ID,          o.Customer_ID,          o.Order_Date,          o.Total_Amount,          o.Shipping_Method,          o.Shipping_Address,          c.Membership_Level,          SUM(p.Weight * od.Quantity) / 1000 AS Total_Weight      FROM Orders o      JOIN Order_Detail od ON o.Order_ID = od.Order_ID      JOIN Phone p ON od.Phone_ID = p.Phone_ID      JOIN Customer c ON o.Customer_ID = c.Customer_ID      WHERE c.Membership_Level = '钻石'      GROUP BY o.Order_ID )  SELECT      sc.Order_ID,      sc.Total_Weight * 10 AS Total_Shipping_Cost,      sc.Total_Amount - (sc.Total_Amount * 0.2) + ((sc.Total_Amount - sc.Total_Amount * 0.2) * 0.05) AS Final_Amount,      date(sc.Order_Date, '+10 days') AS Earliest_Delivery_Date  FROM Shipping_Calculation sc;	phone_market	4
SELECT Train_ID, Train_Name, Passenger_Capacity_Open, Design_Speed, 0.5 * 1.225 * POWER(Design_Speed, 2) * 0.8 * Passenger_Capacity_Open AS Air_Resistance FROM ConventionalTrains WHERE Passenger_Capacity_Open IN (100, 200) AND Design_Speed = 120;	railway	1
SELECT Train_ID, Train_Name, (Passenger_Capacity_Open + Passenger_Capacity_Closed) * 70.0 / (Weight * 1000) AS Passenger_Weight_Ratio FROM ConventionalTrains;	railway	2
SELECT Train_ID, Train_Name, Passenger_Capacity_Open + Passenger_Capacity_Closed AS Total_Passenger_Capacity FROM ConventionalTrains WHERE Passenger_Capacity_Open = 100 AND Passenger_Capacity_Closed = 150;	railway	3
SELECT Train_ID, Train_Name, Passenger_Capacity_Open, Passenger_Capacity_Closed, Weight, ((Passenger_Capacity_Open + Passenger_Capacity_Closed) * 70.0 / 1000.0) / Weight AS Passenger_Weight_Ratio FROM ConventionalTrains WHERE Passenger_Capacity_Open = 1000 AND Passenger_Capacity_Closed = 1500 AND Weight = 80;	railway	4
SELECT Train_ID, Train_Name, Track_Gauge, Weight, (Track_Gauge / 1000.0) * (Weight / 10.0) AS Stability_Coefficient FROM ConventionalTrains WHERE (Track_Gauge = 1435 AND Weight = 80) OR (Track_Gauge = 1435 AND Weight = 100) OR (Track_Gauge = 1520 AND Weight = 80) OR (Track_Gauge = 1520 AND Weight = 100);	railway	1
SELECT Train_ID, Train_Name,         Weight / (Track_Gauge / 1000.0) AS Pressure_1435_80,         Weight / (Track_Gauge / 1000.0) AS Pressure_1435_100,         Weight / (Track_Gauge / 1000.0) AS Pressure_1520_80,         Weight / (Track_Gauge / 1000.0) AS Pressure_1520_100  FROM ConventionalTrains;	railway	2
SELECT Train_ID, Train_Name, (Track_Gauge / 1000.0) * (Weight / 10.0) AS Stability_Score FROM ConventionalTrains WHERE Track_Gauge = 1435 AND Weight = 80;	railway	3
UPDATE ConventionalTrains  SET Track_Gauge = 2500  WHERE Track_Gauge = 2000 AND Weight = 200  RETURNING Train_ID, Train_Name, Track_Gauge, Weight, (Track_Gauge / 1000.0) * (Weight / 10.0) AS Stability_Coefficient;	railway	4
SELECT Train_ID, Train_Name, Design_Speed, (POWER(Design_Speed * 1000.0 / 3600.0, 2) / (2.0 * 1.5)) AS Braking_Distance FROM ConventionalTrains WHERE Design_Speed = 300;	railway	1
SELECT Weight + (Passenger_Capacity_Open + Passenger_Capacity_Closed) * 70 / 1000 AS Total_Weight, (Weight + (Passenger_Capacity_Open + Passenger_Capacity_Closed) * 70 / 1000) / (50 * 0.06) AS Pressure FROM ConventionalTrains WHERE Weight = 600;	railway	2
SELECT Floor_Material, COUNT(*) AS UsageCount, AVG(CASE WHEN Floor_Fire_Resistance = 'high' THEN 3 WHEN Floor_Fire_Resistance = 'medium' THEN 2 ELSE 1 END) AS FireScore, AVG(CASE WHEN Floor_Slip_Resistance = 'high' THEN 3 WHEN Floor_Slip_Resistance = 'medium' THEN 2 ELSE 1 END) AS SlipScore FROM DoorsAndCompartments WHERE Train_ID IN (SELECT Train_ID FROM HighSpeed_Trains) GROUP BY Floor_Material ORDER BY FireScore DESC, SlipScore DESC LIMIT 1;	railway	3
SELECT Train_ID, Train_Name, Design_Speed, Floor_Material, Weight, ((Weight + 300) * 9.81 * 1000) / 150 AS Stress FROM ConventionalTrains WHERE Design_Speed = 1500 AND Floor_Material = '普通木材' AND Weight = 1500;	railway	4
SELECT Train_ID, Train_Name, Door_Width, Door_Height, (0.5 * 1.225 * POWER(200 * 1000 / 3600, 2) * 0.8 * (Door_Width / 1000.0 * Door_Height / 1000.0)) AS Air_Resistance_Force FROM ConventionalTrains WHERE Door_Width = 1200 AND Door_Height = 2200;	railway	1
SELECT (Door_Width/1000.0 * Door_Height/1000.0) AS Door_Area, ((Door_Width/1000.0 * Door_Height/1000.0)/0.2) * (30/2) AS Passenger_Flow FROM ConventionalTrains WHERE Door_Width = 1000 AND Door_Height = 2000;	railway	2
SELECT Door_Width, Door_Height, (Door_Width * Door_Height) AS DoorArea, COUNT(*) AS DesignCount FROM ConventionalTrains GROUP BY Door_Width, Door_Height ORDER BY DoorArea DESC, DesignCount DESC LIMIT 1;	railway	3
SELECT Train_ID, Train_Name, Door_Width, Door_Height, 0.5 * 1.225 * POWER(500/3.6, 2) * 0.8 AS Wind_Pressure FROM ConventionalTrains WHERE Door_Width = 3000 AND Door_Height = 3000;	railway	4
SELECT Train_ID, Train_Name, Max_Speed, Total_Power, (Total_Power * 1000) / (Max_Speed * 1000 / 3600 * 0.9) AS Traction_Force FROM DieselMultipleUnits WHERE Max_Speed = 160 AND Total_Power = 3000;	railway	1
SELECT Passenger_Capacity / 18 AS Avg_Passenger_Per_Compartment FROM DieselMultipleUnits WHERE Formation = '18k-22' AND Passenger_Capacity = 500;	railway	2
SELECT Formation, COUNT(*) AS FormationCount, AVG(Total_Power) AS AvgPower, AVG(Max_Speed) AS AvgSpeed FROM DieselMultipleUnits GROUP BY Formation ORDER BY AvgPower DESC, AvgSpeed DESC;	railway	3
SELECT Train_ID, Train_Name, Formation, Passenger_Capacity, (Passenger_Capacity / 30) AS Average_Passenger_Per_Compartment FROM DieselMultipleUnits WHERE Formation = '30k-60' AND Passenger_Capacity = 8000;	railway	4
SELECT Train_ID, Train_Name, Passenger_Capacity, (Passenger_Capacity * 70) AS Total_Weight_Increase FROM DieselMultipleUnits WHERE Passenger_Capacity = 800;	railway	1
SELECT Fuel_Efficiency * 1000 AS Total_Fuel_Consumption FROM DieselMultipleUnits WHERE Total_Power = 5000 AND Fuel_Type = 'diesel' AND Fuel_Efficiency = 2.5;	railway	2
SELECT Passenger_Capacity, AVG(Door_Width) AS AvgDoorWidth, COUNT(DISTINCT Compartment_ID) AS DoorCount FROM DieselMultipleUnits JOIN DoorsAndCompartments ON DieselMultipleUnits.Train_ID = DoorsAndCompartments.Train_ID GROUP BY Passenger_Capacity ORDER BY Passenger_Capacity DESC;	railway	3
SELECT Train_ID, Train_Name, Formation, Passenger_Capacity, (Passenger_Capacity / 50) AS Average_Passenger_Per_Compartment FROM DieselMultipleUnits WHERE Formation = '50k-100' AND Passenger_Capacity = 5000;	railway	4
SELECT Engine_Type, AVG(Fuel_Efficiency) AS Avg_Fuel_Efficiency, MIN(Emission_Level) AS Min_Emission_Level FROM DieselMultipleUnits GROUP BY Engine_Type ORDER BY Avg_Fuel_Efficiency ASC, Min_Emission_Level ASC LIMIT 1;	railway	1
SELECT Fuel_Type, MAX(Total_Power / Fuel_Efficiency) AS Max_Ratio FROM DieselMultipleUnits WHERE Fuel_Type IN ('diesel', 'biclue') GROUP BY Fuel_Type ORDER BY Max_Ratio DESC LIMIT 1;	railway	2
SELECT Engine_Type, AVG(Fuel_Efficiency) AS AvgFuelEfficiency, COUNT(*) AS EngineCount FROM DieselMultipleUnits WHERE Emission_Level = 'low' GROUP BY Engine_Type ORDER BY AvgFuelEfficiency DESC LIMIT 1;	railway	3
SELECT Train_ID, Train_Name, Total_Power, Fuel_Efficiency, (Total_Power / Fuel_Efficiency) AS Power_Efficiency_Ratio, Emission_Level FROM DieselMultipleUnits WHERE Fuel_Efficiency = 1000;	railway	4
SELECT 'ConventionalTrains' AS Train_Type, 0.5 * 800 * (Design_Speed * 1000 / 3600) * (Design_Speed * 1000 / 3600) AS Kinetic_Energy FROM ConventionalTrains UNION ALL SELECT 'DieselMultipleUnits' AS Train_Type, 0.5 * 1000 * (Max_Speed * 1000 / 3600) * (Max_Speed * 1000 / 3600) AS Kinetic_Energy FROM DieselMultipleUnits;	railway	1
WITH ParamCount AS (     SELECT 'ConventionalTrains' AS Train_Type,             LENGTH(Description) - LENGTH(REPLACE(Description, ';', '')) + 1 AS Param_Count      FROM ConventionalTrains      UNION ALL      SELECT 'DieselMultipleUnits' AS Train_Type,             LENGTH(Description) - LENGTH(REPLACE(Description, ';', '')) + 1 AS Param_Count      FROM DieselMultipleUnits )  SELECT Train_Type, MAX(Param_Count) AS Max_Param_Count  FROM ParamCount  GROUP BY Train_Type  ORDER BY Max_Param_Count DESC  LIMIT 1;	railway	2
SELECT 'ConventionalTrains' AS TrainType, AVG(Passenger_Capacity_Open + Passenger_Capacity_Closed) AS AvgPassengerCapacity, AVG(Design_Speed) AS AvgMaxSpeed FROM ConventionalTrains UNION ALL SELECT 'DieselMultipleUnits' AS TrainType, AVG(Passenger_Capacity) AS AvgPassengerCapacity, AVG(Max_Speed) AS AvgMaxSpeed FROM DieselMultipleUnits ORDER BY AvgPassengerCapacity DESC, AvgMaxSpeed DESC LIMIT 1;	railway	3
SELECT Train_ID, Train_Name, Weight, Design_Speed, 0.5 * Weight * POWER(Design_Speed / 3.6, 2) AS Kinetic_Energy FROM ConventionalTrains WHERE Design_Speed = 1000;	railway	4
SELECT Compartment_ID, Train_ID, Door_Width, Door_Height, (Door_Width * Door_Height) AS Door_Area FROM DoorsAndCompartments ORDER BY Door_Area DESC LIMIT 1;	railway	1
WITH High_Slip_Resistance AS (     SELECT COUNT(*) AS High_Slip_Count      FROM DoorsAndCompartments      WHERE Floor_Slip_Resistance = 'high' ),  High_Slip_And_Safety AS (     SELECT COUNT(*) AS High_Slip_And_Safety_Count      FROM DoorsAndCompartments      WHERE Floor_Slip_Resistance = 'high' AND Window_Safety_Level = 'high' )  SELECT High_Slip_Count, High_Slip_And_Safety_Count,         (High_Slip_And_Safety_Count * 1.0 / High_Slip_Count) AS Safety_Ratio  FROM High_Slip_Resistance, High_Slip_And_Safety;	railway	2
SELECT Floor_Material, COUNT(*) AS MaterialCount FROM DoorsAndCompartments WHERE Floor_Water_Resistance = 1 GROUP BY Floor_Material ORDER BY MaterialCount DESC LIMIT 1;	railway	3
SELECT Compartment_ID, Train_ID, Door_Width, Door_Height, (Door_Width * Door_Height) AS Door_Area FROM DoorsAndCompartments WHERE Door_Width = 10000;	railway	4
SELECT Compartment_ID, Train_ID, Window_Material, Window_Safety_Level, (0.5 * 1000 * POWER(300 * 1000 / 3600, 2) / (Door_Width * Door_Height)) AS Impact_Force FROM DoorsAndCompartments WHERE Window_Material = '钢化玻璃';	railway	1
WITH High_Safety AS (   SELECT COUNT(*) AS High_Safety_Count    FROM DoorsAndCompartments    WHERE Window_Safety_Level = 'high' ),  High_Safety_And_Tempered AS (   SELECT COUNT(*) AS High_Safety_And_Tempered_Count    FROM DoorsAndCompartments    WHERE Window_Safety_Level = 'high' AND Window_Material = '钢化玻璃' )  SELECT    High_Safety_Count,    High_Safety_And_Tempered_Count,    (High_Safety_And_Tempered_Count * 1.0 / High_Safety_Count) AS Tempered_Ratio  FROM High_Safety, High_Safety_And_Tempered;	railway	2
SELECT Window_Material, COUNT(*) AS MaterialCount FROM DoorsAndCompartments WHERE Window_Safety_Level = 'high' GROUP BY Window_Material ORDER BY MaterialCount DESC LIMIT 1;	railway	3
SELECT COUNT(CASE WHEN Window_Material = '钢化玻璃' THEN 1 END) * 1.0 / COUNT(*) AS Proportion FROM DoorsAndCompartments WHERE Window_Safety_Level = 'high';	railway	4
SELECT Compartment_ID, Train_ID, Floor_Material, Floor_Slip_Resistance, CASE WHEN Floor_Slip_Resistance = 'high' THEN 3 * 0.5 WHEN Floor_Slip_Resistance = 'medium' THEN 2 * 0.5 WHEN Floor_Slip_Resistance = 'low' THEN 1 * 0.5 END AS Friction_Coefficient FROM DoorsAndCompartments WHERE Floor_Material = '橡胶';	railway	1
WITH High_Slip_Resistance AS (     SELECT COUNT(*) AS High_Slip_Count      FROM DoorsAndCompartments      WHERE Floor_Slip_Resistance = 'high' ),  High_Slip_And_Rubber AS (     SELECT COUNT(*) AS High_Slip_And_Rubber_Count      FROM DoorsAndCompartments      WHERE Floor_Slip_Resistance = 'high' AND Floor_Material = '橡胶' )  SELECT High_Slip_Count, High_Slip_And_Rubber_Count,         (High_Slip_And_Rubber_Count * 1.0 / High_Slip_Count) AS Rubber_Ratio  FROM High_Slip_Resistance, High_Slip_And_Rubber;	railway	2
SELECT Floor_Material, COUNT(*) AS MaterialCount FROM DoorsAndCompartments WHERE Floor_Slip_Resistance = 'high' GROUP BY Floor_Material ORDER BY MaterialCount DESC LIMIT 1;	railway	3
SELECT COUNT(CASE WHEN Floor_Material = '橡胶' THEN 1 END) * 1.0 / COUNT(*) AS Proportion FROM DoorsAndCompartments WHERE Floor_Slip_Resistance = 'high';	railway	4
SELECT Train_ID, Train_Name, Max_Speed, Air_Resistance, (0.5 * 1.225 * POWER(Max_Speed * 1000 / 3600, 2) * (Air_Resistance / 100) * 10) AS Air_Resistance_Force FROM HighSpeed_Trains;	railway	1
SELECT hs.Train_Name, hs.Blocking_Ratio * ts.Tunnel_Cross_Section AS Blocking_Product  FROM HighSpeed_Trains hs  JOIN TrackSystems ts ON hs.Train_ID = ts.Track_ID  ORDER BY Blocking_Product DESC  LIMIT 3;	railway	2
SELECT AVG(Operating_Speed) AS Avg_Operating_Speed FROM HighSpeed_Trains WHERE Sealing_Requirement = 'high';	railway	3
SELECT Train_ID, Train_Name, 0.5 * (3 * Static_Load_Capacity) * POWER(1000 * 1000.0 / 3600, 2) AS Kinetic_Energy FROM HighSpeed_Trains ORDER BY Kinetic_Energy DESC LIMIT 5;	railway	4
SELECT Train_ID, Train_Name, Max_Speed, (0.5 * 1.225 * POWER(Max_Speed * 1000.0 / 3600.0, 3) * 0.8 * 12) AS Air_Resistance_Power FROM HighSpeed_Trains;	railway	1
SELECT Train_Name, Max_Speed / Operating_Speed AS Speed_Ratio FROM HighSpeed_Trains ORDER BY Speed_Ratio ASC LIMIT 3;	railway	2
SELECT AVG(Dynamic_Load_Capacity) AS Avg_Dynamic_Load_Capacity FROM HighSpeed_Trains WHERE Max_Speed < 200;	railway	3
SELECT Train_ID, Train_Name, (10 - 1) * 1.225 * 287 * 293 / 5000 AS Pressure_Change FROM HighSpeed_Trains;	railway	4
SELECT Train_ID, Train_Name, Operating_Speed, (0.5 * 1.225 * POWER(Operating_Speed * 1000.0 / 3600.0, 3) * 0.8 * 12) AS Air_Resistance_Power FROM HighSpeed_Trains;	railway	1
SELECT Train_Name, Operating_Speed * (Air_Resistance / 100.0) AS Speed_AirResistance_Product FROM HighSpeed_Trains ORDER BY Speed_AirResistance_Product ASC LIMIT 5;	railway	2
SELECT AVG(Static_Load_Capacity) AS Avg_Static_Load_Capacity FROM HighSpeed_Trains WHERE Operating_Speed > 300;	railway	3
SELECT Train_ID, Train_Name, 0.5 * (5 * Static_Load_Capacity) * POWER((1000 * 1000) / 3600.0, 2) AS Kinetic_Energy FROM HighSpeed_Trains ORDER BY Kinetic_Energy DESC LIMIT 5;	railway	4
SELECT Train_ID, Train_Name, Operating_Speed, Air_Resistance, (0.5 * 1.225 * POWER(Operating_Speed * 1000.0 / 3600.0, 2) * (Air_Resistance / 100.0) * 10) AS Air_Resistance_Force FROM HighSpeed_Trains;	railway	1
SELECT Train_Name, (Air_Resistance / 100.0) * Head_Length AS AirResistance_HeadLength_Product FROM HighSpeed_Trains ORDER BY AirResistance_HeadLength_Product DESC LIMIT 5;	railway	2
SELECT AVG(Air_Resistance) AS Avg_Air_Resistance FROM HighSpeed_Trains WHERE Body_Structure_Material = '铝合金';	railway	3
SELECT Train_ID, Train_Name, SQRT(2 * (10 * Static_Load_Capacity * 1000 * 0.1) / (1.225 * 1 * 10)) AS Operating_Speed FROM HighSpeed_Trains ORDER BY Operating_Speed DESC LIMIT 5;	railway	4
SELECT Train_ID, Train_Name, Operating_Speed, Air_Resistance, CASE WHEN Sealing_Requirement = 'high' THEN Air_Resistance * 0.9 ELSE Air_Resistance END AS Adjusted_Air_Resistance FROM HighSpeed_Trains;	railway	1
SELECT Train_Name, CASE WHEN Sealing_Requirement = 'high' THEN 1 WHEN Sealing_Requirement = 'medium' THEN 2 ELSE 3 END / Air_Resistance AS Sealing_AirResistance_Ratio FROM HighSpeed_Trains ORDER BY Sealing_AirResistance_Ratio ASC LIMIT 5;	railway	2
SELECT AVG(Operating_Speed) AS Avg_Operating_Speed FROM HighSpeed_Trains WHERE Sealing_Requirement = 'high';	railway	3
SELECT Train_ID, Train_Name, Air_Resistance * 0.5 AS Adjusted_Air_Resistance FROM HighSpeed_Trains WHERE Sealing_Requirement = 'ultra_high' ORDER BY Adjusted_Air_Resistance ASC LIMIT 5;	railway	4
SELECT Train_ID, Train_Name, Operating_Speed, Air_Resistance, CASE WHEN Pressure_Wave_Optimization = '是' THEN Air_Resistance * 0.95 ELSE Air_Resistance END AS Adjusted_Air_Resistance FROM HighSpeed_Trains;	railway	1
SELECT Pressure_Wave_Optimization, AVG(Air_Resistance) AS Avg_Air_Resistance, AVG(CASE WHEN Pressure_Wave_Optimization = '是' THEN 1.0 ELSE 2.0 END / Air_Resistance) AS Avg_PressureWave_AirResistance_Ratio FROM HighSpeed_Trains GROUP BY Pressure_Wave_Optimization;	railway	2
SELECT AVG(Operating_Speed) AS Avg_Operating_Speed FROM HighSpeed_Trains WHERE Pressure_Wave_Optimization = '是';	railway	3
SELECT Train_ID, Train_Name, Air_Resistance * 0.8 AS Adjusted_Air_Resistance  FROM HighSpeed_Trains  WHERE Pressure_Wave_Optimization = '极佳'  ORDER BY Adjusted_Air_Resistance ASC  LIMIT 5;	railway	4
SELECT H.Train_ID AS HighSpeed_Train_ID, H.Train_Name AS HighSpeed_Train_Name, H.Operating_Speed, H.Air_Resistance, (0.5 * 1.225 * POWER(H.Operating_Speed * 1000.0 / 3600.0, 2) * (H.Air_Resistance / 100.0) * 10) AS HighSpeed_Air_Resistance, C.Train_ID AS Conventional_Train_ID, C.Train_Name AS Conventional_Train_Name, C.Design_Speed, (0.5 * 1.225 * POWER(C.Design_Speed * 1000.0 / 3600.0, 2) * 0.8 * 10) AS Conventional_Air_Resistance, ABS((0.5 * 1.225 * POWER(H.Operating_Speed * 1000.0 / 3600.0, 2) * (H.Air_Resistance / 100.0) * 10) - (0.5 * 1.225 * POWER(C.Design_Speed * 1000.0 / 3600.0, 2) * 0.8 * 10)) AS Air_Resistance_Difference FROM HighSpeed_Trains H, ConventionalTrains C;	railway	1
SELECT 'HighSpeed' AS Train_Type, AVG(d.Door_Width * d.Door_Height) AS Avg_Door_Product FROM HighSpeed_Trains hs JOIN DoorsAndCompartments d ON hs.Train_ID = d.Train_ID GROUP BY Train_Type UNION ALL SELECT 'Conventional' AS Train_Type, AVG(d.Door_Width * d.Door_Height) AS Avg_Door_Product FROM ConventionalTrains ct JOIN DoorsAndCompartments d ON ct.Train_ID = d.Train_ID GROUP BY Train_Type;	railway	2
SELECT AVG(hs.Operating_Speed) AS Avg_Operating_Speed FROM HighSpeed_Trains hs JOIN DoorsAndCompartments dc ON hs.Train_ID = dc.Train_ID WHERE dc.Floor_Material = '铝合金' UNION ALL SELECT AVG(ct.Design_Speed) AS Avg_Operating_Speed FROM ConventionalTrains ct JOIN DoorsAndCompartments dc ON ct.Train_ID = dc.Train_ID WHERE dc.Floor_Material = '铝合金';	railway	3
SELECT t.Train_ID, t.Train_Name, d.Door_Width * d.Door_Height AS Door_Area, 'HighSpeed_Trains' AS Train_Type FROM HighSpeed_Trains t JOIN DoorsAndCompartments d ON t.Train_ID = d.Train_ID WHERE d.Door_Width = 10000 AND d.Door_Height = 10000 UNION ALL SELECT t.Train_ID, t.Train_Name, d.Door_Width * d.Door_Height AS Door_Area, 'ConventionalTrains' AS Train_Type FROM ConventionalTrains t JOIN DoorsAndCompartments d ON t.Train_ID = d.Train_ID WHERE d.Door_Width = 10000 AND d.Door_Height = 10000 UNION ALL SELECT t.Train_ID, t.Train_Name, d.Door_Width * d.Door_Height AS Door_Area, 'DieselMultipleUnits' AS Train_Type FROM DieselMultipleUnits t JOIN DoorsAndCompartments d ON t.Train_ID = d.Train_ID WHERE d.Door_Width = 10000 AND d.Door_Height = 10000 UNION ALL SELECT t.Train_ID, t.Train_Name, d.Door_Width * d.Door_Height AS Door_Area, 'UrbanRail_Trains' AS Train_Type FROM UrbanRail_Trains t JOIN DoorsAndCompartments d ON t.Train_ID = d.Train_ID WHERE d.Door_Width = 10000 AND d.Door_Height = 10000 ORDER BY Door_Area DESC LIMIT 5;	railway	4
SELECT Train_ID, Train_Name, Operating_Speed, Static_Load_Capacity, (2 * Static_Load_Capacity * 1000 * 0.1 * Operating_Speed * 1000 / 3600) / 0.9 AS Traction_Power FROM HighSpeed_Trains;	railway	1
SELECT tp.Parameter_Name, AVG(dmu.Total_Power / hs.Operating_Speed) AS Avg_Power_Speed_Ratio FROM HighSpeed_Trains hs JOIN DieselMultipleUnits dmu ON hs.Train_ID = dmu.Train_ID JOIN TechnicalParameters tp ON hs.Train_ID = tp.Train_ID GROUP BY tp.Parameter_Name;	railway	2
SELECT AVG(hs.Operating_Speed) AS Avg_Operating_Speed FROM HighSpeed_Trains hs JOIN TechnicalParameters tp ON hs.Train_ID = tp.Train_ID WHERE tp.Parameter_Name = 'Total_Power' AND CAST(tp.Parameter_Value AS REAL) > 10000;	railway	3
SELECT t.Train_ID, t.Train_Name, (1000000 * 0.9) / (2 * COALESCE(t.Static_Load_Capacity, 100) * 1000 * 0.1) AS Operating_Speed, p.Parameter_Name FROM HighSpeed_Trains t JOIN TechnicalParameters p ON t.Train_ID = p.Train_ID WHERE p.Parameter_Name = '牵引功率' UNION ALL SELECT t.Train_ID, t.Train_Name, (1000000 * 0.9) / (2 * 100 * 1000 * 0.1) AS Operating_Speed, p.Parameter_Name FROM ConventionalTrains t JOIN TechnicalParameters p ON t.Train_ID = p.Train_ID WHERE p.Parameter_Name = '牵引功率' UNION ALL SELECT t.Train_ID, t.Train_Name, (1000000 * 0.9) / (2 * 100 * 1000 * 0.1) AS Operating_Speed, p.Parameter_Name FROM DieselMultipleUnits t JOIN TechnicalParameters p ON t.Train_ID = p.Train_ID WHERE p.Parameter_Name = '牵引功率' UNION ALL SELECT t.Train_ID, t.Train_Name, (1000000 * 0.9) / (2 * 100 * 1000 * 0.1) AS Operating_Speed, p.Parameter_Name FROM UrbanRail_Trains t JOIN TechnicalParameters p ON t.Train_ID = p.Train_ID WHERE p.Parameter_Name = '牵引功率' ORDER BY Operating_Speed DESC LIMIT 5;	railway	4
SELECT Track_Type, Max_Speed, Tunnel_Cross_Section, 0.5 * (100 * Tunnel_Cross_Section) * POWER(Max_Speed, 2) AS Kinetic_Energy FROM TrackSystems;	railway	1
SELECT Track_Type, AVG(Maintenance_Interval / Tunnel_Cross_Section) AS Maintenance_Ratio FROM TrackSystems GROUP BY Track_Type;	railway	2
SELECT Track_Type FROM TrackSystems WHERE Track_Type = 'high_speed' AND Track_Gauge >= 1435;	railway	3
SELECT Track_ID, Track_Type, 0.9 * POWER(Max_Speed, 2) AS Air_Resistance FROM TrackSystems WHERE Max_Speed = 10000;	railway	4
SELECT Track_Material, Maintenance_Interval, (1.0 / (Maintenance_Interval * CASE WHEN Track_Material = 'steel' THEN 10 WHEN Track_Material = 'concrete' THEN 5 ELSE 1 END)) AS Wear_Rate FROM TrackSystems;	railway	1
SELECT Track_Type, Track_Material, AVG(Maintenance_Interval) AS Avg_Maintenance_Interval FROM TrackSystems GROUP BY Track_Type, Track_Material;	railway	2
SELECT Track_Material FROM TrackSystems WHERE Maintenance_Interval <= 30 AND Track_Material IN ('钢轨', '混凝土轨');	railway	3
SELECT Track_ID, Track_Type, '无穷大' AS Wear_Rate FROM TrackSystems WHERE Maintenance_Interval = 0;	railway	4
SELECT Train_ID, Train_Name, Body_Strength_Rating, Max_Speed, 0.5 * 100000 * (Max_Speed * Max_Speed) AS Kinetic_Energy FROM UrbanRail_Trains;	railway	1
SELECT Body_Strength_Rating, AVG(Max_Speed) AS Avg_Max_Speed FROM UrbanRail_Trains GROUP BY Body_Strength_Rating;	railway	2
SELECT Body_Strength_Rating FROM UrbanRail_Trains WHERE Max_Speed >= 100 AND Body_Strength_Rating = 'high';	railway	3
SELECT Train_ID, Train_Name, 0.5 * 1000000 * POWER(Max_Speed, 2) AS Kinetic_Energy FROM UrbanRail_Trains WHERE Max_Speed = 10000;	railway	4
SELECT U.Window_Material, U.Body_Strength_Rating, (1 * TP.Parameter_Value) AS Calculated_Body_Strength_RATING FROM UrbanRail_Trains U JOIN TechnicalParameters TP ON U.Train_ID = TP.Train_ID WHERE TP.Parameter_Name = 'Window_Strength';	railway	1
SELECT Window_Material, AVG(Body_Strength_Rating) AS Avg_Body_Strength_Rating FROM UrbanRail_Trains GROUP BY Window_Material;	railway	2
SELECT Window_Material FROM UrbanRail_Trains WHERE Body_Strength_Rating = 'high' AND Window_Material IN ('钢化玻璃', '复合材料');	railway	3
SELECT Train_ID, Train_Name, 0.01 * 100000 AS Body_Strength_Rating FROM UrbanRail_Trains WHERE Window_Material = '100000 MPa';	railway	4
SELECT Train_ID, Train_Name, Brake_System_Type, Max_Speed, (Max_Speed * Max_Speed) / (2 * 100) AS Deceleration FROM UrbanRail_Trains;	railway	1
SELECT Brake_System_Type, Door_Emergency_Unlock, COUNT(*) * 1.0 / (SELECT COUNT(*) FROM UrbanRail_Trains) AS Proportion FROM UrbanRail_Trains GROUP BY Brake_System_Type, Door_Emergency_Unlock;	railway	2
SELECT Brake_System_Type FROM UrbanRail_Trains WHERE Door_Emergency_Unlock = '是' AND Brake_System_Type IN ('electric', 'combined');	railway	3
SELECT Train_ID, Train_Name, (Max_Speed * Max_Speed) / (2 * 1) AS Deceleration FROM UrbanRail_Trains WHERE Max_Speed = 10000;	railway	4
SELECT Train_ID, Train_Name, Insulation_Performance, Sealing_Pressure, (2 * (Sealing_Pressure / Insulation_Performance)) AS Thermal_Conductivity FROM UrbanRail_Trains;	railway	1
SELECT Insulation_Performance, AVG(Sealing_Pressure) AS Avg_Sealing_Pressure FROM UrbanRail_Trains GROUP BY Insulation_Performance;	railway	2
SELECT Noise_Reduction_Level FROM UrbanRail_Trains WHERE Sealing_Pressure >= 50 AND Noise_Reduction_Level = 'high';	railway	3
SELECT Train_ID, Train_Name, 0.01 * (100000 / CASE WHEN Insulation_Performance = 'low' THEN 1 END) AS Thermal_Conductivity FROM UrbanRail_Trains WHERE Sealing_Pressure = 100000;	railway	4
WITH Kinetic_Energy AS (SELECT 0.5 * 500000 * POWER((300 * 1000.0 / 3600), 2) AS Energy_Joules) SELECT p.Passenger_ID, p.First_Name FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID JOIN Train tr ON t.Train_ID = tr.Train_ID CROSS JOIN Kinetic_Energy ORDER BY Energy_Joules ASC LIMIT 10;	railway_station	1
WITH Total_Revenue AS (     SELECT 500 * 500 AS Total_Income ), Payment_Distribution AS (     SELECT Total_Income * 0.6 AS Online_Income,            Total_Income * 0.4 AS Cash_Income     FROM Total_Revenue ) SELECT p.Passenger_ID, p.First_Name FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID WHERE t.Train_ID = (     SELECT Train_ID      FROM Train      WHERE Total_Seats = 500      LIMIT 1 ) AND DATE(t.Booking_Time) = DATE('now') ORDER BY t.Ticket_Price DESC LIMIT 5;	railway_station	2
SELECT p.Passenger_ID, p.First_Name  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID  JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  WHERE s1.Station_Name = '北京南站'  AND s2.Station_Name = '上海虹桥站'  AND t.Departure_Time = '2023-10-10 10:00:00'  AND tr.Train_Type = '高铁'  ORDER BY datetime(t.Departure_Time, '+4 hours', '+30 minutes') ASC  LIMIT 3;	railway_station	3
SELECT p.Passenger_ID, p.First_Name, SUM(t.Ticket_Price * 1000) AS Total_Revenue FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID WHERE t.Train_ID = (SELECT Train_ID FROM Train WHERE Total_Seats = 500) GROUP BY p.Passenger_ID, p.First_Name ORDER BY Total_Revenue DESC LIMIT 1;	railway_station	4
WITH Kinetic_Energy AS (     SELECT 0.5 * 500000 * POWER((300 * 1000.0 / 3600), 2) AS Energy_Joules ) SELECT p.Last_Name, p.Gender  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  CROSS JOIN Kinetic_Energy  ORDER BY Energy_Joules ASC  LIMIT 10;	railway_station	1
WITH Total_Revenue AS (     SELECT 500 * 500 AS Total_Income ),  Payment_Distribution AS (     SELECT Total_Income * 0.6 AS Online_Income,             Total_Income * 0.4 AS Cash_Income      FROM Total_Revenue )  SELECT p.Last_Name, p.Gender  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  WHERE t.Train_ID = (     SELECT Train_ID      FROM Train      WHERE Total_Seats = 500      LIMIT 1 )  AND DATE(t.Booking_Time) = DATE('now')  GROUP BY p.Last_Name, p.Gender  ORDER BY SUM(t.Ticket_Price) DESC  LIMIT 5;	railway_station	2
SELECT p.Last_Name, p.Gender  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID  JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  WHERE s1.Station_Name = '北京南站'  AND s2.Station_Name = '上海虹桥站'  AND t.Departure_Time = '2023-10-10 10:00:00'  AND tr.Train_Type = '高铁'  ORDER BY datetime(t.Departure_Time, '+4 hours', '+30 minutes') ASC  LIMIT 3;	railway_station	3
SELECT p.Last_Name, p.Gender, SUM(t.Ticket_Price * 1000) AS Total_Revenue  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  WHERE t.Train_ID = (SELECT Train_ID FROM Train WHERE Total_Seats = 500)  GROUP BY p.Last_Name, p.Gender  ORDER BY Total_Revenue DESC  LIMIT 1;	railway_station	4
WITH Kinetic_Energy AS (   SELECT 0.5 * 500000 * POWER((300 * 1000 / 3600), 2) AS Energy_Joules )  SELECT p.Date_Of_Birth  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  CROSS JOIN Kinetic_Energy  ORDER BY Energy_Joules ASC  LIMIT 10;	railway_station	1
WITH Total_Revenue AS (     SELECT 500 * 500 AS Total_Income ),  Payment_Distribution AS (     SELECT Total_Income * 0.6 AS Online_Income,             Total_Income * 0.4 AS Cash_Income      FROM Total_Revenue )  SELECT p.Date_Of_Birth  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  WHERE t.Train_ID = (     SELECT Train_ID      FROM Train      WHERE Total_Seats = 500      LIMIT 1 )  AND DATE(t.Booking_Time) = DATE('now')  GROUP BY p.Date_Of_Birth  ORDER BY SUM(t.Ticket_Price) DESC  LIMIT 5;	railway_station	2
SELECT p.Date_Of_Birth  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID  JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  WHERE s1.Station_Name = '北京南站'  AND s2.Station_Name = '上海虹桥站'  AND t.Departure_Time = '2023-10-10 10:00:00'  AND tr.Train_Type = '高铁'  ORDER BY datetime(t.Departure_Time, '+4 hours', '+30 minutes') ASC  LIMIT 3;	railway_station	3
SELECT p.Date_Of_Birth, SUM(t.Ticket_Price * 1000) AS Total_Revenue FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID WHERE t.Train_ID = (SELECT Train_ID FROM Train WHERE Total_Seats = 500) GROUP BY p.Date_Of_Birth ORDER BY Total_Revenue DESC LIMIT 1;	railway_station	4
WITH Kinetic_Energy AS (   SELECT 0.5 * 500000 * POWER((300 * 1000 / 3600), 2) AS Energy_Joules )  SELECT p.Nationality, p.Passport_Number  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  CROSS JOIN Kinetic_Energy  ORDER BY Energy_Joules ASC  LIMIT 10;	railway_station	1
WITH Total_Revenue AS (     SELECT 500 * 500 AS Total_Income ), Payment_Distribution AS (     SELECT Total_Income * 0.6 AS Online_Income,            Total_Income * 0.4 AS Cash_Income     FROM Total_Revenue ) SELECT p.Nationality, p.Passport_Number FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID WHERE t.Train_ID = (     SELECT Train_ID     FROM Train     WHERE Total_Seats = 500     LIMIT 1 ) AND DATE(t.Booking_Time) = DATE('now') GROUP BY p.Nationality, p.Passport_Number ORDER BY SUM(t.Ticket_Price) DESC LIMIT 5;	railway_station	2
SELECT p.Nationality, p.Passport_Number  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID  JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  WHERE s1.Station_Name = '北京南站'  AND s2.Station_Name = '上海虹桥站'  AND t.Departure_Time = '2023-10-10 10:00:00'  AND tr.Train_Type = '高铁'  ORDER BY datetime(t.Departure_Time, '+4 hours', '+30 minutes') ASC  LIMIT 3;	railway_station	3
SELECT p.Nationality, p.Passport_Number, SUM(t.Ticket_Price * 1000) AS Total_Revenue  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  WHERE t.Train_ID = (SELECT Train_ID FROM Train WHERE Total_Seats = 500)  GROUP BY p.Nationality, p.Passport_Number  ORDER BY Total_Revenue DESC  LIMIT 1;	railway_station	4
WITH Passenger_Age AS (     SELECT          Passenger_ID,          First_Name,          Last_Name,          Date_Of_Birth,         (strftime('%Y', '2023-10-01') - strftime('%Y', Date_Of_Birth) -           (CASE WHEN strftime('%m-%d', '2023-10-01') < strftime('%m-%d', Date_Of_Birth) THEN 1 ELSE 0 END)) AS Age      FROM Passenger ) SELECT      Passenger_ID,      First_Name,      Last_Name,      Age  FROM Passenger_Age  ORDER BY Age DESC  LIMIT 5;	railway_station	1
WITH RECURSIVE digits(n) AS (     SELECT 1     UNION ALL     SELECT n+1 FROM digits WHERE n < 18 ), DigitSum AS (     SELECT          Passenger_ID,          ID_Card_Number,          Contact_Number,         (SELECT SUM(CAST(SUBSTR(ID_Card_Number, n, 1) AS INTEGER))           FROM digits           WHERE n <= LENGTH(ID_Card_Number)) +         (SELECT SUM(CAST(SUBSTR(Contact_Number, n, 1) AS INTEGER))           FROM digits           WHERE n <= LENGTH(Contact_Number)) AS Total_Digit_Sum     FROM Passenger ) SELECT p.Passenger_ID, p.First_Name, p.Last_Name, ds.Total_Digit_Sum FROM Passenger p JOIN DigitSum ds ON p.Passenger_ID = ds.Passenger_ID ORDER BY ds.Total_Digit_Sum DESC LIMIT 10;	railway_station	2
SELECT Last_Name, First_Name, ID_Card_Number, Contact_Number FROM Passenger WHERE SUBSTR(ID_Card_Number, 1, 6) = SUBSTR(Contact_Number, 1, 3) ORDER BY Last_Name ASC;	railway_station	3
SELECT Passenger_ID, First_Name, Last_Name, (LENGTH(ID_Card_Number) + LENGTH(Contact_Number)) * 1 AS Storage_Space FROM Passenger ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Email_Storage AS (     SELECT Passenger_ID, First_Name, Last_Name, Email, LENGTH(Email) AS Byte_Size      FROM Passenger )  SELECT Passenger_ID, First_Name, Last_Name, Byte_Size  FROM Email_Storage  ORDER BY Byte_Size DESC  LIMIT 5;	railway_station	1
WITH AtSymbolCount AS (     SELECT Passenger_ID, Email,             LENGTH(Email) - LENGTH(REPLACE(Email, '@', '')) AS At_Count      FROM Passenger ) SELECT p.Passenger_ID, p.First_Name, p.Last_Name, atc.At_Count  FROM Passenger p  JOIN AtSymbolCount atc ON p.Passenger_ID = atc.Passenger_ID  ORDER BY atc.At_Count DESC  LIMIT 10;	railway_station	2
SELECT Last_Name, First_Name, Email FROM Passenger WHERE Email LIKE '%.com' ORDER BY Last_Name ASC;	railway_station	3
SELECT Passenger_ID, First_Name, Last_Name, LENGTH(Email) * 1 AS Storage_Space FROM Passenger ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Passenger_Geo AS (     SELECT          p.Passenger_ID,          p.First_Name,          p.Last_Name,          p.Address,          s.Station_ID,          s.Station_Name,          s.Latitude AS Station_Latitude,          s.Longitude AS Station_Longitude,          RADIANS(s.Latitude) AS Station_Lat_Rad,          RADIANS(s.Longitude) AS Station_Lon_Rad,          RADIANS(CAST(SUBSTR(p.Address, 1, INSTR(p.Address, ',') - 1) AS REAL)) AS Passenger_Lat_Rad,          RADIANS(CAST(SUBSTR(p.Address, INSTR(p.Address, ',') + 1) AS REAL)) AS Passenger_Lon_Rad      FROM Passenger p      CROSS JOIN Station s ),  Distance_Calculation AS (     SELECT          Passenger_ID,          First_Name,          Last_Name,          Address,          Station_ID,          Station_Name,          6371 * ACOS(SIN(Passenger_Lat_Rad) * SIN(Station_Lat_Rad) + COS(Passenger_Lat_Rad) * COS(Station_Lat_Rad) * COS(Station_Lon_Rad - Passenger_Lon_Rad)) AS Distance_KM      FROM Passenger_Geo )  SELECT      Passenger_ID,      First_Name,      Last_Name,      Address,      Station_ID,      Station_Name,      Distance_KM  FROM Distance_Calculation  ORDER BY Distance_KM DESC  LIMIT 5;	railway_station	1
WITH WordCount AS (   SELECT      Passenger_ID,      Address,      LENGTH(Address) - LENGTH(REPLACE(Address, ' ', '')) + 1 AS Word_Count    FROM Passenger )  SELECT    p.Passenger_ID,    p.First_Name,    p.Last_Name,    wc.Word_Count  FROM Passenger p  JOIN WordCount wc ON p.Passenger_ID = wc.Passenger_ID  ORDER BY wc.Word_Count DESC  LIMIT 10;	railway_station	2
SELECT Last_Name, First_Name, Nationality, Address FROM Passenger WHERE Nationality != TRIM(SUBSTR(Address, INSTR(Address, ',') + 1)) ORDER BY Last_Name ASC;	railway_station	3
SELECT Passenger_ID, First_Name, Last_Name, LENGTH(Address) * 1000 AS Storage_Space FROM Passenger ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Station_Distance AS (   SELECT Station_ID, Station_Name, Latitude,           ABS(Latitude) * (2 * PI() * 6371) / 360 AS Distance_From_Equator    FROM Station )  SELECT Station_ID, Station_Name, Latitude, Distance_From_Equator  FROM Station_Distance  ORDER BY Distance_From_Equator DESC  LIMIT 5;	railway_station	1
WITH StationCodeSum AS (     SELECT          Station_ID,          Station_Code,          Platform_count,          (             SELECT SUM(CAST(SUBSTR(Station_Code, n, 1) AS INTEGER))             FROM (                 SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5                  UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10             ) AS digits             WHERE n <= LENGTH(Station_Code)         ) AS Code_Sum      FROM Station ) SELECT      s.Station_ID,      s.Station_Name,      s.Platform_count,      scs.Code_Sum,      s.Platform_count * scs.Code_Sum AS Product  FROM Station s  JOIN StationCodeSum scs ON s.Station_ID = scs.Station_ID  ORDER BY Product DESC  LIMIT 10;	railway_station	2
SELECT Station_Name, Platform_count FROM Station WHERE LENGTH(Station_Name) > 10 AND Platform_count > 5 ORDER BY Station_Name ASC;	railway_station	3
SELECT Station_ID, Station_Name, Platform_count * 1 AS Storage_Space FROM Station ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Station_Pairs AS (     SELECT          s1.Province,          s1.Station_ID AS Station1_ID,          s1.Latitude AS Lat1,          s1.Longitude AS Lon1,          s2.Station_ID AS Station2_ID,          s2.Latitude AS Lat2,          s2.Longitude AS Lon2      FROM Station s1      JOIN Station s2 ON s1.Province = s2.Province AND s1.Station_ID < s2.Station_ID ),  Distance_Calculation AS (     SELECT          Province,          Station1_ID,          Station2_ID,          6371 * ACOS(SIN(Lat1 * PI() / 180) * SIN(Lat2 * PI() / 180) + COS(Lat1 * PI() / 180) * COS(Lat2 * PI() / 180) * COS(Lon2 * PI() / 180 - Lon1 * PI() / 180)) AS Distance_KM      FROM Station_Pairs ),  Province_Average_Distance AS (     SELECT          Province,          AVG(Distance_KM) AS Avg_Distance_KM      FROM Distance_Calculation      GROUP BY Province )  SELECT Province, Avg_Distance_KM  FROM Province_Average_Distance  ORDER BY Avg_Distance_KM DESC  LIMIT 5;	railway_station	1
SELECT City, Province, LENGTH(City) + LENGTH(Province) AS Total_Length FROM Station GROUP BY City, Province ORDER BY Total_Length DESC LIMIT 10;	railway_station	2
SELECT Station_Name, City, Province FROM Station WHERE City != Province ORDER BY Station_Name ASC;	railway_station	3
SELECT Station_ID, Station_Name, (LENGTH(City) + LENGTH(Province)) * 1 AS Storage_Space FROM Station ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Station_Distance AS (     SELECT Country, Station_ID, ABS(Latitude) * (2 * 3.141592653589793 * 6371) / 360 AS Distance_From_Equator      FROM Station ),  Country_Average_Distance AS (     SELECT Country, AVG(Distance_From_Equator) AS Avg_Distance_From_Equator      FROM Station_Distance      GROUP BY Country )  SELECT Country, Avg_Distance_From_Equator  FROM Country_Average_Distance  ORDER BY Avg_Distance_From_Equator DESC  LIMIT 5;	railway_station	1
SELECT Station_ID, Station_Name, ABS(Latitude) + ABS(Longitude) AS Absolute_Sum FROM Station ORDER BY Absolute_Sum DESC LIMIT 10;	railway_station	2
SELECT Station_Name, Country, Latitude FROM Station WHERE Country = '中国' AND Latitude > 30 ORDER BY Station_Name ASC;	railway_station	3
SELECT Station_ID, Station_Name, (Latitude + Longitude) * 1 AS Storage_Space FROM Station ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Station_Address_Length AS (SELECT Station_ID, Station_Name, Address, LENGTH(Address) AS Address_Length FROM Station) SELECT Station_ID, Station_Name, Address, Address_Length FROM Station_Address_Length ORDER BY Address_Length DESC LIMIT 5;	railway_station	1
WITH EightCount AS (   SELECT      Station_ID,      Contact_Number,      LENGTH(Contact_Number) - LENGTH(REPLACE(Contact_Number, '8', '')) AS Eight_Count    FROM Station )  SELECT s.Station_ID, s.Station_Name, ec.Eight_Count  FROM Station s  JOIN EightCount ec ON s.Station_ID = ec.Station_ID  ORDER BY ec.Eight_Count DESC  LIMIT 10;	railway_station	2
SELECT Station_Name, Address, Contact_Number FROM Station WHERE Address LIKE '%中央%' AND Contact_Number LIKE '138%' ORDER BY Station_Name ASC;	railway_station	3
SELECT Station_ID, Station_Name, (LENGTH(Address) + LENGTH(Contact_Number)) * 1 AS Storage_Space FROM Station ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Station_Platform_Area AS (     SELECT Station_ID, Station_Name, Platform_count, Platform_count * 500 AS Total_Platform_Area      FROM Station      WHERE Station_Status = '运营中' )  SELECT Station_ID, Station_Name, Platform_count, Total_Platform_Area  FROM Station_Platform_Area  ORDER BY Total_Platform_Area DESC  LIMIT 5;	railway_station	1
WITH StationCodeSum AS (     SELECT          Station_ID,          Station_Code,          Platform_count,          (             SELECT SUM(CAST(SUBSTR(Station_Code, n, 1) AS INTEGER))              FROM (                 SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5                  UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10             ) AS digits              WHERE n <= LENGTH(Station_Code)         ) AS Code_Sum      FROM Station ) SELECT      s.Station_ID,      s.Station_Name,      s.Platform_count,      scs.Code_Sum,      s.Platform_count * scs.Code_Sum AS Product  FROM Station s  JOIN StationCodeSum scs ON s.Station_ID = scs.Station_ID  ORDER BY Product DESC  LIMIT 10;	railway_station	2
SELECT Station_Name, Platform_count, Station_Status FROM Station WHERE Platform_count > 10 AND Station_Status = '运营中' ORDER BY Platform_count DESC;	railway_station	3
SELECT Station_ID, Station_Name, Platform_count * 1 AS Storage_Space FROM Station ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Passenger_Age AS (     SELECT          Passenger_ID,          First_Name,          Last_Name,          Date_Of_Birth,         CAST(strftime('%Y', '2023-10-01') AS INTEGER) - CAST(strftime('%Y', Date_Of_Birth) AS INTEGER) -          (CASE WHEN strftime('%m-%d', '2023-10-01') < strftime('%m-%d', Date_Of_Birth) THEN 1 ELSE 0 END) AS Passenger_Age      FROM Passenger ), Station_Age AS (     SELECT          Station_ID,          Station_Name,          Created_At,         CAST(strftime('%Y', '2023-10-01') AS INTEGER) - CAST(strftime('%Y', Created_At) AS INTEGER) -          (CASE WHEN strftime('%m-%d', '2023-10-01') < strftime('%m-%d', Created_At) THEN 1 ELSE 0 END) AS Station_Age      FROM Station ), Passenger_Station_Difference AS (     SELECT          p.Passenger_ID,          p.First_Name,          p.Last_Name,          s.Station_ID,          s.Station_Name,          ABS(p.Passenger_Age - s.Station_Age) AS Age_Difference      FROM Passenger_Age p      JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID      JOIN Station_Age s ON t.Departure_Station_ID = s.Station_ID ) SELECT      Passenger_ID,      First_Name,      Last_Name,      Station_ID,      Station_Name,      Age_Difference  FROM Passenger_Station_Difference  ORDER BY Age_Difference DESC  LIMIT 5;	railway_station	1
WITH DigitSum AS (     SELECT          p.Passenger_ID,          p.ID_Card_Number,          s.Station_Code,          (SELECT SUM(CAST(SUBSTR(p.ID_Card_Number, n, 1) AS INTEGER))           FROM (SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18) AS digits           WHERE n <= LENGTH(p.ID_Card_Number)) +          (SELECT SUM(CAST(SUBSTR(s.Station_Code, n, 1) AS INTEGER))           FROM (SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10) AS digits           WHERE n <= LENGTH(s.Station_Code)) AS Total_Digit_Sum      FROM Passenger p      JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID      JOIN Station s ON t.Departure_Station_ID = s.Station_ID ) SELECT      p.Passenger_ID,      p.First_Name,      p.Last_Name,      s.Station_Name,      ds.Total_Digit_Sum  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Station s ON t.Departure_Station_ID = s.Station_ID  JOIN DigitSum ds ON p.Passenger_ID = ds.Passenger_ID  ORDER BY ds.Total_Digit_Sum DESC  LIMIT 10;	railway_station	2
SELECT p.Last_Name, p.First_Name, p.Nationality, s.Station_Name, s.Country  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  JOIN Station s ON t.Departure_Station_ID = s.Station_ID  WHERE p.Nationality != s.Country  ORDER BY p.Last_Name ASC;	railway_station	3
SELECT p.Passenger_ID, p.First_Name, p.Last_Name, s.Station_Name, (LENGTH(p.ID_Card_Number) + LENGTH(s.Station_Code)) * 1 AS Storage_Space FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID JOIN Station s ON t.Departure_Station_ID = s.Station_ID ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
WITH Ticket_Travel_Time AS (     SELECT          Ticket_ID,          Train_ID,          Departure_Time,          Arrival_Time,          (JULIANDAY(Arrival_Time) - JULIANDAY(Departure_Time)) * 24 AS Travel_Time_Hours      FROM Ticket )  SELECT      t.Ticket_ID,      t.Train_ID,      tr.Train_Name,      t.Departure_Time,      t.Arrival_Time,      t.Travel_Time_Hours  FROM Ticket_Travel_Time t  JOIN Train tr ON t.Train_ID = tr.Train_ID  ORDER BY t.Travel_Time_Hours DESC  LIMIT 5;	railway_station	1
WITH SeatDigitSum AS (   SELECT      Ticket_ID,      Ticket_Price,      Seat_Number,      (       SELECT SUM(CAST(SUBSTR(Seat_Number, n, 1) AS INTEGER))        FROM (         SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5          UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10       ) AS digits        WHERE n <= LENGTH(Seat_Number)     ) AS Seat_Digit_Sum    FROM Ticket ) SELECT    t.Ticket_ID,    t.Train_ID,    tr.Train_Name,    t.Ticket_Price,    sds.Seat_Digit_Sum,    (t.Ticket_Price * sds.Seat_Digit_Sum) AS Product  FROM Ticket t  JOIN SeatDigitSum sds ON t.Ticket_ID = sds.Ticket_ID  JOIN Train tr ON t.Train_ID = tr.Train_ID  ORDER BY Product DESC  LIMIT 10;	railway_station	2
SELECT t.Ticket_ID, t.Train_ID, t.Passenger_ID, t.Departure_Station_ID, t.Arrival_Station_ID, t.Seat_Number, t.Ticket_Price, t.Ticket_Status, t.Booking_Time, t.Departure_Time, t.Arrival_Time, t.Payment_Method, t.Payment_Status, t.Created_at, t.Updated_at FROM Ticket t JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID WHERE s1.City = s2.City ORDER BY t.Ticket_Price ASC;	railway_station	3
SELECT t.Ticket_ID, tr.Train_Name, (t.Ticket_Price + LENGTH(t.Seat_Number)) * 1 AS Storage_Space FROM Ticket t JOIN Train tr ON t.Train_ID = tr.Train_ID ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
SELECT p.Passenger_ID, p.First_Name, p.Last_Name, p.Date_Of_Birth, t.Ticket_ID, t.Booking_Time,      (strftime('%Y', t.Booking_Time) - strftime('%Y', p.Date_Of_Birth) -          CASE WHEN strftime('%m-%d', p.Date_Of_Birth) > strftime('%m-%d', t.Booking_Time) THEN 1 ELSE 0 END) AS Age_At_Booking  FROM Passenger p  JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID  ORDER BY Age_At_Booking ASC  LIMIT 5;	railway_station	1
WITH IDDigitSum AS (     SELECT          p.Passenger_ID,          p.ID_Card_Number,          (SELECT SUM(CAST(SUBSTR(p.ID_Card_Number, n, 1) AS INTEGER))           FROM (SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18) AS digits           WHERE n <= LENGTH(p.ID_Card_Number)) AS ID_Digit_Sum      FROM Passenger p )  SELECT      t.Ticket_ID,      t.Passenger_ID,      p.First_Name,      p.Last_Name,      t.Ticket_Price,      ids.ID_Digit_Sum,      (t.Ticket_Price * ids.ID_Digit_Sum) AS Product  FROM Ticket t  JOIN IDDigitSum ids ON t.Passenger_ID = ids.Passenger_ID  JOIN Passenger p ON t.Passenger_ID = p.Passenger_ID  ORDER BY Product DESC  LIMIT 10;	railway_station	2
SELECT t.Ticket_ID, t.Train_ID, t.Passenger_ID, t.Departure_Station_ID, t.Arrival_Station_ID, t.Seat_Number, t.Ticket_Price, t.Ticket_Status, t.Booking_Time, t.Departure_Time, t.Arrival_Time, t.Payment_Method, t.Payment_Status, t.Created_at, t.Updated_at FROM Ticket t JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID WHERE s1.Province = s2.Province ORDER BY t.Ticket_Price ASC;	railway_station	3
SELECT t.Ticket_ID, p.First_Name, p.Last_Name, (1000000 + 1000) * 1 AS Storage_Space FROM Ticket t JOIN Passenger p ON t.Passenger_ID = p.Passenger_ID ORDER BY Storage_Space DESC LIMIT 5;	railway_station	4
SELECT t.Train_ID, t.Train_Name, s1.Latitude AS Departure_Latitude, s1.Longitude AS Departure_Longitude, s2.Latitude AS Arrival_Latitude, s2.Longitude AS Arrival_Longitude, t.Departure_Time, t.Arrival_Time, (6371 * acos(sin(radians(s1.Latitude)) * sin(radians(s2.Latitude)) + cos(radians(s1.Latitude)) * cos(radians(s2.Latitude)) * cos(radians(s2.Longitude - s1.Longitude)))) AS Distance, (strftime('%s', t.Arrival_Time) - strftime('%s', t.Departure_Time)) / 3600.0 AS Time_Diff, (6371 * acos(sin(radians(s1.Latitude)) * sin(radians(s2.Latitude)) + cos(radians(s1.Latitude)) * cos(radians(s2.Latitude)) * cos(radians(s2.Longitude - s1.Longitude)))) / ((strftime('%s', t.Arrival_Time) - strftime('%s', t.Departure_Time)) / 3600.0) AS Average_Speed FROM Train t JOIN Station s1 ON t.Departure_Station = s1.Station_ID JOIN Station s2 ON t.Arrival_Station = s2.Station_ID;	railway_station	1
WITH PassengerAge AS (     SELECT p.Passenger_ID, p.First_Name, p.Last_Name, p.Date_Of_Birth,             (strftime('%Y', 'now') - strftime('%Y', p.Date_Of_Birth)) AS Age     FROM Passenger p     JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID     WHERE t.Train_ID = '指定列车ID' ), OrderedAges AS (     SELECT Age,             ROW_NUMBER() OVER (ORDER BY Age) AS RowAsc,             ROW_NUMBER() OVER (ORDER BY Age DESC) AS RowDesc     FROM PassengerAge ) SELECT AVG(Age) AS MedianAge FROM OrderedAges WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1;	railway_station	2
SELECT p.Nationality, COUNT(p.Nationality) AS Nationality_Count FROM Passenger p JOIN Ticket t ON p.Passenger_ID = t.Passenger_ID WHERE t.Train_ID = '指定列车的Train_ID' GROUP BY p.Nationality ORDER BY Nationality_Count DESC;	railway_station	3
SELECT Seat_Number, COUNT(Seat_Number) / 1000000.0 AS Occupancy_Rate FROM Ticket WHERE Train_ID = '指定列车ID' GROUP BY Seat_Number ORDER BY Seat_Number ASC;	railway_station	4
SELECT SUM(Ticket_Price) * 100 AS Total_Energy_Consumption FROM Ticket WHERE Train_ID = '指定的列车ID' AND Ticket_Status = 'Used';	railway_station	1
WITH AvgPrice AS (         SELECT AVG(Ticket_Price) AS Avg_Ticket_Price          FROM Ticket          WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Booked'     ),     PriceVariance AS (         SELECT              Ticket_ID,              Ticket_Price,              POWER(Ticket_Price - (SELECT Avg_Ticket_Price FROM AvgPrice), 2) AS Squared_Diff          FROM Ticket          WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Booked'     )     SELECT SQRT(SUM(Squared_Diff) / COUNT(Ticket_ID)) AS Ticket_Price_StdDev      FROM PriceVariance;	railway_station	2
SELECT t.Seat_Number FROM Ticket t WHERE t.Train_ID = '指定列车的Train_ID' AND t.Ticket_Status = 'Canceled' ORDER BY t.Seat_Number DESC;	railway_station	3
SELECT Seat_Number, COUNT(Seat_Number) / 1000000.0 AS Occupancy_Rate FROM Ticket WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Used' GROUP BY Seat_Number ORDER BY Seat_Number ASC;	railway_station	4
SELECT SQRT(SUM((time_diff - avg_interval) * (time_diff - avg_interval)) / COUNT(*)) AS StdDevInterval FROM (     SELECT          (strftime('%s', t1.Booking_Time) - strftime('%s', (             SELECT MAX(t2.Booking_Time)              FROM Ticket t2              WHERE t2.Train_ID = t1.Train_ID              AND t2.Ticket_Status = 'Booked'              AND t2.Booking_Time < t1.Booking_Time         ))) AS time_diff     FROM Ticket t1      WHERE t1.Train_ID = '指定的列车ID'      AND t1.Ticket_Status = 'Booked' ) AS TimeIntervals, (     SELECT AVG(         strftime('%s', t1.Booking_Time) - strftime('%s', (             SELECT MAX(t3.Booking_Time)              FROM Ticket t3              WHERE t3.Train_ID = t1.Train_ID              AND t3.Ticket_Status = 'Booked'              AND t3.Booking_Time < t1.Booking_Time         ))     ) AS avg_interval     FROM Ticket t1      WHERE t1.Train_ID = '指定的列车ID'      AND t1.Ticket_Status = 'Booked' ) AS AvgInterval;	railway_station	1
WITH Data AS (     SELECT          Seat_Number,          CAST(strftime('%s', Booking_Time) AS INTEGER) AS Booking_Time_Unix      FROM Ticket      WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Used' ),  Stats AS (     SELECT          AVG(Seat_Number) AS Avg_Seat,          AVG(Booking_Time_Unix) AS Avg_Time,          STDEV(Seat_Number) AS StdDev_Seat,          STDEV(Booking_Time_Unix) AS StdDev_Time      FROM Data )  SELECT      (SUM((Seat_Number - (SELECT Avg_Seat FROM Stats)) * (Booking_Time_Unix - (SELECT Avg_Time FROM Stats))) /      (COUNT(*) * (SELECT StdDev_Seat FROM Stats) * (SELECT StdDev_Time FROM Stats))) AS Correlation_Coefficient  FROM Data;	railway_station	2
SELECT t.Booking_Time FROM Ticket t WHERE t.Train_ID = '指定列车的Train_ID' AND t.Ticket_Status = 'Canceled' ORDER BY t.Booking_Time ASC;	railway_station	3
WITH Booking_Intervals AS (       SELECT            Seat_Number,            CAST(Booking_Time AS REAL) - CAST(LAG(Booking_Time) OVER (PARTITION BY Seat_Number ORDER BY Booking_Time) AS REAL) AS Booking_Interval        FROM Ticket        WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Booked'     )      SELECT          Seat_Number,          AVG(Booking_Interval) AS Avg_Booking_Interval      FROM Booking_Intervals      GROUP BY Seat_Number      ORDER BY Seat_Number ASC;	railway_station	4
WITH UsedTickets AS (     SELECT t.Ticket_ID, t.Departure_Station_ID, t.Arrival_Station_ID, t.Departure_Time, t.Arrival_Time      FROM Ticket t      WHERE t.Ticket_Status = 'Used' AND t.Train_ID = '指定列车的Train_ID' ),  StationDistances AS (     SELECT ut.Ticket_ID,             s1.Latitude AS Departure_Latitude,             s1.Longitude AS Departure_Longitude,             s2.Latitude AS Arrival_Latitude,             s2.Longitude AS Arrival_Longitude      FROM UsedTickets ut      JOIN Station s1 ON ut.Departure_Station_ID = s1.Station_ID      JOIN Station s2 ON ut.Arrival_Station_ID = s2.Station_ID ),  CalculatedDistances AS (     SELECT Ticket_ID,             6371 * acos(sin(radians(Departure_Latitude)) * sin(radians(Arrival_Latitude)) +                         cos(radians(Departure_Latitude)) * cos(radians(Arrival_Latitude)) *                         cos(radians(Arrival_Longitude - Departure_Longitude))) AS Distance      FROM StationDistances ),  TimeDifferences AS (     SELECT Ticket_ID,             (julianday(Arrival_Time) - julianday(Departure_Time)) * 86400 AS Time_Difference      FROM UsedTickets )  SELECT AVG(cd.Distance / (td.Time_Difference / 3600)) AS Average_Speed  FROM CalculatedDistances cd  JOIN TimeDifferences td ON cd.Ticket_ID = td.Ticket_ID;	railway_station	1
WITH TicketData AS (   SELECT Departure_Time, Arrival_Time    FROM Ticket    WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Booked' )  SELECT    (AVG(Departure_Time * Arrival_Time) - AVG(Departure_Time) * AVG(Arrival_Time)) /    (SQRT(AVG(Departure_Time * Departure_Time) - AVG(Departure_Time) * AVG(Departure_Time)) *     SQRT(AVG(Arrival_Time * Arrival_Time) - AVG(Arrival_Time) * AVG(Arrival_Time))) AS Correlation_Coefficient  FROM TicketData  ORDER BY Correlation_Coefficient DESC;	railway_station	2
SELECT t.Departure_Time FROM Ticket t WHERE t.Train_ID = '指定列车的Train_ID' AND t.Ticket_Status = 'Canceled' ORDER BY t.Departure_Time ASC;	railway_station	3
SELECT (Arrival_Time - Departure_Time) AS Time_Difference, AVG(Arrival_Time - Departure_Time) AS Avg_Time_Difference FROM Ticket WHERE Train_ID = '指定列车ID' AND Ticket_Status = 'Used' GROUP BY Time_Difference ORDER BY Time_Difference ASC;	railway_station	4
SELECT SUM(t.Ticket_Price) * 100 AS Total_Energy_Consumption FROM Ticket t WHERE t.Payment_Status = 'Pending' AND t.Ticket_Status = 'Booked' AND t.Train_ID = '指定列车的Train_ID';	railway_station	1
WITH TicketData AS (   SELECT Ticket_Price    FROM Ticket    WHERE Train_ID = '指定列车ID' AND Payment_Status = 'Fail' ),  AvgPrice AS (   SELECT AVG(Ticket_Price) AS Mean_Price    FROM TicketData )  SELECT SQRT(SUM((Ticket_Price - (SELECT Mean_Price FROM AvgPrice)) * (Ticket_Price - (SELECT Mean_Price FROM AvgPrice))) / COUNT(*)) AS Price_StdDev  FROM TicketData  ORDER BY Ticket_Price ASC;	railway_station	2
SELECT t.Payment_Method, COUNT(t.Ticket_ID) AS Ticket_Count  FROM Ticket t  WHERE t.Train_ID = '指定列车的Train_ID' AND t.Payment_Method = 'Credit Card'  GROUP BY t.Payment_Method  ORDER BY Ticket_Count DESC;	railway_station	3
SELECT Ticket_Price, (Ticket_Price * 100) AS Energy_Consumption FROM Ticket WHERE Train_ID = '指定列车ID' AND Payment_Status = 'Fail' ORDER BY Ticket_Price DESC;	railway_station	4
WITH UsedTickets AS (         SELECT t.Departure_Time, t.Arrival_Time          FROM Ticket t          JOIN Train tr ON t.Train_ID = tr.Train_ID          JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID          JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID          WHERE t.Ticket_Status = 'Used'          AND s1.City = '北京'          AND s2.City = '上海'          AND tr.Train_Type = '高铁'     ),      TimeDifferences AS (         SELECT (JULIANDAY(Arrival_Time) - JULIANDAY(Departure_Time)) * 24 AS Travel_Time          FROM UsedTickets     )      SELECT CASE          WHEN AVG(Travel_Time) = 4.5 THEN 1318 / 4.5          ELSE 1318 / AVG(Travel_Time)      END AS Average_Speed      FROM TimeDifferences;	railway_station	1
WITH TotalPassengers AS (     SELECT 500 * 100 AS Total_Passengers ), StationPassengers AS (     SELECT s.Station_Name, COUNT(t.Passenger_ID) AS Passenger_Count     FROM Ticket t     JOIN Station s ON t.Departure_Station_ID = s.Station_ID     WHERE date(t.Departure_Time) = '2023-10-01'     GROUP BY s.Station_Name ) SELECT sp.Station_Name, sp.Passenger_Count,         (sp.Passenger_Count * 1.0 / tp.Total_Passengers) AS Passenger_Ratio FROM StationPassengers sp, TotalPassengers tp ORDER BY Passenger_Ratio DESC;	railway_station	2
SELECT p.Passenger_ID, p.First_Name, p.Last_Name, p.Gender, p.Date_Of_Birth, p.Nationality, p.Passport_Number, p.ID_Card_Number, p.Contact_Number, p.Email, p.Address, p.Created_At, p.Updated_At,         (strftime('%Y', 'now') - strftime('%Y', p.Date_Of_Birth)) AS Age  FROM Passenger p  WHERE (strftime('%Y', 'now') - strftime('%Y', p.Date_Of_Birth)) > 60;	railway_station	3
SELECT p.Nationality,         COUNT(t.Passenger_ID) AS Passenger_Count,         AVG(t.Ticket_Price) AS Avg_Ticket_Price,         SUM(t.Ticket_Price) * 1.0 / (SELECT SUM(t2.Ticket_Price) FROM Ticket t2 WHERE t2.Train_ID = '指定列车ID' AND t2.Ticket_Status = 'Booked') AS Price_Ratio  FROM Ticket t  JOIN Passenger p ON t.Passenger_ID = p.Passenger_ID  WHERE t.Train_ID = '指定列车ID' AND t.Ticket_Status = 'Booked'  GROUP BY p.Nationality  ORDER BY Passenger_Count DESC;	railway_station	4
WITH UsedTickets AS (         SELECT t.Departure_Time, t.Arrival_Time, t.Seat_Number, t.Payment_Method, tr.Train_Type          FROM Ticket t          JOIN Train tr ON t.Train_ID = tr.Train_ID          WHERE t.Ticket_Status = 'Used'     ),      TimeDifferences AS (         SELECT (julianday(Arrival_Time) - julianday(Departure_Time)) * 24.0 AS Travel_Time,                 Seat_Number, Payment_Method, Train_Type          FROM UsedTickets     ),      AverageSpeeds AS (         SELECT CASE                   WHEN AVG(Travel_Time) = 2 THEN 500.0 / 2                   ELSE 500.0 / AVG(Travel_Time)                 END AS Average_Speed,                 Seat_Number, Payment_Method, Train_Type          FROM TimeDifferences          GROUP BY Seat_Number, Payment_Method, Train_Type     )      SELECT Train_Type, AVG(Average_Speed) AS Overall_Average_Speed      FROM AverageSpeeds      GROUP BY Train_Type;	railway_station	1
WITH TotalSeats AS (     SELECT 500 * 100 AS Total_Seats ),  StationSeats AS (     SELECT s.Station_Name, SUM(t.Total_Seats) AS Station_Total_Seats      FROM Train t      JOIN Station s ON t.Departure_Station = s.Station_ID      WHERE t.Train_Type = '高铁'      AND DATE(t.Departure_Time) = '2023-10-01'      GROUP BY s.Station_Name ),  StationSeatsRatio AS (     SELECT ss.Station_Name, ss.Station_Total_Seats,             (ss.Station_Total_Seats * 1.0 / ts.Total_Seats) AS Seats_Ratio      FROM StationSeats ss, TotalSeats ts )  SELECT ssr.Station_Name, ssr.Station_Total_Seats, ssr.Seats_Ratio  FROM StationSeatsRatio ssr  WHERE ssr.Seats_Ratio > 0.1  ORDER BY ssr.Seats_Ratio DESC;	railway_station	2
SELECT t.Train_ID, t.Train_Number, t.Train_Name, t.Train_Type, t.Departure_Station, t.Arrival_Station, t.Departure_Time, t.Arrival_Time, (strftime('%s', t.Arrival_Time) - strftime('%s', t.Departure_Time)) / 3600.0 AS Duration FROM Train t WHERE (strftime('%s', t.Arrival_Time) - strftime('%s', t.Departure_Time)) / 3600.0 > 3;	railway_station	3
WITH Step_Times AS (SELECT 0.1 AS Validation_Time, 0.2 AS Payment_Time, 0.3 AS Allocation_Time), Failure_Rate AS (SELECT 0.1 AS Failure_Rate) SELECT Total_Seats / 10000.0 * (Validation_Time + Payment_Time + Allocation_Time) * (1.0 + Failure_Rate) AS Total_Processing_Time, (Validation_Time * 100.0 / (Validation_Time + Payment_Time + Allocation_Time)) AS Validation_Percentage, (Payment_Time * 100.0 / (Validation_Time + Payment_Time + Allocation_Time)) AS Payment_Percentage, (Allocation_Time * 100.0 / (Validation_Time + Payment_Time + Allocation_Time)) AS Allocation_Percentage FROM Train, Step_Times, Failure_Rate WHERE Train_ID = '指定列车ID';	railway_station	4
SELECT (Total_Seats - Available_Seats) * 1.0 / Total_Seats AS Seat_Occupancy_Rate FROM Train WHERE Train_ID = '指定列车的Train_ID';	railway_station	1
WITH HighSpeedTrains AS (SELECT Available_Seats FROM Train WHERE Train_Type = '高铁' AND date(Departure_Time) = '2023-10-01') SELECT 450 * 100 AS Total_Available_Seats;	railway_station	2
SELECT t.Train_ID, t.Train_Number, t.Train_Name, t.Train_Type, t.Departure_Station, t.Arrival_Station, t.Departure_Time, t.Arrival_Time, t.Total_Seats, t.Available_Seats, (t.Total_Seats - t.Available_Seats) * 1.0 / t.Total_Seats AS Occupancy_Rate FROM Train t WHERE (t.Total_Seats - t.Available_Seats) * 1.0 / t.Total_Seats > 0.9;	railway_station	3
WITH Step_Times AS (SELECT 0.1 AS Validation_Time, 0.2 AS Payment_Time, 0.3 AS Allocation_Time), Failure_Rate AS (SELECT 0.1 AS Failure_Rate) SELECT Total_Seats / 10000.0 * (Validation_Time + Payment_Time + Allocation_Time) * (1.0 + Failure_Rate) AS Total_Processing_Time, (Validation_Time * 100.0 / (Validation_Time + Payment_Time + Allocation_Time)) AS Validation_Percentage, (Payment_Time * 100.0 / (Validation_Time + Payment_Time + Allocation_Time)) AS Payment_Percentage, (Allocation_Time * 100.0 / (Validation_Time + Payment_Time + Allocation_Time)) AS Allocation_Percentage FROM Train, Step_Times, Failure_Rate WHERE Train_ID = '指定列车ID';	railway_station	4
WITH RunningTrains AS (   SELECT tr.Train_ID, tr.Train_Type, tr.Operator, tr.Departure_Time, tr.Arrival_Time    FROM Train tr    WHERE tr.Train_Status = '运行中' ),  TimeDifferences AS (   SELECT Train_ID, Train_Type, Operator,           (strftime('%s', Arrival_Time) - strftime('%s', Departure_Time)) / 3600.0 AS Travel_Time    FROM RunningTrains ),  PowerConsumptions AS (   SELECT      CASE        WHEN AVG(Travel_Time) = 4 THEN 20000.0 / 4        ELSE 20000.0 / AVG(Travel_Time)      END AS Average_Power_Consumption,      Train_Type,      Operator    FROM TimeDifferences    GROUP BY Train_Type, Operator )  SELECT Train_Type, Operator, AVG(Average_Power_Consumption) AS Overall_Average_Power_Consumption  FROM PowerConsumptions  GROUP BY Train_Type, Operator;	railway_station	1
WITH HighSpeedTrains AS (     SELECT Train_ID      FROM Train      WHERE Train_Type = '高铁'      AND Train_Status = '运行'      AND date(Departure_Time) = '2023-10-01' )  SELECT 20000 * 50 AS Total_Energy_Consumption;	railway_station	2
SELECT t.Train_ID, t.Train_Number, t.Train_Name, t.Train_Type, t.Departure_Station, t.Arrival_Station, t.Departure_Time, t.Arrival_Time, t.Total_Seats, t.Available_Seats, t.Train_Status, t.Operator FROM Train t WHERE t.Train_Status = '运行' AND t.Operator = '特定运营商';	railway_station	3
WITH Step_Times AS (SELECT 0.1 AS Validation_Time, 0.2 AS Payment_Time, 0.3 AS Allocation_Time),  Failure_Rate AS (SELECT 0.1 AS Failure_Rate)  SELECT Total_Seats / 100000 * (Validation_Time + Payment_Time + Allocation_Time) * (1 + Failure_Rate) AS Total_Processing_Time,  (Validation_Time / (Validation_Time + Payment_Time + Allocation_Time)) * 100 AS Validation_Percentage,  (Payment_Time / (Validation_Time + Payment_Time + Allocation_Time)) * 100 AS Payment_Percentage,  (Allocation_Time / (Validation_Time + Payment_Time + Allocation_Time)) * 100 AS Allocation_Percentage  FROM Train, Step_Times, Failure_Rate  WHERE Train_ID = '指定列车ID';	railway_station	4
WITH UsedTickets AS (         SELECT              t.Departure_Time,              t.Arrival_Time,              t.Seat_Number,              t.Payment_Method,              tr.Train_Type          FROM Ticket t          JOIN Train tr ON t.Train_ID = tr.Train_ID          JOIN Station s1 ON t.Departure_Station_ID = s1.Station_ID          JOIN Station s2 ON t.Arrival_Station_ID = s2.Station_ID          WHERE t.Ticket_Status = 'Used'            AND s1.Station_Name = '北京南站'            AND s2.Station_Name = '上海虹桥站'     ),      TimeDifferences AS (         SELECT              (strftime('%s', Arrival_Time) - strftime('%s', Departure_Time)) / 3600.0 AS Travel_Time,              Seat_Number,              Payment_Method,              Train_Type          FROM UsedTickets     ),      AverageSpeeds AS (         SELECT              CASE                  WHEN AVG(Travel_Time) = (4 + 28 / 60.0) THEN 1318 / (4 + 28 / 60.0)                  ELSE 1318 / AVG(Travel_Time)              END AS Average_Speed,              Seat_Number,              Payment_Method,              Train_Type          FROM TimeDifferences          GROUP BY Seat_Number, Payment_Method, Train_Type     )      SELECT          Train_Type,          AVG(Average_Speed) AS Overall_Average_Speed      FROM AverageSpeeds      GROUP BY Train_Type;	railway_station	1
WITH StationInfo AS (     SELECT Station_ID      FROM Station      WHERE Station_Name = '北京南站' ),  TrainPassengers AS (     SELECT t.Train_ID, COUNT(tk.Passenger_ID) AS Passenger_Count      FROM Ticket tk      JOIN Train t ON tk.Train_ID = t.Train_ID      WHERE tk.Departure_Station_ID = (SELECT Station_ID FROM StationInfo)      AND date(tk.Departure_Time) = '2023-10-01'      GROUP BY t.Train_ID )  SELECT Train_ID, Passenger_Count  FROM TrainPassengers  ORDER BY Passenger_Count DESC  LIMIT 5;	railway_station	2
SELECT s.Station_Name, COUNT(t.Passenger_ID) AS Passenger_Count  FROM Ticket t  JOIN Station s ON t.Arrival_Station_ID = s.Station_ID  WHERE t.Departure_Station_ID = (SELECT Station_ID FROM Station WHERE Station_Name = '北京南站')  AND date(t.Departure_Time) = '2023-10-01'  GROUP BY t.Arrival_Station_ID  ORDER BY Passenger_Count DESC  LIMIT 3;	railway_station	3
WITH Step_Times AS (         SELECT 0.1 AS Validation_Time, 0.2 AS Payment_Time, 0.3 AS Allocation_Time     ),      Failure_Rate AS (         SELECT 0.1 AS Failure_Rate     )      SELECT          Total_Seats / 100000 * (Validation_Time + Payment_Time + Allocation_Time) * (1 + Failure_Rate) AS Total_Processing_Time,         (Validation_Time / (Validation_Time + Payment_Time + Allocation_Time)) * 100 AS Validation_Percentage,         (Payment_Time / (Validation_Time + Payment_Time + Allocation_Time)) * 100 AS Payment_Percentage,         (Allocation_Time / (Validation_Time + Payment_Time + Allocation_Time)) * 100 AS Allocation_Percentage,         384400 / (299792.458 * 0.01) AS Travel_Time      FROM Train, Step_Times, Failure_Rate      WHERE Train_ID = '指定列车ID';	railway_station	4
SELECT ((0.5 - 0.1) * rc.Track_Length) / (0.5 * rc.Max_Speed * rc.Max_Speed) * 100 AS Kinetic_Energy_Loss_Percentage FROM Roller_Coaster rc JOIN Maintenance_Record mr ON rc.Coaster_ID = mr.Coaster_ID WHERE mr.Track_Condition = 'Poor';	roller_coaster	1
SELECT SUM(mr.Maintenance_Cost * POWER(1.05, sub.maintenance_count) / POWER(0.9, sub.maintenance_count)) AS Total_Maintenance_Cost  FROM Maintenance_Record mr  JOIN (     SELECT COUNT(*) AS maintenance_count      FROM Maintenance_Record      WHERE Maintenance_Date BETWEEN date('now', '-1 year') AND date('now') ) sub  WHERE mr.Maintenance_Date BETWEEN date('now', '-1 year') AND date('now');	roller_coaster	2
SELECT mr.Maintenance_Type FROM Maintenance_Record mr WHERE mr.Safety_Check_Result = 'Fail' AND mr.Track_Condition = 'Poor';	roller_coaster	3
SELECT rc.Max_Speed + (50 * 12) AS Final_Max_Speed FROM Roller_Coaster rc;	roller_coaster	4
SELECT 70 * rc.Max_G_Force AS Equivalent_Weight FROM Roller_Coaster rc JOIN Passenger_Feedback pf ON rc.Coaster_ID = pf.Coaster_ID WHERE rc.Max_G_Force = 4;	roller_coaster	1
WITH RatingData AS (     SELECT Rating,             ROW_NUMBER() OVER (ORDER BY Rating) AS row_asc,             ROW_NUMBER() OVER (ORDER BY Rating DESC) AS row_desc      FROM Passenger_Feedback      WHERE Ride_Date BETWEEN date('now','-1 year') AND date('now') ),  MedianRating AS (     SELECT AVG(Rating) AS Median_Rating      FROM RatingData      WHERE row_asc IN (row_desc, row_desc - 1, row_desc + 1) )  SELECT AVG(pf.Rating) AS Average_Rating,         (SELECT Median_Rating FROM MedianRating) AS Median_Rating,         STDEV(pf.Rating) AS Standard_Deviation  FROM Passenger_Feedback pf  WHERE pf.Ride_Date BETWEEN date('now','-1 year') AND date('now');	roller_coaster	2
SELECT CASE WHEN pf.Safety_Perception = 'Unsafe' AND pf.Ride_Experience = 'Scary' THEN '可能存在速度过高、维护不足或设计缺陷' ELSE '无显著隐患' END AS Safety_Hazard FROM Passenger_Feedback pf;	roller_coaster	3
SELECT ((SUM(CASE WHEN pf.Ride_Date BETWEEN date('now', '-1 year') AND date('now') THEN pf.Rating ELSE 0 END) - SUM(CASE WHEN pf.Ride_Date BETWEEN date('now', '-2 years') AND date('now', '-1 year') THEN pf.Rating ELSE 0 END)) / SUM(CASE WHEN pf.Ride_Date BETWEEN date('now', '-2 years') AND date('now', '-1 year') THEN pf.Rating ELSE 0 END)) * 100 AS Rating_Change_Rate FROM Passenger_Feedback pf;	roller_coaster	4
SELECT Track_Length / (Max_Speed * 1000.0 / 3600.0) AS Time_Seconds, CASE WHEN (POWER(Max_Speed * 1000.0 / 3600.0, 2) / (2.0 * Track_Length)) <= 5.0 * 9.8 THEN '安全' ELSE '不安全' END AS Safety_Analysis FROM Roller_Coaster WHERE Max_Speed = 120 AND Track_Length = 1000;	roller_coaster	1
SELECT Coaster_Type, SUM(Track_Length) AS Total_Track_Length, AVG(Max_Speed) AS Average_Max_Speed, AVG(Height) AS Average_Height FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	2
SELECT CASE WHEN Status = 'Under Maintenance' AND Max_G_Force >= 5 THEN '高重力加速度导致的设备磨损或结构疲劳' ELSE '其他原因' END AS Maintenance_Reason FROM Roller_Coaster WHERE Status = 'Under Maintenance' AND Max_G_Force = 6;	roller_coaster	3
SELECT Track_Length / (Max_Speed * 1000.0 / 3600.0) AS Time_Seconds, CASE WHEN Track_Length / (Max_Speed * 1000.0 / 3600.0) > 3600 THEN '不可行' ELSE '可行' END AS Feasibility_Analysis FROM Roller_Coaster WHERE Track_Length = 100000 AND Max_Speed = 1000;	roller_coaster	4
SELECT CASE WHEN (POWER(Speed * 1000.0 / 3600.0, 2) / (Radius * 9.8)) <= 4 THEN '安全' ELSE '不安全' END AS Safety_Analysis FROM Track_Segment WHERE Segment_Type = 'Loop' AND Radius = 10 AND Speed = 90;	roller_coaster	1
SELECT Segment_Type, SUM(Length) AS Total_Length, AVG(Height) AS Average_Height, AVG(Angle) AS Average_Angle FROM Track_Segment GROUP BY Segment_Type;	roller_coaster	2
SELECT CASE WHEN Height <= 50 AND G_Force <= 4 THEN '符合安全标准' ELSE '不符合安全标准' END AS Safety_Standard FROM Track_Segment WHERE Segment_Type = 'Drop' AND Height = 50 AND G_Force = 3;	roller_coaster	3
SELECT Length / (Speed * 1000.0 / 3600.0) AS Time_Seconds, CASE WHEN Length / (Speed * 1000.0 / 3600.0) > 3600 OR G_Force > 5 THEN '不可行' ELSE '可行' END AS Feasibility_Analysis FROM Track_Segment WHERE Length = 1000000 AND Height = 10000 AND G_Force = 10;	roller_coaster	4
SELECT Maintenance_Type, AVG(Maintenance_Cost) AS Average_Maintenance_Cost, Track_Condition FROM Maintenance_Record GROUP BY Maintenance_Type, Track_Condition;	roller_coaster	1
SELECT Safety_Check_Result, AVG(Maintenance_Cost) AS Average_Maintenance_Cost FROM Maintenance_Record GROUP BY Safety_Check_Result;	roller_coaster	2
SELECT Track_Condition, AVG(Maintenance_Cost) AS Average_Maintenance_Cost FROM Maintenance_Record GROUP BY Track_Condition;	roller_coaster	3
SELECT Maintenance_Type, SUM(Maintenance_Cost) AS Total_Maintenance_Cost  FROM Maintenance_Record  WHERE Maintenance_Cost = 100000000    AND Maintenance_Type = 'Emergency'    AND Maintenance_Date BETWEEN date('now','-1 year') AND date('now')  GROUP BY Maintenance_Type;	roller_coaster	4
SELECT Angle, (POWER(Speed * 1000.0 / 3600.0, 2) / (Radius * 9.81)) * SIN(RADIANS(Angle)) AS G_Force FROM Track_Segment ORDER BY Angle;	roller_coaster	1
SELECT Coaster_Type, AVG(Max_Speed) AS Average_Max_Speed, AVG(Track_Length) AS Average_Track_Length FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	2
SELECT Ride_Experience, COUNT(CASE WHEN Rating >= 4 THEN 1 END) * 1.0 / COUNT(Feedback_ID) AS High_Rating_Ratio FROM Passenger_Feedback GROUP BY Ride_Experience ORDER BY High_Rating_Ratio DESC;	roller_coaster	3
SELECT Coaster_Type, AVG(POWER(Max_Speed * 10 * 1000 / 3600, 2) / (Track_Length * 9.81)) AS Average_Max_G_Force FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	4
SELECT Radius, MAX(G_Force) AS Max_G_Force FROM Track_Segment GROUP BY Radius ORDER BY Radius;	roller_coaster	1
SELECT Coaster_Type, AVG(Height) AS Avg_Height, AVG(Drop_Height) AS Avg_Drop_Height FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	2
SELECT Safety_Check_Result, COUNT(*) AS Total_Feedback, SUM(CASE WHEN Safety_Perception = 'Unsafe' THEN 1 ELSE 0 END) AS Unsafe_Count FROM Passenger_Feedback JOIN Maintenance_Record ON Passenger_Feedback.Coaster_ID = Maintenance_Record.Coaster_ID GROUP BY Safety_Check_Result;	roller_coaster	3
SELECT Coaster_Type, AVG((Track_Length * 100) / Max_Speed) AS Avg_Duration FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	4
SELECT Passenger_Feedback.Coaster_ID, AVG(Rating) AS Avg_Rating, Max_G_Force FROM Passenger_Feedback JOIN Roller_Coaster ON Passenger_Feedback.Coaster_ID = Roller_Coaster.Coaster_ID GROUP BY Passenger_Feedback.Coaster_ID, Max_G_Force;	roller_coaster	1
SELECT Passenger_Feedback.Coaster_ID, COUNT(CASE WHEN Ride_Experience = 'Thrilling' THEN 1 END) * 1.0 / COUNT(Feedback_ID) AS Thrilling_Ratio, Max_Speed, Track_Length FROM Passenger_Feedback JOIN Roller_Coaster ON Passenger_Feedback.Coaster_ID = Roller_Coaster.Coaster_ID GROUP BY Passenger_Feedback.Coaster_ID, Max_Speed, Track_Length;	roller_coaster	2
SELECT Maintenance_Record.Coaster_ID, Maintenance_Cost, Track_Condition,  CASE WHEN Track_Condition = 'Excellent' THEN 1 WHEN Track_Condition = 'Good' THEN 2 WHEN Track_Condition = 'Fair' THEN 3 WHEN Track_Condition = 'Poor' THEN 4 END AS Track_Condition_Score,  Maintenance_Cost / CASE WHEN Track_Condition = 'Excellent' THEN 1 WHEN Track_Condition = 'Good' THEN 2 WHEN Track_Condition = 'Fair' THEN 3 WHEN Track_Condition = 'Poor' THEN 4 END AS Maintenance_Cost_Ratio  FROM Maintenance_Record;	roller_coaster	3
SELECT Roller_Coaster.Coaster_ID, CASE WHEN Max_G_Force >= 100 THEN 'Extremely Unsafe' ELSE Passenger_Feedback.Safety_Perception END AS Safety_Perception_Change, CASE WHEN Max_G_Force >= 100 THEN 'Extremely Scary' ELSE Passenger_Feedback.Ride_Experience END AS Ride_Experience_Change FROM Roller_Coaster JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID;	roller_coaster	4
SELECT Roller_Coaster.Coaster_ID, Max_G_Force, MAX(Track_Segment.Height) AS Max_Height, AVG(CASE WHEN Safety_Perception = 'Very Safe' THEN 1 WHEN Safety_Perception = 'Safe' THEN 0.75 WHEN Safety_Perception = 'Neutral' THEN 0.5 WHEN Safety_Perception = 'Unsafe' THEN 0.25 END) AS Safety_Perception_Score FROM Roller_Coaster JOIN Track_Segment ON Roller_Coaster.Coaster_ID = Track_Segment.Coaster_ID JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID GROUP BY Roller_Coaster.Coaster_ID, Max_G_Force;	roller_coaster	1
SELECT Roller_Coaster.Coaster_ID,         (COUNT(CASE WHEN Safety_Perception = 'Very Safe' THEN 1 END) * 1.0 / COUNT(Feedback_ID)) AS Very_Safe_Ratio,         Max_Speed,         Drop_Height  FROM Roller_Coaster  JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID  GROUP BY Roller_Coaster.Coaster_ID, Max_Speed, Drop_Height;	roller_coaster	2
SELECT Maintenance_Type, COUNT(CASE WHEN Safety_Check_Result = 'Pass' THEN 1 END) * 1.0 / COUNT(Maintenance_ID) AS Safety_Check_Pass_Ratio FROM Maintenance_Record GROUP BY Maintenance_Type;	roller_coaster	3
SELECT Coaster_ID, CASE WHEN Track_Length >= 100000 THEN Duration * 10 ELSE Duration END AS Duration_Change, CASE WHEN Track_Length >= 100000 THEN Capacity_Per_Hour / 10 ELSE Capacity_Per_Hour END AS Capacity_Per_Hour_Change FROM Roller_Coaster;	roller_coaster	4
SELECT Coaster_Type,         COUNT(CASE WHEN Ride_Experience = 'Thrilling' THEN 1 END) * 1.0 / COUNT(Feedback_ID) AS Thrilling_Ratio,         AVG(Max_G_Force) AS Avg_Max_G_Force  FROM Roller_Coaster  JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID  GROUP BY Coaster_Type;	roller_coaster	1
SELECT Park_Name,         COUNT(CASE WHEN Safety_Perception = 'Safe' THEN 1 END) * 1.0 / COUNT(Feedback_ID) AS Safe_Ratio,         AVG(Max_Speed) AS Avg_Max_Speed,         AVG(Track_Length) AS Avg_Track_Length  FROM Roller_Coaster  JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID  GROUP BY Park_Name;	roller_coaster	2
SELECT Maintenance_Type,         COUNT(CASE WHEN Ride_Experience = 'Bumpy' THEN 1 END) * 1.0 / COUNT(Feedback_ID) AS Bumpy_Ratio,         AVG(CASE             WHEN Track_Condition = 'Excellent' THEN 1             WHEN Track_Condition = 'Good' THEN 2             WHEN Track_Condition = 'Fair' THEN 3             WHEN Track_Condition = 'Poor' THEN 4         END) AS Avg_Track_Condition_Score  FROM Maintenance_Record  JOIN Roller_Coaster ON Maintenance_Record.Coaster_ID = Roller_Coaster.Coaster_ID  JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID  GROUP BY Maintenance_Type;	roller_coaster	3
SELECT      Status,      COUNT(CASE WHEN Safety_Perception = 'Very Safe' THEN 1 END) * 1.0 / COUNT(Feedback_ID) AS Very_Safe_Ratio,      AVG(Max_Speed) AS Avg_Max_Speed  FROM Roller_Coaster  JOIN Passenger_Feedback ON Roller_Coaster.Coaster_ID = Passenger_Feedback.Coaster_ID  WHERE Capacity_Per_Hour >= 1000000  GROUP BY Status;	roller_coaster	4
SELECT Coaster_Type, AVG(0.5 * 1000 * POWER(Max_Speed, 2)) AS Avg_Kinetic_Energy FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	1
SELECT Manufacturer, AVG(Track_Length / Height) AS Avg_Length_Height_Ratio FROM Roller_Coaster GROUP BY Manufacturer;	roller_coaster	2
SELECT Status, CASE WHEN Max_G_Force <= 4 THEN 'Yes' ELSE 'No' END AS Suitable_For_All_Ages FROM Roller_Coaster GROUP BY Status, Suitable_For_All_Ages;	roller_coaster	3
SELECT Coaster_Type, AVG(0.5 * 1000 * POWER(10 * Max_Speed, 2)) AS Avg_New_Kinetic_Energy FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	4
SELECT Coaster_Type, AVG(70 * 9.8 * Drop_Height) AS Avg_Potential_Energy_Change FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	1
SELECT Manufacturer, AVG(Track_Length / Inversions) AS Avg_Length_Inversions_Ratio FROM Roller_Coaster GROUP BY Manufacturer;	roller_coaster	2
SELECT Park_Name, SUM(Duration * Capacity_Per_Hour * 10) AS Daily_Max_Capacity FROM Roller_Coaster GROUP BY Park_Name;	roller_coaster	3
SELECT Coaster_Type, AVG(Track_Length * 100) AS Avg_New_Track_Length FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	4
SELECT Coaster_Type, AVG(70 * 9.8 * Max_G_Force) AS Avg_Equivalent_Weight FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	1
SELECT Manufacturer, AVG((Track_Length / Height) * Max_Speed) AS Avg_Complexity_Score FROM Roller_Coaster GROUP BY Manufacturer;	roller_coaster	2
SELECT Status, CASE WHEN Max_Speed <= 100 AND Max_G_Force <= 4 THEN 'Yes' ELSE 'No' END AS Suitable_For_Heart_Patients FROM Roller_Coaster GROUP BY Status, Suitable_For_Heart_Patients;	roller_coaster	3
SELECT Coaster_Type, AVG(70 * 9.8 * (50 * Max_G_Force)) AS Avg_New_Equivalent_Weight FROM Roller_Coaster GROUP BY Coaster_Type;	roller_coaster	4
SELECT Segment_ID, MAX(70 * G_Force * 9.8) AS Force_On_Passenger FROM Track_Segment GROUP BY Segment_ID;	roller_coaster	1
SELECT Segment_ID, 0.5 * 5000 * POWER(Speed, 2) AS Energy_Consumption FROM Track_Segment;	roller_coaster	2
SELECT Track_Segment.Coaster_ID, Roller_Coaster.Coaster_Type, SUM(Length) AS Total_Length FROM Track_Segment JOIN Roller_Coaster ON Track_Segment.Coaster_ID = Roller_Coaster.Coaster_ID GROUP BY Track_Segment.Coaster_ID, Roller_Coaster.Coaster_Type;	roller_coaster	3
SELECT Segment_ID, 5000 * POWER(1000 * 1000 / 3600, 2) / Radius AS Centripetal_Force FROM Track_Segment;	roller_coaster	4
SELECT Segment_ID, Coaster_ID, G_Force, (300.0 / (G_Force * 9.8 * 5000.0 / 0.01)) AS Fatigue_Life FROM Track_Segment;	roller_coaster	1
SELECT Segment_ID, Coaster_ID, 0.5 * 5000 * Speed * Speed AS Kinetic_Energy, 5000 * 9.8 * Height AS Potential_Energy, 0.5 * 1.225 * Speed * Speed * 0.82 * 2.5 + 0.3 * 5000 * 9.8 * Length AS Energy_Loss FROM Track_Segment;	roller_coaster	2
SELECT ts.Coaster_ID, rc.Coaster_Type, SUM(ts.Radius) AS Total_Radius, AVG((ts.G_Force * 5000 * ts.Length) / (200 * 0.01)) AS Elastic_Deformation FROM Track_Segment ts JOIN Roller_Coaster rc ON ts.Coaster_ID = rc.Coaster_ID GROUP BY ts.Coaster_ID, rc.Coaster_Type;	roller_coaster	3
SELECT Segment_ID, Coaster_ID, 5000 * Speed * Speed / Radius AS Centripetal_Force, (5000 * Speed * Speed / Radius) / 0.01 AS Max_Stress FROM Track_Segment;	roller_coaster	4
SELECT Segment_ID, Coaster_ID, G_Force, ((5000 * G_Force * 9.8) * Speed) / (210e9 * 0.01) AS Dynamic_Stress FROM Track_Segment;	roller_coaster	1
SELECT Segment_ID, Coaster_ID, 0.5 * 5000 * Speed * Speed AS Kinetic_Energy, 5000 * 9.8 * Height AS Potential_Energy, 0.5 * 1.225 * Speed * Speed * 0.82 * 2.5 + 0.3 * 5000 * 9.8 * Length + 0.5 * 10000 * (G_Force * 5000 * Length / (210e9 * 0.01)) * (G_Force * 5000 * Length / (210e9 * 0.01)) AS Energy_Loss FROM Track_Segment;	roller_coaster	2
SELECT ts.Coaster_ID, rc.Coaster_Type, SUM(ts.Radius) AS Total_Radius, AVG((ts.G_Force * 5000 * ts.Length) / (210e9 * 0.01) + 12e-6 * 20 * ts.Length) AS Deformation FROM Track_Segment ts JOIN Roller_Coaster rc ON ts.Coaster_ID = rc.Coaster_ID GROUP BY ts.Coaster_ID, rc.Coaster_Type;	roller_coaster	3
SELECT Segment_ID, Coaster_ID, 5000.0 * Speed * Speed / Radius AS Centripetal_Force, (5000.0 * Speed * Speed / Radius) / 0.01 + 12e-6 * 20.0 * 210e9 AS Max_Stress FROM Track_Segment;	roller_coaster	4
SELECT Track_Condition, AVG(Maintenance_Cost) AS Avg_Maintenance_Cost FROM Maintenance_Record GROUP BY Track_Condition;	roller_coaster	1
SELECT Safety_Check_Result, COUNT(Maintenance_ID) * 1.0 / COUNT(DISTINCT Maintenance_Date) AS Maintenance_Frequency FROM Maintenance_Record GROUP BY Safety_Check_Result;	roller_coaster	2
SELECT Maintenance_Type, AVG(Maintenance_Cost) AS Avg_Maintenance_Cost FROM Maintenance_Record GROUP BY Maintenance_Type;	roller_coaster	3
SELECT Track_Condition, AVG(Maintenance_Cost) AS Avg_Maintenance_Cost FROM Maintenance_Record WHERE Maintenance_Cost >= 1000000 GROUP BY Track_Condition;	roller_coaster	4
SELECT Segment_ID, Coaster_ID, G_Force, 70 * G_Force * 9.8 AS Force_On_Passenger FROM Track_Segment;	roller_coaster	1
SELECT SUM(Maintenance_Cost) AS Total_Maintenance_Cost FROM Maintenance_Record WHERE Maintenance_Type = 'Routine' AND strftime('%Y', Maintenance_Date) = strftime('%Y', 'now');	roller_coaster	2
SELECT Safety_Perception, AVG(Rating) AS Avg_Rating FROM Passenger_Feedback GROUP BY Safety_Perception;	roller_coaster	3
SELECT Segment_ID, Coaster_ID, 10 * 9.8 AS Extreme_G_Force, 70 * 10 * 9.8 AS Extreme_Force_On_Passenger FROM Track_Segment;	roller_coaster	4
SELECT Segment_ID, Coaster_ID, (70 * Speed * Speed / Radius) >= (5 * 70 * 9.8) AS Is_Centripetal_Force_Exceeded FROM Track_Segment WHERE Segment_Type = 'Loop';	roller_coaster	1
WITH Rating_Mapping AS (     SELECT Coaster_ID,             CASE WHEN Rating = 1 THEN 1 ELSE 0 END AS Rating_Value      FROM Passenger_Feedback ),  Condition_Mapping AS (     SELECT Coaster_ID,             CASE                 WHEN Track_Condition = 'Poor' THEN 1                 WHEN Track_Condition = 'Fair' THEN 2                 WHEN Track_Condition = 'Good' THEN 3                 WHEN Track_Condition = 'Excellent' THEN 4             END AS Condition_Value      FROM Maintenance_Record )  SELECT (SUM((Rating_Value - (SELECT AVG(Rating_Value) FROM Rating_Mapping)) *               (Condition_Value - (SELECT AVG(Condition_Value) FROM Condition_Mapping))) /          (COUNT(*) *           (SELECT SQRT(AVG(Rating_Value * Rating_Value) - AVG(Rating_Value) * AVG(Rating_Value)) FROM Rating_Mapping) *           (SELECT SQRT(AVG(Condition_Value * Condition_Value) - AVG(Condition_Value) * AVG(Condition_Value)) FROM Condition_Mapping)))         ) AS Correlation_Coefficient  FROM Rating_Mapping  JOIN Condition_Mapping ON Rating_Mapping.Coaster_ID = Condition_Mapping.Coaster_ID;	roller_coaster	2
SELECT DISTINCT mr.Coaster_ID  FROM Maintenance_Record mr  JOIN Passenger_Feedback pf ON mr.Coaster_ID = pf.Coaster_ID  WHERE mr.Maintenance_Type = 'Emergency'  AND pf.Safety_Perception = 'Unsafe'  AND julianday('now') - julianday(mr.Maintenance_Date) <= 90  AND pf.Ride_Date >= mr.Maintenance_Date;	roller_coaster	3
SELECT * FROM Maintenance_Record WHERE Maintenance_Cost > 100000000 AND Coaster_ID IN (SELECT Coaster_ID FROM Passenger_Feedback GROUP BY Coaster_ID HAVING MIN(Rating) = 5 AND MAX(Rating) = 5) AND Safety_Check_Result = 'Fail';	roller_coaster	4
SELECT ts.Segment_ID, ts.Coaster_ID, ABS(0.8 * SQRT(2 * 9.8 * ts.Height) - rc.Max_Speed) / rc.Max_Speed > 0.1 AS Is_Speed_Out_of_Range FROM Track_Segment ts JOIN Roller_Coaster rc ON ts.Coaster_ID = rc.Coaster_ID WHERE ts.Segment_Type = 'Drop';	roller_coaster	1
SELECT rc.Coaster_ID,         (SUM(ts.Length) / rc.Track_Length) > 0.5 AS Is_Length_Over_Half,         rc.Inversions = COUNT(ts.Segment_ID) AS Is_Inversions_Equal  FROM Roller_Coaster rc  JOIN Track_Segment ts ON rc.Coaster_ID = ts.Coaster_ID  WHERE rc.Coaster_Type = 'Steel'    AND ts.Segment_Type IN ('Loop', 'Corkscrew')  GROUP BY rc.Coaster_ID, rc.Track_Length, rc.Inversions;	roller_coaster	2
WITH Safe_Feedback AS (     SELECT pf.Coaster_ID, COUNT(pf.Feedback_ID) AS Safe_Count      FROM Passenger_Feedback pf      WHERE pf.Safety_Perception IN ('Safe', 'Very Safe')      GROUP BY pf.Coaster_ID ),  Total_Feedback AS (     SELECT pf.Coaster_ID, COUNT(pf.Feedback_ID) AS Total_Count      FROM Passenger_Feedback pf      GROUP BY pf.Coaster_ID )  SELECT sf.Coaster_ID, ((sf.Safe_Count * 1.0) / tf.Total_Count) >= 0.9 AS Is_Safe_Perception_High  FROM Safe_Feedback sf  JOIN Total_Feedback tf ON sf.Coaster_ID = tf.Coaster_ID  WHERE sf.Coaster_ID IN (     SELECT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Safety_Check_Result = 'Pass'      GROUP BY mr.Coaster_ID      HAVING COUNT(*) >= 3 );	roller_coaster	3
SELECT Coaster_ID, CASE WHEN Max_G_Force > 12 AND Duration = 86400 THEN Capacity_Per_Hour > 200 * (3600.0 / Duration) ELSE NULL END AS Is_Capacity_Exceeded FROM Roller_Coaster;	roller_coaster	4
WITH Theoretical_Speed AS (     SELECT Coaster_ID, SQRT(2 * 9.8 * Drop_Height) AS Theoretical_Max_Speed      FROM Roller_Coaster ),  Filtered_Coasters AS (     SELECT rc.Coaster_ID      FROM Roller_Coaster rc      JOIN Theoretical_Speed ts ON rc.Coaster_ID = ts.Coaster_ID      WHERE rc.Max_Speed < 0.8 * ts.Theoretical_Max_Speed )  SELECT fc.Coaster_ID  FROM Filtered_Coasters fc  WHERE fc.Coaster_ID NOT IN (     SELECT DISTINCT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Maintenance_Type = 'Routine'      AND mr.Maintenance_Date >= date('now','-3 month') );	roller_coaster	1
WITH Annual_Capacity AS (     SELECT          Coaster_ID,          Capacity_Per_Hour * (Duration / 3600.0) * 18 * 365 AS Annual_Capacity      FROM Roller_Coaster      WHERE Capacity_Per_Hour > 5000 AND (Duration / 3600.0) > 18 ) SELECT ac.Coaster_ID  FROM Annual_Capacity ac  WHERE ac.Annual_Capacity > 1073741824  AND ac.Coaster_ID NOT IN (     SELECT DISTINCT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Track_Condition = 'Excellent' );	roller_coaster	2
WITH High_G_Force_Coasters AS (     SELECT Coaster_ID      FROM Roller_Coaster      WHERE Max_G_Force > 4 ),  Unsafe_Feedback AS (     SELECT DISTINCT pf.Coaster_ID      FROM Passenger_Feedback pf      WHERE pf.Safety_Perception = 'Unsafe' )  SELECT hg.Coaster_ID  FROM High_G_Force_Coasters hg  JOIN Unsafe_Feedback uf ON hg.Coaster_ID = uf.Coaster_ID  WHERE hg.Coaster_ID NOT IN (     SELECT DISTINCT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Maintenance_Cost > 1000000 );	roller_coaster	3
WITH Centripetal_Force AS (     SELECT Coaster_ID, (2000 * POWER(1000 / 3.6, 2)) / 0.5 AS Required_Force      FROM Roller_Coaster ) SELECT cf.Coaster_ID  FROM Centripetal_Force cf  WHERE cf.Required_Force > 1e9  AND cf.Coaster_ID NOT IN (     SELECT DISTINCT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Maintenance_Type = 'Upgrade' );	roller_coaster	4
SELECT rc.Coaster_ID, rc.Coaster_Name      FROM Roller_Coaster rc      WHERE rc.Track_Length < 1.5 * (POWER(rc.Max_Speed / 3.6, 2) / (2 * 0.2 * 9.8))      AND rc.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Safety_Check_Result = 'Pass');	roller_coaster	1
SELECT rc.Coaster_ID, rc.Coaster_Name FROM Roller_Coaster rc WHERE (rc.Duration / 60) > 20 AND (SELECT COUNT(mr.Maintenance_ID) FROM Maintenance_Record mr WHERE mr.Coaster_ID = rc.Coaster_ID) / (JULIANDAY(rc.Updated_At) - JULIANDAY(rc.Created_At)) < 0.05 AND rc.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Track_Condition = 'Excellent');	roller_coaster	2
SELECT rc.Coaster_ID, rc.Coaster_Name  FROM Roller_Coaster rc  WHERE rc.Coaster_ID IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Track_Condition IN ('Fair', 'Poor'))  AND rc.Coaster_ID IN (SELECT pf.Coaster_ID FROM Passenger_Feedback pf WHERE pf.Ride_Experience = 'Bumpy')  AND rc.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Maintenance_Type = 'Routine' AND mr.Maintenance_Date >= date('now', '-30 days'));	roller_coaster	3
SELECT rc.Coaster_ID, rc.Coaster_Name FROM Roller_Coaster rc WHERE rc.Coaster_ID IN (SELECT ts.Coaster_ID FROM Track_Segment ts WHERE ts.Angle = 127) AND rc.Coaster_ID NOT IN (SELECT ts.Coaster_ID FROM Track_Segment ts WHERE ts.G_Force > 5);	roller_coaster	4
SELECT ts.Segment_ID, ts.Coaster_ID FROM Track_Segment ts WHERE ts.Radius < (POWER(ts.Speed / 3.6, 2) / (5 * 9.8)) AND ts.G_Force > 5 AND ts.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Maintenance_Type = 'Emergency' AND mr.Maintenance_Date >= date('now', '-1 month'));	roller_coaster	1
SELECT ts.Segment_ID, ts.Coaster_ID FROM Track_Segment ts WHERE (2000 * 9.8 * ts.Height + 1000 * (ts.Speed / 3.6) * (ts.Speed / 3.6)) > 1e9 AND ts.Angle > 60 AND ts.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Maintenance_Cost > 100000);	roller_coaster	2
SELECT ts.Segment_ID, ts.Coaster_ID FROM Track_Segment ts WHERE ts.Radius < 10 AND ts.Speed > 100 AND ts.Segment_Type = 'Curve' AND ts.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Safety_Check_Result = 'Pass');	roller_coaster	3
SELECT ts.Segment_ID, ts.Coaster_ID  FROM Track_Segment ts  WHERE ts.Angle = 180  AND ts.Speed > 3 * 3.6 * SQRT(2 * 9.8 * ts.Height + POWER(ts.Speed / 3.6, 2))  AND ts.Coaster_ID NOT IN (SELECT ts2.Coaster_ID FROM Track_Segment ts2 WHERE ts2.G_Force > 10);	roller_coaster	4
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.Length, ts.Height, ts.Angle, ts.Radius, ts.G_Force, ts.Speed  FROM Track_Segment ts  WHERE ts.Segment_Type = 'Corkscrew'  AND ts.Radius < 15  AND (500000000 * 0.1) / (2000 * POWER((ts.Speed / 3.6), 2)) * ts.Radius < 1.25  AND ts.Segment_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Maintenance_Type = 'Upgrade');	roller_coaster	1
WITH EnergyChange AS (     SELECT          ts1.Segment_ID,          ABS(1000 * (POWER(ts2.Speed, 2) - POWER(ts1.Speed, 2)) + 19600 * (ts2.Height - ts1.Height)) / rc.Duration AS EnergyRate      FROM Track_Segment ts1      JOIN Track_Segment ts2 ON ts1.Coaster_ID = ts2.Coaster_ID AND ts1.Segment_ID = ts2.Segment_ID - 1      JOIN Roller_Coaster rc ON ts1.Coaster_ID = rc.Coaster_ID      WHERE rc.Duration > 5 ),  CostPercentile AS (     SELECT          Coaster_ID,          (SELECT CAST(COUNT(*) AS REAL) FROM Maintenance_Record m2 WHERE m2.Maintenance_Cost <= m1.Maintenance_Cost) / (SELECT COUNT(*) FROM Maintenance_Record) AS PercentRank      FROM Maintenance_Record m1 ) SELECT ec.Segment_ID  FROM EnergyChange ec  WHERE ec.EnergyRate > 10000000  AND ec.Segment_ID NOT IN (     SELECT cp.Coaster_ID      FROM CostPercentile cp      WHERE cp.PercentRank > 0.95 );	roller_coaster	2
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.Length, ts.Height, ts.Angle, ts.Radius, ts.G_Force, ts.Speed  FROM Track_Segment ts  WHERE ts.Segment_Type = 'Straight'  AND ts.Speed > 200  AND ts.Length < 50  AND ts.Segment_ID NOT IN (     SELECT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Maintenance_Type = 'Emergency'      AND mr.Maintenance_Date >= datetime('now', '-2 days') );	roller_coaster	3
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.Length, ts.Height, ts.Angle, ts.Radius, ts.G_Force, ts.Speed FROM Track_Segment ts WHERE (2000 * POWER((100000 * 9.8 * 3600), 2)) / (2 * 4.184 * POWER(10, 15)) > 1 AND ts.Coaster_ID NOT IN (SELECT rc.Coaster_ID FROM Roller_Coaster rc WHERE rc.Manufacturer = 'XXX');	roller_coaster	4
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.Height, ts.Speed  FROM Track_Segment ts  WHERE ts.Segment_Type = 'Drop'  AND ts.Height > 50  AND (POWER(ts.Speed / 3.6, 2) / (2 * 9.8 * ts.Height)) < 0.81  AND ts.Segment_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Maintenance_Type = 'Upgrade');	roller_coaster	1
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.Speed, ts.Radius FROM Track_Segment ts WHERE ts.Segment_Type = 'Loop' AND (2000 * POWER(ts.Speed / 3.6, 3) / ts.Radius) > 1000000 AND ts.Coaster_ID IN (SELECT rc.Coaster_ID FROM Roller_Coaster rc WHERE rc.Inversions >= 3) AND ts.Coaster_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Maintenance_Cost > (SELECT MAX(Maintenance_Cost) * 0.9 FROM Maintenance_Record));	roller_coaster	2
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.G_Force, ts.Angle  FROM Track_Segment ts  WHERE ts.Segment_Type = 'Inverted'  AND ts.G_Force > 3.5  AND ts.Angle > 45  AND ts.Segment_ID NOT IN (     SELECT mr.Coaster_ID      FROM Maintenance_Record mr      WHERE mr.Safety_Check_Result = 'Pass'      AND mr.Maintenance_Date >= date('now', '-7 days') );	roller_coaster	3
SELECT ts.Segment_ID, ts.Coaster_ID, ts.Segment_Type, ts.Speed, ts.Angle  FROM Track_Segment ts  WHERE ts.Angle = 90  AND ts.Speed > 1224  AND (2000 * POWER(ts.Speed / 3.6, 2) / 5 + 2000 * 9.8) > 1000000  AND ts.Segment_ID NOT IN (SELECT mr.Coaster_ID FROM Maintenance_Record mr WHERE mr.Track_Condition = 'Poor');	roller_coaster	4
SELECT COUNT(*) * 70 * 9.81 AS total_weight FROM Crew;	ship	1
SELECT Gender, Nationality, COUNT(*) * 1.0 / (SELECT COUNT(*) FROM Crew) AS nationality_ratio FROM Crew GROUP BY Gender, Nationality;	ship	2
SELECT Crew_ID, First_Name, Last_Name, Ranks, Experience_Years, (CASE WHEN Ranks = 'Captain' THEN 10 WHEN Ranks = 'First Mate' THEN 8 ELSE 5 END) * Experience_Years AS salary_level FROM Crew ORDER BY salary_level DESC;	ship	3
SELECT COUNT(*) * 10 AS min_area FROM Crew;	ship	4
SELECT Port_Name, Country FROM Port WHERE Max_Draft >= 10;	ship	1
SELECT Port_Name, (50.0 / Berth_Capacity) * 100 AS Utilization_Rate FROM Port;	ship	2
SELECT Port_Name, CASE WHEN Port_Type = 'Commercial' THEN 'Commercial Goods' WHEN Port_Type = 'Fishing' THEN 'Fish Products' WHEN Port_Type = 'Military' THEN 'Military Supplies' WHEN Port_Type = 'Recreational' THEN 'Tourist Goods' ELSE 'Unknown' END AS Main_Cargo_Type FROM Port;	ship	3
SELECT (365 / 7) * 1000 AS Total_Ships_Per_Year;	ship	4
SELECT Ship_Name, Gross_Tonnage * 1025 * 9.81 AS Total_Buoyancy FROM Ship WHERE Gross_Tonnage = 50000;	ship	1
SELECT Ship_Name, 1000.0 / 200 AS Avg_Speed FROM Ship;	ship	2
SELECT Ship_Name, CASE WHEN Ship_Type = 'Cargo' THEN 'Long-Distance Freight Routes, Freight Services' WHEN Ship_Type = 'Passenger' THEN 'Short-Distance Passenger Routes, Passenger Services' WHEN Ship_Type = 'Fishing' THEN 'Fishing Routes, Fishing Services' WHEN Ship_Type = 'Military' THEN 'Strategic Routes, Military Services' ELSE 'Unknown' END AS Suitable_Route_And_Service FROM Ship;	ship	3
SELECT Ship_Name, 1000000.0 / (1000 * 200 * 1025) AS Draft_Depth FROM Ship WHERE Gross_Tonnage = 1000000;	ship	4
SELECT Voyage_ID, 10000 * 50 * 0.2 AS Fuel_Consumption FROM Voyage_Plan;	ship	1
SELECT Voyage_ID, 500.0 / 100 AS Avg_Speed FROM Voyage_Plan;	ship	2
SELECT Voyage_ID, Cargo_Weight / Gross_Tonnage AS Loading_Capacity, CASE WHEN Cargo_Type = 'Heavy' THEN 'High Stability Required' WHEN Cargo_Type = 'Light' THEN 'Standard Safety' WHEN Cargo_Type = 'Hazardous' THEN 'Enhanced Safety Measures' ELSE 'Unknown' END AS Safety_Level FROM Voyage_Plan JOIN Ship ON Voyage_Plan.Ship_ID = Ship.Ship_ID;	ship	3
SELECT Voyage_ID, 10000 * 1000 * 0.5 AS Fuel_Consumption FROM Voyage_Plan WHERE Cargo_Weight = 1000000;	ship	4
SELECT Ship_ID, COUNT(Crew_ID) * 70 * 9.81 AS Total_Weight FROM Crew GROUP BY Ship_ID ORDER BY Total_Weight ASC;	ship	1
SELECT Gender, Nationality, COUNT(Crew_ID) * 1.0 / SUM(COUNT(Crew_ID)) OVER (PARTITION BY Gender) AS Nationality_Ratio FROM Crew GROUP BY Gender, Nationality ORDER BY Nationality_Ratio DESC;	ship	2
SELECT Crew_ID, Ranks, Experience_Years, CASE WHEN Ranks = 'Captain' THEN 10 WHEN Ranks = 'First Mate' THEN 8 WHEN Ranks = 'Engineer' THEN 6 ELSE 4 END * Experience_Years AS Salary_Level FROM Crew ORDER BY Salary_Level DESC;	ship	3
SELECT Ship_ID, COUNT(Crew_ID) * 10 AS Required_Area FROM Crew GROUP BY Ship_ID ORDER BY Required_Area ASC;	ship	4
SELECT p.Port_Name, 10000 * 9.81 AS Buoyancy FROM Port p JOIN Ship s ON p.Port_ID = s.Ship_ID WHERE p.Max_Draft >= (10000 / (s.Gross_Tonnage / s.Draft)) ORDER BY Buoyancy ASC;	ship	1
SELECT Port_Type, AVG((50.0 / Berth_Capacity) * 100) AS Avg_Utilization_Rate FROM Port GROUP BY Port_Type ORDER BY Avg_Utilization_Rate DESC;	ship	2
SELECT Port_Name, CASE WHEN Port_Type = 'Commercial' THEN 'Commercial Goods, Container Shipping' WHEN Port_Type = 'Fishing' THEN 'Fish Products, Refrigerated Transport' WHEN Port_Type = 'Military' THEN 'Military Supplies, Specialized Transport' WHEN Port_Type = 'Recreational' THEN 'Tourist Goods, Passenger Transport' ELSE 'Unknown' END AS Main_Cargo_And_Transport FROM Port ORDER BY Main_Cargo_And_Transport ASC;	ship	3
SELECT Port_Name, (365 / 30) * 10000 AS Total_Ships_Per_Year FROM Port ORDER BY Total_Ships_Per_Year DESC;	ship	4
SELECT Ship_Name, Gross_Tonnage * 1025 * 9.81 AS Total_Buoyancy FROM Ship WHERE Gross_Tonnage = 50000 ORDER BY Total_Buoyancy ASC;	ship	1
SELECT Ship_Name, 500.0 / 100 AS Avg_Speed FROM Ship ORDER BY Avg_Speed DESC;	ship	2
SELECT Ship_Name, CASE WHEN Ship_Type = 'Cargo' THEN 'Long-Distance Freight Routes, Freight Services' WHEN Ship_Type = 'Passenger' THEN 'Short-Distance Passenger Routes, Passenger Services' WHEN Ship_Type = 'Fishing' THEN 'Fishing Routes, Fishing Services' WHEN Ship_Type = 'Military' THEN 'Strategic Routes, Military Services' ELSE 'Unknown' END AS Suitable_Route_And_Service FROM Ship ORDER BY Suitable_Route_And_Service ASC;	ship	3
SELECT Ship_Name, 1000000.0 / (1000 * 200 * 1025) AS Draft_Depth FROM Ship WHERE Gross_Tonnage = 1000000 ORDER BY Draft_Depth DESC;	ship	4
SELECT Voyage_ID, 10000 * 50 * 0.2 AS Fuel_Consumption FROM Voyage_Plan ORDER BY Fuel_Consumption ASC;	ship	1
SELECT Voyage_ID, 500.0 / 100 AS Avg_Speed FROM Voyage_Plan ORDER BY Avg_Speed DESC;	ship	2
SELECT Voyage_ID, Cargo_Weight / Gross_Tonnage AS Loading_Capacity, CASE WHEN Cargo_Type = 'Heavy' THEN 'High Stability Required' WHEN Cargo_Type = 'Light' THEN 'Standard Safety' WHEN Cargo_Type = 'Hazardous' THEN 'Enhanced Safety Measures' ELSE 'Unknown' END AS Safety_Level FROM Voyage_Plan JOIN Ship ON Voyage_Plan.Ship_ID = Ship.Ship_ID ORDER BY Loading_Capacity ASC;	ship	3
SELECT Voyage_ID, 10000 * 1000 * 0.5 AS Fuel_Consumption FROM Voyage_Plan WHERE Cargo_Weight = 1000000 ORDER BY Fuel_Consumption DESC;	ship	4
SELECT Gender, COUNT(Crew_ID) * 70 * 9.81 AS Total_Weight FROM Crew GROUP BY Gender;	ship	1
SELECT Nationality, Gender, COUNT(Crew_ID) * 1.0 / (SELECT COUNT(*) FROM Crew) AS Nationality_Ratio FROM Crew GROUP BY Nationality, Gender;	ship	2
SELECT Ranks, Experience_Years, CASE WHEN Ranks = 'Captain' THEN 10 WHEN Ranks = 'First Mate' THEN 8 WHEN Ranks = 'Engineer' THEN 6 ELSE 4 END * Experience_Years AS Salary_Level FROM Crew GROUP BY Ranks, Experience_Years;	ship	3
SELECT Ranks, COUNT(Crew_ID) * 10 AS Required_Area FROM Crew GROUP BY Ranks;	ship	4
SELECT p.Port_Type, 10000 * 9.81 AS Buoyancy FROM Port p JOIN Ship s ON p.Port_ID = s.Ship_ID WHERE p.Max_Draft >= (10000 / (s.Gross_Tonnage / s.Draft)) GROUP BY p.Port_Type;	ship	1
SELECT Port_Type, Country, AVG((50.0 / Berth_Capacity) * 100) AS Avg_Utilization_Rate FROM Port GROUP BY Port_Type, Country;	ship	2
SELECT Port_Type, Country, CASE WHEN Port_Type = 'Commercial' THEN 'Commercial Goods, Container Shipping' WHEN Port_Type = 'Fishing' THEN 'Fish Products, Refrigerated Transport' WHEN Port_Type = 'Military' THEN 'Military Supplies, Specialized Transport' WHEN Port_Type = 'Recreational' THEN 'Tourist Goods, Passenger Transport' ELSE 'Unknown' END AS Main_Cargo_And_Transport FROM Port GROUP BY Port_Type, Country;	ship	3
SELECT Port_Type, Country, (365.0 / 30.0) * 10000 AS Total_Ships_Per_Year FROM Port GROUP BY Port_Type, Country;	ship	4
SELECT Ship_Type, Gross_Tonnage * 1025 * 9.81 AS Total_Buoyancy FROM Ship WHERE Gross_Tonnage = 50000 GROUP BY Ship_Type;	ship	1
SELECT Ship_Type, Flag_Country, 500.0 / 100 AS Avg_Speed FROM Ship GROUP BY Ship_Type, Flag_Country;	ship	2
SELECT Ship_Type, Flag_Country, CASE WHEN Ship_Type = 'Cargo' THEN 'Long-Distance Freight Routes, Freight Services' WHEN Ship_Type = 'Passenger' THEN 'Short-Distance Passenger Routes, Passenger Services' WHEN Ship_Type = 'Fishing' THEN 'Fishing Routes, Fishing Services' WHEN Ship_Type = 'Military' THEN 'Strategic Routes, Military Services' ELSE 'Unknown' END AS Suitable_Route_And_Service FROM Ship GROUP BY Ship_Type, Flag_Country;	ship	3
SELECT Ship_Type, Flag_Country, 1000000.0 / (1000 * 200 * 1025) AS Draft_Depth FROM Ship WHERE Gross_Tonnage = 1000000 GROUP BY Ship_Type, Flag_Country;	ship	4
SELECT s.Ship_Type, 10000 * 50 * 0.2 AS Fuel_Consumption FROM Voyage_Plan v JOIN Ship s ON v.Ship_ID = s.Ship_ID GROUP BY s.Ship_Type;	ship	1
SELECT s.Ship_Type, s.Flag_Country, 500.0 / 100 AS Avg_Speed FROM Voyage_Plan v JOIN Ship s ON v.Ship_ID = s.Ship_ID GROUP BY s.Ship_Type, s.Flag_Country;	ship	2
SELECT v.Cargo_Type, s.Ship_Type, MAX(v.Cargo_Weight / s.Gross_Tonnage) AS Loading_Capacity, CASE WHEN v.Cargo_Type = 'Heavy' THEN 'High Stability Required' WHEN v.Cargo_Type = 'Light' THEN 'Standard Safety' WHEN v.Cargo_Type = 'Hazardous' THEN 'Enhanced Safety Measures' ELSE 'Unknown' END AS Safety_Level FROM Voyage_Plan v JOIN Ship s ON v.Ship_ID = s.Ship_ID GROUP BY v.Cargo_Type, s.Ship_Type;	ship	3
SELECT s.Ship_Type, s.Flag_Country, 10000 * 1000 * 0.5 AS Fuel_Consumption  FROM Voyage_Plan v  JOIN Ship s ON v.Ship_ID = s.Ship_ID  WHERE v.Cargo_Weight = 1000000  GROUP BY s.Ship_Type, s.Flag_Country;	ship	4
SELECT Crew_ID, COUNT(Crew_ID) * 70 * 9.81 AS Total_Weight FROM Crew WHERE Ship_ID NOT IN (SELECT Ship_ID FROM Ship) GROUP BY Crew_ID;	ship	1
SELECT Nationality, COUNT(Crew_ID) * 1.0 / (SELECT COUNT(*) FROM Crew WHERE Ship_ID NOT IN (SELECT Ship_ID FROM Ship)) AS Nationality_Ratio FROM Crew WHERE Ship_ID NOT IN (SELECT Ship_ID FROM Ship) GROUP BY Nationality;	ship	2
SELECT Crew_ID, Ranks, Experience_Years,         CASE           WHEN Ranks = 'Captain' THEN 10           WHEN Ranks = 'First Mate' THEN 8           WHEN Ranks = 'Engineer' THEN 6           ELSE 4         END * Experience_Years AS Salary_Level  FROM Crew  WHERE Ship_ID NOT IN (SELECT Ship_ID FROM Ship);	ship	3
SELECT Crew_ID, COUNT(Crew_ID) * 10 AS Required_Area FROM Crew WHERE Ship_ID NOT IN (SELECT Ship_ID FROM Ship) GROUP BY Crew_ID;	ship	4
SELECT Port_ID, 10000 * 9.81 AS Buoyancy  FROM Port  WHERE Port_ID NOT IN (SELECT DISTINCT Port_ID FROM Ship)  AND Max_Draft >= (10000 / (SELECT AVG(Gross_Tonnage / Draft) FROM Ship));	ship	1
SELECT Port_Type, AVG((50.0 / Berth_Capacity) * 100) AS Avg_Utilization_Rate FROM Port WHERE Port_ID NOT IN (SELECT DISTINCT Port_ID FROM Ship) GROUP BY Port_Type;	ship	2
SELECT Port_Type, Country, CASE WHEN Port_Type = 'Commercial' THEN 'Commercial Goods, Container Shipping' WHEN Port_Type = 'Fishing' THEN 'Fish Products, Refrigerated Transport' WHEN Port_Type = 'Military' THEN 'Military Supplies, Specialized Transport' WHEN Port_Type = 'Recreational' THEN 'Tourist Goods, Passenger Transport' ELSE 'Unknown' END AS Main_Cargo_And_Transport FROM Port WHERE Port_ID NOT IN (SELECT DISTINCT Port_ID FROM Ship);	ship	3
SELECT Port_ID, (365.0 / 30) * 10000 AS Total_Ships_Per_Year FROM Port WHERE Port_ID NOT IN (SELECT DISTINCT Port_ID FROM Ship);	ship	4
SELECT Ship_ID, Gross_Tonnage * 1025 * 9.81 AS Total_Buoyancy FROM Ship WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Voyage_Plan);	ship	1
SELECT Ship_ID, 500.0 / 100 AS Avg_Speed FROM Ship WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Voyage_Plan);	ship	2
SELECT Ship_ID, Ship_Type, CASE WHEN Ship_Type = 'Cargo' THEN 'Long-Distance Freight Routes, Freight Services' WHEN Ship_Type = 'Passenger' THEN 'Short-Distance Passenger Routes, Passenger Services' WHEN Ship_Type = 'Fishing' THEN 'Fishing Routes, Fishing Services' WHEN Ship_Type = 'Military' THEN 'Strategic Routes, Military Services' ELSE 'Unknown' END AS Suitable_Route_And_Service FROM Ship WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Voyage_Plan);	ship	3
SELECT Ship_ID, 1000000.0 / (1000 * 200 * 1025) AS Draft_Depth FROM Ship WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Voyage_Plan);	ship	4
SELECT Voyage_ID, 10000 * 50 * 0.2 AS Fuel_Consumption FROM Voyage_Plan WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Ship);	ship	1
SELECT Voyage_ID, 500.0 / 100 AS Avg_Speed FROM Voyage_Plan WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Ship);	ship	2
SELECT Voyage_ID, Cargo_Type, Cargo_Weight / (SELECT Gross_Tonnage FROM Ship WHERE Ship.Ship_ID = Voyage_Plan.Ship_ID) AS Loading_Capacity, CASE WHEN Cargo_Type = 'Heavy' THEN 'High Stability Required' WHEN Cargo_Type = 'Light' THEN 'Standard Safety' WHEN Cargo_Type = 'Hazardous' THEN 'Enhanced Safety Measures' ELSE 'Unknown' END AS Safety_Level FROM Voyage_Plan WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Ship);	ship	3
SELECT Voyage_ID, 10000 * 1000 * 0.5 AS Fuel_Consumption  FROM Voyage_Plan  WHERE Ship_ID NOT IN (SELECT DISTINCT Ship_ID FROM Ship);	ship	4
SELECT c.Crew_ID, COUNT(c.Crew_ID) * 70 * 9.81 AS Total_Weight, p.Max_Draft  FROM Crew c  JOIN Port p ON c.Ship_ID = p.Port_ID  GROUP BY c.Crew_ID, p.Max_Draft;	ship	1
SELECT c.Nationality, COUNT(c.Crew_ID) * 1.0 / (SELECT COUNT(*) FROM Crew) AS Nationality_Ratio, p.Berth_Capacity FROM Crew c JOIN Port p ON c.Ship_ID = p.Port_ID GROUP BY c.Nationality, p.Berth_Capacity;	ship	2
SELECT c.Crew_ID, c.Ranks, c.Experience_Years, CASE WHEN c.Ranks = 'Captain' THEN 10 WHEN c.Ranks = 'First Mate' THEN 8 WHEN c.Ranks = 'Engineer' THEN 6 ELSE 4 END * c.Experience_Years AS Salary_Level, p.Port_Type FROM Crew c JOIN Port p ON c.Ship_ID = p.Port_ID;	ship	3
SELECT c.Crew_ID, COUNT(c.Crew_ID) * 10 AS Required_Area, p.Max_Draft  FROM Crew c  JOIN Port p ON c.Ship_ID = p.Port_ID  GROUP BY c.Crew_ID, p.Max_Draft;	ship	4
SELECT c.Crew_ID, COUNT(c.Crew_ID) * 70 * 9.81 AS Total_Weight, s.Gross_Tonnage FROM Crew c JOIN Ship s ON c.Ship_ID = s.Ship_ID GROUP BY c.Crew_ID, s.Gross_Tonnage;	ship	1
SELECT c.Nationality, COUNT(c.Crew_ID) * 1.0 / (SELECT COUNT(*) FROM Crew) AS Nationality_Ratio, s.Crew_Capacity  FROM Crew c  JOIN Ship s ON c.Ship_ID = s.Ship_ID  GROUP BY c.Nationality, s.Crew_Capacity;	ship	2
SELECT c.Crew_ID, c.Ranks, c.Experience_Years, CASE WHEN c.Ranks = 'Captain' THEN 10 WHEN c.Ranks = 'First Mate' THEN 8 WHEN c.Ranks = 'Engineer' THEN 6 ELSE 4 END * c.Experience_Years AS Salary_Level, s.Ship_Type FROM Crew c JOIN Ship s ON c.Ship_ID = s.Ship_ID;	ship	3
SELECT s.Gross_Tonnage, COUNT(c.Crew_ID) * 10 AS Required_Area FROM Crew c JOIN Ship s ON c.Ship_ID = s.Ship_ID GROUP BY s.Ship_ID, s.Gross_Tonnage;	ship	4
SELECT s.Ship_ID, s.Gross_Tonnage * 1025 * 9.81 AS Total_Buoyancy, p.Max_Draft  FROM Ship s  JOIN Port p ON s.Ship_ID = p.Port_ID  WHERE s.Gross_Tonnage = 50000;	ship	1
SELECT s.Ship_ID, 500.0 / 100 AS Avg_Speed, p.Berth_Capacity FROM Ship s JOIN Port p ON s.Ship_ID = p.Port_ID;	ship	2
SELECT s.Ship_ID, s.Ship_Type,         CASE            WHEN s.Ship_Type = 'Cargo' THEN 'Long-Distance Freight Routes, Freight Services'           WHEN s.Ship_Type = 'Passenger' THEN 'Short-Distance Passenger Routes, Passenger Services'           WHEN s.Ship_Type = 'Fishing' THEN 'Fishing Routes, Fishing Services'           WHEN s.Ship_Type = 'Military' THEN 'Strategic Routes, Military Services'           ELSE 'Unknown'        END AS Suitable_Route_And_Service,        p.Port_Type  FROM Ship s  JOIN Port p ON s.Ship_ID = p.Port_ID;	ship	3
SELECT s.Ship_ID, 1000000.0 / (1000 * 200 * 1025) AS Draft_Depth, p.Max_Draft FROM Ship s JOIN Port p ON s.Ship_ID = p.Port_ID WHERE s.Gross_Tonnage = 1000000;	ship	4
SELECT v.Voyage_ID, 10000 * 50 * 0.2 AS Fuel_Consumption, s.Gross_Tonnage  FROM Voyage_Plan v  JOIN Ship s ON v.Ship_ID = s.Ship_ID;	ship	1
SELECT v.Voyage_ID, 500.0 / 100 AS Avg_Speed, s.Crew_Capacity FROM Voyage_Plan v JOIN Ship s ON v.Ship_ID = s.Ship_ID;	ship	2
SELECT v.Voyage_ID, v.Cargo_Type, v.Cargo_Weight / s.Gross_Tonnage AS Loading_Capacity, CASE WHEN v.Cargo_Type = 'Heavy' THEN 'High Stability Required' WHEN v.Cargo_Type = 'Light' THEN 'Standard Safety' WHEN v.Cargo_Type = 'Hazardous' THEN 'Enhanced Safety Measures' ELSE 'Unknown' END AS Safety_Level, s.Ship_Type FROM Voyage_Plan v JOIN Ship s ON v.Ship_ID = s.Ship_ID;	ship	3
SELECT v.Voyage_ID, 10000 * 1000 * 0.5 AS Fuel_Consumption, s.Gross_Tonnage FROM Voyage_Plan v JOIN Ship s ON v.Ship_ID = s.Ship_ID WHERE v.Cargo_Weight = 1000000;	ship	4
SELECT Gender, COUNT(Crew_ID) * 70 * 9.81 AS Total_Weight FROM Crew GROUP BY Gender;	ship	1
SELECT Nationality, CAST(COUNT(Crew_ID) AS REAL) / (SELECT COUNT(*) FROM Crew) AS Nationality_Ratio FROM Crew GROUP BY Nationality;	ship	2
SELECT Ranks,         CASE             WHEN Ranks = 'Captain' THEN 10             WHEN Ranks = 'First Mate' THEN 8             WHEN Ranks = 'Engineer' THEN 6             ELSE 4         END * AVG(Experience_Years) AS Salary_Level  FROM Crew  GROUP BY Ranks;	ship	3
SELECT Ranks, COUNT(Crew_ID) * 10 AS Required_Area FROM Crew GROUP BY Ranks;	ship	4
SELECT Nationality, AVG(strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) AS Avg_Age FROM Crew WHERE Gender = 'Male' GROUP BY Nationality;	ship	1
SELECT Ranks, COUNT(Crew_ID) AS Total_Count FROM Crew WHERE Experience_Years > 10 GROUP BY Ranks;	ship	2
SELECT Ranks, MAX(First_Name) AS First_Name, MAX(Last_Name) AS Last_Name, MAX(Contact_Number) AS Contact_Number FROM Crew WHERE Status = 'Active' GROUP BY Ranks;	ship	3
SELECT Nationality, AVG(Experience_Years + 1000) AS Avg_Experience FROM Crew GROUP BY Nationality;	ship	4
SELECT p1.Port_Name AS Port1, p2.Port_Name AS Port2,         6371.0 * 2.0 * ASIN(SQRT(POWER(SIN((RADIANS(p2.Latitude) - RADIANS(p1.Latitude)) / 2.0), 2.0) +         COS(RADIANS(p1.Latitude)) * COS(RADIANS(p2.Latitude)) *         POWER(SIN((RADIANS(p2.Longitude) - RADIANS(p1.Longitude)) / 2.0), 2.0))) AS Distance  FROM Port p1, Port p2  WHERE p1.Port_ID <> p2.Port_ID;	ship	1
SELECT Country, AVG(Max_Draft) AS Avg_Max_Draft FROM Port GROUP BY Country;	ship	2
SELECT Port_Name, Berth_Capacity FROM Port WHERE Port_Type = 'Commercial' AND Berth_Capacity > 100;	ship	3
SELECT Port_Name, Max_Draft FROM Port WHERE Max_Draft = 1000;	ship	4
SELECT Ship_Type, MAX(Engine_Power * 1.0 / Gross_Tonnage) AS Max_Power_Weight_Ratio FROM Ship GROUP BY Ship_Type ORDER BY Max_Power_Weight_Ratio DESC LIMIT 1;	ship	1
SELECT Ship_Type, MAX(Crew_Capacity * 1.0 / Length) AS Max_Crew_Density FROM Ship GROUP BY Ship_Type ORDER BY Max_Crew_Density DESC LIMIT 1;	ship	2
SELECT AVG(Passenger_Capacity) AS Avg_Passenger_Capacity FROM Ship WHERE Ship_Type = '客船' AND Passenger_Capacity > 1000;	ship	3
SELECT 1000 * 200 * 50 * 1 AS Displacement;	ship	4
SELECT VP.Ship_ID,         AVG(6371 * 2 * ASIN(SQRT(POWER(SIN((RADIANS(P2.Latitude) - RADIANS(P1.Latitude)) / 2), 2) + COS(RADIANS(P1.Latitude)) * COS(RADIANS(P2.Latitude)) * POWER(SIN((RADIANS(P2.Longitude) - RADIANS(P1.Longitude)) / 2), 2))) / (strftime('%s', VP.Arrival_Time) - strftime('%s', VP.Departure_Time))) AS Avg_Speed,         MAX(S.Max_Speed) AS Max_Speed  FROM Voyage_Plan VP  JOIN Port P1 ON VP.Departure_Port_ID = P1.Port_ID  JOIN Port P2 ON VP.Arrival_Port_ID = P2.Port_ID  JOIN Ship S ON VP.Ship_ID = S.Ship_ID  GROUP BY VP.Ship_ID  HAVING Avg_Speed > 0.9 * MAX(S.Max_Speed);	ship	1
SELECT VP.Voyage_ID, (VP.Cargo_Weight + (VP.Passenger_Count * 75)) AS Total_Weight  FROM Voyage_Plan VP  JOIN Ship S ON VP.Ship_ID = S.Ship_ID  WHERE (VP.Cargo_Weight + (VP.Passenger_Count * 75)) > S.Gross_Tonnage * 0.8;	ship	2
SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM Voyage_Plan) AS Same_Country_Ratio FROM Voyage_Plan VP JOIN Port P1 ON VP.Departure_Port_ID = P1.Port_ID JOIN Port P2 ON VP.Arrival_Port_ID = P2.Port_ID WHERE P1.Country = P2.Country;	ship	3
SELECT VP.Ship_ID, AVG(6371 * 2 * ASIN(SQRT(POWER(SIN((RADIANS(P2.Latitude) - RADIANS(P1.Latitude)) / 2), 2) + COS(RADIANS(P1.Latitude)) * COS(RADIANS(P2.Latitude)) * POWER(SIN((RADIANS(P2.Longitude) - RADIANS(P1.Longitude)) / 2), 2))) / (strftime('%s', VP.Arrival_Time) - strftime('%s', VP.Departure_Time))) AS Avg_Speed, MAX(S.Max_Speed * 10) AS New_Max_Speed FROM Voyage_Plan VP JOIN Port P1 ON VP.Departure_Port_ID = P1.Port_ID JOIN Port P2 ON VP.Arrival_Port_ID = P2.Port_ID JOIN Ship S ON VP.Ship_ID = S.Ship_ID GROUP BY VP.Ship_ID HAVING Avg_Speed > 0.9 * MAX(S.Max_Speed * 10);	ship	4
SELECT First_Name, Last_Name, Date_Of_Birth, (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) AS Age FROM Crew ORDER BY Age ASC LIMIT 5;	submarine	1
SELECT First_Name, Last_Name, Experience_Years, (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) AS Age, (Experience_Years / (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth))) AS Experience_Age_Ratio FROM Crew ORDER BY Experience_Age_Ratio DESC LIMIT 5;	submarine	2
SELECT Nationality, COUNT(Nationality) AS Nationality_Count FROM Crew GROUP BY Nationality ORDER BY Nationality_Count DESC LIMIT 3;	submarine	3
SELECT First_Name, Last_Name, (Experience_Years + 1000) AS New_Experience_Years, (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) AS Age, ((Experience_Years + 1000) / (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth))) AS New_Experience_Age_Ratio FROM Crew ORDER BY New_Experience_Age_Ratio DESC LIMIT 5;	submarine	4
SELECT Maintenance_Date, AVG(Maintenance_Cost) AS Avg_Maintenance_Cost  FROM Maintenance_Record  WHERE Pressure_Test_Result = 'Pass'  GROUP BY Maintenance_Date  ORDER BY Maintenance_Date ASC  LIMIT 5;	submarine	1
SELECT Maintenance_Date, SUM(Maintenance_Cost) AS Total_Maintenance_Cost  FROM Maintenance_Record  WHERE Hull_Integrity_Check = 'Pass' AND Propulsion_System_Check = 'Pass'  GROUP BY Maintenance_Date  ORDER BY Maintenance_Date DESC  LIMIT 5;	submarine	2
SELECT Maintenance_Type, Maintenance_Cost FROM Maintenance_Record WHERE Maintenance_Type = 'Emergency' ORDER BY Maintenance_Cost DESC LIMIT 3;	submarine	3
SELECT Maintenance_Date, SUM(Maintenance_Cost * 100) AS New_Total_Maintenance_Cost FROM Maintenance_Record GROUP BY Maintenance_Date ORDER BY Maintenance_Date ASC LIMIT 5;	submarine	4
SELECT Mission_ID, Pressure_Endured, Max_Depth_Reached, (Pressure_Endured * 1.0 / Max_Depth_Reached) AS Pressure_Depth_Ratio FROM Mission ORDER BY Pressure_Depth_Ratio ASC LIMIT 5;	submarine	1
SELECT Mission_ID, Max_Depth_Reached, (strftime('%s', End_time) - strftime('%s', Start_time)) / 3600.0 AS Duration_Hours, (Max_Depth_Reached / ((strftime('%s', End_time) - strftime('%s', Start_time)) / 3600.0)) AS Depth_Time_Ratio FROM Mission ORDER BY Depth_Time_Ratio DESC LIMIT 5;	submarine	2
SELECT Mission_ID, Mission_Type, Max_Depth_Reached FROM Mission WHERE Mission_Type = 'Combat' ORDER BY Max_Depth_Reached DESC LIMIT 3;	submarine	3
SELECT Mission_ID, (Pressure_Endured * 1000) AS New_Pressure_Endured, Max_Depth_Reached, ((Pressure_Endured * 1000) / Max_Depth_Reached) AS New_Pressure_Depth_Ratio FROM Mission ORDER BY New_Pressure_Depth_Ratio ASC LIMIT 5;	submarine	4
SELECT Submarine_ID, Displacement, Max_Depth, (Displacement * 1.0 / Max_Depth) AS Displacement_Depth_Ratio FROM Submarine ORDER BY Displacement_Depth_Ratio ASC LIMIT 5;	submarine	1
SELECT Submarine_ID, Length, Beam, (CAST(Length AS REAL) / Beam) AS Length_Beam_Ratio FROM Submarine ORDER BY Length_Beam_Ratio DESC LIMIT 5;	submarine	2
SELECT Submarine_ID, Submarine_Type, Max_Speed FROM Submarine WHERE Submarine_Type = 'Attack' ORDER BY Max_Speed DESC LIMIT 3;	submarine	3
SELECT Submarine_ID, (Displacement * 1000) AS New_Displacement, Max_Depth, ((Displacement * 1000) / Max_Depth) AS New_Displacement_Depth_Ratio FROM Submarine ORDER BY New_Displacement_Depth_Ratio ASC LIMIT 5;	submarine	4
SELECT Submarine_Type, AVG(CAST(Displacement AS REAL) / Max_Depth) AS Avg_Displacement_Depth_Ratio FROM Submarine GROUP BY Submarine_Type;	submarine	1
WITH Length_Beam_Ratio AS (     SELECT Propulsion_Type, (CAST(Length AS REAL) / CAST(Beam AS REAL)) AS Ratio      FROM Submarine ) SELECT Propulsion_Type, AVG(Ratio) AS Median_Length_Beam_Ratio  FROM (     SELECT Propulsion_Type, Ratio,             ROW_NUMBER() OVER (PARTITION BY Propulsion_Type ORDER BY Ratio) AS RowAsc,            ROW_NUMBER() OVER (PARTITION BY Propulsion_Type ORDER BY Ratio DESC) AS RowDesc      FROM Length_Beam_Ratio ) AS Subquery  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc - 1 = RowDesc  GROUP BY Propulsion_Type;	submarine	2
SELECT Status, MAX(Crew_Capacity * 1.0 / Torpedo_Count) AS Max_Crew_Torpedo_Ratio FROM Submarine GROUP BY Status;	submarine	3
SELECT Submarine_Type, MAX((Displacement * 1000) / Max_Depth) AS Max_New_Displacement_Depth_Ratio FROM Submarine GROUP BY Submarine_Type;	submarine	4
SELECT Mission_Type, AVG(Pressure_Endured / Max_Depth_Reached) AS Avg_Pressure_Depth_Ratio FROM Mission GROUP BY Mission_Type;	submarine	1
WITH Depth_Time_Ratio AS (     SELECT          Mission_Status,          (Max_Depth_Reached / (strftime('%s', End_time) - strftime('%s', Start_time))) AS Ratio      FROM Mission ) SELECT      Mission_Status,      AVG(Ratio) AS Median_Depth_Time_Ratio  FROM (     SELECT          Mission_Status,          Ratio,          ROW_NUMBER() OVER (PARTITION BY Mission_Status ORDER BY Ratio) AS RowAsc,          ROW_NUMBER() OVER (PARTITION BY Mission_Status ORDER BY Ratio DESC) AS RowDesc      FROM Depth_Time_Ratio ) AS Subquery  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc - 1 = RowDesc  GROUP BY Mission_Status;	submarine	2
SELECT Mission_Location, COUNT(Mission_ID) AS Active_Sonar_Mission_Count FROM Mission WHERE Sonar_Usage = 'Active' GROUP BY Mission_Location;	submarine	3
SELECT Mission_Type, MAX((Pressure_Endured * 1000) / Max_Depth_Reached) AS Max_New_Pressure_Depth_Ratio FROM Mission GROUP BY Mission_Type;	submarine	4
SELECT Maintenance_Type, AVG(Maintenance_Cost) AS Avg_Maintenance_Cost FROM Maintenance_Record WHERE Pressure_Test_Result = 'Pass' GROUP BY Maintenance_Type;	submarine	1
SELECT strftime('%Y', Maintenance_Date) AS Maintenance_Year, SUM(Maintenance_Cost) AS Total_Maintenance_Cost FROM Maintenance_Record WHERE Hull_Integrity_Check = 'Pass' AND Propulsion_System_Check = 'Pass' GROUP BY strftime('%Y', Maintenance_Date);	submarine	2
SELECT S.Status, COUNT(M.Maintenance_ID) AS Emergency_Maintenance_Count  FROM Maintenance_Record M  JOIN Submarine S ON M.Submarine_ID = S.Submarine_ID  WHERE M.Maintenance_Type = 'Emergency'  GROUP BY S.Status;	submarine	3
SELECT Maintenance_Type, MAX(Maintenance_Cost * 1000) AS Max_New_Maintenance_Cost FROM Maintenance_Record GROUP BY Maintenance_Type;	submarine	4
SELECT Status, AVG(strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)) AS Avg_Age FROM Crew GROUP BY Status;	submarine	1
WITH Crew_Experience AS (     SELECT          Ranks AS Crew_Rank,          Experience_Years * 1.0 / NULLIF((julianday('now') - julianday(Date_Of_Birth)) / 365.25, 0) AS Experience_Age_Ratio      FROM Crew ),  Ranked_Experience AS (     SELECT          Crew_Rank,          Experience_Age_Ratio,          ROW_NUMBER() OVER (PARTITION BY Crew_Rank ORDER BY Experience_Age_Ratio) AS row_num,          COUNT(*) OVER (PARTITION BY Crew_Rank) AS total_count      FROM Crew_Experience )  SELECT      Crew_Rank,      AVG(Experience_Age_Ratio) AS Median_Experience_Age_Ratio  FROM Ranked_Experience  WHERE row_num = (total_count + 1) / 2      OR row_num = (total_count + 2) / 2  GROUP BY Crew_Rank;	submarine	2
SELECT Specialty, COUNT(DISTINCT Nationality) AS Nationality_Count FROM Crew GROUP BY Specialty;	submarine	3
SELECT Status, MAX((Experience_Years + 1000) / (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth))) AS Max_Experience_Age_Ratio FROM Crew GROUP BY Status;	submarine	4
SELECT * FROM Crew WHERE (strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth) > 50) AND Ranks != '艇长';	submarine	1
SELECT * FROM Crew WHERE (Experience_Years / ((julianday('now') - julianday(Date_Of_Birth)) / 365.25)) > 1 AND Specialty != '声呐操作';	submarine	2
SELECT * FROM Crew WHERE Nationality = '美国' AND Status != 'Active';	submarine	3
SELECT * FROM Crew WHERE ((Experience_Years + 1000) / ((strftime('%Y', 'now') - strftime('%Y', Date_Of_Birth)))) > 100 AND Ranks != '大副';	submarine	4
SELECT * FROM Maintenance_Record WHERE Pressure_Test_Result = 'Pass' AND Maintenance_Type != 'Routine';	submarine	1
SELECT * FROM Maintenance_Record WHERE (Maintenance_Cost / strftime('%Y', Maintenance_Date)) > 1000 AND Maintenance_Type != 'Emergency';	submarine	2
SELECT * FROM Maintenance_Record WHERE Hull_Integrity_Check = 'Pass' AND Maintenance_Type != 'Upgrade';	submarine	3
SELECT * FROM Maintenance_Record WHERE ((Maintenance_Cost * 10000) / strftime('%Y', Maintenance_Date)) > 1000000 AND Maintenance_Type != 'Routine';	submarine	4
SELECT * FROM Mission WHERE Max_Depth_Reached > 500 AND Mission_Type != 'Combat';	submarine	1
SELECT * FROM Mission WHERE (Pressure_Endured / Max_Depth_Reached) > 10 AND Mission_Status != 'Completed';	submarine	2
SELECT * FROM Mission WHERE Sonar_Usage = 'Active' AND Mission_Type != 'Surveillance';	submarine	3
SELECT * FROM Mission WHERE ((Pressure_Endured * 10000) / Max_Depth_Reached) > 100000 AND Mission_Type != 'Research';	submarine	4
SELECT * FROM Submarine WHERE Displacement > 10000 AND Submarine_Type != 'Attack';	submarine	1
SELECT * FROM Submarine WHERE (Length / Beam) > 10 AND Propulsion_Type != '核动力';	submarine	2
SELECT * FROM Submarine WHERE Crew_Capacity > 100 AND Status != 'Active';	submarine	3
SELECT * FROM Submarine WHERE (Displacement + 100000) > 1000000 AND Submarine_Type != 'Research';	submarine	4
SELECT c.ranks, AVG(m.Maintenance_Cost) AS Avg_Maintenance_Cost FROM Crew c JOIN Maintenance_Record m ON c.Submarine_ID = m.Submarine_ID WHERE m.Pressure_Test_Result = 'Pass' GROUP BY c.ranks;	submarine	1
SELECT c.Experience_Years, SUM(m.Maintenance_Cost) AS Total_Maintenance_Cost  FROM Crew c  JOIN Maintenance_Record m ON c.Submarine_ID = m.Submarine_ID  WHERE m.Hull_Integrity_Check = 'Pass' AND m.Propulsion_System_Check = 'Pass'  GROUP BY c.Experience_Years;	submarine	2
SELECT c.Status, COUNT(m.Maintenance_ID) AS Maintenance_Count FROM Crew c JOIN Maintenance_Record m ON c.Submarine_ID = m.Submarine_ID WHERE m.Maintenance_Type = 'Emergency' GROUP BY c.Status;	submarine	3
SELECT c.Specialty, MAX(m.Maintenance_Cost * 10000) AS Max_Maintenance_Cost FROM Crew c JOIN Maintenance_Record m ON c.Submarine_ID = m.Submarine_ID GROUP BY c.Specialty;	submarine	4
SELECT c.Ranks, AVG(m.Pressure_Endured / m.Max_Depth_Reached) AS Avg_Pressure_Depth_Ratio  FROM Crew c  JOIN Mission m ON c.Submarine_ID = m.Submarine_ID  GROUP BY c.Ranks;	submarine	1
WITH DepthDurationRatio AS (     SELECT          c.Experience_Years,          (m.Max_Depth_Reached / (JULIANDAY(m.End_time) - JULIANDAY(m.Start_time)) * 86400.0) AS Depth_Duration_Ratio,         ROW_NUMBER() OVER (PARTITION BY c.Experience_Years ORDER BY (m.Max_Depth_Reached / (JULIANDAY(m.End_time) - JULIANDAY(m.Start_time)) * 86400.0)) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY c.Experience_Years ORDER BY (m.Max_Depth_Reached / (JULIANDAY(m.End_time) - JULIANDAY(m.Start_time)) * 86400.0) DESC) AS RowDesc     FROM Crew c      JOIN Mission m ON c.Submarine_ID = m.Submarine_ID ) SELECT      Experience_Years,      AVG(Depth_Duration_Ratio) AS Median_Depth_Duration_Ratio FROM DepthDurationRatio  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1 GROUP BY Experience_Years;	submarine	2
SELECT c.Specialty, COUNT(m.Mission_ID) AS Mission_Count  FROM Crew c  JOIN Mission m ON c.Submarine_ID = m.Submarine_ID  WHERE m.Sonar_Usage = 'Active'  GROUP BY c.Specialty;	submarine	3
SELECT c.Status, MAX((m.Pressure_Endured * 10000) / m.Max_Depth_Reached) AS Max_Pressure_Depth_Ratio FROM Crew c JOIN Mission m ON c.Submarine_ID = m.Submarine_ID GROUP BY c.Status;	submarine	4
SELECT c.Ranks, AVG(s.Displacement / s.Max_Depth) AS Avg_Displacement_Depth_Ratio  FROM Crew c  JOIN Submarine s ON c.Submarine_ID = s.Submarine_ID  GROUP BY c.Ranks;	submarine	1
WITH LengthBeamRatio AS (     SELECT          c.Experience_Years,          (s.Length * 1.0 / s.Beam) AS Length_Beam_Ratio,         ROW_NUMBER() OVER (PARTITION BY c.Experience_Years ORDER BY (s.Length * 1.0 / s.Beam)) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY c.Experience_Years ORDER BY (s.Length * 1.0 / s.Beam) DESC) AS RowDesc     FROM Crew c      JOIN Submarine s ON c.Submarine_ID = s.Submarine_ID ) SELECT      Experience_Years,      AVG(Length_Beam_Ratio) AS Median_Length_Beam_Ratio  FROM LengthBeamRatio  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1  GROUP BY Experience_Years;	submarine	2
SELECT c.Specialty, MAX(CAST(s.Crew_Capacity AS REAL) / s.Torpedo_Count) AS Max_Crew_Torpedo_Ratio FROM Crew c JOIN Submarine s ON c.Submarine_ID = s.Submarine_ID GROUP BY c.Specialty;	submarine	3
SELECT c.Status, MAX((s.Displacement + 100000) / s.Max_Depth) AS Max_Displacement_Depth_Ratio FROM Crew c JOIN Submarine s ON c.Submarine_ID = s.Submarine_ID GROUP BY c.Status;	submarine	4
SELECT m.Mission_Type, AVG(mr.Maintenance_Cost * 1.0 / m.Pressure_Endured) AS Avg_Maintenance_Pressure_Ratio  FROM Maintenance_Record mr  JOIN Mission m ON mr.Submarine_ID = m.Submarine_ID  WHERE mr.Pressure_Test_Result = 'Pass'  GROUP BY m.Mission_Type;	submarine	1
WITH TimeDiff AS (     SELECT          mr.Maintenance_Type,          julianday(mr.Maintenance_Date) - julianday(m.Start_time) AS Time_Difference,         ROW_NUMBER() OVER (PARTITION BY mr.Maintenance_Type ORDER BY julianday(mr.Maintenance_Date) - julianday(m.Start_time)) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY mr.Maintenance_Type ORDER BY julianday(mr.Maintenance_Date) - julianday(m.Start_time) DESC) AS RowDesc     FROM Maintenance_Record mr      JOIN Mission m ON mr.Submarine_ID = m.Submarine_ID ) SELECT      Maintenance_Type,      AVG(Time_Difference) AS Median_Time_Difference  FROM TimeDiff  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1  GROUP BY Maintenance_Type;	submarine	2
SELECT * FROM Maintenance_Record mr JOIN Mission m ON mr.Submarine_ID = m.Submarine_ID WHERE mr.Hull_Integrity_Check = 'Pass' AND m.Mission_Status != 'Completed';	submarine	3
SELECT m.Mission_Type, MAX((mr.Maintenance_Cost * 100000) / m.Pressure_Endured) AS Max_Maintenance_Pressure_Ratio  FROM Maintenance_Record mr  JOIN Mission m ON mr.Submarine_ID = m.Submarine_ID  GROUP BY m.Mission_Type;	submarine	4
SELECT s.Submarine_Type, AVG(mr.Maintenance_Cost * 1.0 / s.Displacement) AS Avg_Maintenance_Displacement_Ratio FROM Maintenance_Record mr JOIN Submarine s ON mr.Submarine_ID = s.Submarine_ID WHERE mr.Pressure_Test_Result = 'Pass' GROUP BY s.Submarine_Type;	submarine	1
WITH TimeDiff AS (     SELECT          mr.Maintenance_Type,          (julianday(mr.Maintenance_Date) - julianday(s.Commission_Date)) / 365.0 AS Time_Difference,         ROW_NUMBER() OVER (PARTITION BY mr.Maintenance_Type ORDER BY (julianday(mr.Maintenance_Date) - julianday(s.Commission_Date)) / 365.0) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY mr.Maintenance_Type ORDER BY (julianday(mr.Maintenance_Date) - julianday(s.Commission_Date)) / 365.0 DESC) AS RowDesc     FROM Maintenance_Record mr      JOIN Submarine s ON mr.Submarine_ID = s.Submarine_ID ) SELECT      Maintenance_Type,      AVG(Time_Difference) AS Median_Time_Difference FROM TimeDiff  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1 GROUP BY Maintenance_Type;	submarine	2
SELECT * FROM Maintenance_Record mr JOIN Submarine s ON mr.Submarine_ID = s.Submarine_ID WHERE mr.Hull_Integrity_Check = 'Pass' AND s.Status != 'Active';	submarine	3
SELECT s.Submarine_Type, MAX((mr.Maintenance_Cost * 1000000) / s.Displacement) AS Max_Maintenance_Displacement_Ratio  FROM Maintenance_Record mr  JOIN Submarine s ON mr.Submarine_ID = s.Submarine_ID  GROUP BY s.Submarine_Type;	submarine	4
SELECT s.Submarine_Type, AVG(m.Pressure_Endured * 1.0 / s.Max_Depth) AS Avg_Pressure_Depth_Ratio FROM Mission m JOIN Submarine s ON m.Submarine_ID = s.Submarine_ID GROUP BY s.Submarine_Type;	submarine	1
WITH TimeLengthRatio AS (     SELECT          m.Mission_Type,          (strftime('%s', m.End_time) - strftime('%s', m.Start_time)) / s.Length AS Time_Length_Ratio,         ROW_NUMBER() OVER (PARTITION BY m.Mission_Type ORDER BY (strftime('%s', m.End_time) - strftime('%s', m.Start_time)) / s.Length) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY m.Mission_Type ORDER BY (strftime('%s', m.End_time) - strftime('%s', m.Start_time)) / s.Length DESC) AS RowDesc     FROM Mission m      JOIN Submarine s ON m.Submarine_ID = s.Submarine_ID ) SELECT      Mission_Type,      AVG(Time_Length_Ratio) AS Median_Time_Length_Ratio FROM TimeLengthRatio  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1 GROUP BY Mission_Type;	submarine	2
SELECT * FROM Mission m JOIN Submarine s ON m.Submarine_ID = s.Submarine_ID WHERE m.Sonar_Usage = 'Active' AND s.Status != 'Active';	submarine	3
SELECT s.Submarine_Type, MAX((m.Pressure_Endured * 100000) / s.Max_Depth) AS Max_Pressure_Depth_Ratio FROM Mission m JOIN Submarine s ON m.Submarine_ID = s.Submarine_ID GROUP BY s.Submarine_Type;	submarine	4
SELECT c.Ranks, AVG(mr.Maintenance_Cost) AS Avg_Maintenance_Cost  FROM Crew c  JOIN Maintenance_Record mr ON c.Submarine_ID = mr.Submarine_ID  WHERE mr.Pressure_Test_Result = 'Pass'  GROUP BY c.Ranks;	submarine	1
WITH MaintenanceExperienceRatio AS (     SELECT          mr.Maintenance_Type,          (JULIANDAY(mr.Maintenance_Date) - JULIANDAY(DATE(c.Date_Of_Birth, '+' || c.Experience_Years || ' years'))) / 365.0 AS Maintenance_Experience_Ratio,         ROW_NUMBER() OVER (PARTITION BY mr.Maintenance_Type ORDER BY (JULIANDAY(mr.Maintenance_Date) - JULIANDAY(DATE(c.Date_Of_Birth, '+' || c.Experience_Years || ' years'))) / 365.0) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY mr.Maintenance_Type ORDER BY (JULIANDAY(mr.Maintenance_Date) - JULIANDAY(DATE(c.Date_Of_Birth, '+' || c.Experience_Years || ' years'))) / 365.0 DESC) AS RowDesc     FROM Crew c      JOIN Maintenance_Record mr ON c.Submarine_ID = mr.Submarine_ID ) SELECT      Maintenance_Type,      AVG(Maintenance_Experience_Ratio) AS Median_Maintenance_Experience_Ratio FROM MaintenanceExperienceRatio  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1 GROUP BY Maintenance_Type;	submarine	2
SELECT c.Status, COUNT(mr.Maintenance_ID) AS Maintenance_Count  FROM Crew c  JOIN Maintenance_Record mr ON c.Submarine_ID = mr.Submarine_ID  WHERE mr.Hull_Integrity_Check = 'Pass'    AND c.Submarine_ID IN (     SELECT Submarine_ID      FROM Crew      GROUP BY Submarine_ID      HAVING COUNT(*) = COUNT(CASE WHEN Status = 'Active' THEN 1 END)   )  GROUP BY c.Status;	submarine	3
SELECT c.Specialty, MAX(mr.Maintenance_Cost * 100000) AS Max_Maintenance_Cost FROM Crew c JOIN Maintenance_Record mr ON c.Submarine_ID = mr.Submarine_ID GROUP BY c.Specialty;	submarine	4
SELECT c.Ranks, AVG(m.Pressure_Endured / m.Max_Depth_Reached) AS Avg_Pressure_Depth_Ratio  FROM Crew c  JOIN Mission m ON c.Submarine_ID = m.Submarine_ID  GROUP BY c.Ranks;	submarine	1
WITH TimeExperienceRatio AS (     SELECT          m.Mission_Type,          (CAST((julianday(m.End_time) - julianday(m.Start_time)) * 86400 AS REAL) / c.Experience_Years) AS Time_Experience_Ratio,         ROW_NUMBER() OVER (PARTITION BY m.Mission_Type ORDER BY (CAST((julianday(m.End_time) - julianday(m.Start_time)) * 86400 AS REAL) / c.Experience_Years)) AS RowAsc,         ROW_NUMBER() OVER (PARTITION BY m.Mission_Type ORDER BY (CAST((julianday(m.End_time) - julianday(m.Start_time)) * 86400 AS REAL) / c.Experience_Years) DESC) AS RowDesc     FROM Crew c      JOIN Mission m ON c.Submarine_ID = m.Submarine_ID ) SELECT      Mission_Type,      AVG(Time_Experience_Ratio) AS Median_Time_Experience_Ratio FROM TimeExperienceRatio  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1 GROUP BY Mission_Type;	submarine	2
SELECT c.Specialty, COUNT(m.Mission_ID) AS Mission_Count  FROM Crew c  JOIN Mission m ON c.Submarine_ID = m.Submarine_ID  WHERE m.Sonar_Usage = 'Active'  GROUP BY c.Specialty;	submarine	3
SELECT c.Status, MAX((m.Pressure_Endured * 100000) / m.Max_Depth_Reached) AS Max_Pressure_Depth_Ratio FROM Crew c JOIN Mission m ON c.Submarine_ID = m.Submarine_ID GROUP BY c.Status;	submarine	4
SELECT Ranks, AVG(Displacement * 1.0 / Max_Depth) AS Avg_Displacement_Depth_Ratio FROM Crew JOIN Submarine ON Crew.Submarine_ID = Submarine.Submarine_ID GROUP BY Ranks;	submarine	1
SELECT Experience_Years, AVG(Length_Beam_Ratio) AS Median_Length_Beam_Ratio  FROM (     SELECT Experience_Years, Length / Beam AS Length_Beam_Ratio,            ROW_NUMBER() OVER (PARTITION BY Experience_Years ORDER BY Length / Beam) AS RowAsc,            ROW_NUMBER() OVER (PARTITION BY Experience_Years ORDER BY Length / Beam DESC) AS RowDesc     FROM Crew      JOIN Submarine ON Crew.Submarine_ID = Submarine.Submarine_ID ) AS Subquery  WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1  GROUP BY Experience_Years;	submarine	2
SELECT Specialty, MAX(Crew_Capacity * 1.0 / Torpedo_Count) AS Max_Crew_Torpedo_Ratio  FROM Crew  JOIN Submarine ON Crew.Submarine_ID = Submarine.Submarine_ID  GROUP BY Specialty;	submarine	3
SELECT Crew.Status, MAX((Submarine.Displacement + 100000) / Submarine.Max_Depth) AS New_Max_Displacement_Depth_Ratio FROM Crew JOIN Submarine ON Crew.Submarine_ID = Submarine.Submarine_ID GROUP BY Crew.Status;	submarine	4
SELECT Mission_Type, AVG(Maintenance_Cost * 1.0 / Pressure_Endured) AS Avg_Maintenance_Pressure_Ratio FROM Maintenance_Record JOIN Mission ON Maintenance_Record.Submarine_ID = Mission.Submarine_ID WHERE Pressure_Test_Result = 'Pass' GROUP BY Mission_Type;	submarine	1
SELECT Maintenance_Type,         AVG(julianday(Maintenance_Date) - julianday(Start_time)) AS Median_Time_Difference  FROM Maintenance_Record  JOIN Mission ON Maintenance_Record.Submarine_ID = Mission.Submarine_ID  GROUP BY Maintenance_Type;	submarine	2
SELECT * FROM Maintenance_Record WHERE Hull_Integrity_Check = 'Pass' AND Submarine_ID NOT IN (SELECT Submarine_ID FROM Mission WHERE Mission_Status = 'Completed');	submarine	3
SELECT Mission_Type, MAX((Maintenance_Cost * 100000) / Pressure_Endured) AS New_Max_Maintenance_Pressure_Ratio FROM Maintenance_Record JOIN Mission ON Maintenance_Record.Submarine_ID = Mission.Submarine_ID GROUP BY Mission_Type;	submarine	4
SELECT Submarine_Type, AVG(Maintenance_Cost * 1.0 / Displacement) AS Avg_Maintenance_Displacement_Ratio  FROM Maintenance_Record  JOIN Submarine ON Maintenance_Record.Submarine_ID = Submarine.Submarine_ID  WHERE Pressure_Test_Result = 'Pass'  GROUP BY Submarine_Type;	submarine	1
SELECT Maintenance_Type,         AVG((julianday(Maintenance_Date) - julianday(Commission_Date)) / 365.0) AS Median_Time_Difference  FROM Maintenance_Record  JOIN Submarine ON Maintenance_Record.Submarine_ID = Submarine.Submarine_ID  GROUP BY Maintenance_Type;	submarine	2
SELECT * FROM Maintenance_Record WHERE Hull_Integrity_Check = 'Pass' AND Submarine_ID NOT IN (SELECT Submarine_ID FROM Submarine WHERE Status = 'Active');	submarine	3
SELECT Submarine_Type, MAX((Maintenance_Cost * 1000000) / Displacement) AS New_Max_Maintenance_Displacement_Ratio  FROM Maintenance_Record  JOIN Submarine ON Maintenance_Record.Submarine_ID = Submarine.Submarine_ID  GROUP BY Submarine_Type;	submarine	4
SELECT Submarine_Type, AVG(Pressure_Endured * 1.0 / Max_Depth) AS Avg_Pressure_Depth_Ratio FROM Mission JOIN Submarine ON Mission.Submarine_ID = Submarine.Submarine_ID GROUP BY Submarine_Type;	submarine	1
WITH RankedRatios AS (     SELECT          m.Mission_Type,         (JULIANDAY(m.End_time) - JULIANDAY(m.Start_time)) / s.Length AS Time_Length_Ratio,         ROW_NUMBER() OVER (PARTITION BY m.Mission_Type ORDER BY (JULIANDAY(m.End_time) - JULIANDAY(m.Start_time)) / s.Length) AS row_asc,         ROW_NUMBER() OVER (PARTITION BY m.Mission_Type ORDER BY (JULIANDAY(m.End_time) - JULIANDAY(m.Start_time)) / s.Length DESC) AS row_desc     FROM Mission m     JOIN Submarine s ON m.Submarine_ID = s.Submarine_ID     WHERE m.End_time IS NOT NULL AND m.Start_time IS NOT NULL AND s.Length > 0 ) SELECT      Mission_Type,     AVG(Time_Length_Ratio) AS Median_Time_Length_Ratio FROM RankedRatios WHERE row_asc = row_desc OR row_asc + 1 = row_desc OR row_asc = row_desc + 1 GROUP BY Mission_Type;	submarine	2
SELECT * FROM Mission WHERE Sonar_Usage = 'Active' AND Submarine_ID NOT IN (SELECT Submarine_ID FROM Submarine WHERE Status = 'Active');	submarine	3
SELECT Submarine_Type, MAX((Pressure_Endured * 100000) / Max_Depth) AS New_Max_Pressure_Depth_Ratio FROM Mission JOIN Submarine ON Mission.Submarine_ID = Submarine.Submarine_ID GROUP BY Submarine_Type;	submarine	4
SELECT * FROM Maintenance_Record WHERE Pressure_Test_Result = 'Pass' AND Submarine_ID NOT IN (SELECT Submarine_ID FROM Submarine WHERE Submarine_Type = 'Attack');	submarine	1
SELECT Maintenance_Record.* FROM Maintenance_Record JOIN Submarine ON Maintenance_Record.Submarine_ID = Submarine.Submarine_ID WHERE (Maintenance_Cost / Displacement) > 1000 AND Maintenance_Type != 'Emergency';	submarine	2
SELECT * FROM Maintenance_Record WHERE Hull_Integrity_Check = 'Pass' AND Submarine_ID NOT IN (SELECT Submarine_ID FROM Submarine WHERE Status = 'Active');	submarine	3
SELECT Maintenance_Record.* FROM Maintenance_Record JOIN Submarine ON Maintenance_Record.Submarine_ID = Submarine.Submarine_ID WHERE ((Maintenance_Cost * 1000000) / Displacement) > 1000000 AND Maintenance_Record.Submarine_ID NOT IN (SELECT Submarine.Submarine_ID FROM Submarine WHERE Submarine_Type = 'Research');	submarine	4
SELECT 'Power Consumption (W)' AS Metric, (1000 * 1.1 * 0.1) AS Value FROM televisions WHERE Screen_Size_Inches = 65 AND Energy_Rating = 'A++';	television	1
SELECT Manufacturer_Id, AVG(CASE Energy_Rating WHEN 'A++' THEN 1 WHEN 'A+' THEN 2 WHEN 'A' THEN 3 WHEN 'B' THEN 4 WHEN 'C' THEN 5 WHEN 'D' THEN 6 END) AS Average_Energy_Rating FROM televisions GROUP BY Manufacturer_Id;	television	2
SELECT Resolution, AVG(User_Rating) AS Average_User_Rating FROM usage_records JOIN televisions ON usage_records.Television_Id = televisions.Television_Id GROUP BY Resolution ORDER BY Average_User_Rating DESC LIMIT 1;	television	3
SELECT Refresh_Rate_Hz AS Frames_Per_Second, (Refresh_Rate_Hz * 1) AS Data_Per_Second_GB FROM televisions WHERE Refresh_Rate_Hz = 10000;	television	4
SELECT Manufacturer_Name, (Revenue_Usd / (2024 - Founded_Year)) AS Average_Annual_Revenue FROM manufacturers WHERE Manufacturer_Name = 'Samsung';	television	1
SELECT Manufacturer_Name, (Profit_Usd / Employees) AS Profit_Per_Employee FROM manufacturers ORDER BY Profit_Per_Employee DESC LIMIT 3;	television	2
SELECT Manufacturer_Name, Market_Share_Percent FROM manufacturers ORDER BY Founded_Year ASC, Market_Share_Percent DESC LIMIT 5;	television	3
SELECT Manufacturer_Name, (Profit_Usd / Employees) AS Profit_Per_Employee, ((Profit_Usd / Employees) / 50000) AS Times_Industry_Average FROM manufacturers WHERE Employees = 1 AND Profit_Usd = 1000000000000;	television	4
SELECT Energy_Rating, AVG(Screen_Size_Inches * 0.5 * POWER(1.15, CASE Energy_Rating WHEN 'A++' THEN 0 WHEN 'A+' THEN 1 WHEN 'A' THEN 2 WHEN 'B' THEN 3 WHEN 'C' THEN 4 WHEN 'D' THEN 5 END) * 8 * 365 * 0.8 / 1000) AS Annual_Energy_Consumption_kWh FROM televisions GROUP BY Energy_Rating;	television	1
WITH Panel_Avg_Price AS (     SELECT Panel_Type, AVG(Price_Usd) AS Avg_Price      FROM televisions      GROUP BY Panel_Type )  SELECT a.Panel_Type AS Type1, b.Panel_Type AS Type2,         ROUND(((b.Avg_Price - a.Avg_Price) / a.Avg_Price * 100), 2) AS Price_Difference_Percent  FROM Panel_Avg_Price a  JOIN Panel_Avg_Price b ON a.Panel_Type < b.Panel_Type  ORDER BY b.Avg_Price DESC  LIMIT 3;	television	2
WITH Price_Percentile AS (     SELECT Price_Usd,             (CAST(ROW_NUMBER() OVER (ORDER BY Price_Usd DESC) AS REAL) - 1) / (SELECT COUNT(*) FROM televisions) AS Price_Rank      FROM televisions ),  Top_10_Largest AS (     SELECT Television_Id, Screen_Size_Inches, Price_Usd      FROM televisions      ORDER BY Screen_Size_Inches DESC      LIMIT 10 )  SELECT t.Television_Id, t.Screen_Size_Inches, t.Price_Usd,         CASE WHEN p.Price_Rank <= 0.2 THEN 'Yes' ELSE 'No' END AS Is_Top_20_Percent  FROM Top_10_Largest t  JOIN Price_Percentile p ON t.Price_Usd = p.Price_Usd;	television	3
SELECT CEIL((0.1 * 1000000) / 100000000) AS Required_Ships;	television	4
SELECT User_Id, (Average_Brightness_Percent * 10 * 0.85 * Usage_Duration_Minutes) / (60 * 1000) AS Energy_Consumption_kWh_per_min FROM usage_records;	television	1
WITH Movie_Usage AS (     SELECT User_Id, Usage_Duration_Minutes, User_Rating      FROM usage_records      WHERE Content_Type = '电影' ),  User_Stats AS (     SELECT          User_Id,          COUNT(*) AS n,          SUM(Usage_Duration_Minutes) AS sum_x,          SUM(User_Rating) AS sum_y,          SUM(Usage_Duration_Minutes * User_Rating) AS sum_xy,          SUM(Usage_Duration_Minutes * Usage_Duration_Minutes) AS sum_x2,          SUM(User_Rating * User_Rating) AS sum_y2      FROM Movie_Usage      GROUP BY User_Id )  SELECT      User_Id,      (n * sum_xy - sum_x * sum_y) / (SQRT(n * sum_x2 - sum_x * sum_x) * SQRT(n * sum_y2 - sum_y * sum_y)) AS Pearson_Correlation  FROM User_Stats  ORDER BY Pearson_Correlation DESC  LIMIT 5;	television	2
WITH User_Daily_Usage AS (   SELECT      User_Id,      SUM(Usage_Duration_Minutes) AS Total_Usage_Minutes,      (JULIANDAY(MAX(End_Time)) - JULIANDAY(MIN(Start_Time))) + 1 AS Total_Days    FROM usage_records    GROUP BY User_Id    HAVING SUM(Usage_Duration_Minutes) / ((JULIANDAY(MAX(End_Time)) - JULIANDAY(MIN(Start_Time))) + 1) > 480 )  SELECT    u.User_Id,    u.Total_Usage_Minutes / u.Total_Days AS Avg_Daily_Usage_Minutes,    SUM(e.Energy_Consumed_Kwh) AS Total_Energy_Consumed  FROM User_Daily_Usage u  JOIN usage_records e ON u.User_Id = e.User_Id  GROUP BY u.User_Id  ORDER BY Total_Energy_Consumed DESC  LIMIT 10;	television	3
SELECT Energy_Consumed_Kwh / (0.2 * 24 * 365) AS Years_Of_Operation FROM usage_records WHERE Energy_Consumed_Kwh = 1000000.0;	television	4
WITH Movie_Usage AS (         SELECT User_Id, Usage_Duration_Minutes, User_Rating          FROM usage_records          WHERE Content_Type = '电影'     ),      User_Stats AS (         SELECT              User_Id,              COUNT(*) AS n,              SUM(Usage_Duration_Minutes) AS sum_x,              SUM(User_Rating) AS sum_y,              SUM(Usage_Duration_Minutes * User_Rating) AS sum_xy,              SUM(Usage_Duration_Minutes * Usage_Duration_Minutes) AS sum_x2,              SUM(User_Rating * User_Rating) AS sum_y2          FROM Movie_Usage          GROUP BY User_Id     )     SELECT          User_Id,          (n * sum_xy - sum_x * sum_y) / (SQRT(n * sum_x2 - sum_x * sum_x) * SQRT(n * sum_y2 - sum_y * sum_y)) AS Pearson_Correlation      FROM User_Stats      ORDER BY Pearson_Correlation DESC      LIMIT 5;	television	1
SELECT Resolution, ROUND((STDDEV(Refresh_Rate_Hz) / AVG(Refresh_Rate_Hz)) / (STDDEV(Response_Time_Ms) / AVG(Response_Time_Ms)) * 100, 3) AS CV_Ratio FROM display_data GROUP BY Resolution;	television	2
SELECT Hdr_Support, COUNT(CASE WHEN Brightness_Nits > 800 THEN 1 END) * 1.0 / COUNT(*) AS Brightness_Ratio FROM display_data GROUP BY Hdr_Support;	television	3
SELECT Panel_Type, (7680 * 4320 * 24 * Refresh_Rate_Hz) / (8.0 * 1024 * 1024 * 1024) AS Data_Volume_GB_per_Second FROM display_data WHERE Refresh_Rate_Hz = 1e12 GROUP BY Panel_Type;	television	4
SELECT Country, AVG(Profit_Usd / (Employees * 2000)) AS Power_Efficiency FROM manufacturers GROUP BY Country;	television	1
WITH Per_Capita_Profit AS (     SELECT          Country,          Manufacturer_Id,          Profit_Usd / Employees AS Profit_Per_Capita      FROM manufacturers ),  Country_Stats AS (     SELECT          Country,          AVG(Profit_Per_Capita) AS Avg_Profit,          (SELECT STDEV(Profit_Per_Capita) FROM Per_Capita_Profit p2 WHERE p2.Country = p1.Country) AS Std_Profit      FROM Per_Capita_Profit p1      GROUP BY Country ),  Gini_Calculation AS (     SELECT          Country,          1 - 2 * SUM((Profit_Per_Capita / Total_Profit) * (Cumulative_Profit_Percent - 0.5 * (Profit_Per_Capita / Total_Profit))) AS Gini_Coefficient      FROM (         SELECT              Country,              Profit_Per_Capita,              (SELECT SUM(p2.Profit_Per_Capita) FROM Per_Capita_Profit p2 WHERE p2.Country = p1.Country AND p2.Profit_Per_Capita <= p1.Profit_Per_Capita) AS Cumulative_Profit,             (SELECT SUM(p2.Profit_Per_Capita) FROM Per_Capita_Profit p2 WHERE p2.Country = p1.Country) AS Total_Profit,             (SELECT SUM(p2.Profit_Per_Capita) FROM Per_Capita_Profit p2 WHERE p2.Country = p1.Country AND p2.Profit_Per_Capita <= p1.Profit_Per_Capita) * 1.0 / (SELECT SUM(p2.Profit_Per_Capita) FROM Per_Capita_Profit p2 WHERE p2.Country = p1.Country) AS Cumulative_Profit_Percent         FROM Per_Capita_Profit p1     ) AS Subquery      GROUP BY Country )  SELECT      c.Country,      c.Avg_Profit,      c.Std_Profit / c.Avg_Profit AS Coefficient_of_Variation,      g.Gini_Coefficient  FROM Country_Stats c  JOIN Gini_Calculation g ON c.Country = g.Country;	television	2
WITH Manufacturer_Age AS (     SELECT          Manufacturer_Id,          Market_Share_Percent,          2024 - Founded_Year AS Years_Since_Founded      FROM manufacturers )  SELECT      AVG(CASE WHEN Years_Since_Founded >= 50 THEN Market_Share_Percent END) AS Avg_Market_Share_Over_50,      AVG(CASE WHEN Years_Since_Founded < 10 THEN Market_Share_Percent END) AS Avg_Market_Share_Under_10,      AVG(CASE WHEN Years_Since_Founded >= 50 THEN Market_Share_Percent END) - AVG(CASE WHEN Years_Since_Founded < 10 THEN Market_Share_Percent END) AS Market_Share_Difference  FROM Manufacturer_Age;	television	3
WITH Hypothetical_Profit AS (     SELECT Country, SUM(Profit_Usd) AS Total_Profit      FROM manufacturers      GROUP BY Country ),  Global_Profit AS (     SELECT Country, 1e14 AS Hypothetical_Profit      FROM manufacturers      WHERE Manufacturer_Id = 1 )  SELECT h.Country,         (g.Hypothetical_Profit / (h.Total_Profit + g.Hypothetical_Profit)) * 100 AS Profit_Percentage  FROM Hypothetical_Profit h  JOIN Global_Profit g ON h.Country = g.Country;	television	4
SELECT Energy_Rating, AVG((3.141592653589793 * POWER((Screen_Size_Inches * 0.0254 / 2), 2) * 100) / Weight_Kg) AS Efficiency_W_per_Kg_per_m2 FROM televisions GROUP BY Energy_Rating;	television	1
WITH Panel_Stats AS (     SELECT          Panel_Type,          COUNT(*) AS n,          SUM(Screen_Size_Inches) AS sum_x,          SUM(Price_Usd) AS sum_y,          SUM(Screen_Size_Inches * Price_Usd) AS sum_xy,          SUM(Screen_Size_Inches * Screen_Size_Inches) AS sum_x2,          SUM(Price_Usd * Price_Usd) AS sum_y2      FROM televisions      GROUP BY Panel_Type ) SELECT      Panel_Type,      (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope,      (sum_y - ((n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x)) * sum_x) / n AS intercept,      ((n * sum_xy - sum_x * sum_y) * (n * sum_xy - sum_x * sum_y)) / ((n * sum_x2 - (sum_x * sum_x)) * (n * sum_y2 - (sum_y * sum_y))) AS r_squared  FROM Panel_Stats;	television	2
WITH Large_TVs AS (     SELECT          Resolution,          COUNT(*) AS Total_Large_TVs,          COUNT(CASE WHEN Hdmi_Ports >= 4 THEN 1 END) AS Large_TVs_With_HDMI      FROM televisions      WHERE Screen_Size_Inches >= 75      GROUP BY Resolution ),  All_TVs AS (     SELECT          Resolution,          COUNT(*) AS Total_TVs,          COUNT(CASE WHEN Hdmi_Ports >= 4 THEN 1 END) AS All_TVs_With_HDMI      FROM televisions      GROUP BY Resolution )  SELECT      l.Resolution,      CAST(l.Large_TVs_With_HDMI AS REAL) / l.Total_Large_TVs AS Large_TV_Compliance_Rate,      CAST(a.All_TVs_With_HDMI AS REAL) / a.Total_TVs AS Overall_Compliance_Rate  FROM Large_TVs l  JOIN All_TVs a ON l.Resolution = a.Resolution;	television	3
SELECT Panel_Type, CEIL(POWER(1000 * 0.0254, 3) * 0.8 / 33) AS Containers_Required FROM televisions WHERE Resolution = '8K' GROUP BY Panel_Type;	television	4
SELECT App_Used, AVG(Energy_Consumed_Kwh / (Average_Brightness_Percent * Usage_Duration_Minutes)) AS Energy_Efficiency_Ratio FROM usage_records GROUP BY App_Used;	television	1
WITH Stats AS (     SELECT          Content_Type,          AVG(User_Rating) AS mean,          AVG(User_Rating * User_Rating) - AVG(User_Rating) * AVG(User_Rating) AS variance,         COUNT(*) AS n      FROM usage_records      GROUP BY Content_Type ), Skewness_Calc AS (     SELECT          ur.Content_Type,          (s.n * 1.0 / ((s.n - 1) * (s.n - 2))) * SUM(POWER((ur.User_Rating - s.mean) / SQRT(s.variance), 3)) AS skewness      FROM usage_records ur      JOIN Stats s ON ur.Content_Type = s.Content_Type      GROUP BY ur.Content_Type ), Kurtosis_Calc AS (     SELECT          ur.Content_Type,          ((s.n * (s.n + 1)) * 1.0 / ((s.n - 1) * (s.n - 2) * (s.n - 3))) * SUM(POWER((ur.User_Rating - s.mean) / SQRT(s.variance), 4)) - (3.0 * POWER(s.n - 1, 2) / ((s.n - 2) * (s.n - 3))) AS kurtosis      FROM usage_records ur      JOIN Stats s ON ur.Content_Type = s.Content_Type      GROUP BY ur.Content_Type ) SELECT      s.Content_Type,      ROUND(s.skewness, 6) AS skewness,      ROUND(k.kurtosis, 6) AS kurtosis  FROM Skewness_Calc s  JOIN Kurtosis_Calc k ON s.Content_Type = k.Content_Type;	television	2
WITH Sports_Stats AS (     SELECT          strftime('%m', Start_Time) AS month,          AVG(Usage_Duration_Minutes) AS mean_sports,          (SUM(Usage_Duration_Minutes * Usage_Duration_Minutes) - SUM(Usage_Duration_Minutes) * SUM(Usage_Duration_Minutes) / COUNT(*)) / COUNT(*) AS var_sports,          COUNT(*) AS n_sports      FROM usage_records      WHERE Content_Type = '体育'      GROUP BY strftime('%m', Start_Time) ),  Movies_Stats AS (     SELECT          strftime('%m', Start_Time) AS month,          AVG(Usage_Duration_Minutes) AS mean_movies,          (SUM(Usage_Duration_Minutes * Usage_Duration_Minutes) - SUM(Usage_Duration_Minutes) * SUM(Usage_Duration_Minutes) / COUNT(*)) / COUNT(*) AS var_movies,          COUNT(*) AS n_movies      FROM usage_records      WHERE Content_Type = '电影'      GROUP BY strftime('%m', Start_Time) )  SELECT      s.month,      (s.mean_sports - m.mean_movies) / SQRT((s.var_sports / s.n_sports) + (m.var_movies / m.n_movies)) AS t_value  FROM Sports_Stats s  JOIN Movies_Stats m ON s.month = m.month;	television	3
WITH User_Energy AS (     SELECT App_Used, SUM(Energy_Consumed_Kwh) AS user_energy      FROM usage_records      WHERE User_Id = 1 AND Usage_Duration_Minutes = 5256000      GROUP BY App_Used ),  Total_Energy AS (     SELECT SUM(Energy_Consumed_Kwh) AS total_energy      FROM usage_records )  SELECT u.App_Used, (u.user_energy / t.total_energy) * 100 AS energy_percentage  FROM User_Energy u, Total_Energy t;	television	4
SELECT * FROM display_data WHERE Contrast_Ratio >= '1000:1' AND Brightness_Nits < 1000;	television	1
WITH cte AS (   SELECT Resolution,           (AVG(Refresh_Rate_Hz * Response_Time_Ms) - (AVG(Refresh_Rate_Hz) * AVG(Response_Time_Ms))) AS cov    FROM display_data    GROUP BY Resolution )  SELECT Resolution  FROM cte  WHERE cov < 0;	television	2
SELECT * FROM display_data WHERE Hdr_Support = 1 AND Brightness_Nits < 800;	television	3
SELECT * FROM display_data WHERE Refresh_Rate_Hz = 1e12 AND Local_Dimming = 0;	television	4
WITH Industry_Stats AS (     SELECT          AVG(Profit_Usd) AS avg_profit,          AVG(Profit_Usd / (Employees * 2000)) AS avg_efficiency      FROM manufacturers ),  High_Profit_Low_Efficiency AS (     SELECT *      FROM manufacturers      WHERE Profit_Usd > (SELECT avg_profit FROM Industry_Stats)      AND Profit_Usd / (Employees * 2000) < (SELECT avg_efficiency FROM Industry_Stats) )  SELECT * FROM High_Profit_Low_Efficiency;	television	1
WITH cte AS (   SELECT      Country,      (AVG(Employees * Market_Share_Percent) - (AVG(Employees) * AVG(Market_Share_Percent))) AS cov    FROM manufacturers    GROUP BY Country )  SELECT Country  FROM cte  WHERE cov < 0;	television	2
SELECT * FROM manufacturers WHERE 2024 - Founded_Year > 30 AND Market_Share_Percent < 5;	television	3
SELECT Manufacturer_Id, Manufacturer_Name, Profit_Usd, (Profit_Usd / (SELECT SUM(Profit_Usd) FROM manufacturers)) * 100 AS Profit_Percentage FROM manufacturers WHERE Profit_Usd = 1e20 AND Website IS NULL;	television	4
SELECT * FROM televisions WHERE Energy_Rating = 'A++' AND (Price_Usd / (PI() * POWER((Screen_Size_Inches * 0.0254 / 2), 2))) > 100;	television	1
WITH cte AS (     SELECT Panel_Type,             (COUNT(*) * SUM(Screen_Size_Inches * Price_Usd) - SUM(Screen_Size_Inches) * SUM(Price_Usd)) /             (SQRT((COUNT(*) * SUM(Screen_Size_Inches * Screen_Size_Inches) - SUM(Screen_Size_Inches) * SUM(Screen_Size_Inches)) *                   (COUNT(*) * SUM(Price_Usd * Price_Usd) - SUM(Price_Usd) * SUM(Price_Usd))))            AS r      FROM televisions      GROUP BY Panel_Type ) SELECT Panel_Type  FROM cte  WHERE r < 0.5;	television	2
SELECT * FROM televisions WHERE Resolution = '4K' AND Hdmi_Ports < 3;	television	3
SELECT * FROM televisions WHERE Screen_Size_Inches = 10000 AND Weight_Kg = 0.01 AND Usb_Ports = 0;	television	4
SELECT * FROM usage_records WHERE User_Rating >= 4 AND (Energy_Consumed_Kwh / (Usage_Duration_Minutes / 60)) > 0.3;	television	1
WITH ranked_data AS (     SELECT          App_Used,          Usage_Duration_Minutes,          User_Rating,         (SELECT COUNT(*) + 1 FROM usage_records ur2 WHERE ur2.App_Used = ur1.App_Used AND ur2.Usage_Duration_Minutes < ur1.Usage_Duration_Minutes) AS duration_rank,         (SELECT COUNT(*) + 1 FROM usage_records ur3 WHERE ur3.App_Used = ur1.App_Used AND ur3.User_Rating < ur1.User_Rating) AS rating_rank     FROM usage_records ur1 ),  correlation_data AS (     SELECT          App_Used,          1.0 - (6.0 * SUM((duration_rank - rating_rank) * (duration_rank - rating_rank)) / (COUNT(*) * (COUNT(*) * COUNT(*) - 1))) AS rho     FROM ranked_data      GROUP BY App_Used )  SELECT App_Used FROM correlation_data WHERE rho < 0;	television	2
WITH user_daily_usage AS (     SELECT          User_Id,          SUM(Usage_Duration_Minutes) / ((JULIANDAY(MAX(End_Time)) - JULIANDAY(MIN(Start_Time))) + 1) AS daily_usage_minutes      FROM usage_records      GROUP BY User_Id )  SELECT *  FROM usage_records  WHERE User_Rating >= 4.5  AND User_Id IN (     SELECT User_Id      FROM user_daily_usage      WHERE daily_usage_minutes > 720 );	television	3
SELECT * FROM usage_records WHERE Usage_Duration_Minutes = 5256000 AND Energy_Consumed_Kwh = 0 AND App_Used IS NOT NULL;	television	4
WITH efficiency_ratio AS (   SELECT      Panel_Type,      Brightness_Nits / (CASE        WHEN Panel_Type = 'LED' THEN 0.8        WHEN Panel_Type = 'OLED' THEN 0.5        WHEN Panel_Type = 'QLED' THEN 0.7        ELSE 1      END * Response_Time_Ms) AS efficiency    FROM display_data )  SELECT Panel_Type, efficiency  FROM efficiency_ratio  ORDER BY efficiency DESC  LIMIT 3;	television	1
WITH stats AS (     SELECT          Resolution,          AVG(Refresh_Rate_Hz) AS avg_x,          AVG(Response_Time_Ms) AS avg_y,          COUNT(*) AS n      FROM display_data      GROUP BY Resolution ) SELECT      display_data.Resolution,      (SUM((Refresh_Rate_Hz - avg_x) * (Response_Time_Ms - avg_y)) / (n - 1)) /      (SQRT(SUM(POWER(Refresh_Rate_Hz - avg_x, 2)) / (n - 1)) * SQRT(SUM(POWER(Response_Time_Ms - avg_y, 2)) / (n - 1))) AS r  FROM display_data  JOIN stats ON display_data.Resolution = stats.Resolution  GROUP BY display_data.Resolution  ORDER BY ABS(r) DESC  LIMIT 5;	television	2
SELECT * FROM display_data WHERE Viewing_Angle_Degrees >= 178 AND Panel_Type NOT IN ('IPS', 'VA') ORDER BY Panel_Type DESC;	television	3
SELECT Television_Id, 1.0 / Refresh_Rate_Hz AS frame_time_ps FROM display_data WHERE Refresh_Rate_Hz = 1e12 AND Hdr_Support = 0 ORDER BY frame_time_ps ASC LIMIT 10;	television	4
SELECT Country, SUM(Profit_Usd) / (SUM(Employees) * SUM(Employees) * SUM(Employees)) AS energy_density FROM manufacturers GROUP BY Country ORDER BY energy_density DESC LIMIT 5;	television	1
WITH stats AS (   SELECT      Country,      AVG(Market_Share_Percent) AS μ,      AVG(Market_Share_Percent * Market_Share_Percent) - AVG(Market_Share_Percent) * AVG(Market_Share_Percent) AS σ2,     COUNT(*) AS n    FROM manufacturers    GROUP BY Country ) SELECT    m.Country,    (SUM((m.Market_Share_Percent - s.μ) * (m.Market_Share_Percent - s.μ) * (m.Market_Share_Percent - s.μ)) / s.n) / POWER(s.σ2, 1.5) AS skewness  FROM manufacturers m  JOIN stats s ON m.Country = s.Country  GROUP BY m.Country  HAVING skewness < -1  ORDER BY skewness ASC;	television	2
SELECT * FROM manufacturers WHERE Employees > 1000 AND (2024 - Founded_Year) < 5 ORDER BY Revenue_Usd DESC;	television	3
SELECT Manufacturer_Name, Profit_Usd / ABS(Employees) AS density FROM manufacturers WHERE Employees < 0 ORDER BY Profit_Usd DESC LIMIT 3;	television	4
SELECT Energy_Rating, MIN(Price_Usd / (Screen_Size_Inches * Screen_Size_Inches)) AS Power_Density FROM televisions GROUP BY Energy_Rating ORDER BY Power_Density ASC LIMIT 5;	television	1
WITH stats AS (     SELECT          Panel_Type,          AVG(Price_Usd) AS μ,          (SUM(Price_Usd*Price_Usd) - SUM(Price_Usd)*SUM(Price_Usd)/COUNT(*)) / COUNT(*) AS σ2,         COUNT(*) AS n      FROM televisions      GROUP BY Panel_Type ) SELECT      t.Panel_Type,      ((s.n*(s.n+1)*SUM(POWER(t.Price_Usd-s.μ,4))) / ((s.n-1)*(s.n-2)*(s.n-3)*POWER(s.σ2,2))) - (3*POWER(s.n-1,2)/((s.n-2)*(s.n-3))) AS Kurtosis  FROM televisions t  JOIN stats s ON t.Panel_Type = s.Panel_Type  GROUP BY t.Panel_Type  HAVING Kurtosis > 3  ORDER BY Kurtosis DESC  LIMIT 3;	television	2
SELECT * FROM televisions WHERE Refresh_Rate_Hz >= 120 AND Price_Usd < 500 ORDER BY Release_Date DESC;	television	3
SELECT Television_Id, 7680 * 4320 * 32 * 1e15 * 86400 / (8 * 1e12) AS Daily_Data_TB FROM televisions WHERE Resolution = '8K' AND Energy_Rating = 'D' ORDER BY Daily_Data_TB DESC LIMIT 10;	television	4
SELECT App_Used, SUM(Energy_Consumed_Kwh) / (SUM(Average_Brightness_Percent * Usage_Duration_Minutes)) AS Energy_Brightness_Ratio FROM usage_records GROUP BY App_Used ORDER BY Energy_Brightness_Ratio DESC LIMIT 5;	television	1
WITH ranked AS (     SELECT          User_Id,          Content_Type,          Usage_Duration_Minutes,          SUM(Usage_Duration_Minutes) OVER(PARTITION BY User_Id) AS total,          ROW_NUMBER() OVER(PARTITION BY User_Id ORDER BY Usage_Duration_Minutes) AS rn      FROM usage_records ),  cumulative AS (     SELECT          User_Id,          SUM(Usage_Duration_Minutes) OVER(PARTITION BY User_Id ORDER BY rn) * 1.0 / total AS cumulative_ratio      FROM ranked ),  lagged AS (     SELECT          User_Id,          cumulative_ratio,          LAG(cumulative_ratio, 1, 0) OVER(PARTITION BY User_Id ORDER BY cumulative_ratio) AS lag_ratio      FROM cumulative )  SELECT      User_Id,      1 - 2 * SUM(cumulative_ratio - lag_ratio) AS Gini  FROM lagged  GROUP BY User_Id  ORDER BY Gini DESC  LIMIT 3;	television	2
SELECT * FROM usage_records WHERE Usage_Duration_Minutes > 480 AND User_Rating >= 4.5 ORDER BY Energy_Consumed_Kwh ASC;	television	3
SELECT Television_Id, Energy_Consumed_Kwh / (Usage_Duration_Minutes / 60.0) AS Energy_Efficiency FROM usage_records WHERE Usage_Duration_Minutes = 31536000 AND App_Used = '未知' ORDER BY Energy_Efficiency ASC LIMIT 10;	television	4
SELECT Panel_Type, AVG(Brightness_Nits / Response_Time_Ms) AS Efficiency_Ratio  FROM display_data  GROUP BY Panel_Type  ORDER BY Efficiency_Ratio DESC  LIMIT 3;	television	1
WITH stats AS (     SELECT          Resolution,          AVG(Refresh_Rate_Hz) AS avg_rr,          AVG(CAST(SUBSTR(Contrast_Ratio, 1, INSTR(Contrast_Ratio, ':') - 1) AS INTEGER)) AS avg_cr      FROM display_data      GROUP BY Resolution )  SELECT      d.Resolution,      SUM((d.Refresh_Rate_Hz - s.avg_rr) * (CAST(SUBSTR(d.Contrast_Ratio, 1, INSTR(d.Contrast_Ratio, ':') - 1) AS INTEGER) - s.avg_cr)) * 1.0 / COUNT(*) AS cov  FROM display_data d  JOIN stats s ON d.Resolution = s.Resolution  GROUP BY d.Resolution  ORDER BY ABS(cov) DESC  LIMIT 5;	television	2
SELECT Panel_Type, COUNT(*) AS abnormal_count FROM display_data WHERE Hdr_Support = 1 AND Color_Gamut_Percent < 90 GROUP BY Panel_Type;	television	3
SELECT Television_Id, 7680 * 4320 * 1000000 * 1000000000000000000 AS Photons_Per_Second FROM display_data WHERE Resolution = '8K' AND Viewing_Angle_Degrees <= 90 ORDER BY Refresh_Rate_Hz DESC LIMIT 10;	television	4
SELECT Country FROM manufacturers GROUP BY Country HAVING AVG(Revenue_Usd / (Employees * Employees)) > (SELECT AVG(Revenue_Usd / (Employees * Employees)) FROM manufacturers) AND Country NOT IN (SELECT Country FROM manufacturers GROUP BY Country HAVING AVG(Profit_Usd) >= (SELECT AVG(Profit_Usd) FROM manufacturers));	television	1
SELECT Country, SUM(Market_Share_Percent * Market_Share_Percent) AS HHI FROM manufacturers GROUP BY Country HAVING HHI < 1500 ORDER BY HHI DESC;	television	2
SELECT * FROM manufacturers WHERE Employees > 1000 AND (Profit_Usd * 100.0 / Revenue_Usd) < 2 ORDER BY Founded_Year ASC;	television	3
SELECT Manufacturer_Name, CASE WHEN Employees = 0 THEN '无限大' ELSE CAST(Profit_Usd AS REAL) / Employees END AS per_capita FROM manufacturers WHERE Employees = 0 AND Profit_Usd = 1e18 AND Website IS NULL ORDER BY Profit_Usd DESC LIMIT 5;	television	4
SELECT Energy_Rating, AVG(Weight_Kg / (Screen_Size_Inches * Screen_Size_Inches)) AS Density_Coefficient FROM televisions GROUP BY Energy_Rating ORDER BY Density_Coefficient ASC LIMIT 3;	television	1
WITH stats AS (         SELECT Panel_Type,                 STDDEV_SAMP(Price_Usd) AS σ,                 AVG(Price_Usd) AS μ          FROM televisions          GROUP BY Panel_Type     )     SELECT Panel_Type,             σ / μ AS CV      FROM stats      WHERE σ / μ > 0.5      ORDER BY CV DESC;	television	2
SELECT * FROM televisions WHERE Resolution = '4K' AND Hdmi_Ports < 3 ORDER BY Price_Usd ASC;	television	3
SELECT Model, POWER(Screen_Size_Inches * 0.0254, 3) * 0.7 AS volume_m3 FROM televisions WHERE Resolution = '8K' AND Usb_Ports = 0 ORDER BY volume_m3 DESC LIMIT 10;	television	4
SELECT User_Id, SUM(Energy_Consumed_Kwh) / (SUM(Average_Brightness_Percent * Usage_Duration_Minutes)) AS energy_brightness_ratio FROM usage_records GROUP BY User_Id ORDER BY energy_brightness_ratio DESC LIMIT 5;	television	1
WITH stats AS (     SELECT          App_Used,          AVG(Usage_Duration_Minutes) AS μ_x,          AVG(User_Rating) AS μ_y,          COUNT(*) AS n      FROM usage_records      GROUP BY App_Used )  SELECT      usage_records.App_Used,      (SUM(Usage_Duration_Minutes * User_Rating) - stats.n * stats.μ_x * stats.μ_y) / (stats.n - 1) AS cov  FROM usage_records  JOIN stats ON usage_records.App_Used = stats.App_Used  GROUP BY usage_records.App_Used  HAVING cov < 0;	television	2
SELECT User_Id, SUM(Usage_Duration_Minutes) / 60.0 AS total_hours, SUM(Energy_Consumed_Kwh) AS total_energy FROM usage_records GROUP BY User_Id HAVING (SUM(Usage_Duration_Minutes) / COUNT(DISTINCT date(Start_Time))) / 60.0 > 12 AND SUM(Energy_Consumed_Kwh) < 1;	television	3
SELECT Television_Id, Energy_Consumed_Kwh/(Usage_Duration_Minutes/60.0) AS 能效 FROM usage_records WHERE Usage_Duration_Minutes=5256000 AND Energy_Consumed_Kwh=0 AND App_Used='系统测试' ORDER BY 能效 ASC LIMIT 10;	television	4
SELECT Country, SUM(Revenue_Usd) / POWER(2024 - MIN(Founded_Year), 3) AS Power_Density FROM manufacturers GROUP BY Country ORDER BY Power_Density DESC LIMIT 5;	television	1
WITH stats AS (   SELECT Country,           STDEV(Profit_Usd*1.0/Revenue_Usd) AS σ,           AVG(Profit_Usd*1.0/Revenue_Usd) AS μ    FROM manufacturers    GROUP BY Country )  SELECT Country, σ/μ AS CV  FROM stats  WHERE σ/μ > 1  ORDER BY CV DESC;	television	2
SELECT * FROM manufacturers WHERE (2024 - Founded_Year) > 50 AND Market_Share_Percent < 1 ORDER BY Revenue_Usd DESC;	television	3
WITH total AS (         SELECT Country, SUM(Market_Share_Percent) AS total          FROM manufacturers          GROUP BY Country     )      SELECT Manufacturer_Name, Market_Share_Percent * 1.0 / total AS relative_share      FROM manufacturers      JOIN total ON manufacturers.Country = total.Country      WHERE Market_Share_Percent = 10000      AND Contact_Email IS NULL      LIMIT 3;	television	4
WITH unit_price AS (     SELECT          Energy_Rating,          AVG(Price_Usd / (Screen_Size_Inches * Screen_Size_Inches)) AS avg_unit_price      FROM televisions      GROUP BY Energy_Rating )  SELECT      Energy_Rating,      avg_unit_price  FROM unit_price  ORDER BY avg_unit_price ASC  LIMIT 3;	television	1
WITH ranked AS (     SELECT          Resolution,          (SELECT COUNT(*) + 1 FROM televisions t2 WHERE t2.Resolution = t1.Resolution AND t2.Price_Usd < t1.Price_Usd) AS price_rank,         (SELECT COUNT(*) + 1 FROM televisions t2 WHERE t2.Resolution = t1.Resolution AND t2.Weight_Kg < t1.Weight_Kg) AS weight_rank     FROM televisions t1 ) SELECT      Resolution,      1.0 - (6.0 * SUM((price_rank - weight_rank) * (price_rank - weight_rank))) / (COUNT(*) * (COUNT(*) * COUNT(*) - 1)) AS rho FROM ranked  GROUP BY Resolution  HAVING ABS(rho) < 0.3  ORDER BY rho ASC;	television	2
SELECT t.* FROM televisions t JOIN display_data d ON t.Television_Id = d.Television_Id WHERE t.Hdr_Support = 1 AND d.Brightness_Nits < 800 ORDER BY t.Release_Date DESC;	television	3
SELECT Model, POWER(Screen_Size_Inches * 0.0254, 3) * 0.5 AS volume_m3 FROM televisions WHERE Usb_Ports >= 4 ORDER BY volume_m3 DESC LIMIT 10;	television	4
SELECT t.Energy_Rating, AVG(d.Brightness_Nits / CASE t.Energy_Rating WHEN 'A++' THEN 0.8 WHEN 'A+' THEN 0.9 ELSE 1.0 END) AS efficiency  FROM display_data d  JOIN televisions t ON d.Television_Id = t.Television_Id  GROUP BY t.Energy_Rating  ORDER BY efficiency DESC  LIMIT 5;	television	1
WITH stats AS (     SELECT          d.Panel_Type,          AVG(d.Refresh_Rate_Hz) AS μ_rr,          AVG(t.Price_Usd) AS μ_price      FROM display_data d      JOIN televisions t ON d.Television_Id = t.Television_Id      GROUP BY d.Panel_Type )  SELECT      d.Panel_Type,      SUM((d.Refresh_Rate_Hz - s.μ_rr) * (t.Price_Usd - s.μ_price)) / COUNT(*) AS cov  FROM display_data d  JOIN televisions t ON d.Television_Id = t.Television_Id  JOIN stats s ON d.Panel_Type = s.Panel_Type  GROUP BY d.Panel_Type  ORDER BY ABS(cov) DESC  LIMIT 3;	television	2
SELECT COUNT(*) FROM display_data d JOIN televisions t ON d.Television_Id = t.Television_Id WHERE t.Hdr_Support = 1 AND (d.Brightness_Nits < 1000 OR CAST(substr(d.Contrast_Ratio, 1, instr(d.Contrast_Ratio, ':') - 1) AS INTEGER) < 1000);	television	3
SELECT t.Model, 1000/ABS(d.Response_Time_Ms) AS theoretical_fps FROM display_data d JOIN televisions t ON d.Television_Id = t.Television_Id WHERE d.Response_Time_Ms < 0 AND t.Weight_Kg < 1 ORDER BY theoretical_fps DESC LIMIT 10;	television	4
SELECT m.Country, SUM(m.Profit_Usd) / AVG(CASE t.Energy_Rating WHEN 'A++' THEN 1.0 WHEN 'A+' THEN 0.9 ELSE 0.8 END) AS efficiency FROM manufacturers m JOIN televisions t ON m.Manufacturer_Id = t.Manufacturer_Id GROUP BY m.Country ORDER BY efficiency DESC LIMIT 3;	television	1
WITH stats AS (     SELECT          m.Manufacturer_Name,          AVG(m.Market_Share_Percent) AS μ_share,          AVG(t.Price_Usd) AS μ_price      FROM manufacturers m      JOIN televisions t ON m.Manufacturer_Id = t.Manufacturer_Id      GROUP BY m.Manufacturer_Name )  SELECT      m.Manufacturer_Name,      SUM((m.Market_Share_Percent - μ_share) * (t.Price_Usd - μ_price)) / COUNT(*) AS cov  FROM manufacturers m  JOIN televisions t ON m.Manufacturer_Id = t.Manufacturer_Id  JOIN stats s ON m.Manufacturer_Name = s.Manufacturer_Name  GROUP BY m.Manufacturer_Name  ORDER BY ABS(cov) DESC  LIMIT 5;	television	2
WITH total AS (     SELECT COUNT(DISTINCT Model) AS total_models      FROM televisions ),  ranked_manufacturers AS (     SELECT Manufacturer_Id,             (SELECT COUNT(*) FROM manufacturers m2 WHERE m2.Market_Share_Percent > m1.Market_Share_Percent) * 1.0 / (SELECT COUNT(*) FROM manufacturers) AS pct_rank      FROM manufacturers m1 ),  top_manufacturers AS (     SELECT Manufacturer_Id      FROM ranked_manufacturers      WHERE pct_rank < 0.1 )  SELECT (SELECT COUNT(DISTINCT Model)          FROM televisions          WHERE Manufacturer_Id IN (SELECT Manufacturer_Id FROM top_manufacturers)) * 1.0 / total_models AS ratio  FROM total  HAVING ratio > 0.5;	television	3
SELECT m.Manufacturer_Name, m.Profit_Usd/m.Employees AS per_capita FROM manufacturers m JOIN televisions t ON m.Manufacturer_Id=t.Manufacturer_Id WHERE m.Profit_Usd=1e30 AND m.Founded_Year=0 ORDER BY per_capita DESC	television	4
SELECT t.Model, (d.Brightness_Nits * 0.68 * u.Usage_Duration_Minutes * 60 * 2 * 3.141592653589793 * (u.Average_Brightness_Percent / 100)) AS total_light_energy_joules FROM televisions t JOIN display_data d ON t.Television_Id=d.Television_Id JOIN usage_records u ON t.Television_Id=u.Television_Id WHERE d.Brightness_Nits=800 AND u.Usage_Duration_Minutes=150 AND u.Average_Brightness_Percent=60;	television	1
WITH total_energy AS (     SELECT SUM(u.Usage_Duration_Minutes) / 60.0 * 0.25 AS total_kwh      FROM televisions t      JOIN usage_records u ON t.Television_Id = u.Television_Id      WHERE t.Resolution = '4K'      AND t.Panel_Type = 'OLED'      AND strftime('%Y', u.Start_Time) = '2023' ),  hdr_extra_energy AS (     SELECT total_kwh * 0.73 * 0.2 AS hdr_kwh      FROM total_energy )  SELECT total_kwh * 0.15 AS total_cost,         hdr_kwh * 0.15 AS savings  FROM total_energy, hdr_extra_energy;	television	2
SELECT ((320 - 220) * 4 * 365 / 1000) * 0.92 AS additional_carbon_emission_kg FROM televisions WHERE Energy_Rating IN ('B', 'A++');	television	3
WITH power_calculation AS (         SELECT 1500 * 5.0 * 8 * 125 AS single_power_watt,                 20000000 AS total_devices     ),      power_summary AS (         SELECT single_power_watt * total_devices / 1000000 AS total_power_mw          FROM power_calculation     ),      energy_calculation AS (         SELECT total_power_mw * 24 * 365 AS total_energy_kwh          FROM power_summary     ),      heat_calculation AS (         SELECT total_power_mw * 60 * 3.6 * POWER(10, 6) AS total_heat_joules          FROM power_summary     )      SELECT total_power_mw AS peak_power_mw,             total_energy_kwh / 12000000000000 AS required_moon_stations,             total_heat_joules / (3985 * 100) AS pacific_water_kg      FROM power_summary, energy_calculation, heat_calculation;	television	4
WITH mechanical_energy AS (     SELECT          Manufacturer_Id,          Manufacturer_Name,          Employees,          Profit_Usd,          Employees * 100 * 8 * 365 * 3600 AS total_mechanical_energy_joules      FROM manufacturers ),  energy_profit_density AS (     SELECT          Manufacturer_Id,          Manufacturer_Name,          total_mechanical_energy_joules,          Profit_Usd / total_mechanical_energy_joules AS energy_profit_density      FROM mechanical_energy )  SELECT      Manufacturer_Name,      total_mechanical_energy_joules,      energy_profit_density  FROM energy_profit_density  ORDER BY energy_profit_density DESC  LIMIT 5;	television	1
WITH country_stats AS (     SELECT          Country,          STDEV(Market_Share_Percent) AS market_share_stddev,          AVG(Market_Share_Percent) AS market_share_mean,          STDEV(Employees) AS employees_stddev,          AVG(Employees) AS employees_mean      FROM manufacturers      GROUP BY Country ),  risk_indicator AS (     SELECT          Country,          market_share_stddev * (employees_stddev / employees_mean) * 100 AS risk_value      FROM country_stats )  SELECT Country, risk_value  FROM risk_indicator  WHERE risk_value > 10;	television	2
SELECT Manufacturer_Name, Founded_Year, Market_Share_Percent FROM manufacturers WHERE (strftime('%Y', 'now') - Founded_Year) > 50 AND Market_Share_Percent < 5 ORDER BY Founded_Year ASC;	television	3
WITH energy_calculations AS (   SELECT      Manufacturer_Name,      Profit_Usd,      Employees,      (Profit_Usd * 3.6e6) / Employees AS energy_per_employee,      1.67e-27 * POWER(3e8, 2) AS proton_energy    FROM manufacturers   WHERE Profit_Usd >= 1e18 ) SELECT    Manufacturer_Name,    energy_per_employee,    proton_energy,    CASE      WHEN energy_per_employee > proton_energy THEN '超过质子能量'      ELSE '未超过质子能量'    END AS comparison_result FROM energy_calculations;	television	4
WITH Temperature_Sensor_Watches AS (   SELECT w.Watch_Id, w.Model, w.Manufacturer_id   FROM watches w   JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id   WHERE sd.Temperature_Sensor = 1 ), Radiation_Power AS (   SELECT tsw.Watch_Id, tsw.Model, tsw.Manufacturer_id,          (0.9 * 5.67e-8 * 0.005 * (POWER(309.15, 4) - POWER(293.15, 4))) AS Power_Watts   FROM Temperature_Sensor_Watches tsw ) SELECT rp.Watch_Id, rp.Model, rp.Power_Watts FROM Radiation_Power rp ORDER BY rp.Power_Watts DESC LIMIT 3;	television	1
WITH Sensor_Combinations AS (   SELECT Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor    FROM sensor_data ),  Combination_Counts AS (   SELECT Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor,           COUNT(*) AS combination_count    FROM Sensor_Combinations    GROUP BY Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor ),  Total_Combinations AS (   SELECT SUM(combination_count) AS total_count    FROM Combination_Counts ),  Probability_Combinations AS (   SELECT cc.Heart_Rate_Sensor, cc.Gps, cc.Accelerometer, cc.Gyroscope, cc.Blood_Oxygen_Sensor, cc.Ecg_Sensor, cc.Temperature_Sensor, cc.Altimeter, cc.Ambient_Light_Sensor,           CAST(cc.combination_count AS REAL) / tc.total_count AS probability    FROM Combination_Counts cc, Total_Combinations tc ),  Entropy_Calculation AS (   SELECT Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor,           -SUM(probability * (CASE WHEN probability > 0 THEN LOG(probability) ELSE 0 END) / LOG(2)) AS entropy    FROM Probability_Combinations    GROUP BY Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor )  SELECT *  FROM Entropy_Calculation  WHERE entropy > 2.5  ORDER BY entropy ASC;	television	2
SELECT w.Watch_Id, w.Model, w.Release_Date, w.Price_Usd, w.Weight_Grams, w.Water_Resistance_Meters, w.Battery_Life_Days, w.Screen_Size_Inches, w.Operating_System, w.Storage_Gb, w.Ram_Gb, w.Connectivity FROM watches w JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id WHERE w.Is_Smartwatch = 1 AND sd.Gps = 1 AND sd.Altimeter = 1 AND sd.Ambient_Light_Sensor = 0 ORDER BY w.Release_Date DESC;	television	3
SELECT w.Watch_Id, w.Model, (1000000.0 * 1000 * 16) AS Throughput_bits_per_second FROM watches w JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id WHERE sd.Blood_Oxygen_Sensor = 1 ORDER BY Throughput_bits_per_second DESC LIMIT 1;	television	4
SELECT ur.Record_Id, ur.User_Id, ur.Watch_Id, ur.Activity_Type, (ur.Calories_Burned * 4184) / ((strftime('%s', ur.End_Time) - strftime('%s', ur.Start_Time)) * 60) AS Power_Watts FROM usage_records ur WHERE ur.Activity_Type IN ('跑步', '游泳', '骑行') ORDER BY Power_Watts DESC LIMIT 5;	television	1
WITH Activity_Counts AS (   SELECT User_Id, Activity_Type, COUNT(*) AS activity_count   FROM usage_records   GROUP BY User_Id, Activity_Type ), Total_Records AS (   SELECT User_Id, COUNT(*) AS total_count   FROM usage_records   GROUP BY User_Id ), Activity_Probabilities AS (   SELECT ac.User_Id, ac.Activity_Type, ac.activity_count * 1.0 / tr.total_count AS probability   FROM Activity_Counts ac   JOIN Total_Records tr ON ac.User_Id = tr.User_Id ), Entropy_Calculation AS (   SELECT ap.User_Id, -SUM(ap.probability * (log(ap.probability) / log(2))) AS entropy   FROM Activity_Probabilities ap   GROUP BY ap.User_Id ) SELECT ec.User_Id, ec.entropy FROM Entropy_Calculation ec WHERE ec.entropy > 1.5 ORDER BY ec.entropy ASC;	television	2
SELECT ur.Record_Id, ur.User_Id, ur.Watch_Id, ur.Sleep_Duration_Minutes, ABS(ur.Sleep_Duration_Minutes - 450) AS deviation FROM usage_records ur WHERE ur.Sleep_Duration_Minutes > 540 OR ur.Sleep_Duration_Minutes < 240 ORDER BY deviation DESC;	television	3
SELECT ur.User_Id, ur.Steps, (0.5 * 60 * POWER(0.7 * 3, 2) * ur.Steps) AS Kinetic_Energy_Joules, ((0.5 * 60 * POWER(0.7 * 3, 2) * ur.Steps) / 4.184e12) AS TNT_Equivalent_kt FROM usage_records ur WHERE ur.Steps >= 1e8;	television	4
SELECT w.Watch_Id, w.Model, w.Water_Resistance_Meters, (1000 * 9.8 * w.Water_Resistance_Meters) AS Pressure_Pascals FROM watches w ORDER BY Pressure_Pascals DESC LIMIT 5;	television	1
WITH Mean_Values AS (   SELECT      AVG(Price_Usd) AS mean_price,      AVG(Weight_Kg) AS mean_weight,      AVG(Battery_Life_Days) AS mean_battery    FROM televisions ), Covariance_Matrix AS (   SELECT      SUM((Price_Usd - mv.mean_price) * (Price_Usd - mv.mean_price)) / COUNT(*) AS var_price,     SUM((Price_Usd - mv.mean_price) * (Weight_Kg - mv.mean_weight)) / COUNT(*) AS cov_price_weight,     SUM((Price_Usd - mv.mean_price) * (Battery_Life_Days - mv.mean_battery)) / COUNT(*) AS cov_price_battery,     SUM((Weight_Kg - mv.mean_weight) * (Weight_Kg - mv.mean_weight)) / COUNT(*) AS var_weight,     SUM((Weight_Kg - mv.mean_weight) * (Battery_Life_Days - mv.mean_battery)) / COUNT(*) AS cov_weight_battery,     SUM((Battery_Life_Days - mv.mean_battery) * (Battery_Life_Days - mv.mean_battery)) / COUNT(*) AS var_battery   FROM televisions, Mean_Values mv ), Mahalanobis_Distance AS (   SELECT      t.Television_Id,     t.Model,     t.Smart_Tv AS Is_Smartwatch,     SQRT(       (t.Price_Usd - mv.mean_price) * (t.Price_Usd - mv.mean_price) / cm.var_price +       (t.Weight_Kg - mv.mean_weight) * (t.Weight_Kg - mv.mean_weight) / cm.var_weight +       (t.Battery_Life_Days - mv.mean_battery) * (t.Battery_Life_Days - mv.mean_battery) / cm.var_battery     ) AS distance   FROM televisions t, Mean_Values mv, Covariance_Matrix cm ) SELECT    md.Television_Id AS Watch_Id,   md.Model,   md.Is_Smartwatch,   md.distance FROM Mahalanobis_Distance md WHERE md.distance > 3 * (SELECT STDEV(distance) FROM Mahalanobis_Distance) ORDER BY md.distance DESC;	television	2
SELECT w.Watch_Id, w.Model, w.Price_Usd, w.Water_Resistance_Meters, w.Is_Smartwatch FROM watches w WHERE w.Water_Resistance_Meters >= 100 AND w.Price_Usd < 100 AND w.Is_Smartwatch = 0 ORDER BY w.Price_Usd ASC;	television	3
SELECT w.Watch_Id, w.Model, w.Weight_Grams, ((w.Weight_Grams / 1000.0) * 9.8) / 1e-4 AS Pressure_Pa FROM watches w WHERE w.Weight_Grams >= 1e12;	television	4
SELECT w.Watch_Id, w.Model, w.Price_Usd, w.Release_Date  FROM watches w  JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id  WHERE w.Price_Usd < 100  AND sd.Heart_Rate_Sensor = 1  AND w.Is_Smartwatch = 1  ORDER BY w.Release_Date DESC;	television	1
WITH Variance_Calculation AS (   SELECT Operating_System,           (AVG(Price_Usd * Price_Usd) - AVG(Price_Usd) * AVG(Price_Usd)) AS var_price,          (AVG(Weight_Grams * Weight_Grams) - AVG(Weight_Grams) * AVG(Weight_Grams)) AS var_weight,          (AVG(Screen_Size_Inches * Screen_Size_Inches) - AVG(Screen_Size_Inches) * AVG(Screen_Size_Inches)) AS var_screen   FROM watches    GROUP BY Operating_System ), Trace_Calculation AS (   SELECT Operating_System,           (var_price + var_weight + var_screen) AS trace_value    FROM Variance_Calculation ) SELECT Operating_System, trace_value  FROM Trace_Calculation  ORDER BY trace_value DESC  LIMIT 3;	television	2
SELECT FLOOR(Price_Usd / 100) * 100 AS price_range, COUNT(*) AS watch_count FROM watches WHERE Water_Resistance_Meters >= 50 AND Is_Smartwatch = 0 GROUP BY FLOOR(Price_Usd / 100) * 100 ORDER BY watch_count DESC;	television	3
SELECT Connectivity, AVG((Battery_Life_Days * 5 * 3600) / (Weight_Grams * 0.99 / 1000)) AS Energy_Density_J_per_kg FROM watches GROUP BY Connectivity HAVING Energy_Density_J_per_kg > 30000000;	television	4
SELECT User_Id, SUM(Calories_Burned * 4184) / SUM(strftime('%s', End_Time) - strftime('%s', Start_Time)) AS Avg_Power_Watts  FROM usage_records  GROUP BY User_Id  HAVING Avg_Power_Watts > 100;	television	1
WITH stats AS (   SELECT      Content_Type,      AVG(Average_Brightness_Percent) AS avg_brightness,      AVG(User_Rating) AS avg_rating,      (AVG(Average_Brightness_Percent * Average_Brightness_Percent) - AVG(Average_Brightness_Percent) * AVG(Average_Brightness_Percent)) AS variance_brightness,     (AVG(User_Rating * User_Rating) - AVG(User_Rating) * AVG(User_Rating)) AS variance_rating,     COUNT(*) AS n    FROM usage_records    GROUP BY Content_Type ),  correlations AS (   SELECT      u.Content_Type,      (AVG(u.Average_Brightness_Percent * u.User_Rating) - AVG(u.Average_Brightness_Percent) * AVG(u.User_Rating)) /      (SQRT(s.variance_brightness) * SQRT(s.variance_rating)) AS pearson_corr    FROM usage_records u    JOIN stats s ON u.Content_Type = s.Content_Type    GROUP BY u.Content_Type )  SELECT Content_Type, pearson_corr  FROM correlations  WHERE ABS(pearson_corr) > 0.7  ORDER BY ABS(pearson_corr) DESC;	television	2
WITH SleepIntervals AS (   SELECT      Watch_Id,     (strftime('%s', Start_Time) / 7200) * 7200 AS Interval_Start,     COUNT(*) AS Total_Records,     SUM(CASE WHEN Heart_Rate_Avg_Bpm < 40 OR Heart_Rate_Avg_Bpm > 100 THEN 1 ELSE 0 END) AS Abnormal_Records   FROM usage_records   WHERE Activity_Type = 'sleep'   GROUP BY Watch_Id, (strftime('%s', Start_Time) / 7200) ) SELECT    Interval_Start,   CASE      WHEN Total_Records > 0 THEN ROUND((Abnormal_Records * 100.0 / Total_Records), 2)     ELSE 0    END AS Incidence_Rate_Percent FROM SleepIntervals ORDER BY Interval_Start;	watch	3
WITH Sensor_Combinations AS (   SELECT Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor    FROM sensor_data ), Combination_Counts AS (   SELECT Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor,           COUNT(*) AS combination_count    FROM Sensor_Combinations    GROUP BY Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor ), Total_Combinations AS (   SELECT SUM(combination_count) AS total_count    FROM Combination_Counts ), Probability_Combinations AS (   SELECT cc.Heart_Rate_Sensor, cc.Gps, cc.Accelerometer, cc.Gyroscope, cc.Blood_Oxygen_Sensor, cc.Ecg_Sensor, cc.Temperature_Sensor, cc.Altimeter, cc.Ambient_Light_Sensor,           CAST(cc.combination_count AS REAL) / tc.total_count AS probability    FROM Combination_Counts cc, Total_Combinations tc ), Entropy_Calculation AS (   SELECT Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor,           -SUM(probability * LOG(2, probability)) AS entropy    FROM Probability_Combinations    GROUP BY Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor )  SELECT * FROM Entropy_Calculation  WHERE entropy > 2.5  ORDER BY entropy ASC;	watch	4
SELECT w.Watch_Id, w.Model, w.Release_Date, w.Price_Usd, w.Weight_Grams, w.Water_Resistance_Meters, w.Battery_Life_Days, w.Screen_Size_Inches, w.Operating_System, w.Storage_Gb, w.Ram_Gb, w.Connectivity FROM watches w JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id WHERE w.Is_Smartwatch = 1 AND sd.Gps = 1 AND sd.Altimeter = 1 AND sd.Ambient_Light_Sensor = 0 ORDER BY w.Release_Date DESC;	watch	1
WITH sensor_configs AS (     SELECT          w.Manufacturer_id,         CASE WHEN MAX(sd.Heart_Rate_Sensor) = 1 THEN 1 ELSE 0 END AS hr,         CASE WHEN MAX(sd.Gps) = 1 THEN 1 ELSE 0 END AS gps,         CASE WHEN MAX(sd.Accelerometer) = 1 THEN 1 ELSE 0 END AS acc,         CASE WHEN MAX(sd.Gyroscope) = 1 THEN 1 ELSE 0 END AS gyro,         CASE WHEN MAX(sd.Blood_Oxygen_Sensor) = 1 THEN 1 ELSE 0 END AS bo,         CASE WHEN MAX(sd.Ecg_Sensor) = 1 THEN 1 ELSE 0 END AS ecg,         CASE WHEN MAX(sd.Temperature_Sensor) = 1 THEN 1 ELSE 0 END AS temp,         CASE WHEN MAX(sd.Altimeter) = 1 THEN 1 ELSE 0 END AS alt     FROM watches w     JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id     GROUP BY w.Manufacturer_id ), country_configs AS (     SELECT          m.Country,         GROUP_CONCAT(sc.hr || sc.gps || sc.acc || sc.gyro || sc.bo || sc.ecg || sc.temp || sc.alt) AS config_strings     FROM manufacturers m     JOIN sensor_configs sc ON m.Manufacturer_Id = sc.Manufacturer_id     GROUP BY m.Country ), hamming_trace AS (     SELECT          cc1.Country,         SUM((             (SUBSTR(cc1.config_strings, i*8-7, 1) != SUBSTR(cc2.config_strings, i*8-7, 1)) +             (SUBSTR(cc1.config_strings, i*8-6, 1) != SUBSTR(cc2.config_strings, i*8-6, 1)) +             (SUBSTR(cc1.config_strings, i*8-5, 1) != SUBSTR(cc2.config_strings, i*8-5, 1)) +             (SUBSTR(cc1.config_strings, i*8-4, 1) != SUBSTR(cc2.config_strings, i*8-4, 1)) +             (SUBSTR(cc1.config_strings, i*8-3, 1) != SUBSTR(cc2.config_strings, i*8-3, 1)) +             (SUBSTR(cc1.config_strings, i*8-2, 1) != SUBSTR(cc2.config_strings, i*8-2, 1)) +             (SUBSTR(cc1.config_strings, i*8-1, 1) != SUBSTR(cc2.config_strings, i*8-1, 1)) +             (SUBSTR(cc1.config_strings, i*8, 1) != SUBSTR(cc2.config_strings, i*8, 1))         )) AS trace     FROM country_configs cc1     CROSS JOIN country_configs cc2     CROSS JOIN (SELECT 1 AS i UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) nums     WHERE i <= LENGTH(cc1.config_strings) / 8     GROUP BY cc1.Country ) SELECT Country, trace AS trace_distance FROM hamming_trace ORDER BY trace DESC LIMIT 3;	watch	2
SELECT w.Operating_System, COUNT(DISTINCT w.Watch_Id) AS Abnormal_Device_Count FROM watches w JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id WHERE sd.Blood_Oxygen_Sensor = 1 AND sd.Ecg_Sensor = 1 AND sd.Heart_Rate_Sensor = 0 GROUP BY w.Operating_System;	watch	3
WITH Activity_Counts AS (   SELECT User_Id, Activity_Type, COUNT(*) AS activity_count   FROM usage_records   GROUP BY User_Id, Activity_Type ), Total_Records AS (   SELECT User_Id, COUNT(*) AS total_count   FROM usage_records   GROUP BY User_Id ), Activity_Probabilities AS (   SELECT ac.User_Id, ac.Activity_Type, ac.activity_count * 1.0 / tr.total_count AS probability   FROM Activity_Counts ac   JOIN Total_Records tr ON ac.User_Id = tr.User_Id ), Entropy_Calculation AS (   SELECT ap.User_Id, -SUM(ap.probability * (ap.probability + 1e-15) * LOG(2, ap.probability + 1e-15)) AS entropy   FROM Activity_Probabilities ap   GROUP BY ap.User_Id ) SELECT ec.User_Id, ec.entropy FROM Entropy_Calculation ec WHERE ec.entropy > 1.5 ORDER BY ec.entropy ASC;	watch	4
SELECT Country, SUM(Profit_Usd) * 3.6e6 / SUM(Employees) AS per_capita_energy  FROM manufacturers  GROUP BY Country  HAVING per_capita_energy > 1e10;	watch	1
SELECT ur.User_Id, ur.Steps, (0.5 * 60 * POWER(0.7 * 3, 2) * ur.Steps) AS Kinetic_Energy_Joules, ((0.5 * 60 * POWER(0.7 * 3, 2) * ur.Steps) / 4.184e12) AS TNT_Equivalent_kt FROM usage_records ur WHERE ur.Steps >= 1e8;	watch	2
SELECT w.Watch_Id, w.Model, w.Water_Resistance_Meters, (1000.0 * 9.8 * w.Water_Resistance_Meters) AS Pressure_Pascals FROM watches w ORDER BY Pressure_Pascals DESC LIMIT 5;	watch	3
WITH Mean_Values AS (   SELECT AVG(Price_Usd) AS mean_price, AVG(Weight_Grams) AS mean_weight, AVG(Battery_Life_Days) AS mean_battery    FROM watches ),  Covariance_Matrix AS (   SELECT      SUM((Price_Usd - mv.mean_price) * (Price_Usd - mv.mean_price)) / COUNT(*) AS var_price,     SUM((Price_Usd - mv.mean_price) * (Weight_Grams - mv.mean_weight)) / COUNT(*) AS cov_price_weight,     SUM((Price_Usd - mv.mean_price) * (Battery_Life_Days - mv.mean_battery)) / COUNT(*) AS cov_price_battery,     SUM((Weight_Grams - mv.mean_weight) * (Weight_Grams - mv.mean_weight)) / COUNT(*) AS var_weight,     SUM((Weight_Grams - mv.mean_weight) * (Battery_Life_Days - mv.mean_battery)) / COUNT(*) AS cov_weight_battery,     SUM((Battery_Life_Days - mv.mean_battery) * (Battery_Life_Days - mv.mean_battery)) / COUNT(*) AS var_battery   FROM watches, Mean_Values mv ), Mahalanobis_Distance AS (   SELECT      w.Watch_Id,      w.Model,      w.Is_Smartwatch,      SQRT(       (w.Price_Usd - mv.mean_price) * (w.Price_Usd - mv.mean_price) / cm.var_price +        (w.Weight_Grams - mv.mean_weight) * (w.Weight_Grams - mv.mean_weight) / cm.var_weight +        (w.Battery_Life_Days - mv.mean_battery) * (w.Battery_Life_Days - mv.mean_battery) / cm.var_battery     ) AS distance    FROM watches w, Mean_Values mv, Covariance_Matrix cm ) SELECT md.Watch_Id, md.Model, md.Is_Smartwatch, md.distance  FROM Mahalanobis_Distance md  WHERE md.distance > 3 * (SELECT STDEV(distance) FROM Mahalanobis_Distance)  ORDER BY md.distance DESC;	watch	4
SELECT w.Watch_Id, w.Model, w.Price_Usd, w.Water_Resistance_Meters, w.Is_Smartwatch FROM watches w WHERE w.Water_Resistance_Meters >= 100 AND w.Price_Usd < 100 AND w.Is_Smartwatch = 0 ORDER BY w.Price_Usd ASC;	watch	1
SELECT m.Country FROM manufacturers m JOIN watches w ON m.Manufacturer_Id = w.Manufacturer_Id WHERE m.Manufacturer_Id IN (     SELECT Manufacturer_Id     FROM manufacturers     WHERE Market_Share_Percent < (         SELECT MAX(Market_Share_Percent) * 0.9         FROM manufacturers     ) ) GROUP BY m.Country HAVING MAX(m.Founded_Year) > 50 AND m.Country NOT IN (     SELECT Country     FROM manufacturers     GROUP BY Country     ORDER BY AVG(Market_Share_Percent) DESC     LIMIT (SELECT COUNT(DISTINCT Country) * 0.1 FROM manufacturers) );	watch	2
SELECT m.Manufacturer_Name, m.Headquarters FROM manufacturers m WHERE m.Headquarters IN ('New York', 'Los Angeles', 'Miami', 'Seattle', 'San Francisco', 'Boston') AND m.Manufacturer_Id NOT IN (     SELECT DISTINCT w.Manufacturer_id     FROM watches w     WHERE w.Water_Resistance_Meters > 0 );	watch	3
WITH Variance_Calculation AS (   SELECT Operating_System,           (SUM(Price_Usd * Price_Usd) - SUM(Price_Usd) * SUM(Price_Usd) / COUNT(*)) / (COUNT(*) - 1) AS var_price,           (SUM(Weight_Grams * Weight_Grams) - SUM(Weight_Grams) * SUM(Weight_Grams) / COUNT(*)) / (COUNT(*) - 1) AS var_weight,           (SUM(Screen_Size_Inches * Screen_Size_Inches) - SUM(Screen_Size_Inches) * SUM(Screen_Size_Inches) / COUNT(*)) / (COUNT(*) - 1) AS var_screen    FROM watches    GROUP BY Operating_System ),  Trace_Calculation AS (   SELECT Operating_System,           (var_price + var_weight + var_screen) AS trace_value    FROM Variance_Calculation )  SELECT Operating_System, trace_value  FROM Trace_Calculation  ORDER BY trace_value DESC  LIMIT 3;	watch	4
SELECT * FROM watches w JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id WHERE sd.Accelerometer = 1 AND NOT EXISTS (     SELECT 1     FROM usage_records ur     WHERE ur.Watch_Id = w.Watch_Id     AND ur.Activity_Type = 'Running' -- Assuming representative activity for motion frequency analysis     GROUP BY ur.Watch_Id     HAVING COUNT(*) >= 100 -- Assuming sampling frequency < 100Hz violates Nyquist for 50Hz max human motion ) EXCEPT SELECT w.* FROM watches w JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id WHERE sd.Accelerometer = 1 AND EXISTS (     SELECT 1     FROM usage_records ur     WHERE ur.Watch_Id = w.Watch_Id     AND ur.Activity_Type = 'Running'     GROUP BY ur.Watch_Id     HAVING COUNT(*) >= 100 );	watch	1
SELECT Connectivity, AVG((Battery_Life_Days * 5 * 3600) / (Weight_Grams * 0.99 / 1000)) AS Energy_Density_J_per_kg FROM watches GROUP BY Connectivity HAVING Energy_Density_J_per_kg > 30000000;	watch	2
SELECT w.Model  FROM watches w  JOIN usage_records ur ON w.Watch_Id = ur.Watch_Id  JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id  WHERE ur.Activity_Type = 'Swimming'  AND sd.Water_Resistance_Sensor = 0  GROUP BY w.Model;	watch	3
SELECT Activity_Type, (AVG(Steps * Heart_Rate_Avg_Bpm) - AVG(Steps) * AVG(Heart_Rate_Avg_Bpm)) / (STDDEV_SAMP(Steps) * STDDEV_SAMP(Heart_Rate_Avg_Bpm)) AS Pearson_Correlation FROM usage_records GROUP BY Activity_Type HAVING ABS(Pearson_Correlation) > 0.7;	watch	4
SELECT User_Id FROM usage_records  WHERE Calories_Burned > Distance_Km * 60 * 1.036  EXCEPT  SELECT User_Id FROM users WHERE Is_Verified = 1;	watch	1
SELECT Activity_Type, SUM((Calories_Burned * 4184) / 4.184e9) AS TNT_Equivalent FROM usage_records GROUP BY Activity_Type HAVING TNT_Equivalent > 1e6;	watch	2
SELECT User_Id FROM usage_records WHERE Activity_Type = 'sleep' GROUP BY User_Id HAVING AVG(Heart_Rate_Avg_Bpm) > 100 AND User_Id NOT IN (     SELECT DISTINCT User_Id     FROM usage_records     WHERE Heart_Rate_Avg_Bpm > 100 );	watch	3
WITH Sensor_Counts AS (     SELECT m.Country, COUNT(DISTINCT s.Sensor_Id) AS Sensor_Count      FROM manufacturers m      JOIN watches w ON m.Manufacturer_Id = w.Manufacturer_id      JOIN sensor_data s ON w.Watch_Id = s.Watch_Id      GROUP BY m.Country ),  Pairwise_Distances AS (     SELECT A.Country AS Country_A, B.Country AS Country_B,             1.0 - (1.0 * COUNT(DISTINCT CASE WHEN s1.Sensor_Id = s2.Sensor_Id THEN s1.Sensor_Id END) / (A.Sensor_Count + B.Sensor_Count - COUNT(DISTINCT CASE WHEN s1.Sensor_Id = s2.Sensor_Id THEN s1.Sensor_Id END))) AS Hamming_Distance      FROM Sensor_Counts A      CROSS JOIN Sensor_Counts B      JOIN manufacturers m1 ON A.Country = m1.Country      JOIN manufacturers m2 ON B.Country = m2.Country      JOIN watches w1 ON m1.Manufacturer_Id = w1.Manufacturer_id      JOIN watches w2 ON m2.Manufacturer_Id = w2.Manufacturer_id      JOIN sensor_data s1 ON w1.Watch_Id = s1.Watch_Id      JOIN sensor_data s2 ON w2.Watch_Id = s2.Watch_Id      WHERE A.Country != B.Country      GROUP BY A.Country, B.Country )  SELECT Country_A, SUM(Hamming_Distance) AS Trace  FROM Pairwise_Distances  GROUP BY Country_A  ORDER BY Trace DESC  LIMIT 3;	watch	4
SELECT Operating_System, COUNT(*) AS Abnormal_Device_Count  FROM watches  JOIN sensor_data ON watches.Watch_Id = sensor_data.Watch_Id  WHERE Ecg_Sensor = 1 AND Blood_Oxygen_Sensor = 1 AND Heart_Rate_Sensor = 0  GROUP BY Operating_System;	watch	1
SELECT Connectivity, 1e6 * 0.000001 * 1361 AS Theoretical_Flux_W FROM watches WHERE Watch_Id IN (SELECT Watch_Id FROM sensor_data WHERE Ambient_Light_Sensor = 1) GROUP BY Connectivity HAVING Theoretical_Flux_W > 1361;	watch	2
SELECT Watch_Id FROM watches WHERE Is_Smartwatch = 1 AND (Ram_Gb < 1 OR Storage_Gb < 8) EXCEPT SELECT Watch_Id FROM discontinued;	television	3
SELECT Watch_Id FROM watches WHERE Battery_Life_Days > 100000 EXCEPT SELECT Watch_Id FROM watches WHERE Release_Date LIKE '%虚拟测试%';	television	4
SELECT 3.7 * Battery_Life_Days / Weight_Grams AS Energy_Density FROM watches ORDER BY Energy_Density DESC LIMIT 5;	watch	1
WITH price_ranges AS (     SELECT          CASE              WHEN Price_Usd < 100 THEN '0-99'             WHEN Price_Usd < 200 THEN '100-199'             WHEN Price_Usd < 500 THEN '200-499'             WHEN Price_Usd < 1000 THEN '500-999'             ELSE '1000+'         END AS price_range,         Screen_Size_Inches,         Weight_Grams     FROM watches ), correlations AS (     SELECT          price_range,         (COUNT(*) * SUM(Screen_Size_Inches * Weight_Grams) - SUM(Screen_Size_Inches) * SUM(Weight_Grams)) /          (SQRT(COUNT(*) * SUM(Screen_Size_Inches * Screen_Size_Inches) - SUM(Screen_Size_Inches) * SUM(Screen_Size_Inches)) *           SQRT(COUNT(*) * SUM(Weight_Grams * Weight_Grams) - SUM(Weight_Grams) * SUM(Weight_Grams))) AS correlation     FROM price_ranges     GROUP BY price_range ) SELECT price_range, ABS(correlation) AS abs_correlation FROM correlations WHERE correlation IS NOT NULL ORDER BY abs_correlation DESC LIMIT 3;	watch	2
SELECT Watch_Id, Model, Price_Usd, Water_Resistance_Meters FROM watches WHERE Price_Usd > 1000 AND Water_Resistance_Meters < 50 AND Is_Smartwatch = 0 ORDER BY Price_Usd DESC;	television	3
WITH Frequency_Analysis AS (     SELECT Country, ABS(Founded_Year % 100) AS Frequency      FROM manufacturers ),  Ranked_Market_Share AS (     SELECT Country, ROW_NUMBER() OVER (ORDER BY Market_Share_Percent DESC) AS rn      FROM manufacturers ),  Top_Market_Share AS (     SELECT Country      FROM Ranked_Market_Share      WHERE rn <= (SELECT COUNT(*) * 0.1 FROM manufacturers) )  SELECT fa.Country  FROM Frequency_Analysis fa  WHERE fa.Frequency > 50  AND fa.Country NOT IN (SELECT Country FROM Top_Market_Share);	watch	4
WITH User_Exercise AS (     SELECT          ur.Record_Id,         ur.Watch_Id,         ur.Steps,         ur.Activity_Type,         w.Weight_Grams,         (60.0 * 0.5 * POWER((ur.Steps / (JULIANDAY(ur.End_Time) - JULIANDAY(ur.Start_Time)) * 24 * 60 * 60), 2)) AS Kinetic_Energy     FROM usage_records ur     JOIN watches w ON ur.Watch_Id = w.Watch_Id     WHERE ur.Activity_Type IS NOT NULL        AND ur.Start_Time IS NOT NULL        AND ur.End_Time IS NOT NULL        AND ur.Steps > 0 ) SELECT      Record_Id,     Watch_Id,     Steps,     Activity_Type,     Weight_Grams,     Kinetic_Energy FROM User_Exercise ORDER BY Kinetic_Energy DESC LIMIT 10;	watch	1
WITH CumulativeDeviations AS (   SELECT      User_Id,      Sleep_Duration_Minutes,      SUM(Sleep_Duration_Minutes - (SELECT AVG(Sleep_Duration_Minutes) FROM usage_records ur2 WHERE ur2.User_Id = usage_records.User_Id)) OVER (PARTITION BY User_Id ORDER BY Record_Id) AS CumulativeDeviation    FROM usage_records ), RescaledRanges AS (   SELECT      User_Id,      (MAX(CumulativeDeviation) - MIN(CumulativeDeviation)) / (SELECT STDEV(Sleep_Duration_Minutes) FROM CumulativeDeviations cd2 WHERE cd2.User_Id = CumulativeDeviations.User_Id) AS RS    FROM CumulativeDeviations    GROUP BY User_Id )  SELECT    User_Id,    LOG(RS) / LOG(COUNT(*) / 2) AS Hurst_Index  FROM RescaledRanges  GROUP BY User_Id  HAVING Hurst_Index > 0.8  ORDER BY Hurst_Index DESC;	television	2
WITH Accelerometer_Watches AS (     SELECT Watch_Id      FROM sensor_data      WHERE Accelerometer = 1 ),  Nyquist_Compliant_Watches AS (     SELECT Watch_Id      FROM watches      WHERE Storage_Gb * 1000000000.0 / (3600 * 24 * 50 * 4) > 100 ) SELECT aw.Watch_Id  FROM Accelerometer_Watches aw  WHERE aw.Watch_Id NOT IN (     SELECT Watch_Id      FROM Nyquist_Compliant_Watches );	watch	3
WITH Sensor_Dependency AS (     SELECT          sd1.Watch_Id,          COUNT(*) AS Total_Records,          SUM(CASE WHEN sd1.Heart_Rate_Sensor = 1 AND sd2.Ecg_Sensor = 1 THEN 1 ELSE 0 END) AS HR_ECG_Count,         SUM(CASE WHEN sd1.Heart_Rate_Sensor = 1 THEN 1 ELSE 0 END) AS HR_Count,         SUM(CASE WHEN sd2.Ecg_Sensor = 1 THEN 1 ELSE 0 END) AS ECG_Count     FROM sensor_data sd1      JOIN sensor_data sd2 ON sd1.Watch_Id = sd2.Watch_Id      GROUP BY sd1.Watch_Id ), Mutual_Information AS (     SELECT          Watch_Id,          (HR_ECG_Count * 1.0 / Total_Records) * LOG((HR_ECG_Count * 1.0 / Total_Records) / ((HR_Count * 1.0 / Total_Records) * (ECG_Count * 1.0 / Total_Records))) AS MI     FROM Sensor_Dependency      WHERE HR_ECG_Count > 0 AND HR_Count > 0 AND ECG_Count > 0 ) SELECT mi.Watch_Id  FROM Mutual_Information mi  WHERE mi.MI > 0.5;	watch	4
WITH Swimming_Watches AS (     SELECT DISTINCT Watch_Id      FROM usage_records      WHERE Activity_Type = '游泳' ),  Waterproof_Watches AS (     SELECT Watch_Id      FROM watches      WHERE Water_Resistance_Meters >= 1 )  SELECT w.Model  FROM watches w  JOIN Swimming_Watches sw ON w.Watch_Id = sw.Watch_Id  WHERE w.Watch_Id NOT IN (     SELECT Watch_Id      FROM Waterproof_Watches );	watch	1
WITH Sensor_Configurations AS (   SELECT Watch_Id, Heart_Rate_Sensor, Gps, Accelerometer, Gyroscope, Blood_Oxygen_Sensor, Ecg_Sensor, Temperature_Sensor, Altimeter, Ambient_Light_Sensor    FROM sensor_data ),  Cosine_Similarity AS (   SELECT      sc1.Watch_Id AS Watch_Id1,      sc2.Watch_Id AS Watch_Id2,      ((sc1.Heart_Rate_Sensor * sc2.Heart_Rate_Sensor) +       (sc1.Gps * sc2.Gps) +       (sc1.Accelerometer * sc2.Accelerometer) +       (sc1.Gyroscope * sc2.Gyroscope) +       (sc1.Blood_Oxygen_Sensor * sc2.Blood_Oxygen_Sensor) +       (sc1.Ecg_Sensor * sc2.Ecg_Sensor) +       (sc1.Temperature_Sensor * sc2.Temperature_Sensor) +       (sc1.Altimeter * sc2.Altimeter) +       (sc1.Ambient_Light_Sensor * sc2.Ambient_Light_Sensor)) /      (SQRT((sc1.Heart_Rate_Sensor * sc1.Heart_Rate_Sensor) +            (sc1.Gps * sc1.Gps) +            (sc1.Accelerometer * sc1.Accelerometer) +            (sc1.Gyroscope * sc1.Gyroscope) +            (sc1.Blood_Oxygen_Sensor * sc1.Blood_Oxygen_Sensor) +            (sc1.Ecg_Sensor * sc1.Ecg_Sensor) +            (sc1.Temperature_Sensor * sc1.Temperature_Sensor) +            (sc1.Altimeter * sc1.Altimeter) +            (sc1.Ambient_Light_Sensor * sc1.Ambient_Light_Sensor)) *       SQRT((sc2.Heart_Rate_Sensor * sc2.Heart_Rate_Sensor) +            (sc2.Gps * sc2.Gps) +            (sc2.Accelerometer * sc2.Accelerometer) +            (sc2.Gyroscope * sc2.Gyroscope) +            (sc2.Blood_Oxygen_Sensor * sc2.Blood_Oxygen_Sensor) +            (sc2.Ecg_Sensor * sc2.Ecg_Sensor) +            (sc2.Temperature_Sensor * sc2.Temperature_Sensor) +            (sc2.Altimeter * sc2.Altimeter) +            (sc2.Ambient_Light_Sensor * sc2.Ambient_Light_Sensor))) AS Cosine_Similarity    FROM Sensor_Configurations sc1    CROSS JOIN Sensor_Configurations sc2    WHERE sc1.Watch_Id < sc2.Watch_Id )  SELECT Watch_Id1, Watch_Id2, Cosine_Similarity  FROM Cosine_Similarity  ORDER BY Cosine_Similarity ASC  LIMIT 3;	watch	2
SELECT w.Watch_Id, w.Model, w.Release_Date  FROM watches w  JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id  WHERE sd.Altimeter = 1 AND sd.Gps = 0  ORDER BY w.Release_Date DESC;	watch	3
WITH Lyapunov_Calculation AS (     SELECT          ur.User_Id,          (1.0 / COUNT(*)) * SUM(LN(ABS(ur.Heart_Rate_Avg_Bpm - lag_hr.prev_Heart_Rate_Avg_Bpm))) AS Lyapunov_Exponent      FROM usage_records ur      LEFT JOIN (         SELECT              User_Id,              Heart_Rate_Avg_Bpm,              Start_Time,              (SELECT Heart_Rate_Avg_Bpm FROM usage_records WHERE User_Id = ur_inner.User_Id AND Start_Time < ur_inner.Start_Time ORDER BY Start_Time DESC LIMIT 1) AS prev_Heart_Rate_Avg_Bpm          FROM usage_records ur_inner     ) lag_hr ON ur.User_Id = lag_hr.User_Id AND ur.Start_Time = lag_hr.Start_Time      GROUP BY ur.User_Id ) SELECT lc.User_Id  FROM Lyapunov_Calculation lc  WHERE lc.Lyapunov_Exponent > 0.5;	watch	4
SELECT Manufacturer_Id, Manufacturer_Name, Profit_Usd, (Profit_Usd / (3e8 * 3e8)) AS Mass_Kg FROM manufacturers ORDER BY Mass_Kg DESC LIMIT 5;	watch	1
WITH Country_Stats AS (   SELECT      Country,     STDEV(Market_Share_Percent) AS Market_Share_StdDev,     STDEV(Employees) * 1.0 / AVG(Employees) AS Employees_CV    FROM manufacturers    GROUP BY Country ) SELECT    Country,   Market_Share_StdDev,   Employees_CV,   (Market_Share_StdDev * Employees_CV) AS Product_Value  FROM Country_Stats  ORDER BY Product_Value DESC  LIMIT 3;	watch	2
SELECT Manufacturer_Id, Manufacturer_Name, Country, Revenue_Usd, Profit_Usd, Market_Share_Percent, Employees, Founded_Year, Headquarters, Website, Contact_Email FROM manufacturers WHERE Employees > 5000 AND Profit_Usd < 100000000 ORDER BY Founded_Year ASC;	watch	3
WITH Profit_Countries AS (   SELECT Country, Profit_Usd AS Profit    FROM manufacturers    WHERE Profit_Usd >= 1e30 ), Continent_Profit AS (   SELECT      CASE        WHEN Country IN ('中国','印度','日本','韩国') THEN '亚洲'        WHEN Country IN ('美国','加拿大','墨西哥') THEN '北美洲'        WHEN Country IN ('巴西','阿根廷','秘鲁') THEN '南美洲'        WHEN Country IN ('德国','法国','英国','意大利') THEN '欧洲'        WHEN Country IN ('南非','埃及','尼日利亚') THEN '非洲'        WHEN Country IN ('澳大利亚','新西兰') THEN '大洋洲'        ELSE '未知'      END AS Continent,     SUM(Profit) AS Total_Profit    FROM Profit_Countries    GROUP BY Continent ), Continent_Area AS (   SELECT      Continent,     CASE        WHEN Continent='亚洲' THEN 44579000        WHEN Continent='北美洲' THEN 24247000        WHEN Continent='南美洲' THEN 17840000        WHEN Continent='欧洲' THEN 10180000        WHEN Continent='非洲' THEN 30370000        WHEN Continent='大洋洲' THEN 8525989        ELSE 0      END AS Area    FROM (SELECT DISTINCT Continent FROM Continent_Profit) AS Subquery ), Profit_Per_Area AS (   SELECT      cp.Continent,     cp.Total_Profit / ca.Area AS Profit_Per_Area    FROM Continent_Profit cp    JOIN Continent_Area ca ON cp.Continent = ca.Continent ) SELECT    Continent,   Profit_Per_Area > 1e44 AS Is_Supernova_Energy  FROM Profit_Per_Area;	watch	4
WITH Employee_Metabolism AS (     SELECT Country, Employees, Employees * 2000 * 365 * 4.184 AS Total_Metabolism_Joules      FROM manufacturers ), Country_Metabolism AS (     SELECT Country, SUM(Total_Metabolism_Joules) AS Total_Metabolism_Joules      FROM Employee_Metabolism      GROUP BY Country ) SELECT Country, Total_Metabolism_Joules  FROM Country_Metabolism  WHERE Total_Metabolism_Joules > 1e15;	watch	1
WITH GroupedManufacturers AS (     SELECT CAST((Founded_Year - 1900) / 20 AS INTEGER) * 20 + 1900 AS GroupStartYear,             Market_Share_Percent      FROM manufacturers ), RankedMarketShares AS (     SELECT GroupStartYear,             Market_Share_Percent,            ROW_NUMBER() OVER (PARTITION BY GroupStartYear ORDER BY Market_Share_Percent) AS RowNum,            COUNT(*) OVER (PARTITION BY GroupStartYear) AS TotalCount      FROM GroupedManufacturers ), GiniCalculation AS (     SELECT A.GroupStartYear,            SUM(ABS(A.RowNum - B.RowNum) * A.Market_Share_Percent * B.Market_Share_Percent) /             (2 * (SELECT SUM(Market_Share_Percent * Market_Share_Percent)                   FROM RankedMarketShares                   WHERE GroupStartYear = A.GroupStartYear)) AS GiniCoefficient      FROM RankedMarketShares A      JOIN RankedMarketShares B ON A.GroupStartYear = B.GroupStartYear      GROUP BY A.GroupStartYear ) SELECT GroupStartYear, GiniCoefficient  FROM GiniCalculation  WHERE GiniCoefficient > 0.6  ORDER BY GroupStartYear;	watch	2
SELECT Continent, COUNT(*) AS Company_Count FROM manufacturers WHERE (strftime('%Y', 'now') - Founded_Year) > 50 AND Employees < 100 GROUP BY Continent ORDER BY Company_Count DESC;	watch	3
SELECT FLOOR(Price_Usd / 500) * 500 AS Price_Interval, (AVG(Screen_Size_Inches * Weight_Grams) - AVG(Screen_Size_Inches) * AVG(Weight_Grams)) / (STDDEV_SAMP(Screen_Size_Inches) * STDDEV_SAMP(Weight_Grams)) AS Pearson_Correlation FROM watches GROUP BY Price_Interval ORDER BY ABS(Pearson_Correlation) DESC LIMIT 3;	watch	4
SELECT Operating_System,         SUM(Power_Consumption) / SUM(Battery_Capacity) AS Power_Ratio FROM (     SELECT w.Operating_System,            -- Calculate total sensor power consumption            (CASE WHEN sd.Heart_Rate_Sensor = 1 THEN 5 ELSE 0 END +             CASE WHEN sd.Gps = 1 THEN 15 ELSE 0 END +             CASE WHEN sd.Accelerometer = 1 THEN 3 ELSE 0 END +             CASE WHEN sd.Gyroscope = 1 THEN 4 ELSE 0 END +             CASE WHEN sd.Blood_Oxygen_Sensor = 1 THEN 6 ELSE 0 END +             CASE WHEN sd.Ecg_Sensor = 1 THEN 8 ELSE 0 END +             CASE WHEN sd.Temperature_Sensor = 1 THEN 2 ELSE 0 END +             CASE WHEN sd.Altimeter = 1 THEN 3 ELSE 0 END +             CASE WHEN sd.Ambient_Light_Sensor = 1 THEN 1 ELSE 0 END) AS Power_Consumption,            -- Calculate battery capacity based on battery life days (assuming average daily usage)            (w.Battery_Life_Days * 100) AS Battery_Capacity  -- Assuming 100 mAh per day as baseline     FROM watches w     JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id     WHERE w.Is_Smartwatch = 1  -- Only consider smartwatches for sensor power analysis ) GROUP BY Operating_System HAVING Power_Ratio > 1;	watch	1
SELECT Country,         -SUM((Configuration_Count / Total_Configurations) * LOG(Configuration_Count / Total_Configurations)) AS Information_Entropy FROM (     SELECT m.Country,             sd.Heart_Rate_Sensor, sd.Gps, sd.Accelerometer, sd.Gyroscope, sd.Blood_Oxygen_Sensor, sd.Ecg_Sensor, sd.Temperature_Sensor, sd.Altimeter, sd.Ambient_Light_Sensor,            COUNT(*) AS Configuration_Count,            SUM(COUNT(*)) OVER (PARTITION BY m.Country) AS Total_Configurations     FROM manufacturers m     JOIN watches w ON m.Manufacturer_Id = w.Manufacturer_id     JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id     GROUP BY m.Country, sd.Heart_Rate_Sensor, sd.Gps, sd.Accelerometer, sd.Gyroscope, sd.Blood_Oxygen_Sensor, sd.Ecg_Sensor, sd.Temperature_Sensor, sd.Altimeter, sd.Ambient_Light_Sensor ) AS Configurations GROUP BY Country ORDER BY Information_Entropy ASC LIMIT 3;	watch	2
SELECT m.Country, COUNT(*) AS Quantity FROM watches w JOIN manufacturers m ON w.Manufacturer_Id = m.Manufacturer_Id JOIN sensor_data s ON w.Watch_Id = s.Watch_Id WHERE w.Water_Resistance_Meters > 100 AND s.Gps = 0 AND s.Altimeter = 0 GROUP BY m.Country;	watch	3
WITH SensorData AS (     SELECT          Watch_Id,         Connectivity,         1e9 * 1024 AS Daily_Data_Per_Watch      FROM watches ), GroupedData AS (     SELECT          Connectivity,         SUM(Daily_Data_Per_Watch) AS Total_Daily_Data      FROM SensorData      GROUP BY Connectivity ) SELECT      Connectivity,     Total_Daily_Data,     CASE          WHEN Total_Daily_Data > 1e24 THEN 'Exceeds 1 YB'          ELSE 'Below 1 YB'      END AS Data_Threshold  FROM GroupedData;	watch	4
SELECT Record_Id, User_Id, Calories_Burned, Start_Time, End_Time  FROM usage_records  WHERE Activity_Type = '游泳'  AND Calories_Burned / ((julianday(End_Time) - julianday(Start_Time)) * 24) > 1000  ORDER BY Calories_Burned ASC;	watch	1
WITH ActivityData AS (         SELECT              Activity_Type,             Heart_Rate_Avg_Bpm,             Steps,             (julianday(End_Time) - julianday(Start_Time)) * 86400 AS Duration_Seconds          FROM usage_records     ),     StepFrequency AS (         SELECT              Activity_Type,             Steps / Duration_Seconds AS Step_Frequency          FROM ActivityData     ),     HeartRateFrequency AS (         SELECT              Activity_Type,             Heart_Rate_Avg_Bpm / 60.0 AS Heart_Rate_Frequency          FROM ActivityData     ),     CombinedFrequencies AS (         SELECT              a.Activity_Type,             h.Heart_Rate_Frequency,             s.Step_Frequency          FROM ActivityData a          JOIN HeartRateFrequency h ON a.Activity_Type = h.Activity_Type          JOIN StepFrequency s ON a.Activity_Type = s.Activity_Type     )     SELECT          Activity_Type,         Heart_Rate_Frequency,         Step_Frequency      FROM CombinedFrequencies      WHERE Heart_Rate_Frequency > 2 OR Step_Frequency > 2      ORDER BY Activity_Type;	watch	2
SELECT u.Time_Zone, COUNT(*) AS Anomaly_Count FROM usage_records u WHERE u.Steps > 1000 AND u.Sleep_Duration_Minutes > 0 GROUP BY u.Time_Zone;	watch	3
WITH SensorVectors AS (     SELECT          Sensor_Id,          Heart_Rate_Sensor,          Gps,          Accelerometer,          Gyroscope,          Blood_Oxygen_Sensor,          Ecg_Sensor,          Temperature_Sensor,          Altimeter,          Ambient_Light_Sensor      FROM sensor_data ) SELECT      s1.Sensor_Id AS Sensor1,      s2.Sensor_Id AS Sensor2,      1 - (         SUM(             s1.Heart_Rate_Sensor * s2.Heart_Rate_Sensor +              s1.Gps * s2.Gps +              s1.Accelerometer * s2.Accelerometer +              s1.Gyroscope * s2.Gyroscope +              s1.Blood_Oxygen_Sensor * s2.Blood_Oxygen_Sensor +              s1.Ecg_Sensor * s2.Ecg_Sensor +              s1.Temperature_Sensor * s2.Temperature_Sensor +              s1.Altimeter * s2.Altimeter +              s1.Ambient_Light_Sensor * s2.Ambient_Light_Sensor         ) / (             SQRT(                 SUM(                     s1.Heart_Rate_Sensor * s1.Heart_Rate_Sensor +                      s1.Gps * s1.Gps +                      s1.Accelerometer * s1.Accelerometer +                      s1.Gyroscope * s1.Gyroscope +                      s1.Blood_Oxygen_Sensor * s1.Blood_Oxygen_Sensor +                      s1.Ecg_Sensor * s1.Ecg_Sensor +                      s1.Temperature_Sensor * s1.Temperature_Sensor +                      s1.Altimeter * s1.Altimeter +                      s1.Ambient_Light_Sensor * s1.Ambient_Light_Sensor                 )             ) *              SQRT(                 SUM(                     s2.Heart_Rate_Sensor * s2.Heart_Rate_Sensor +                      s2.Gps * s2.Gps +                      s2.Accelerometer * s2.Accelerometer +                      s2.Gyroscope * s2.Gyroscope +                      s2.Blood_Oxygen_Sensor * s2.Blood_Oxygen_Sensor +                      s2.Ecg_Sensor * s2.Ecg_Sensor +                      s2.Temperature_Sensor * s2.Temperature_Sensor +                      s2.Altimeter * s2.Altimeter +                      s2.Ambient_Light_Sensor * s2.Ambient_Light_Sensor                 )             )         )     ) AS Dissimilarity  FROM SensorVectors s1  CROSS JOIN SensorVectors s2  WHERE s1.Sensor_Id < s2.Sensor_Id  GROUP BY s1.Sensor_Id, s2.Sensor_Id  ORDER BY Dissimilarity DESC  LIMIT 3;	watch	4
SELECT w.Model, w.Release_Date FROM watches w JOIN sensor_data s ON w.Watch_Id = s.Watch_Id WHERE s.Altimeter = 1 AND s.Gps = 0 ORDER BY w.Release_Date DESC;	watch	1
SELECT w.Model, (1e9 * 86400 * 2 / 1e18) AS Data_Volume_EB FROM watches w JOIN sensor_data s ON w.Watch_Id = s.Watch_Id WHERE s.Blood_Oxygen_Sensor = 1 ORDER BY Data_Volume_EB DESC LIMIT 1;	watch	2
SELECT CASE WHEN Water_Resistance_Meters >= 200 THEN '专业潜水' WHEN Water_Resistance_Meters >= 50 THEN '游泳可用' ELSE '不适用' END AS Suitability, CAST(Water_Resistance_Meters / 10 AS INTEGER) * 10 AS Depth_Interval, COUNT(*) AS Watch_Count FROM watches WHERE Water_Resistance_Meters >= 50 AND Watch_Id IN (SELECT DISTINCT Watch_Id FROM usage_records WHERE Activity_Type = '游泳') GROUP BY Suitability, Depth_Interval ORDER BY Depth_Interval;	television	3
WITH Max_Distance AS (     SELECT          User_Id,          (1000 * 60 * 48 * 0.75) / 1000 AS Theoretical_Max_Distance_Km      FROM usage_records      GROUP BY User_Id ),  Exceeded_Range AS (     SELECT          User_Id,          Start_Time,          End_Time      FROM usage_records      WHERE Activity_Type = '跑步'      AND Steps / ((julianday(End_Time) - julianday(Start_Time)) * 24 * 60 + 1) > 1000      AND EXISTS (         SELECT 1          FROM sensor_data s          WHERE s.Watch_Id = usage_records.Watch_Id          AND ABS(s.Accelerometer) > 16     ) )  SELECT      m.User_Id,      m.Theoretical_Max_Distance_Km,      e.Start_Time,      e.End_Time  FROM Max_Distance m  LEFT JOIN Exceeded_Range e ON m.User_Id = e.User_Id;	television	4
SELECT Operating_System, (3.7 * 0.1 * Battery_Life_Days * 24 * 3600) / (Weight_Grams / 1000) AS Efficiency_Joules_Per_Gram_Per_Day FROM watches ORDER BY Efficiency_Joules_Per_Gram_Per_Day DESC LIMIT 5;	television	1
WITH Ratio_Calculation AS (     SELECT Country, CAST(Employees AS REAL) / NULLIF(Market_Share_Percent, 0) AS Ratio      FROM manufacturers      WHERE Market_Share_Percent > 0 ),  Ranked_Countries AS (     SELECT Country, AVG(Ratio) AS Avg_Ratio,             ROW_NUMBER() OVER (ORDER BY AVG(Ratio) DESC) AS Rank      FROM Ratio_Calculation      GROUP BY Country )  SELECT Country, Avg_Ratio  FROM Ranked_Countries  WHERE Rank <= 3;	television	2
SELECT CAST(Screen_Size_Inches * 2 AS INTEGER) / 2.0 AS Screen_Size_Interval, COUNT(*) AS Watch_Count FROM watches w JOIN sensor_data s ON w.Watch_Id = s.Watch_Id WHERE s.Temperature_Sensor = 1 AND w.Water_Resistance_Meters > 100 GROUP BY Screen_Size_Interval ORDER BY Screen_Size_Interval DESC;	television	3
SELECT Weight_Grams, MAX(Water_Resistance_Meters * (Weight_Grams / 1000.0) / (1025.0 * 9.8)) AS Max_Floating_Height FROM watches WHERE Water_Resistance_Meters >= 10000 GROUP BY Weight_Grams;	television	4
SELECT Country, (Profit_Usd * 0.1 * 3600000) / (Employees * 8760) * 0.3 AS Productivity_Efficiency FROM manufacturers ORDER BY Productivity_Efficiency DESC LIMIT 5;	television	1
WITH Composite_Values AS (   SELECT      Country,      Manufacturer_Name,      Market_Share_Percent * CASE WHEN Founded_Year < 2024 THEN LN(2024 - Founded_Year) ELSE 0 END AS Composite_Value    FROM manufacturers ),  Ranked_Records AS (   SELECT      Country,      Manufacturer_Name,      Composite_Value,      ROW_NUMBER() OVER (PARTITION BY Country ORDER BY Composite_Value DESC) AS Rank    FROM Composite_Values )  SELECT Country, Manufacturer_Name, Composite_Value  FROM Ranked_Records  WHERE Rank <= 3;	television	2
SELECT Country, COUNT(*) AS Manufacturer_Count FROM manufacturers WHERE Employees < 100 AND Market_Share_Percent > 5 GROUP BY Country ORDER BY Manufacturer_Count DESC;	watch	3
WITH EmployeeValue AS (   SELECT      Country,     Manufacturer_Name,     Profit_Usd,     Employees,     Profit_Usd * 1.0 / Employees AS Value_Per_Employee_Usd,     (Profit_Usd * 1.0 / Employees) * 1.5e-10 AS Value_Per_Employee_Joules    FROM manufacturers    WHERE Profit_Usd = 1e14 ), FilteredValues AS (   SELECT      Country,     Manufacturer_Name,     Value_Per_Employee_Usd,     Value_Per_Employee_Joules    FROM EmployeeValue    WHERE Value_Per_Employee_Joules > 1.5e-10 ) SELECT    Country,   Manufacturer_Name,   Value_Per_Employee_Usd,   Value_Per_Employee_Joules  FROM (   SELECT      Country,     Manufacturer_Name,     Value_Per_Employee_Usd,     Value_Per_Employee_Joules,     ROW_NUMBER() OVER (PARTITION BY Country ORDER BY Value_Per_Employee_Usd DESC) AS rn    FROM FilteredValues ) AS RankedValues  WHERE rn = 1;	watch	4
SELECT      u.Activity_Type,     SUM(0.5 * (w.Weight_Grams / 1000.0) * POWER((12.0 * 1000.0 / 3600.0), 2)) AS Energy_Consumption_Joules FROM      usage_records u JOIN      watches w ON u.Watch_Id = w.Watch_Id GROUP BY      u.Activity_Type ORDER BY      Energy_Consumption_Joules DESC LIMIT 3;	watch	1
SELECT (CASE WHEN sd.Heart_Rate_Sensor = 1 THEN 1 ELSE 0 END * 1 +          CASE WHEN sd.Gps = 1 THEN 1 ELSE 0 END * 2 +          CASE WHEN sd.Accelerometer = 1 THEN 1 ELSE 0 END * 4 +          CASE WHEN sd.Gyroscope = 1 THEN 1 ELSE 0 END * 8 +          CASE WHEN sd.Blood_Oxygen_Sensor = 1 THEN 1 ELSE 0 END * 16 +          CASE WHEN sd.Ecg_Sensor = 1 THEN 1 ELSE 0 END * 32 +          CASE WHEN sd.Temperature_Sensor = 1 THEN 1 ELSE 0 END * 64 +          CASE WHEN sd.Altimeter = 1 THEN 1 ELSE 0 END * 128 +          CASE WHEN sd.Ambient_Light_Sensor = 1 THEN 1 ELSE 0 END * 256) AS Sensor_Combination,        AVG(ur.Battery_Consumed_Percent) AS Avg_Battery_Consumed_Percent FROM sensor_data sd JOIN usage_records ur ON sd.Watch_Id = ur.Watch_Id GROUP BY Sensor_Combination ORDER BY Avg_Battery_Consumed_Percent DESC LIMIT 10;	watch	2
WITH FilteredWatches AS (     SELECT w.Watch_Id, w.Model, w.Price_Usd, w.Is_Smartwatch      FROM watches w      JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id      WHERE sd.Altimeter = 1 AND sd.Temperature_Sensor = 1 AND w.Is_Smartwatch = 1 ), PriceGroups AS (     SELECT Model,            CASE                 WHEN Price_Usd < 200 THEN '< $200'                 WHEN Price_Usd BETWEEN 200 AND 500 THEN '$200-$500'                 WHEN Price_Usd > 500 THEN '> $500'             END AS Price_Group      FROM FilteredWatches ) SELECT Price_Group, COUNT(*) AS Watch_Count  FROM PriceGroups  GROUP BY Price_Group  ORDER BY Price_Group;	watch	3
WITH FilteredWatches AS (     SELECT ur.User_Id, w.Watch_Id, w.Model, w.Battery_Life_Days, sd.Gps      FROM watches w      JOIN usage_records ur ON w.Watch_Id = ur.Watch_Id      JOIN sensor_data sd ON w.Watch_Id = sd.Watch_Id      WHERE sd.Gps = 1 ), BatteryConsumption AS (     SELECT User_Id, Watch_Id, Model, Battery_Life_Days,             CASE                 WHEN Battery_Life_Days > 0 THEN 500.0 / (10000.0 / Battery_Life_Days)                ELSE NULL             END AS Max_Charge_Cycles      FROM FilteredWatches ), MaxChargeCycles AS (     SELECT User_Id, MAX(Max_Charge_Cycles) AS Max_Charge_Cycles      FROM BatteryConsumption      GROUP BY User_Id )  SELECT User_Id, Max_Charge_Cycles  FROM MaxChargeCycles  ORDER BY Max_Charge_Cycles DESC;	watch	4
SELECT Activity_Type, 0.5 * 1000 * POW(2.5, 2) * 0.5 * 0.1 AS Power_Watts FROM usage_records JOIN watches ON usage_records.Watch_Id = watches.Watch_Id WHERE Activity_Type = 'Swimming' GROUP BY Activity_Type LIMIT 5;	watch	1
WITH ActivityBatteryStats AS (     SELECT          w.Model,         u.Activity_Type,         AVG(u.Battery_Consumed_Percent) AS Avg_Battery,         AVG(u.Battery_Consumed_Percent * u.Battery_Consumed_Percent) AS Avg_Squared_Battery,         COUNT(*) AS Count_Records     FROM usage_records u     JOIN watches w ON u.Watch_Id = w.Watch_Id     GROUP BY w.Model, u.Activity_Type     HAVING Count_Records > 1 ), CovarianceMatrix AS (     SELECT          a1.Model AS Model_X,         a1.Activity_Type AS Activity_X,         a2.Model AS Model_Y,         a2.Activity_Type AS Activity_Y,         (a1.Avg_Squared_Battery - a1.Avg_Battery * a2.Avg_Battery) AS Covariance     FROM ActivityBatteryStats a1     CROSS JOIN ActivityBatteryStats a2     WHERE a1.Model = a2.Model ) SELECT      Model_X,     Activity_X,     Model_Y,     Activity_Y,     ABS(Covariance) AS Absolute_Covariance FROM CovarianceMatrix ORDER BY Absolute_Covariance DESC LIMIT 3;	watch	2
SELECT      CASE          WHEN Battery_Life_Days BETWEEN 7 AND 14 THEN '7-14 days'         WHEN Battery_Life_Days BETWEEN 15 AND 30 THEN '15-30 days'         WHEN Battery_Life_Days > 30 THEN '>30 days'     END AS Battery_Life_Interval,     COUNT(*) AS Count FROM watches w JOIN sensor_data s ON w.Watch_Id = s.Watch_Id WHERE s.Gps = 1 AND w.Battery_Life_Days >= 7 GROUP BY Battery_Life_Interval;	watch	3
WITH FrequencyRequirement AS (     SELECT (340 / (9.8 * 16)) * 1000 AS Required_Frequency_Hz ),  SupportedWatches AS (     SELECT w.Model, w.Connectivity, s.Accelerometer      FROM watches w      JOIN sensor_data s ON w.Watch_Id = s.Watch_Id      WHERE s.Accelerometer = 1 )  SELECT Connectivity, MAX(Model) AS Model  FROM SupportedWatches  WHERE EXISTS (SELECT 1 FROM FrequencyRequirement)  GROUP BY Connectivity;	television	4
SELECT Manufacturer_Name,         Country,         (Battery_Life_Days * 24 * 3600 * (SELECT AVG(Battery_Consumed_Percent) FROM usage_records WHERE usage_records.Watch_Id = watches.Watch_Id) / 100) / Profit_Usd AS Energy_Per_Profit FROM manufacturers JOIN watches ON manufacturers.Manufacturer_Id = watches.Manufacturer_Id GROUP BY manufacturers.Manufacturer_Id ORDER BY Energy_Per_Profit DESC LIMIT 3;	watch	1
WITH ranked_manufacturers AS (     SELECT          Manufacturer_Id,         Manufacturer_Name,         (Market_Share_Percent * SQRT(MAX(0, 2024 - Founded_Year)) / Employees) AS Market_Penetration_Index     FROM manufacturers     WHERE Founded_Year < 2024 ) SELECT      Manufacturer_Id,     Manufacturer_Name,     Market_Penetration_Index FROM ranked_manufacturers ORDER BY Market_Penetration_Index DESC LIMIT 5;	watch	2
SELECT Country, COUNT(*) AS Smartwatch_Count FROM manufacturers JOIN watches ON manufacturers.Manufacturer_Id = watches.Manufacturer_id WHERE (2024 - Founded_Year) > 30 AND Employees < 500 AND Is_Smartwatch = 1 GROUP BY Country;	watch	3
WITH GoldWeight AS (     SELECT          Country,         Manufacturer_Name,         Profit_Usd,         Employees,         Profit_Usd/(Employees*60000.0) AS Gold_Per_Employee_Kg      FROM manufacturers ), FilteredGoldWeight AS (     SELECT          Country,         Manufacturer_Name,         Gold_Per_Employee_Kg      FROM GoldWeight      WHERE Gold_Per_Employee_Kg > 1000000000 ), MaxGoldWeight AS (     SELECT          Country,         MAX(Gold_Per_Employee_Kg) AS Max_Gold_Per_Employee_Kg      FROM FilteredGoldWeight      GROUP BY Country )  SELECT      Country,     Max_Gold_Per_Employee_Kg  FROM MaxGoldWeight  ORDER BY Max_Gold_Per_Employee_Kg DESC;	watch	4
SELECT power_rating * (heating_time / 60.0) AS energy_consumed FROM water_heater_info WHERE power_rating = 3 AND heating_time = 30;	water_heater	1
SELECT wi.capacity * 1 * 4.18 * (wu.final_temperature - wu.initial_temperature) AS heat_required FROM water_heater_info wi JOIN water_heater_usage wu ON wi.id = wu.heater_id WHERE wi.capacity = 50 AND wu.initial_temperature = 10 AND wu.final_temperature = 60;	water_heater	2
SELECT wi.energy_efficiency_rating, AVG(wu.energy_consumed) AS avg_energy_consumed FROM water_heater_info wi JOIN water_heater_usage wu ON wi.id = wu.heater_id WHERE wi.energy_efficiency_rating IN (1, 3) GROUP BY wi.energy_efficiency_rating ORDER BY avg_energy_consumed ASC;	water_heater	3
SELECT power_rating * (heating_time / 60.0) AS energy_consumed FROM water_heater_info WHERE capacity = 1000 AND power_rating = 100 AND heating_time = 1;	water_heater	4
SELECT (wu.water_used * 1 * 4.18 * (wu.final_temperature - wu.initial_temperature)) / (wu.energy_consumed * 3600) * 100 AS efficiency FROM water_heater_usage wu WHERE wu.energy_consumed = 5 AND wu.temperature_set = 50 AND wu.initial_temperature = 10 AND wu.final_temperature = 50;	water_heater	1
SELECT wu.energy_consumed / wi.capacity AS energy_per_liter FROM water_heater_info wi JOIN water_heater_usage wu ON wi.id = wu.heater_id WHERE wi.capacity = 100 AND wu.energy_consumed = 3;	water_heater	2
SELECT wu.id, wu.ambient_temperature, wu.initial_temperature, wu.final_temperature, (wi.capacity * 1 * 4.18 * (wu.final_temperature - wu.initial_temperature)) / (wu.energy_consumed * 3600) * 100 AS efficiency FROM water_heater_info wi JOIN water_heater_usage wu ON wi.id = wu.heater_id WHERE (wu.ambient_temperature = 5 AND wu.initial_temperature = 5 AND wu.final_temperature = 45) OR (wu.ambient_temperature = 25 AND wu.initial_temperature = 25 AND wu.final_temperature = 45);	water_heater	3
SELECT energy_consumed / water_used AS energy_per_liter FROM water_heater_usage WHERE water_used = 1000000 AND energy_consumed = 1000000;	water_heater	4
SELECT peak_energy_value / low_energy_value AS energy_fluctuation_rate FROM energy_consumption_analysis WHERE total_energy_consumed = 500 AND peak_energy_value = 10 AND low_energy_value = 1;	water_heater	1
SELECT peak_energy_value / average_daily_energy AS peak_to_daily_ratio, low_energy_value / average_daily_energy AS low_to_daily_ratio FROM energy_consumption_analysis WHERE total_energy_consumed = 300 AND average_daily_energy = 10 AND peak_energy_value = 15 AND low_energy_value = 5;	water_heater	2
SELECT wi.brand, wi.model, eca.peak_energy_value, eca.low_energy_value, (eca.peak_energy_value - eca.low_energy_value) AS energy_fluctuation FROM energy_consumption_analysis eca JOIN water_heater_info wi ON eca.heater_id = wi.id WHERE (eca.peak_energy_value = 20 AND eca.low_energy_value = 2) OR (eca.peak_energy_value = 15 AND eca.low_energy_value = 5) ORDER BY energy_fluctuation DESC;	water_heater	3
SELECT peak_energy_value / low_energy_value AS energy_fluctuation_rate FROM energy_consumption_analysis WHERE total_energy_consumed = 1000000 AND peak_energy_value = 10000 AND low_energy_value = 0.1;	water_heater	4
SELECT energy_cost - (total_energy_consumed * 0.6) AS cost_difference FROM energy_consumption_analysis WHERE total_energy_consumed = 500 AND energy_cost = 300;	water_heater	1
SELECT (peak_energy_value / low_energy_value) AS energy_fluctuation_rate, (energy_cost / 30) AS daily_energy_cost FROM energy_consumption_analysis WHERE total_energy_consumed = 400 AND energy_cost = 240 AND peak_energy_value = 20 AND low_energy_value = 5;	water_heater	2
SELECT heater_id, energy_cost, energy_saving_tips, (peak_energy_value / low_energy_value) AS energy_fluctuation_rate, (energy_cost / 30) AS daily_energy_cost FROM energy_consumption_analysis WHERE energy_cost IN (200, 250);	water_heater	3
SELECT (total_energy_consumed * 0.5) AS theoretical_energy_cost, (energy_cost - (total_energy_consumed * 0.5)) AS cost_difference, (peak_energy_value / low_energy_value) AS energy_fluctuation_rate FROM energy_consumption_analysis WHERE total_energy_consumed = 1000000 AND energy_cost = 1000000 AND peak_energy_value = 50000 AND low_energy_value = 0.1;	water_heater	4
SELECT (water_used * 1 * 4.18 * (final_temperature - initial_temperature)) / (strftime('%s', end_time) - strftime('%s', start_time)) AS heating_power FROM water_heater_usage WHERE initial_temperature = 10 AND final_temperature = 50;	water_heater	1
SELECT ((500 * 0.5) / ((wu.water_used * 1 * 4.18 * (wu.final_temperature - wu.initial_temperature)) / (strftime('%s', wu.end_time) - strftime('%s', wu.start_time)))) * 100 AS solar_heating_efficiency FROM water_heater_usage wu JOIN environment_data ed ON wu.heater_id = ed.heater_id WHERE ed.ambient_temperature = 20 AND wu.initial_temperature = 15 AND wu.final_temperature = 45 AND ed.solar_radiation = 500;	water_heater	2
SELECT heater_id, usage_date, initial_temperature, final_temperature, ambient_temperature, energy_consumed FROM water_heater_usage WHERE initial_temperature = 5 AND final_temperature = 45 AND ambient_temperature = 5 UNION SELECT heater_id, usage_date, initial_temperature, final_temperature, ambient_temperature, energy_consumed FROM water_heater_usage WHERE initial_temperature = 25 AND final_temperature = 45 AND ambient_temperature = 25;	water_heater	3
SELECT heater_id, water_inlet_temperature, water_outlet_temperature, 1000000 AS water_flow_rate, solar_radiation, (1000000 * 4.18 * (water_outlet_temperature - water_inlet_temperature)) / 60 AS heating_power, (solar_radiation * 1.0) / ((1000000 * 4.18 * (water_outlet_temperature - water_inlet_temperature)) / 60) * 100 AS solar_heating_efficiency FROM environment_data WHERE water_inlet_temperature = -273 AND water_outlet_temperature = 1000 AND solar_radiation = 1000000;	water_heater	4
SELECT model, (50 * 4.18 * (60 - 20)) / 3600 AS energy_required_kWh FROM water_heater_info ORDER BY energy_required_kWh ASC LIMIT 5;	water_heater	1
SELECT id AS heater_id, brand, model, ((50 * 4.18 * (60 - 20)) * 2 * 365 * 0.5) / 3600000 AS annual_energy_cost FROM water_heater_info ORDER BY annual_energy_cost ASC;	water_heater	2
WITH EnergyCost AS (   SELECT      id AS heater_id,      brand,      model,      energy_efficiency_rating,      ((50 * 4.18 * (60 - 20)) * 2 * 365 * 0.5) / 3600000 AS annual_energy_cost    FROM water_heater_info ),  MinMaxEfficiency AS (   SELECT      MIN(energy_efficiency_rating) AS min_efficiency,      MAX(energy_efficiency_rating) AS max_efficiency    FROM water_heater_info ),  HighEfficiency AS (   SELECT *    FROM EnergyCost    WHERE energy_efficiency_rating = (SELECT max_efficiency FROM MinMaxEfficiency)    LIMIT 1 ),  LowEfficiency AS (   SELECT *    FROM EnergyCost    WHERE energy_efficiency_rating = (SELECT min_efficiency FROM MinMaxEfficiency)    LIMIT 1 )  SELECT    h.heater_id AS high_efficiency_heater_id,    h.brand AS high_efficiency_brand,    h.model AS high_efficiency_model,    l.heater_id AS low_efficiency_heater_id,    l.brand AS low_efficiency_brand,    l.model AS low_efficiency_model,    (l.annual_energy_cost - h.annual_energy_cost) AS annual_energy_savings  FROM HighEfficiency h, LowEfficiency l;	water_heater	3
WITH EnergyCalculation AS (     SELECT id AS heater_id, brand, model, capacity, power_rating, (1000 * 4.18 * (100 - 0)) / 3600 AS energy_required_kWh      FROM water_heater_info      WHERE capacity = 1000 AND power_rating = 1000 ),  TopEnergyConsumers AS (     SELECT id AS heater_id, brand, model, capacity, power_rating, (capacity * 4.18 * (100 - 0)) / 3600 AS energy_required_kWh      FROM water_heater_info      ORDER BY energy_required_kWh DESC      LIMIT 3 )  SELECT * FROM EnergyCalculation  UNION ALL  SELECT * FROM TopEnergyConsumers;	water_heater	4
SELECT id AS usage_id, heater_id, usage_date, start_time, end_time, water_used, initial_temperature, temperature_set, (water_used * 4.18 * (temperature_set - initial_temperature)) / 3600 AS energy_required_kWh FROM water_heater_usage ORDER BY energy_required_kWh DESC LIMIT 5;	water_heater	1
SELECT id AS usage_id, heater_id, usage_date, start_time, end_time, water_used, energy_consumed, (energy_consumed / water_used) AS energy_efficiency FROM water_heater_usage ORDER BY energy_efficiency ASC LIMIT 10;	water_heater	2
SELECT id AS usage_id, heater_id, usage_date, start_time, end_time, initial_temperature, ambient_temperature, (initial_temperature - ambient_temperature) AS temperature_difference FROM water_heater_usage ORDER BY temperature_difference DESC LIMIT 5;	water_heater	3
SELECT id AS usage_id, heater_id, usage_date, start_time, end_time, water_used, initial_temperature, temperature_set, (water_used * 4.18 * (temperature_set - initial_temperature)) / 3600 AS energy_required_kWh FROM water_heater_usage ORDER BY energy_required_kWh DESC LIMIT 3;	water_heater	4
SELECT heater_id, analysis_date, total_energy_consumed, average_daily_energy, (total_energy_consumed / average_daily_energy) AS energy_ratio FROM energy_consumption_analysis ORDER BY energy_ratio DESC LIMIT 5;	water_heater	1
SELECT heater_id, analysis_date, total_energy_consumed, energy_cost, (energy_cost / total_energy_consumed) AS energy_cost_efficiency FROM energy_consumption_analysis ORDER BY energy_cost_efficiency ASC LIMIT 10;	water_heater	2
SELECT heater_id, analysis_date, peak_energy_value, low_energy_value, (peak_energy_value - low_energy_value) AS energy_difference FROM energy_consumption_analysis ORDER BY energy_difference DESC LIMIT 5;	water_heater	3
SELECT heater_id, analysis_date, total_energy_consumed, (total_energy_consumed * 100 * 0.5) AS hypothetical_energy_cost FROM energy_consumption_analysis ORDER BY hypothetical_energy_cost DESC LIMIT 3;	water_heater	4
SELECT heater_id, record_date, water_inlet_temperature, ambient_temperature, (water_inlet_temperature - ambient_temperature) AS temperature_difference  FROM environment_data  ORDER BY temperature_difference DESC  LIMIT 5;	water_heater	1
SELECT heater_id, record_date, water_pressure, air_pressure, (water_pressure / air_pressure) AS pressure_ratio FROM environment_data ORDER BY pressure_ratio ASC LIMIT 10;	water_heater	2
SELECT heater_id, record_date, solar_radiation, wind_speed, (solar_radiation * wind_speed) AS energy_acquisition_index FROM environment_data ORDER BY energy_acquisition_index DESC LIMIT 5;	water_heater	3
SELECT e.heater_id, (e.solar_radiation * 1000 * e.wind_speed) AS energy_acquisition_index  FROM environment_data e  ORDER BY energy_acquisition_index DESC  LIMIT 3;	water_heater	4
SELECT DISTINCT whi.model FROM water_heater_info whi WHERE whi.capacity > 50 AND whi.power_rating < 2 AND whi.id NOT IN (SELECT DISTINCT whu.heater_id FROM water_heater_usage whu WHERE whu.energy_consumed > 10);	water_heater	1
SELECT DISTINCT whi.model FROM water_heater_info whi WHERE whi.weight < 20 AND whi.price < 2000 AND whi.id NOT IN (SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE eca.average_daily_energy > 5);	water_heater	2
SELECT DISTINCT whi.model  FROM water_heater_info whi  WHERE whi.manufacture_date > '2020-01-01'  AND (     CAST(SUBSTR(whi.dimensions, 1, INSTR(whi.dimensions, 'x') - 1) AS REAL) < 500      AND CAST(SUBSTR(whi.dimensions, INSTR(whi.dimensions, 'x') + 1, INSTR(SUBSTR(whi.dimensions, INSTR(whi.dimensions, 'x') + 1), 'x') - 1) AS REAL) < 500      AND CAST(SUBSTR(whi.dimensions, INSTR(whi.dimensions, 'x', -1) + 1) AS REAL) < 500 )  AND whi.id NOT IN (SELECT DISTINCT ed.heater_id FROM environment_data ed WHERE ed.ambient_temperature > 40);	water_heater	3
SELECT DISTINCT whi.model FROM water_heater_info whi WHERE (whi.capacity * 10) > 500 AND whi.power_rating < 5 AND whi.id NOT IN (SELECT DISTINCT whu.heater_id FROM water_heater_usage whu WHERE whu.energy_consumed > 100);	water_heater	4
SELECT whu.* FROM water_heater_usage whu WHERE whu.water_used > 100 AND whu.energy_consumed < 5 AND whu.heater_id NOT IN (SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE eca.average_daily_energy > 10);	water_heater	1
SELECT whu.* FROM water_heater_usage whu WHERE whu.initial_temperature < 10 AND whu.final_temperature > 60 AND whu.heater_id NOT IN (SELECT DISTINCT ed.heater_id FROM environment_data ed WHERE ed.ambient_temperature < 0);	water_heater	2
SELECT whu.* FROM water_heater_usage whu WHERE whu.water_used > 50 AND whu.energy_consumed < 3 AND whu.heater_id NOT IN (SELECT DISTINCT whi.id FROM water_heater_info whi WHERE whi.capacity < 30);	water_heater	3
SELECT whu.* FROM water_heater_usage whu WHERE (whu.water_used * 10) > 500 AND whu.energy_consumed < 50 AND whu.heater_id NOT IN (SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE eca.average_daily_energy > 100);	water_heater	4
SELECT DISTINCT eca.heater_id  FROM energy_consumption_analysis eca  WHERE eca.total_energy_consumed > 100  AND eca.average_daily_energy < 5  AND eca.heater_id NOT IN (SELECT DISTINCT whu.heater_id FROM water_heater_usage whu WHERE whu.water_used > 200);	water_heater	1
SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE eca.peak_energy_value > 20 AND eca.low_energy_value < 2 AND eca.heater_id NOT IN (SELECT DISTINCT ed.heater_id FROM environment_data ed WHERE ed.ambient_temperature > 40);	water_heater	2
SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE eca.energy_cost > 500 AND eca.total_energy_consumed < 1000 AND eca.heater_id NOT IN (SELECT DISTINCT whi.id FROM water_heater_info whi WHERE whi.warranty_period < 12);	water_heater	3
SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE (eca.total_energy_consumed * 100) > 10000 AND eca.average_daily_energy < 500 AND eca.heater_id NOT IN (SELECT DISTINCT whu.heater_id FROM water_heater_usage whu WHERE whu.water_used > 2000);	water_heater	4
SELECT DISTINCT ed.* FROM environment_data ed WHERE ed.ambient_temperature > 30 AND ed.solar_radiation > 500 AND ed.heater_id NOT IN (SELECT DISTINCT whu.heater_id FROM water_heater_usage whu WHERE whu.energy_consumed > 10);	water_heater	1
SELECT DISTINCT ed.* FROM environment_data ed WHERE ed.water_pressure > 3 AND ed.wind_speed > 10 AND ed.heater_id NOT IN (SELECT DISTINCT eca.heater_id FROM energy_consumption_analysis eca WHERE eca.average_daily_energy > 5);	water_heater	2
SELECT DISTINCT ed.* FROM environment_data ed WHERE ed.humidity > 80 AND ed.water_inlet_temperature < 10 AND ed.heater_id NOT IN (SELECT DISTINCT whi.id FROM water_heater_info whi WHERE whi.capacity < 50);	water_heater	3
SELECT DISTINCT ed.* FROM environment_data ed WHERE ed.solar_radiation > 500 AND ed.wind_speed > 50 AND ed.heater_id NOT IN (SELECT DISTINCT whu.heater_id FROM water_heater_usage whu WHERE whu.energy_consumed > 100);	water_heater	4
SELECT whi.model, whu.water_used, whu.initial_temperature, whu.temperature_set, (whu.water_used * 4186 * (whu.temperature_set - whu.initial_temperature)) / 3600000 AS required_energy_kWh, (whi.power_rating * (whi.heating_time / 60)) AS actual_energy_kWh FROM water_heater_info whi JOIN water_heater_usage whu ON whi.id = whu.heater_id WHERE whi.brand = 'A品牌';	water_heater	1
SELECT whi.brand, SUM(eca.total_energy_consumed) AS total_energy_kWh, SUM(eca.total_energy_consumed) / COUNT(DISTINCT eca.analysis_date) AS average_daily_energy_kWh, SUM(eca.total_energy_consumed) * 0.5 AS total_energy_cost FROM water_heater_info whi JOIN energy_consumption_analysis eca ON whi.id = eca.heater_id GROUP BY whi.brand;	water_heater	2
SELECT whi.model, (3 * 50 * 30) AS monthly_water_usage_liters, (3 * 50 * 30 * (SUM(whu.energy_consumed) / SUM(whu.water_used))) AS monthly_energy_consumption_kWh FROM water_heater_info whi JOIN water_heater_usage whu ON whi.id = whu.heater_id WHERE whi.capacity >= 50 GROUP BY whi.model;	water_heater	3
SELECT 10000 AS capacity_liters, 1000 AS power_rating_kW, -100 AS ambient_temperature_C, -50 AS water_inlet_temperature_C, 100 AS temperature_set_C, (10000 * 4186 * (100 - (-50))) / 3600000 AS required_energy_kWh, ((10000 * 4186 * (100 - (-50))) / 3600000) / 1000 AS heating_time_hours;	water_heater	4
SELECT whu.id AS usage_id, whu.heater_id, whu.water_used, whu.initial_temperature, whu.final_temperature, (whu.water_used * 4186 * (whu.final_temperature - whu.initial_temperature)) / 3600000 AS calculated_energy_kWh, whu.energy_consumed AS recorded_energy_kWh, ABS((whu.water_used * 4186 * (whu.final_temperature - whu.initial_temperature)) / 3600000 - whu.energy_consumed) AS energy_difference_kWh FROM water_heater_usage whu;	water_heater	1
SELECT ed.ambient_temperature, AVG(whu.energy_consumed) AS average_energy_consumed  FROM water_heater_usage whu  JOIN environment_data ed ON whu.heater_id = ed.heater_id AND whu.usage_date = ed.record_date  JOIN water_heater_info whi ON whu.heater_id = whi.id  WHERE whi.brand = '某品牌'  GROUP BY ed.ambient_temperature  ORDER BY ed.ambient_temperature;	water_heater	2
SELECT strftime('%H', start_time) AS hour_of_day, COUNT(*) AS usage_count, SUM(water_used) AS total_water_used FROM water_heater_usage GROUP BY strftime('%H', start_time) ORDER BY usage_count DESC;	water_heater	3
WITH heater_data AS (         SELECT              whi.id AS heater_id,              whi.power_rating,              whu.temperature_set,              whu.initial_temperature,              whu.ambient_temperature,              whu.water_used          FROM water_heater_info whi          JOIN water_heater_usage whu ON whi.id = whu.heater_id          WHERE whu.temperature_set = 1000          AND whu.initial_temperature = -200          AND whu.ambient_temperature = -273      )      SELECT          heater_id,          power_rating,          temperature_set,          initial_temperature,          ambient_temperature,          water_used,          (water_used * 4186 * (temperature_set - initial_temperature)) / (power_rating * 3600) AS heating_time_hours,          (water_used * 4186 * (temperature_set - initial_temperature)) / 3600 AS energy_consumed_kWh      FROM heater_data;	water_heater	4
SELECT heater_id, total_energy_consumed, peak_energy_time, low_energy_time FROM energy_consumption_analysis WHERE analysis_date BETWEEN '开始日期' AND '结束日期';	water_heater	1
WITH energy_comparison AS (   SELECT whi.energy_efficiency_rating, AVG(eca.average_daily_energy) AS avg_daily_energy    FROM water_heater_info whi    JOIN energy_consumption_analysis eca ON whi.id = eca.heater_id    WHERE whi.brand = '海尔'    GROUP BY whi.energy_efficiency_rating )  SELECT a.energy_efficiency_rating AS high_efficiency_rating,         b.energy_efficiency_rating AS low_efficiency_rating,         (b.avg_daily_energy - a.avg_daily_energy) AS energy_saving,         (b.avg_daily_energy - a.avg_daily_energy) * 0.5 * 365 AS cost_saving  FROM energy_comparison a, energy_comparison b  WHERE a.energy_efficiency_rating > b.energy_efficiency_rating;	water_heater	2
WITH seasonal_energy AS (   SELECT      CASE        WHEN strftime('%m', analysis_date) IN ('12', '01', '02') THEN '冬季'        WHEN strftime('%m', analysis_date) IN ('06', '07', '08') THEN '夏季'        ELSE '其他季节'      END AS season,      SUM(total_energy_consumed) AS total_energy    FROM energy_consumption_analysis    GROUP BY      CASE        WHEN strftime('%m', analysis_date) IN ('12', '01', '02') THEN '冬季'        WHEN strftime('%m', analysis_date) IN ('06', '07', '08') THEN '夏季'        ELSE '其他季节'      END )  SELECT    season,    total_energy,    CASE      WHEN season = '冬季' THEN '建议增加保温措施，减少热量散失。'      WHEN season = '夏季' THEN '建议减少热水使用频率，利用环境温度加热。'      ELSE '无特定建议。'    END AS energy_saving_tips  FROM seasonal_energy  WHERE season IN ('冬季', '夏季');	water_heater	3
WITH extreme_energy AS ( SELECT 10000 AS daily_energy, 50000 AS peak_energy, 1000 AS low_energy, 0.5 AS electricity_price ) SELECT daily_energy * 365 AS annual_energy_consumption, daily_energy * 365 * electricity_price AS annual_energy_cost, CASE WHEN daily_energy > 1000 OR peak_energy > 50000 OR low_energy < 500 THEN '数据异常：能耗值超出正常范围，需检查设备或数据记录。' ELSE '数据正常。' END AS data_analysis FROM extreme_energy;	water_heater	4
WITH heater_efficiency AS (     SELECT          ed.heater_id,          ed.ambient_temperature,          ed.humidity,          ed.water_pressure,          ed.solar_radiation,          whi.power_rating,          whu.energy_consumed,          whi.heating_time,          (whu.energy_consumed * 3600) AS Q_used,          (whi.power_rating * whi.heating_time * 60) AS Q_input      FROM          environment_data ed      JOIN          water_heater_usage whu ON ed.heater_id = whu.heater_id      JOIN          water_heater_info whi ON whu.heater_id = whi.id      WHERE          ed.record_date BETWEEN '2023-01-01' AND '2023-12-31' ) SELECT      heater_id,      ambient_temperature,      humidity,      water_pressure,      solar_radiation,      (Q_used / Q_input) * 100 AS thermal_efficiency  FROM      heater_efficiency;	water_heater	1
WITH environmental_energy AS (     SELECT ed.ambient_temperature, ed.humidity, ed.water_pressure, eca.total_energy_consumed      FROM environment_data ed      JOIN energy_consumption_analysis eca ON ed.heater_id = eca.heater_id      JOIN water_heater_info whi ON ed.heater_id = whi.id      WHERE whi.brand = '海尔' ) SELECT ambient_temperature, humidity, water_pressure, AVG(total_energy_consumed) AS avg_energy_consumed  FROM environmental_energy  GROUP BY ambient_temperature, humidity, water_pressure;	water_heater	2
WITH seasonal_data AS (   SELECT      CASE        WHEN strftime('%m', record_date) IN ('12', '01', '02') THEN '冬季'       WHEN strftime('%m', record_date) IN ('06', '07', '08') THEN '夏季'       ELSE '其他季节'     END AS season,     ambient_temperature,     humidity,     solar_radiation   FROM environment_data ) SELECT    season,   AVG(ambient_temperature) AS avg_temperature,   AVG(humidity) AS avg_humidity,   AVG(solar_radiation) AS avg_solar_radiation,   CASE      WHEN season = '冬季' THEN '建议增加保温措施，定期检查加热元件，防止结冰。'     WHEN season = '夏季' THEN '建议增加散热措施，定期清理灰尘，防止过热。'     ELSE '无特定建议。'   END AS maintenance_tips FROM seasonal_data GROUP BY season;	water_heater	3
WITH extreme_conditions AS (   SELECT      eca.heater_id,      eca.total_energy_consumed,      whi.power_rating,      whi.heating_time,      (eca.total_energy_consumed * 3600) AS Q_used,      (whi.power_rating * whi.heating_time * 60) AS Q_input    FROM energy_consumption_analysis eca    JOIN water_heater_info whi ON eca.heater_id = whi.id    WHERE eca.total_energy_consumed > 10000  ) SELECT    heater_id,    total_energy_consumed,    power_rating,    heating_time,    (Q_used / Q_input) * 100 AS thermal_efficiency,    CASE      WHEN (Q_used / Q_input) * 100 > 100 THEN '数据异常：热效率超过100%，需检查数据或设备。'      WHEN total_energy_consumed > 100000 THEN '数据异常：总能耗远超正常范围，需检查设备或数据记录。'      ELSE '数据正常。'    END AS data_analysis  FROM extreme_conditions;	water_heater	4
WITH FilteredWaterHeaters AS (     SELECT brand, model, energy_efficiency_rating, weight, power_rating      FROM water_heater_info      WHERE power_rating > 3 AND capacity > 50      ORDER BY power_rating DESC      LIMIT 5 )  SELECT brand, model, energy_efficiency_rating, AVG(weight) AS average_weight  FROM FilteredWaterHeaters  GROUP BY brand, model, energy_efficiency_rating;	water_heater	1
WITH FilteredWaterHeaters AS (     SELECT brand, model, warranty_period, manufacture_date, price      FROM water_heater_info      WHERE warranty_period > 24      ORDER BY manufacture_date DESC      LIMIT 5 )  SELECT brand, model, warranty_period, AVG(price) AS average_price  FROM FilteredWaterHeaters  GROUP BY brand, model, warranty_period;	water_heater	2
WITH FilteredWaterHeaters AS (   SELECT brand, model, price, capacity    FROM water_heater_info    WHERE price < 3000 AND energy_efficiency_rating = '1'    ORDER BY price ASC    LIMIT 5 )  SELECT brand, model, price, AVG(capacity) AS average_capacity  FROM FilteredWaterHeaters  GROUP BY brand, model, price;	water_heater	3
WITH IncreasedPriceWaterHeaters AS (     SELECT brand, model, price + 1000 AS new_price, weight      FROM water_heater_info      WHERE price + 1000 > 5000      ORDER BY new_price ASC      LIMIT 5 )  SELECT brand, model, new_price, AVG(weight) AS average_weight  FROM IncreasedPriceWaterHeaters  GROUP BY brand, model, new_price;	water_heater	4
WITH HighEnergyUsageRecords AS (   SELECT heater_id, usage_date, energy_consumed, water_used    FROM water_heater_usage    WHERE energy_consumed > 10    ORDER BY energy_consumed DESC    LIMIT 5 )  SELECT heater_id, usage_date, energy_consumed, AVG(water_used) AS average_water_used  FROM HighEnergyUsageRecords  GROUP BY heater_id, usage_date, energy_consumed;	water_heater	1
WITH HighTemperatureSetRecords AS (     SELECT heater_id, usage_date, temperature_set, ambient_temperature      FROM water_heater_usage      WHERE temperature_set > 60      ORDER BY temperature_set DESC      LIMIT 5 )  SELECT heater_id, usage_date, temperature_set, AVG(ambient_temperature) AS average_ambient_temperature  FROM HighTemperatureSetRecords  GROUP BY heater_id, usage_date, temperature_set;	water_heater	2
WITH HighWaterUsageRecords AS (     SELECT heater_id, usage_date, water_used, energy_consumed      FROM water_heater_usage      WHERE water_used > 100      ORDER BY water_used ASC      LIMIT 5 ) SELECT heater_id, usage_date, water_used, AVG(energy_consumed) AS average_energy_consumed  FROM HighWaterUsageRecords  GROUP BY heater_id, usage_date, water_used;	water_heater	3
WITH IncreasedEnergyConsumptionRecords AS (     SELECT heater_id, usage_date, energy_consumed + 5 AS new_energy_consumed, water_used      FROM water_heater_usage      WHERE energy_consumed + 5 > 20      ORDER BY new_energy_consumed ASC      LIMIT 5 )  SELECT heater_id, usage_date, new_energy_consumed, AVG(water_used) AS average_water_used  FROM IncreasedEnergyConsumptionRecords  GROUP BY heater_id, usage_date, new_energy_consumed;	water_heater	4
WITH HighTotalEnergyRecords AS (     SELECT heater_id, analysis_date, total_energy_consumed, average_daily_energy      FROM energy_consumption_analysis      WHERE total_energy_consumed > 100      ORDER BY total_energy_consumed DESC      LIMIT 5 )  SELECT heater_id, analysis_date, total_energy_consumed, AVG(average_daily_energy) AS average_daily_energy  FROM HighTotalEnergyRecords  GROUP BY heater_id, analysis_date, total_energy_consumed;	water_heater	1
WITH HighPeakEnergyRecords AS (     SELECT heater_id, analysis_date, peak_energy_value, low_energy_value      FROM energy_consumption_analysis      WHERE peak_energy_value > 50      ORDER BY peak_energy_value DESC      LIMIT 5 )  SELECT heater_id, analysis_date, peak_energy_value, AVG(low_energy_value) AS average_low_energy_value  FROM HighPeakEnergyRecords  GROUP BY heater_id, analysis_date, peak_energy_value;	water_heater	2
WITH HighEnergyCostRecords AS (     SELECT heater_id, analysis_date, energy_cost, total_energy_consumed      FROM energy_consumption_analysis      WHERE energy_cost > 50      ORDER BY energy_cost ASC      LIMIT 5 )  SELECT heater_id, analysis_date, energy_cost, AVG(total_energy_consumed) AS average_total_energy_consumed  FROM HighEnergyCostRecords  GROUP BY heater_id, analysis_date, energy_cost;	water_heater	3
WITH IncreasedTotalEnergyRecords AS (     SELECT heater_id, analysis_date, total_energy_consumed + 50 AS new_total_energy_consumed, energy_cost      FROM energy_consumption_analysis      WHERE total_energy_consumed + 50 > 200      ORDER BY new_total_energy_consumed ASC      LIMIT 5 )  SELECT heater_id, analysis_date, new_total_energy_consumed, AVG(energy_cost) AS average_energy_cost  FROM IncreasedTotalEnergyRecords  GROUP BY heater_id, analysis_date, new_total_energy_consumed;	water_heater	4
WITH HighAmbientTemperatureRecords AS (   SELECT heater_id, record_date, ambient_temperature, humidity    FROM environment_data    WHERE ambient_temperature > 30    ORDER BY ambient_temperature DESC    LIMIT 5 )  SELECT heater_id, record_date, ambient_temperature, AVG(humidity) AS average_humidity  FROM HighAmbientTemperatureRecords  GROUP BY heater_id, record_date, ambient_temperature;	water_heater	1
WITH HighWaterPressureRecords AS (     SELECT heater_id, record_date, water_pressure, wind_speed      FROM environment_data      WHERE water_pressure > 3      ORDER BY water_pressure ASC      LIMIT 5 )  SELECT heater_id, record_date, water_pressure, AVG(wind_speed) AS average_wind_speed  FROM HighWaterPressureRecords  GROUP BY heater_id, record_date, water_pressure;	water_heater	2
WITH HighSolarRadiationRecords AS (   SELECT heater_id, record_date, solar_radiation, water_inlet_temperature    FROM environment_data    WHERE solar_radiation > 500    ORDER BY solar_radiation DESC    LIMIT 5 )  SELECT heater_id, record_date, solar_radiation, AVG(water_inlet_temperature) AS average_water_inlet_temperature  FROM HighSolarRadiationRecords  GROUP BY heater_id, record_date, solar_radiation;	water_heater	3
WITH IncreasedAmbientTemperatureRecords AS (     SELECT heater_id, record_date, ambient_temperature + 10 AS new_ambient_temperature, air_pressure      FROM environment_data      WHERE ambient_temperature + 10 > 40      ORDER BY new_ambient_temperature ASC      LIMIT 5 )  SELECT heater_id, record_date, new_ambient_temperature, AVG(air_pressure) AS average_air_pressure  FROM IncreasedAmbientTemperatureRecords  GROUP BY heater_id, record_date, new_ambient_temperature;	water_heater	4
WITH FilteredUsageRecords AS (   SELECT u.heater_id, u.usage_date, u.energy_consumed, u.water_used    FROM water_heater_usage u    JOIN environment_data e ON u.heater_id = e.heater_id AND u.usage_date = e.record_date    WHERE u.energy_consumed > 10 AND e.ambient_temperature > 25    ORDER BY u.energy_consumed DESC    LIMIT 5 )  SELECT heater_id, usage_date, energy_consumed, AVG(water_used) AS average_water_used  FROM FilteredUsageRecords  GROUP BY heater_id, usage_date, energy_consumed;	water_heater	1
WITH FilteredEnergyRecords AS (     SELECT a.heater_id, a.analysis_date, a.total_energy_consumed, a.average_daily_energy, i.brand      FROM energy_consumption_analysis a      JOIN water_heater_info i ON a.heater_id = i.id      WHERE a.total_energy_consumed > 100 AND i.energy_efficiency_rating = '1'      ORDER BY a.total_energy_consumed DESC      LIMIT 5 )  SELECT brand, heater_id, analysis_date, total_energy_consumed, AVG(average_daily_energy) AS average_daily_energy  FROM FilteredEnergyRecords  GROUP BY brand, heater_id, analysis_date, total_energy_consumed;	water_heater	2
WITH SatisfiedFeedbackRecords AS (     SELECT heater_id, usage_date, user_feedback, energy_consumed      FROM water_heater_usage      WHERE user_feedback LIKE '%满意%'      ORDER BY usage_date DESC      LIMIT 5 )  SELECT heater_id, usage_date, user_feedback, AVG(energy_consumed) AS average_energy_consumed  FROM SatisfiedFeedbackRecords  GROUP BY heater_id, usage_date, user_feedback;	water_heater	3
WITH IncreasedPowerRatingModels AS (   SELECT brand, model, power_rating + 2 AS new_power_rating, price    FROM water_heater_info    WHERE power_rating + 2 > 5 AND capacity > 50    ORDER BY new_power_rating ASC    LIMIT 5 )  SELECT brand, model, new_power_rating, AVG(price) AS average_price  FROM IncreasedPowerRatingModels  GROUP BY brand, model, new_power_rating;	water_heater	4
SELECT u.heater_id, u.usage_date, a.peak_energy_value FROM water_heater_usage u JOIN energy_consumption_analysis a ON u.heater_id = a.heater_id WHERE u.user_feedback LIKE '%高效%' AND a.peak_energy_value > 50 ORDER BY a.peak_energy_value DESC LIMIT 5; SELECT u.heater_id, AVG(e.ambient_temperature) AS avg_ambient_temp FROM water_heater_usage u JOIN environment_data e ON u.heater_id = e.heater_id AND u.usage_date = e.record_date WHERE u.user_feedback LIKE '%高效%' AND a.peak_energy_value > 50 GROUP BY u.heater_id;	water_heater	1
SELECT a.heater_id, a.analysis_date, a.energy_cost FROM energy_consumption_analysis a JOIN water_heater_usage u ON a.heater_id = u.heater_id WHERE a.energy_cost > 50 AND u.user_feedback LIKE '%节能%' ORDER BY a.energy_cost ASC LIMIT 5;   SELECT i.brand, AVG(a.total_energy_consumed) AS avg_total_energy FROM energy_consumption_analysis a JOIN water_heater_info i ON a.heater_id = i.id JOIN water_heater_usage u ON a.heater_id = u.heater_id WHERE a.energy_cost > 50 AND u.user_feedback LIKE '%节能%' GROUP BY i.brand;	water_heater	2
SELECT e.heater_id, e.record_date, e.solar_radiation FROM environment_data e JOIN water_heater_usage u ON e.heater_id = u.heater_id AND e.record_date = u.usage_date WHERE e.solar_radiation > 500 AND u.user_feedback LIKE '%舒适%' ORDER BY e.solar_radiation DESC LIMIT 5;  SELECT e.heater_id, AVG(e.water_inlet_temperature) AS avg_inlet_temp FROM environment_data e JOIN water_heater_usage u ON e.heater_id = u.heater_id AND e.record_date = u.usage_date WHERE e.solar_radiation > 500 AND u.user_feedback LIKE '%舒适%' GROUP BY e.heater_id;	water_heater	3
SELECT i.model, i.power_rating + 3 AS new_power_rating FROM water_heater_info i JOIN water_heater_usage u ON i.id = u.heater_id WHERE i.power_rating + 3 > 7 AND u.user_feedback LIKE '%强劲%' ORDER BY new_power_rating ASC LIMIT 5; SELECT i.brand, AVG(i.price) AS avg_price FROM water_heater_info i JOIN water_heater_usage u ON i.id = u.heater_id WHERE i.power_rating + 3 > 7 AND u.user_feedback LIKE '%强劲%' GROUP BY i.brand;	water_heater	4
WITH HeatingEfficiency AS (     SELECT i.id, i.brand, i.model, i.capacity, i.power_rating, i.heating_time,             e.water_inlet_temperature, e.water_outlet_temperature,             (i.capacity * 4.18 * (e.water_outlet_temperature - e.water_inlet_temperature)) / (i.power_rating * (i.heating_time / 60.0)) * 100.0 AS heating_efficiency      FROM water_heater_info i      JOIN environment_data e ON i.id = e.heater_id      WHERE i.brand = 'A' AND e.ambient_temperature = 25 )  SELECT id, brand, model, heating_efficiency  FROM HeatingEfficiency  ORDER BY heating_efficiency DESC  LIMIT 5;	water_heater	1
WITH DailyEnergyCost AS (   SELECT      i.brand,      AVG(a.average_daily_energy * 0.6) AS daily_energy_cost    FROM water_heater_info i    JOIN energy_consumption_analysis a ON i.id = a.heater_id    GROUP BY i.brand )  SELECT brand, daily_energy_cost  FROM DailyEnergyCost  ORDER BY daily_energy_cost ASC  LIMIT 3;	water_heater	2
WITH TotalEnergyCost AS (     SELECT i.id, i.model, i.brand, a.total_energy_consumed * 0.6 AS total_energy_cost      FROM water_heater_info i      JOIN energy_consumption_analysis a ON i.id = a.heater_id      WHERE i.energy_efficiency_rating = '1' )  SELECT id, model, brand, total_energy_cost  FROM TotalEnergyCost  ORDER BY total_energy_cost DESC  LIMIT 10;	water_heater	3
WITH ExtremeHeatingEfficiency AS (     SELECT          i.id,          i.model,          i.brand,          i.capacity,          10000 AS power_rating,          0.1 AS heating_time,          -80 AS water_inlet_temperature,          200 AS water_outlet_temperature,          (i.capacity * 4.18 * (200 - (-80))) / (10000 * (0.1 / 60.0)) * 100.0 AS heating_efficiency      FROM water_heater_info i )  SELECT id, model, brand, heating_efficiency  FROM ExtremeHeatingEfficiency  ORDER BY heating_efficiency DESC  LIMIT 1;	water_heater	4
WITH HeatingTimeDeviation AS (   SELECT      i.id,      i.model,      i.brand,      i.capacity,      i.power_rating,      i.heating_time,      e.water_inlet_temperature,      e.water_outlet_temperature,      ABS(i.heating_time - ((i.capacity * 4.18 * (e.water_outlet_temperature - e.water_inlet_temperature)) / i.power_rating)) / ((i.capacity * 4.18 * (e.water_outlet_temperature - e.water_inlet_temperature)) / i.power_rating) * 100 AS deviation_percentage    FROM water_heater_info i    JOIN environment_data e ON i.id = e.heater_id    WHERE i.model LIKE '%X200%' AND e.ambient_temperature = 30 )  SELECT id, model, brand, deviation_percentage  FROM HeatingTimeDeviation  ORDER BY deviation_percentage ASC  LIMIT 5;	water_heater	1
WITH EnergyDifference AS (     SELECT i.brand, MAX(a.peak_energy_value - a.low_energy_value) AS energy_difference      FROM water_heater_info i      JOIN energy_consumption_analysis a ON i.id = a.heater_id      GROUP BY i.brand )  SELECT brand, energy_difference  FROM EnergyDifference  ORDER BY energy_difference DESC  LIMIT 3;	water_heater	2
WITH EnergyCostRatio AS (     SELECT          i.id,          i.model,          i.brand,          (a.total_energy_consumed * 0.6) / i.price AS energy_cost_ratio      FROM          water_heater_info i      JOIN          energy_consumption_analysis a ON i.id = a.heater_id      WHERE          i.warranty_period > 24 ) SELECT      id,      model,      brand,      energy_cost_ratio  FROM      EnergyCostRatio  ORDER BY      energy_cost_ratio ASC  LIMIT 10;	water_heater	3
WITH ExtremeHeatingEfficiency AS (     SELECT          i.id,          i.model,          i.brand,          10000 AS capacity,          5000 AS power_rating,          i.heating_time,          -150 AS water_inlet_temperature,          300 AS water_outlet_temperature,          (10000 * 4.18 * (300 - (-150))) / (5000 * (CAST(i.heating_time AS REAL) / 60)) * 100 AS heating_efficiency      FROM water_heater_info i )  SELECT id, model, brand, heating_efficiency  FROM ExtremeHeatingEfficiency  ORDER BY heating_efficiency DESC  LIMIT 1;	water_heater	4
SELECT (Hourly_Output / (Rated_Power * 1)) * 100 AS Efficiency FROM energy_output JOIN wind_turbines ON energy_output.Turbine_ID = wind_turbines.Turbine_ID WHERE wind_turbines.Rated_Power = 2000 AND energy_output.Hourly_Output = 1800;	wind_turbine	1
SELECT Turbine_ID, Hourly_Output, (Hourly_Output / (SELECT SUM(Hourly_Output) FROM energy_output WHERE Turbine_ID IN (SELECT Turbine_ID FROM wind_turbines LIMIT 10))) * 100 AS Percentage FROM energy_output WHERE Turbine_ID IN (SELECT Turbine_ID FROM wind_turbines LIMIT 10);	wind_turbine	2
SELECT w.Turbine_ID, w.Wind_Speed, e.Hourly_Output, m.Maintenance_Type, m.Description  FROM weather_data w  JOIN energy_output e ON w.Turbine_ID = e.Turbine_ID AND w.Date = e.Date  LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID  WHERE w.Wind_Speed > (SELECT Cut_In_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)    AND w.Wind_Speed < (SELECT Cut_Out_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)    AND e.Hourly_Output = 0;	wind_turbine	3
SELECT e.Turbine_ID, e.Hourly_Output, w.Rated_Power, (e.Hourly_Output / w.Rated_Power) * 100 AS Efficiency  FROM energy_output e  JOIN wind_turbines w ON e.Turbine_ID = w.Turbine_ID  WHERE e.Hourly_Output = 100000 AND w.Rated_Power = 2000;	wind_turbine	4
SELECT Turbine_ID, Daily_Output, (Daily_Output / 24) AS Average_Power FROM energy_output WHERE Daily_Output = 48000;	wind_turbine	1
SELECT Turbine_ID, Daily_Output, (Daily_Output * 100.0 / (SELECT SUM(Daily_Output) FROM energy_output WHERE Daily_Output IN (40000, 42000, 44000, 46000, 48000))) AS Percentage FROM energy_output WHERE Daily_Output IN (40000, 42000, 44000, 46000, 48000);	wind_turbine	2
SELECT w.Turbine_ID, w.Wind_Speed, e.Daily_Output, m.Maintenance_Type, m.Description  FROM weather_data w  JOIN energy_output e ON w.Turbine_ID = e.Turbine_ID AND w.Date = e.Date  LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID  WHERE w.Wind_Speed > (SELECT Cut_In_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)  AND w.Wind_Speed < (SELECT Cut_Out_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)  AND e.Daily_Output = 0;	wind_turbine	3
SELECT e.Turbine_ID, e.Daily_Output, w.Rated_Power, (e.Daily_Output / 24) AS Average_Power FROM energy_output e JOIN wind_turbines w ON e.Turbine_ID = w.Turbine_ID WHERE e.Daily_Output = 1000000 AND w.Rated_Power = 2000;	wind_turbine	4
SELECT Turbine_ID, Monthly_Output, (Monthly_Output / (30 * 24)) AS Average_Power FROM energy_output WHERE Monthly_Output = 1440000;	wind_turbine	1
SELECT Turbine_ID, Monthly_Output, (Monthly_Output * 100.0 / (SELECT SUM(Monthly_Output) FROM energy_output WHERE Monthly_Output IN (1200000, 1300000, 1400000, 1500000, 1600000))) AS Percentage FROM energy_output WHERE Monthly_Output IN (1200000, 1300000, 1400000, 1500000, 1600000);	wind_turbine	2
SELECT w.Turbine_ID, w.Wind_Speed, e.Monthly_Output, m.Maintenance_Type, m.Description  FROM weather_data w  JOIN energy_output e ON w.Turbine_ID = e.Turbine_ID AND w.Date = e.Date  LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID  WHERE w.Wind_Speed > (SELECT Cut_In_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)    AND w.Wind_Speed < (SELECT Cut_Out_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)    AND e.Monthly_Output = 0;	wind_turbine	3
SELECT e.Turbine_ID, e.Monthly_Output, w.Rated_Power, (e.Monthly_Output / (30 * 24)) AS Average_Power FROM energy_output e JOIN wind_turbines w ON e.Turbine_ID = w.Turbine_ID WHERE e.Monthly_Output = 100000000 AND w.Rated_Power = 2000;	wind_turbine	4
SELECT Turbine_ID, Annual_Output, (Annual_Output / (365 * 24)) AS Average_Power FROM energy_output WHERE Annual_Output = 17520000;	wind_turbine	1
SELECT Turbine_ID, Annual_Output, (Annual_Output * 100.0 / (SELECT SUM(Annual_Output) FROM energy_output WHERE Annual_Output IN (15000000, 16000000, 17000000, 18000000, 19000000))) AS Percentage FROM energy_output WHERE Annual_Output IN (15000000, 16000000, 17000000, 18000000, 19000000);	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Wind_Speed) AS Avg_Wind_Speed, e.Annual_Output, m.Maintenance_Type, m.Description  FROM weather_data w  JOIN energy_output e ON w.Turbine_ID = e.Turbine_ID AND strftime('%Y', w.Date) = strftime('%Y', e.Date)  LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID  WHERE e.Annual_Output = 0  AND w.Wind_Speed > (SELECT Cut_In_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)  AND w.Wind_Speed < (SELECT Cut_Out_Wind_Speed FROM wind_turbines WHERE Turbine_ID = w.Turbine_ID)  GROUP BY w.Turbine_ID, e.Annual_Output, m.Maintenance_Type, m.Description;	wind_turbine	3
SELECT e.Turbine_ID, e.Annual_Output, w.Rated_Power, (e.Annual_Output / (365 * 24)) AS Average_Power FROM energy_output e JOIN wind_turbines w ON e.Turbine_ID = w.Turbine_ID WHERE e.Annual_Output = 1000000000 AND w.Rated_Power = 2000;	wind_turbine	4
SELECT m.Turbine_ID, m.Cost, e.Annual_Output, (m.Cost / e.Annual_Output) AS Cost_Per_kWh FROM maintenance_logs m JOIN energy_output e ON m.Turbine_ID = e.Turbine_ID WHERE m.Cost = 5000 AND e.Annual_Output = 17520000;	wind_turbine	1
SELECT m.Turbine_ID, m.Cost, e.Annual_Output, (m.Cost * 1.0 / e.Annual_Output) AS Cost_Per_kWh, (SELECT SUM(Cost) FROM maintenance_logs WHERE Cost IN (4000, 4500, 5000, 5500, 6000)) AS Total_Maintenance_Cost, (SELECT SUM(Annual_Output) FROM energy_output WHERE Annual_Output IN (15000000, 16000000, 17000000, 18000000, 19000000)) AS Total_Annual_Output FROM maintenance_logs m JOIN energy_output e ON m.Turbine_ID = e.Turbine_ID WHERE m.Cost IN (4000, 4500, 5000, 5500, 6000) AND e.Annual_Output IN (15000000, 16000000, 17000000, 18000000, 19000000);	wind_turbine	2
SELECT m.Turbine_ID, m.Cost, e.Annual_Output, m.Maintenance_Type, m.Description FROM maintenance_logs m JOIN energy_output e ON m.Turbine_ID = e.Turbine_ID WHERE m.Cost = 0 AND e.Annual_Output = 17520000;	wind_turbine	3
SELECT m.Turbine_ID, m.Cost, e.Annual_Output, (m.Cost * 1.0 / e.Annual_Output) AS Cost_Per_kWh FROM maintenance_logs m JOIN energy_output e ON m.Turbine_ID = e.Turbine_ID WHERE m.Cost = 1000000 AND e.Annual_Output = 17520000;	wind_turbine	4
SELECT Revenue / Production_Volume_Total AS Average_Revenue_Contribution FROM manufacturers WHERE Revenue = 1000000000 AND Production_Volume_Total = 1000;	wind_turbine	1
SELECT Turbine_ID, Annual_Output * 0.1 AS Revenue, (Annual_Output * 0.1) / total_revenue * 100 AS Revenue_Percentage, total_revenue FROM energy_output, (SELECT SUM(Annual_Output * 0.1) AS total_revenue FROM energy_output WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) AS total WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID');	wind_turbine	2
SELECT Name, Revenue, Production_Volume_Total FROM manufacturers WHERE Revenue = 0 AND Production_Volume_Total = 1000;	wind_turbine	3
SELECT Name, Revenue / Production_Volume_Total AS Average_Revenue_Contribution FROM manufacturers WHERE Revenue = 1000000000000 AND Production_Volume_Total = 1000;	wind_turbine	4
SELECT Production_Volume_Total * 200 AS Total_Weight FROM manufacturers WHERE Production_Volume_Total = 1000;	wind_turbine	1
SELECT e.Turbine_ID, e.Annual_Output, w.Weight,         (e.Annual_Output * 100.0 / (SELECT SUM(Annual_Output) FROM energy_output WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID'))) AS Output_Percentage,         (w.Weight * 100.0 / (SELECT SUM(Weight) FROM wind_turbines WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID'))) AS Weight_Percentage,         (SELECT SUM(Annual_Output) FROM energy_output WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) AS Total_Annual_Output,         (SELECT SUM(Weight) FROM wind_turbines WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) AS Total_Weight  FROM energy_output e  JOIN wind_turbines w ON e.Turbine_ID = w.Turbine_ID  WHERE e.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID');	wind_turbine	2
SELECT Name, Revenue, Production_Volume_Total FROM manufacturers WHERE Production_Volume_Total = 0 AND Revenue = 1000000000;	wind_turbine	3
SELECT Name, Production_Volume_Total * 200 AS Total_Weight FROM manufacturers WHERE Production_Volume_Total = 1000000;	wind_turbine	4
SELECT Name, Revenue * (Profit_Margin / 100) AS Annual_Profit FROM manufacturers WHERE Revenue = 1000000000 AND Profit_Margin = 20;	wind_turbine	1
SELECT e.Turbine_ID,         e.Annual_Output,         m.Profit_Margin,         (e.Annual_Output * 100.0 / (SELECT SUM(Annual_Output) FROM energy_output WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID'))) AS Output_Percentage,         (e.Annual_Output * (m.Profit_Margin / 100.0)) AS Annual_Profit,         (e.Annual_Output * (m.Profit_Margin / 100.0) * 100.0 / (SELECT SUM(e2.Annual_Output * (m2.Profit_Margin / 100.0)) FROM energy_output e2 JOIN manufacturers m2 ON e2.Turbine_ID = m2.Manufacturer_ID WHERE e2.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID'))) AS Profit_Percentage,         (SELECT SUM(Annual_Output) FROM energy_output WHERE Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) AS Total_Annual_Output,         (SELECT SUM(e2.Annual_Output * (m2.Profit_Margin / 100.0)) FROM energy_output e2 JOIN manufacturers m2 ON e2.Turbine_ID = m2.Manufacturer_ID WHERE e2.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) AS Total_Annual_Profit  FROM energy_output e  JOIN manufacturers m ON e.Turbine_ID = m.Manufacturer_ID  WHERE e.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID');	wind_turbine	2
SELECT Name, Revenue, Profit_Margin FROM manufacturers WHERE Profit_Margin = 0 AND Revenue = 1000000000;	wind_turbine	3
SELECT Name, Revenue * (Profit_Margin / 100.0) AS Annual_Profit FROM manufacturers WHERE Profit_Margin = 1000 AND Revenue = 1000000000;	wind_turbine	4
SELECT Rated_Power * (Capacity_Factor / 100) AS Actual_Average_Power_Output FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE Capacity_Factor = 30 AND Rated_Power = 2000;	wind_turbine	1
SELECT p.Turbine_ID,         w.Rated_Power * (p.Capacity_Factor / 100.0) AS Actual_Power_Output,         (w.Rated_Power * (p.Capacity_Factor / 100.0)) / (SELECT SUM(w2.Rated_Power * (p2.Capacity_Factor / 100.0)) FROM performance_metrics p2 JOIN wind_turbines w2 ON p2.Turbine_ID = w2.Turbine_ID WHERE p2.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) * 100.0 AS Power_Percentage,         (SELECT SUM(w2.Rated_Power * (p2.Capacity_Factor / 100.0)) FROM performance_metrics p2 JOIN wind_turbines w2 ON p2.Turbine_ID = w2.Turbine_ID WHERE p2.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID')) AS Total_Actual_Power_Output  FROM performance_metrics p  JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID  WHERE p.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID');	wind_turbine	2
SELECT p.Turbine_ID, w.Rated_Power, p.Capacity_Factor FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Capacity_Factor = 0 AND w.Rated_Power = 2000;	wind_turbine	3
SELECT p.Turbine_ID, w.Rated_Power * (p.Capacity_Factor / 100.0) AS Actual_Average_Power_Output FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Capacity_Factor = 1000 AND w.Rated_Power = 2000;	wind_turbine	4
SELECT 8760 * (Availability / 100.0) AS Available_Time FROM performance_metrics WHERE Availability = 95;	wind_turbine	1
WITH Availability_Data AS (   SELECT      p.Turbine_ID,      8760 * (p.Availability / 100.0) AS Available_Time,      w.Rated_Power    FROM performance_metrics p    JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID    WHERE p.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID') ), Total_Data AS (   SELECT      SUM(Available_Time) AS Total_Available_Time,      SUM(Rated_Power) AS Total_Rated_Power    FROM Availability_Data ) SELECT    a.Turbine_ID,    a.Available_Time,    a.Rated_Power,    (a.Available_Time / t.Total_Available_Time) * 100 AS Availability_Percentage,    (a.Rated_Power / t.Total_Rated_Power) * 100 AS Rated_Power_Percentage,    t.Total_Available_Time,    t.Total_Rated_Power  FROM Availability_Data a, Total_Data t;	wind_turbine	2
SELECT p.Turbine_ID, w.Rated_Power, p.Availability FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Availability = 0 AND w.Rated_Power = 2000;	wind_turbine	3
SELECT 8760 * (Availability / 100) AS Available_Time FROM performance_metrics WHERE Availability = 1000;	wind_turbine	4
SELECT (Blade_Tip_Speed * 60) / (3.141592653589793 * Rotor_Diameter) AS Rotor_Speed FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE Blade_Tip_Speed = 80 AND Rotor_Diameter = 100;	wind_turbine	1
WITH Rotor_Speed_Data AS (     SELECT p.Turbine_ID, (p.Blade_Tip_Speed * 60) / (PI() * w.Rotor_Diameter) AS Rotor_Speed      FROM performance_metrics p      JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID      WHERE p.Turbine_ID IN ('发电机1ID', '发电机2ID', '发电机3ID', '发电机4ID', '发电机5ID') ),  Total_Rotor_Speed AS (     SELECT SUM(Rotor_Speed) AS Total_Rotor_Speed      FROM Rotor_Speed_Data )  SELECT r.Turbine_ID, r.Rotor_Speed, (r.Rotor_Speed / t.Total_Rotor_Speed) * 100 AS Rotor_Speed_Percentage, t.Total_Rotor_Speed  FROM Rotor_Speed_Data r, Total_Rotor_Speed t;	wind_turbine	2
SELECT p.Turbine_ID, w.Rotor_Diameter, p.Blade_Tip_Speed FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Blade_Tip_Speed = 0 AND w.Rotor_Diameter = 100;	wind_turbine	3
SELECT (Blade_Tip_Speed * 60) / (3.141592653589793 * Rotor_Diameter) AS Rotor_Speed FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Blade_Tip_Speed = 1000 AND w.Rotor_Diameter = 100;	wind_turbine	4
SELECT w.Turbine_ID, w.Wind_Speed, p.Noise_Level, 20 * LOG10(p.Noise_Level / 20.0) AS SPL FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID WHERE w.Wind_Speed = 10;	wind_turbine	1
SELECT e.Turbine_ID, SUM(e.Daily_Output) AS Annual_Energy_Output, AVG(w.Wind_Speed) AS Avg_Wind_Speed  FROM energy_output e  JOIN weather_data w ON e.Turbine_ID = w.Turbine_ID AND e.Date = w.Date  WHERE strftime('%Y', e.Date) = '2023'  GROUP BY e.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Temperature) AS Avg_Temperature, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Temperature > 30 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT p.Turbine_ID, p.Noise_Level, w.Location, w.Latitude, w.Longitude, CASE WHEN p.Noise_Level >= 200 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN p.Noise_Level >= 120 THEN 'High Impact: Potential hearing damage and significant disturbance' ELSE 'Normal Impact: Within acceptable noise levels' END AS Impact_Assessment FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Noise_Level >= 200;	wind_turbine	4
SELECT w.Turbine_ID, w.Wind_Speed, p.Vibration_Level, t.Weight, 0.5 * t.Weight * (p.Vibration_Level * p.Vibration_Level) AS Vibration_Energy  FROM weather_data w  JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID  JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID  WHERE w.Wind_Speed = 10;	wind_turbine	1
SELECT w.Turbine_ID, SUM(0.5 * t.Weight * p.Vibration_Level * p.Vibration_Level) AS Total_Vibration_Energy, AVG(w.Wind_Speed) AS Avg_Wind_Speed FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Temperature) AS Avg_Temperature, AVG(p.Vibration_Level) AS Avg_Vibration_Level, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Temperature < 0 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT p.Turbine_ID, p.Vibration_Level, w.Location, w.Latitude, w.Longitude, CASE WHEN p.Vibration_Level >= 1000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN p.Vibration_Level >= 50 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable vibration levels' END AS Impact_Assessment FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Vibration_Level >= 1000;	wind_turbine	4
SELECT w.Turbine_ID, w.Temperature, t.Rotor_Diameter, t.Blade_Material, (t.Rotor_Diameter * 0.000012 * (w.Temperature - 20)) AS Thermal_Expansion FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Temperature > 40;	wind_turbine	1
SELECT w.Turbine_ID, SUM(t.Rotor_Diameter * 0.000012 * (w.Temperature - 20)) AS Total_Thermal_Expansion, AVG(w.Temperature) AS Avg_Temperature FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Temperature) AS Avg_Temperature, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Temperature < 0 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT p.Turbine_ID, p.Temperature_Rating, w.Location, w.Latitude, w.Longitude, CASE WHEN p.Temperature_Rating >= 1000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN p.Temperature_Rating >= 40 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable temperature range' END AS Impact_Assessment FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Temperature_Rating >= 1000;	wind_turbine	4
SELECT w.Turbine_ID, w.Wind_Speed, t.Weight, 0.5 * t.Weight * (w.Wind_Speed * w.Wind_Speed) AS Kinetic_Energy FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Wind_Speed = 10;	wind_turbine	1
SELECT w.Turbine_ID, SUM(0.5 * t.Weight * POWER(w.Wind_Speed, 2)) AS Total_Kinetic_Energy, AVG(w.Wind_Speed) AS Avg_Wind_Speed FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Wind_Speed) AS Avg_Wind_Speed, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Wind_Speed < 5 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT w.Turbine_ID, w.Wind_Speed, t.Location, t.Latitude, t.Longitude, CASE WHEN w.Wind_Speed >= 1000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN w.Wind_Speed >= 25 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable wind speed range' END AS Impact_Assessment FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Wind_Speed >= 1000;	wind_turbine	4
SELECT w.Turbine_ID, w.Wind_Speed, w.Wind_Direction, t.Model, w.Wind_Speed * COS(w.Wind_Direction * PI() / 180.0) AS Effective_Wind_Speed FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Wind_Direction = 90;	wind_turbine	1
SELECT w.Turbine_ID, SUM(w.Wind_Speed * COS(w.Wind_Direction * PI() / 180)) AS Total_Effective_Wind_Speed, AVG(w.Wind_Direction) AS Avg_Wind_Direction FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, COUNT(DISTINCT w.Wind_Direction) AS Wind_Direction_Changes, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID HAVING COUNT(DISTINCT w.Wind_Direction) > 50;	wind_turbine	3
SELECT w.Turbine_ID, COUNT(DISTINCT w.Wind_Direction) AS Wind_Direction_Changes, t.Location, t.Latitude, t.Longitude, CASE WHEN COUNT(DISTINCT w.Wind_Direction) >= 1000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN COUNT(DISTINCT w.Wind_Direction) >= 50 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable wind direction change range' END AS Impact_Assessment FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE date(w.Date) = '2023-10-01' GROUP BY w.Turbine_ID HAVING COUNT(DISTINCT w.Wind_Direction) >= 1000;	wind_turbine	4
SELECT w.Turbine_ID, w.Temperature, t.Rotor_Diameter, t.Blade_Material, (t.Rotor_Diameter * 0.000012 * (w.Temperature - 20)) AS Thermal_Expansion FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Temperature > 40;	wind_turbine	1
SELECT w.Turbine_ID, SUM(t.Rotor_Diameter * 0.000012 * (w.Temperature - 20)) AS Total_Thermal_Expansion, AVG(w.Temperature) AS Avg_Temperature FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Temperature) AS Avg_Temperature, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Temperature < 0 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT p.Turbine_ID, p.Temperature_Rating, w.Location, w.Latitude, w.Longitude, CASE WHEN p.Temperature_Rating >= 1000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN p.Temperature_Rating >= 40 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable temperature range' END AS Impact_Assessment FROM performance_metrics p JOIN wind_turbines w ON p.Turbine_ID = w.Turbine_ID WHERE p.Temperature_Rating >= 1000;	wind_turbine	4
SELECT w.Turbine_ID, w.Air_Pressure, w.Temperature, w.Humidity, (w.Air_Pressure * 0.02897) / (8.314 * (w.Temperature + 273.15)) AS Air_Density FROM weather_data w WHERE w.Air_Pressure = 1013;	wind_turbine	1
SELECT w.Turbine_ID, SUM((w.Air_Pressure * 0.02897) / (8.314 * (w.Temperature + 273.15))) AS Total_Air_Density_Change, AVG(w.Air_Pressure) AS Avg_Air_Pressure FROM weather_data w WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Air_Pressure) AS Avg_Air_Pressure, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Air_Pressure < 1000 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT w.Turbine_ID, w.Air_Pressure, t.Location, t.Latitude, t.Longitude, CASE WHEN w.Air_Pressure >= 10000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN w.Air_Pressure >= 1100 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable air pressure range' END AS Impact_Assessment FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Air_Pressure >= 10000;	wind_turbine	4
SELECT w.Turbine_ID, w.Rainfall, t.Rotor_Diameter, (w.Rainfall * 1000 * 1) / (PI() * POWER(t.Rotor_Diameter / 2, 2)) AS Water_Film_Thickness FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Rainfall = 50;	wind_turbine	1
SELECT w.Turbine_ID, SUM((w.Rainfall * 1000 * 1) / (PI() * POWER(t.Rotor_Diameter / 2, 2))) AS Total_Water_Film_Thickness_Change, AVG(w.Rainfall) AS Avg_Rainfall FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Rainfall) AS Avg_Rainfall, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Rainfall > 50 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT w.Turbine_ID, w.Rainfall, t.Location, t.Latitude, t.Longitude, CASE WHEN w.Rainfall >= 10000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN w.Rainfall >= 100 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable rainfall range' END AS Impact_Assessment FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Rainfall >= 10000;	wind_turbine	4
SELECT w.Turbine_ID, w.Solar_Radiation, t.Weight, t.Blade_Material, (w.Solar_Radiation * 0.8) / (t.Weight * 500) AS Surface_Temperature_Change  FROM weather_data w  JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID  WHERE w.Solar_Radiation = 800;	wind_turbine	1
SELECT w.Turbine_ID, SUM((w.Solar_Radiation * 0.8) / (t.Weight * 500)) AS Total_Surface_Temperature_Change, AVG(w.Solar_Radiation) AS Avg_Solar_Radiation FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY w.Turbine_ID;	wind_turbine	2
SELECT w.Turbine_ID, AVG(w.Solar_Radiation) AS Avg_Solar_Radiation, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM weather_data w JOIN performance_metrics p ON w.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON w.Turbine_ID = m.Turbine_ID WHERE w.Solar_Radiation > 800 GROUP BY w.Turbine_ID;	wind_turbine	3
SELECT w.Turbine_ID, w.Solar_Radiation, t.Location, t.Latitude, t.Longitude, CASE WHEN w.Solar_Radiation >= 10000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN w.Solar_Radiation >= 1000 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable solar radiation range' END AS Impact_Assessment FROM weather_data w JOIN wind_turbines t ON w.Turbine_ID = t.Turbine_ID WHERE w.Solar_Radiation >= 10000;	wind_turbine	4
SELECT p.Turbine_ID, t.Rotor_Diameter, p.Rotor_Speed, PI() * t.Rotor_Diameter * p.Rotor_Speed / 60 AS Blade_Tip_Speed FROM performance_metrics p JOIN wind_turbines t ON p.Turbine_ID = t.Turbine_ID WHERE p.Rotor_Speed = 15;	wind_turbine	1
SELECT p.Turbine_ID, SUM(PI() * t.Rotor_Diameter * p.Rotor_Speed / 60) AS Total_Tip_Speed_Change, AVG(t.Rotor_Diameter) AS Avg_Rotor_Diameter FROM performance_metrics p JOIN wind_turbines t ON p.Turbine_ID = t.Turbine_ID JOIN weather_data w ON p.Turbine_ID = w.Turbine_ID WHERE strftime('%Y', w.Date) = '2023' GROUP BY p.Turbine_ID;	wind_turbine	2
SELECT t.Turbine_ID, AVG(t.Rotor_Diameter) AS Avg_Rotor_Diameter, AVG(p.Capacity_Factor) AS Avg_Capacity_Factor, AVG(p.Availability) AS Avg_Availability, COUNT(m.Log_ID) AS Maintenance_Count FROM wind_turbines t JOIN performance_metrics p ON t.Turbine_ID = p.Turbine_ID LEFT JOIN maintenance_logs m ON t.Turbine_ID = m.Turbine_ID WHERE t.Rotor_Diameter > 100 GROUP BY t.Turbine_ID;	wind_turbine	3
SELECT t.Turbine_ID, t.Rotor_Diameter, t.Location, t.Latitude, t.Longitude, CASE WHEN t.Rotor_Diameter >= 1000 THEN 'Extreme Impact: Structural damage and severe environmental harm' WHEN t.Rotor_Diameter >= 150 THEN 'High Impact: Potential structural damage and significant disturbance' ELSE 'Normal Impact: Within acceptable rotor diameter range' END AS Impact_Assessment FROM wind_turbines t WHERE t.Rotor_Diameter >= 1000;	wind_turbine	4
SELECT wt.Turbine_ID, wt.Hub_Height, wd.Wind_Speed, (SUM(eo.Hourly_Output) / (0.5 * 1.225 * POWER(wd.Wind_Speed, 3) * PI() * POWER(wt.Rotor_Diameter / 2, 2))) * 100 AS Efficiency FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID JOIN energy_output eo ON wt.Turbine_ID = eo.Turbine_ID AND wd.Date = eo.Date GROUP BY wt.Turbine_ID, wt.Hub_Height, wd.Wind_Speed;	wind_turbine	1
SELECT wt.Turbine_ID, wt.Hub_Height, strftime('%Y', wd.Date) AS Year, SUM((eo.Daily_Output / (0.5 * 1.225 * POWER(wd.Wind_Speed, 3) * PI() * POWER(wt.Rotor_Diameter / 2, 2))) * 100) AS Total_Efficiency_Change FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID JOIN energy_output eo ON wt.Turbine_ID = eo.Turbine_ID AND wd.Date = eo.Date GROUP BY wt.Turbine_ID, wt.Hub_Height, strftime('%Y', wd.Date) ORDER BY wt.Hub_Height, strftime('%Y', wd.Date);	wind_turbine	2
SELECT wt.Turbine_ID, wt.Hub_Height, AVG(pm.Capacity_Factor) AS Avg_Capacity_Factor, AVG(pm.Availability) AS Avg_Availability, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost FROM wind_turbines wt LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID GROUP BY wt.Turbine_ID, wt.Hub_Height HAVING wt.Hub_Height > (SELECT AVG(Hub_Height) FROM wind_turbines) ORDER BY wt.Hub_Height;	wind_turbine	3
SELECT wt.Turbine_ID, wt.Hub_Height, wt.Location, wt.Latitude, wt.Longitude, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost, AVG(pm.Noise_Level) AS Avg_Noise_Level, AVG(pm.Vibration_Level) AS Avg_Vibration_Level  FROM wind_turbines wt  LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID  LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID  WHERE wt.Hub_Height = 1000  GROUP BY wt.Turbine_ID, wt.Hub_Height, wt.Location, wt.Latitude, wt.Longitude;	wind_turbine	4
SELECT wt.Turbine_ID, wt.Rated_Power, wd.Wind_Speed, wt.Rated_Wind_Speed, (wt.Rated_Power * POWER(wd.Wind_Speed / wt.Rated_Wind_Speed, 3)) AS Actual_Power FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID;	wind_turbine	1
SELECT wt.Turbine_ID, wt.Rated_Power, strftime('%Y', wd.Date) AS Year, SUM(wt.Rated_Power * POWER(wd.Wind_Speed / wt.Rated_Wind_Speed, 3)) AS Total_Actual_Power_Change FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID GROUP BY wt.Turbine_ID, wt.Rated_Power, strftime('%Y', wd.Date) ORDER BY wt.Rated_Power, strftime('%Y', wd.Date);	wind_turbine	2
SELECT wt.Turbine_ID, wt.Rated_Power, AVG(pm.Capacity_Factor) AS Avg_Capacity_Factor, AVG(pm.Availability) AS Avg_Availability, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost FROM wind_turbines wt LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID WHERE wt.Rated_Power > (SELECT AVG(Rated_Power) FROM wind_turbines) GROUP BY wt.Turbine_ID, wt.Rated_Power ORDER BY wt.Rated_Power;	wind_turbine	3
SELECT wt.Turbine_ID, wt.Rated_Power, wt.Location, wt.Latitude, wt.Longitude, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost, AVG(pm.Noise_Level) AS Avg_Noise_Level, AVG(pm.Vibration_Level) AS Avg_Vibration_Level FROM wind_turbines wt LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID WHERE wt.Rated_Power = 100000 GROUP BY wt.Turbine_ID, wt.Rated_Power, wt.Location, wt.Latitude, wt.Longitude;	wind_turbine	4
SELECT wt.Turbine_ID, wt.Cut_In_Wind_Speed, 0.5 * 1.225 * PI() * POWER(wt.Rotor_Diameter / 2, 2) * POWER(wt.Cut_In_Wind_Speed, 3) AS Start_Power FROM wind_turbines wt;	wind_turbine	1
SELECT wt.Turbine_ID, wt.Cut_In_Wind_Speed, strftime('%Y', wd.Date) AS Year, SUM(0.5 * 1.225 * 3.141592653589793 * POWER(wt.Rotor_Diameter / 2, 2) * POWER(wt.Cut_In_Wind_Speed, 3)) AS Total_Start_Power_Change FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID GROUP BY wt.Turbine_ID, wt.Cut_In_Wind_Speed, strftime('%Y', wd.Date) ORDER BY wt.Cut_In_Wind_Speed, strftime('%Y', wd.Date);	wind_turbine	2
SELECT wt.Turbine_ID, wt.Cut_In_Wind_Speed, AVG(pm.Capacity_Factor) AS Avg_Capacity_Factor, AVG(pm.Availability) AS Avg_Availability, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost FROM wind_turbines wt LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID WHERE wt.Cut_In_Wind_Speed < (SELECT AVG(Cut_In_Wind_Speed) FROM wind_turbines) GROUP BY wt.Turbine_ID, wt.Cut_In_Wind_Speed ORDER BY wt.Cut_In_Wind_Speed;	wind_turbine	3
SELECT wt.Turbine_ID, wt.Cut_In_Wind_Speed, wt.Location, wt.Latitude, wt.Longitude, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost, AVG(pm.Noise_Level) AS Avg_Noise_Level, AVG(pm.Vibration_Level) AS Avg_Vibration_Level FROM wind_turbines wt LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID WHERE wt.Cut_In_Wind_Speed = 100 GROUP BY wt.Turbine_ID, wt.Cut_In_Wind_Speed, wt.Location, wt.Latitude, wt.Longitude;	wind_turbine	4
SELECT wt.Turbine_ID, wt.Cut_Out_Wind_Speed, 0.5 * 1.225 * 3.141592653589793 * POWER(wt.Rotor_Diameter / 2, 2) * POWER(wt.Cut_Out_Wind_Speed, 3) AS Stop_Power FROM wind_turbines wt;	wind_turbine	1
SELECT wt.Turbine_ID, wt.Cut_Out_Wind_Speed, strftime('%Y', wd.Date) AS Year, SUM(0.5 * 1.225 * PI() * POWER(wt.Rotor_Diameter / 2, 2) * POWER(wt.Cut_Out_Wind_Speed, 3)) AS Total_Stop_Power_Change FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID GROUP BY wt.Turbine_ID, wt.Cut_Out_Wind_Speed, strftime('%Y', wd.Date) ORDER BY wt.Cut_Out_Wind_Speed, strftime('%Y', wd.Date);	wind_turbine	2
SELECT wt.Turbine_ID, wt.Cut_Out_Wind_Speed, AVG(pm.Capacity_Factor) AS Avg_Capacity_Factor, AVG(pm.Availability) AS Avg_Availability, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost FROM wind_turbines wt LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID WHERE wt.Cut_Out_Wind_Speed > (SELECT AVG(Cut_Out_Wind_Speed) FROM wind_turbines) GROUP BY wt.Turbine_ID, wt.Cut_Out_Wind_Speed ORDER BY wt.Cut_Out_Wind_Speed;	wind_turbine	3
SELECT wt.Turbine_ID, wt.Cut_Out_Wind_Speed, wt.Location, wt.Latitude, wt.Longitude, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost, AVG(pm.Noise_Level) AS Avg_Noise_Level, AVG(pm.Vibration_Level) AS Avg_Vibration_Level FROM wind_turbines wt LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID WHERE wt.Cut_Out_Wind_Speed = 1000 GROUP BY wt.Turbine_ID, wt.Cut_Out_Wind_Speed, wt.Location, wt.Latitude, wt.Longitude;	wind_turbine	4
SELECT wt.Turbine_ID, wt.Rated_Wind_Speed, 0.5 * 1.225 * PI() * POWER(wt.Rotor_Diameter / 2, 2) * POWER(wt.Rated_Wind_Speed, 3) AS Rated_Output_Power FROM wind_turbines wt;	wind_turbine	1
SELECT wt.Turbine_ID, wt.Rated_Wind_Speed, strftime('%Y', wd.Date) AS Year, SUM(0.5 * 1.225 * 3.141592653589793 * POWER(wt.Rotor_Diameter / 2, 2) * POWER(wt.Rated_Wind_Speed, 3)) AS Total_Rated_Power_Change FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID GROUP BY wt.Turbine_ID, wt.Rated_Wind_Speed, strftime('%Y', wd.Date) ORDER BY wt.Rated_Wind_Speed, strftime('%Y', wd.Date);	wind_turbine	2
SELECT wt.Turbine_ID, wt.Rated_Wind_Speed, AVG(pm.Capacity_Factor) AS Avg_Capacity_Factor, AVG(pm.Availability) AS Avg_Availability, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost FROM wind_turbines wt LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID WHERE wt.Rated_Wind_Speed = (SELECT AVG(Rated_Wind_Speed) FROM wind_turbines) GROUP BY wt.Turbine_ID, wt.Rated_Wind_Speed ORDER BY wt.Rated_Wind_Speed;	wind_turbine	3
SELECT wt.Turbine_ID, wt.Rated_Wind_Speed, wt.Location, wt.Latitude, wt.Longitude, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost, AVG(pm.Noise_Level) AS Avg_Noise_Level, AVG(pm.Vibration_Level) AS Avg_Vibration_Level FROM wind_turbines wt LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID WHERE wt.Rated_Wind_Speed = 1000 GROUP BY wt.Turbine_ID, wt.Rated_Wind_Speed, wt.Location, wt.Latitude, wt.Longitude;	wind_turbine	4
SELECT wt.Turbine_ID, wt.Weight, wd.Wind_Speed, (0.5 * 1.225 * POWER(wd.Wind_Speed, 2) * wt.Rotor_Diameter * wt.Hub_Height) / (PI() * POWER(wt.Rotor_Diameter / 2, 2) * wt.Weight) AS Structural_Stress FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID;	wind_turbine	1
SELECT wt.Turbine_ID, wt.Weight, strftime('%Y', wd.Date) AS Year, SUM((0.5 * 1.225 * POWER(wd.Wind_Speed, 2) * wt.Rotor_Diameter * wt.Hub_Height) / (PI() * POWER(wt.Rotor_Diameter / 2, 2) * wt.Weight)) AS Total_Stress_Change FROM wind_turbines wt JOIN weather_data wd ON wt.Turbine_ID = wd.Turbine_ID GROUP BY wt.Turbine_ID, wt.Weight, strftime('%Y', wd.Date) ORDER BY wt.Weight, strftime('%Y', wd.Date);	wind_turbine	2
SELECT wt.Turbine_ID, wt.Weight, AVG(pm.Capacity_Factor) AS Avg_Capacity_Factor, AVG(pm.Availability) AS Avg_Availability, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost FROM wind_turbines wt LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID WHERE wt.Weight > (SELECT AVG(Weight) FROM wind_turbines) GROUP BY wt.Turbine_ID, wt.Weight ORDER BY wt.Weight;	wind_turbine	3
SELECT wt.Turbine_ID, wt.Weight, wt.Location, wt.Latitude, wt.Longitude, COUNT(ml.Log_ID) AS Maintenance_Count, SUM(ml.Cost) AS Total_Maintenance_Cost, AVG(pm.Noise_Level) AS Avg_Noise_Level, AVG(pm.Vibration_Level) AS Avg_Vibration_Level FROM wind_turbines wt LEFT JOIN maintenance_logs ml ON wt.Turbine_ID = ml.Turbine_ID LEFT JOIN performance_metrics pm ON wt.Turbine_ID = pm.Turbine_ID WHERE wt.Weight = 10000 GROUP BY wt.Turbine_ID, wt.Weight, wt.Location, wt.Latitude, wt.Longitude;	wind_turbine	4
