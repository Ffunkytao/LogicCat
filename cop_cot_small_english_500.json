[
  {
    "db_id": "air_conditioner",
    "question": "计算型号为AC-1234的空调在制冷模式下，将室内温度从30°C降至25°C所需的能量。",
    "query": "SELECT (cooling_capacity_btu * usage_duration_hours / energy_efficiency_ratio) AS required_energy_btu FROM air_conditioner_info JOIN usage_records ON air_conditioner_info.ac_id = usage_records.ac_id WHERE air_conditioner_info.model = 'AC-1234' AND usage_records.mode = '制冷' AND usage_records.indoor_temperature_celsius = 30 AND usage_records.temperature_setting_celsius = 25;",
    "type": "1",
    "idx": 1,
    "englishquestion": "Calculate the energy required to cool the air conditioner model AC-1234 from an indoor temperature of 30°C to 25°C in cooling mode.",
    "equation_analysis": "equation_analysis：cooling_capacity_btu × usage_duration_hours ÷ energy_efficiency_ratio = required_energy_btu  （通过空调的制冷能力和模式持续时长计算总冷量需求，再除以能效比得出实际能耗）",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu, energy_efficiency_ratio, ac_id, model  \n【table】：【usage_records】 【columns】：usage_duration_hours, mode, indoor_temperature_celsius, temperature_setting_celsius, ac_id  \n【foreign_keys】：air_conditioner_info.ac_id → usage_records.ac_id  \n【equation_analysis】：cooling_capacity_btu × usage_duration_hours ÷ energy_efficiency_ratio = required_energy_btu  \n（通过空调的制冷能力和模式持续时长计算总冷量需求，再除以能效比得出实际能耗）",
    "evidence": "【step1】:【联接空调信息表与使用记录表】根据ac_id建立air_conditioner_info和usage_records的内连接  【step2】:【应用过滤条件】筛选型号为'AC-1234'，模式为'制冷'，室内温度30°C且设定温度25°C的记录  【step3】:【执行能量计算】通过公式（cooling_capacity_btu * usage_duration_hours / energy_efficiency_ratio）计算单位时间能耗值",
    "english_step": "【step1】: 【Join air conditioner information table with usage records table】 Establish an inner join between air_conditioner_info and usage_records based on ac_id  【step2】: 【Apply filtering conditions】 Filter records where model is 'AC-1234', mode is 'Cooling', indoor temperature is 30°C, and set temperature is 25°C  【step3】: 【Perform energy calculation】 Calculate energy consumption per unit time using the formula: (cooling_capacity_btu * usage_duration_hours / energy_efficiency_ratio)"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在一年内的总能耗，假设每天使用8小时，且每天的平均功耗为1500瓦特。",
    "query": "SELECT (1500 * 8 * 365 / 1000) AS total_energy_consumption_kwh;",
    "type": "2",
    "idx": 2,
    "englishquestion": "Calculate the total energy consumption of an air conditioner over one year, assuming it is used for 8 hours per day with an average power consumption of 1500 watts per day.",
    "equation_analysis": "",
    "used_table_info": "【table】：【none】 【columns】：n/a  \n【foreign_keys】:n/a",
    "evidence": "【step1】:【直接通过乘法计算年总能耗，固定参数：每天8小时×1500瓦×365天】  【step2】:【将结果转换为千瓦时（除以1000）形成最终输出字段】  （该SQL为纯数学计算无需表关联，按规则拆分两步）",
    "english_step": "【step1】: 【Directly calculate the annual total energy consumption via multiplication, fixed parameters: 8 hours per day × 1500 watts × 365 days】  【step2】: 【Convert the result to kilowatt-hours (kWh) by dividing by 1000 to form the final output field】  (This SQL is a pure mathematical calculation without table joins, split into two steps according to rules)"
  },
  {
    "db_id": "air_conditioner",
    "question": "判断空调ID为AC-5678在高温高湿环境下的能效比是否会降低。",
    "query": "SELECT energy_efficiency_ratio * (1 - 0.1) AS energy_efficiency_ratio_high_humidity FROM air_conditioner_info WHERE ac_id = 'AC-5678';",
    "type": "3",
    "idx": 3,
    "englishquestion": "Determine whether the energy efficiency ratio of the air conditioner with ID AC-5678 will decrease in a high-temperature and high-humidity environment.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, energy_efficiency_ratio  \n【foreign_keys】: ac_id关联其他表的潜在外键(实际查询未使用)",
    "evidence": "【step1】:【从 air_conditioner_info 表获取 AC-5678 的原始能效比】  【step2】:【应用10%降幅计算高温高湿场景下的能效比】",
    "english_step": "【step1】:【Retrieve the original energy efficiency ratio of AC-5678 from the air_conditioner_info table】  【step2】:【Calculate the energy efficiency ratio under high-temperature and high-humidity scenarios by applying a 10% reduction】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的制冷能力为100000 BTU，且能效比为20，计算其在极端高温环境（50°C）下连续运行100小时的能耗。",
    "query": "SELECT (100000 * 100 / 20 * 1.5) AS extreme_energy_consumption_kwh;",
    "type": "4",
    "idx": 4,
    "englishquestion": "Assuming an air conditioner has a cooling capacity of 100,000 BTU and an energy efficiency ratio of 20, calculate its energy consumption when running continuously for 100 hours in an extreme high-temperature environment (50°C).",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu, energy_efficiency_ratio  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【计算基础能耗：制冷能力(100000 BTU) × 运行时间(100小时) ÷ 能效比(20)】  【step2】:【应用高温环境系数：基础能耗 × 1.5（极端高温效率补偿系数）】  【step3】:【整合计算结果并添加别名形成最终输出】",
    "english_step": "【step1】:【Calculate base energy consumption: Cooling capacity (100000 BTU) × Operating hours (100 hours) ÷ Energy Efficiency Ratio (20)】  【step2】:【Apply high temperature environmental coefficient: Base energy consumption × 1.5 (extreme high temperature efficiency compensation factor)】  【step3】:【Integrate calculation results and add an alias to form the final output】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在制冷模式下，将室内温度从35°C降至20°C所需的时间，假设室内空间体积为50立方米，空气密度为1.225 kg/m?，空气比热容为1005 J/(kg·K)，且空调的制冷能力为12000 BTU/h。",
    "query": "SELECT (50 * 1.225 * 1005 * (35 - 20)) / (12000 * 1055.06 / 3600) AS required_time_hours;",
    "type": "1",
    "idx": 5,
    "englishquestion": "Calculate the time required for an air conditioner in cooling mode to reduce the indoor temperature from 35°C to 20°C, assuming an indoor space volume of 50 cubic meters, air density of 1.225 kg/m³, air specific heat capacity of 1005 J/(kg·K), and an air conditioning cooling capacity of 12000 BTU/h.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu  \n【foreign_keys】: 【无显式外键关联】",
    "evidence": "【step1】:计算总热量需求：(50立方米 × 1.225kg/m³ × 1005J/(kg·K)) × (35°C-20°C)=50×1.225×1005×15  【step2】:计算实际制冷功率：将12000BTU/h转换为焦耳/秒 → 12000×1055.06J/h ÷3600秒  【step3】:总热量/每秒制冷能力得到秒数 → [(步骤1结果)/(步骤2结果)] /3600转为小时单位",
    "english_step": "【step1】: Calculate total heat requirement: (50m³ × 1.225kg/m³ × 1005J/(kg·K)) × (35°C-20°C) = 50×1.225×1005×15  【step2】: Calculate actual cooling capacity: Convert 12000BTU/h to Joules/second → 12000×1055.06J/h ÷3600 seconds  【step3】: Total heat divided by cooling capacity per second gives time in seconds → [(Step1 result)/(Step2 result)] ÷3600 to convert to hours"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在一年内的总能耗，假设每天的使用时长随季节变化：夏季每天12小时，冬季每天6小时，春秋季每天4小时，且夏季功耗为1800瓦特，冬季为1200瓦特，春秋季为800瓦特。",
    "query": "SELECT ((90 * 12 * 1800) + (90 * 6 * 1200) + (185 * 4 * 800)) / 1000 AS total_energy_consumption_kwh;",
    "type": "2",
    "idx": 6,
    "englishquestion": "Calculate the total annual energy consumption of an air conditioner, assuming daily usage varies by season: 12 hours per day in summer, 6 hours per day in winter, and 4 hours per day in spring and autumn, with power consumption of 1800 watts in summer, 1200 watts in winter, and 800 watts in spring and autumn.",
    "equation_analysis": "",
    "used_table_info": "【table】：【none】 【columns】：none  \n【foreign_keys】:none",
    "evidence": "【step1】:【计算各季节能耗值：夏季90天×(12h×1800W)=1944000Wh，冬季90天×(6h×1200W)=648000Wh，春秋季185天×(4h×800W)=592000Wh】  【step2】:【总能耗求和：1944000 + 648000 + 592000 = 3184000Wh】  【step3】:【转换单位：3184000Wh ÷1000=3184kWh】",
    "english_step": "【Step 1】: 【Calculate seasonal energy consumption values: Summer 90 days × (12h × 1800W) = 1,944,000Wh, Winter 90 days × (6h × 1200W) = 648,000Wh, Spring/Autumn 185 days × (4h × 800W) = 592,000Wh】  【Step 2】: 【Sum total energy consumption: 1,944,000 + 648,000 + 592,000 = 3,184,000Wh】  【Step 3】: 【Convert units: 3,184,000Wh ÷ 1000 = 3,184kWh】"
  },
  {
    "db_id": "air_conditioner",
    "question": "判断某空调在极端低温环境（-10°C）下制热时，其制热能力是否会显著下降，并解释原因。",
    "query": "SELECT heating_capacity_btu * (1 - 0.4) AS heating_capacity_low_temp FROM air_conditioner_info WHERE ac_id = '某空调ID';",
    "type": "3",
    "idx": 7,
    "englishquestion": "To determine whether the heating capacity of an air conditioner will significantly decrease when operating in extreme low-temperature environments (-10°C), and to explain the reasons.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id、heating_capacity_btu 【foeign_keys】: 无",
    "evidence": "【step1】:【从air_conditioner_info表中通过WHERE ac_id = '某空调ID'筛选出目标空调记录】  【step2】:【读取选中记录的heating_capacity_btu字段的原始制热能力值】  【step3】:【对原始制热能力值应用0.6系数（假设极端低温导致40%衰减），并输出为heating_capacity_low_temp字段】",
    "english_step": "【step1】:【From the air_conditioner_info table, filter out the target air conditioner record by WHERE ac_id = 'specific_AC_ID'】  【step2】:【Read the original heating capacity value from the heating_capacity_btu field of the selected record】  【step3】:【Apply a 0.6 coefficient to the original heating capacity value (assuming 40% degradation due to extreme low temperatures) and output it as the heating_capacity_low_temp field】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的制冷能力为50000 BTU，且能效比为15，计算其在极端高温环境（60°C）下连续运行200小时的能耗，假设空调在极端条件下仍能运行，且制冷效率降低至正常值的30%。",
    "query": "SELECT (50000 * 200 / (15 * 0.3)) * 1055.06 / 1000 AS extreme_energy_consumption_kwh;",
    "type": "4",
    "idx": 8,
    "englishquestion": "Assuming an air conditioner has a cooling capacity of 50,000 BTU and an energy efficiency ratio (EER) of 15, calculate its energy consumption when operating continuously for 200 hours under extreme high-temperature conditions (60°C). Assume the air conditioner can still function under such extreme conditions, but its cooling efficiency is reduced to 30% of the normal value.",
    "equation_analysis": "equation_analysis：(制冷能力×运行时長)/(能效比×效率衰减因子)×单位转换系数 = (50000×200)/(15×0.3)×1055.06/1000。其中：冷却能力50000BTU来自cooling_capacity_btu；15是energy_efficiency_ratio；0.3是效率衰减因子；200小时对应usage_duration_hours；1055.06是BTU转焦耳系数；除以1000将焦耳转千瓦时",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：【cooling_capacity_btu, energy_efficiency_ratio】  \n【table】：【usage_records】 【columns】：【usage_duration_hours】  \n【foreign_keys】：【ac_id (air_conditioner_info ↔ 其他表)】  \n【equation_analysis】：【(制冷能力×运行时長)/(能效比×效率衰减因子)×单位转换系数 = (50000×200)/(15×0.3)×1055.06/1000。其中：冷却能力50000BTU来自cooling_capacity_btu；15是energy_efficiency_ratio；0.3是效率衰减因子；200小时对应usage_duration_hours；1055.06是BTU转焦耳系数；除以1000将焦耳转千瓦时】",
    "evidence": "【step1】:【计算极端条件下的实际能效比：15 × 0.3 = 4.5】  【step2】:【计算理论总能耗：(50000 × 200) / 4.5 得到未转换的BTU总能耗】  【step3】:【单位转换并得出千瓦时：将BTU转换为焦耳(×1055.06)后转换为千瓦时(/1000)】",
    "english_step": "【Step1】: 【Calculate the actual energy efficiency ratio under extreme conditions: 15 × 0.3 = 4.5】  【Step2】: 【Calculate the theoretical total energy consumption: (50,000 × 200) / 4.5 to obtain the unconverted total energy consumption in BTU】  【Step3】: 【Unit conversion to kilowatt-hours: Convert BTU to joules (×1055.06) and then to kilowatt-hours (/1000)】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在制冷模式下，将室内温度从32°C降至24°C所需的能耗，假设室内外温差为12°C，空调的能效比为4.0，且运行时间为8小时，同时考虑湿度对能耗的影响，假设湿度每增加10%，能耗增加5%。",
    "query": "SELECT (aci.power_consumption_watts * 8 / 4.0) / 1000 * (1 + 0.05 * (ec.humidity_percent / 10)) AS energy_consumption_kwh FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制冷';",
    "type": "1",
    "idx": 9,
    "englishquestion": "Calculate the energy consumption required for a certain air conditioner to reduce the indoor temperature from 32°C to 24°C in cooling mode, assuming a temperature difference of 12°C between indoors and outdoors, an energy efficiency ratio of 4.0, and an operating time of 8 hours. Additionally, account for the impact of humidity on energy consumption, assuming a 5% increase in energy consumption for every 10% increase in humidity.",
    "equation_analysis": "equation_analysis：  (1) 基础能耗：功率(W)×运行时间(h)/能效比 → (aci.power_consumption_watts * 8 / 4.0)  (2) 单位转换：基础能耗/1000 → (...)/1000  (3) 湿度修正系数：1 + 0.05×(湿度%/10) → (1 + 0.05 * (ec.humidity_percent / 10))  (4) 最终公式：(基础能耗千瓦时) × 湿度修正系数",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, power_consumption_watts  \n【table】：【energy_consumption】 【columns】：ac_id, humidity_percent, mode  \n【foreign_keys】：aci.ac_id → ec.ac_id  \n【equation_analysis】：  \n(1) 基础能耗：功率(W)×运行时间(h)/能效比 → (aci.power_consumption_watts * 8 / 4.0)  \n(2) 单位转换：基础能耗/1000 → (...)/1000  \n(3) 湿度修正系数：1 + 0.05×(湿度%/10) → (1 + 0.05 * (ec.humidity_percent / 10))  \n(4) 最终公式：(基础能耗千瓦时) × 湿度修正系数",
    "evidence": "【step1】: 关联空调基础信息表(air_conditioner_info)与能耗记录表(energy_consumption)，筛选型号为AC-5678且运行模式为制冷的数据  【step2】: 计算基础能耗值，使用公式：(功率瓦数×8小时/能效比4.0)/1000 转换为标准千瓦时  【step3】: 叠加湿度影响因子，按照每10%湿度增加5%能耗的比例调整总能耗，最终输出湿度修正后的总能耗值",
    "english_step": "【step1】: Join the air conditioner basic information table (air_conditioner_info) with the energy consumption records table (energy_consumption), filtering data where the model is AC-5678 and the operating mode is cooling.  【step2】: Calculate the base energy consumption value using the formula: (wattage × 8 hours / energy efficiency ratio 4.0) / 1000 to convert to standard kilowatt-hours (kWh).  【step3】: Apply the humidity impact factor by proportionally adjusting the total energy consumption at a rate of 5% increase for every 10% humidity increase, and output the final humidity-adjusted total energy consumption value."
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在一年内的总能耗，假设每天的使用时长随季节变化：夏季每天12小时，冬季每天10小时，春秋季每天8小时，且夏季功耗为2500瓦特，冬季为2000瓦特，春秋季为1500瓦特。同时考虑不同季节的湿度对能耗的影响，夏季湿度为70%，冬季为40%，春秋季为50%，假设湿度每增加10%，能耗增加5%。",
    "query": "SELECT ((90 * 12 * 2500 * (1 + 0.05 * (70 / 10))) + (90 * 10 * 2000 * (1 + 0.05 * (40 / 10))) + (185 * 8 * 1500 * (1 + 0.05 * (50 / 10)))) / 1000 AS total_energy_consumption_kwh;",
    "type": "2",
    "idx": 10,
    "englishquestion": "Calculate the total annual energy consumption of an air conditioner, assuming daily usage varies by season: 12 hours per day in summer, 10 hours in winter, and 8 hours in spring and autumn. The power consumption is 2500 watts in summer, 2000 watts in winter, and 1500 watts in spring and autumn. Additionally, account for the impact of seasonal humidity on energy usage: 70% in summer, 40% in winter, and 50% in spring and autumn, with the assumption that every 10% increase in humidity raises energy consumption by 5%.",
    "equation_analysis": "equation_analysis：  1. **总能耗公式**：     ∑季(天数 × 时长 × 基础功耗 × (1 + 湿度影响系数)) / 1000  2. **参数分解**：     - 夏季：90天 × 12h × 2500W × (1 + 0.05×7)     - 冬季：90天 × 10h × 2000W × (1 + 0.05×4)     - 春秋季：185天 × 8h × 1500W × (1 + 0.05×5)  3. **单位转换**：     Watts → kilowatts (/1000)  4. **湿度影响公式**：     湿度每+10%，能耗+5% → (湿度值/10) × 0.05",
    "used_table_info": "【table】：【usage_records】 【columns】：【usage_duration_hours, power_consumption_watts, humidity_percent】  \n【table】：【humidity_records】 【columns】：【indoor_humidity_percent】  \n【foreign_keys】：【ac_id】  \n【equation_analysis】：  \n1. **总能耗公式**：  \n   ∑季(天数 × 时长 × 基础功耗 × (1 + 湿度影响系数)) / 1000  \n2. **参数分解**：  \n   - 夏季：90天 × 12h × 2500W × (1 + 0.05×7)  \n   - 冬季：90天 × 10h × 2000W × (1 + 0.05×4)  \n   - 春秋季：185天 × 8h × 1500W × (1 + 0.05×5)  \n3. **单位转换**：  \n   Watts → kilowatts (/1000)  \n4. **湿度影响公式**：  \n   湿度每+10%，能耗+5% → (湿度值/10) × 0.05",
    "evidence": "【step1】:【确定季节天数分配：夏季90天，冬季90天，春秋季185天，总天数覆盖365天。】  【step2】:【计算季节性基础能耗：夏季(12小时×2500W)、冬季(10小时×2000W)、春秋季(8小时×1500W)，叠加湿度影响系数，如夏季70%的湿度换算为(1+0.05×70/10)=1.35倍能耗。】  【step3】:【汇总并转换单位：将每个季节的日均能耗乘以天数得到年总瓦时，再除以1000转换为千瓦时，最终合并三个季节结果输出总能耗。】",
    "english_step": "【Step1】: 【Determine seasonal day allocation: Summer 90 days, Winter 90 days, Spring/Autumn 185 days, totaling 365 days.】  【Step2】: 【Calculate seasonal base energy consumption: Summer (12h×2500W), Winter (10h×2000W), Spring/Autumn (8h×1500W), with humidity impact coefficient overlay. Example: Summer 70% humidity converts to (1+0.05×70/10)=1.35x energy consumption.】  【Step3】: 【Aggregate and convert units: Multiply daily energy consumption per season by days to get annual total watt-hours, divide by 1000 to convert to kilowatt-hours, then combine results from three seasons to output total energy consumption.】"
  },
  {
    "db_id": "air_conditioner",
    "question": "判断某空调在高温高湿环境下的能耗是否会显著增加，并解释原因。同时考虑空调在不同风速下的能耗变化，假设高风速下能耗增加10%，中风速下能耗增加5%，低风速下能耗不变。",
    "query": "SELECT ec.energy_consumption_kwh * (1 + 0.05 * (hr.indoor_humidity_percent / 10)) * (1 + CASE WHEN ec.fan_speed = '高' THEN 0.10 WHEN ec.fan_speed = '中' THEN 0.05 ELSE 0 END) AS energy_consumption_high_humidity FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id JOIN humidity_records hr ON aci.ac_id = hr.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制冷';",
    "type": "3",
    "idx": 11,
    "englishquestion": "Determine if the energy consumption of an air conditioner would significantly increase under high-temperature and high-humidity conditions, and explain the reasons. Additionally, consider how energy consumption varies at different fan speeds, assuming a 10% increase at high speed, a 5% increase at medium speed, and no change in energy consumption at low speed.",
    "equation_analysis": "equation_analysis：  1. 基础能耗计算公式：energy_consumption_kwh × (湿度修正系数) × (风速修正系数)  2. 湿度修正因子：1 + (室内湿度百分比/10) × 5% (说明：每增加10%湿度，能耗提升5%)  3. 风速修正因子：     - 高风速： +10%（1.1）     - 中风速： +5%（1.05）     - 低风速：无修正（1.0）  4. 公式最终呈现：ec.energy_consumption_kwh × (1 + 0.05×(hr.indoor_humidity_percent/10)) × (1 + 风速权重)",
    "used_table_info": "【tables】：air_conditioner_info 【columns】：ac_id  \n【tables】：energy_consumption 【columns】：ac_id, energy_consumption_kwh, fan_speed, mode  \n【tables】：humidity_records 【columns】：ac_id, indoor_humidity_percent  \n【foreign_keys】：energy_consumption.ac_id → air_conditioner_info.ac_id，humidity_records.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：  \n1. 基础能耗计算公式：energy_consumption_kwh × (湿度修正系数) × (风速修正系数)  \n2. 湿度修正因子：1 + (室内湿度百分比/10) × 5% (说明：每增加10%湿度，能耗提升5%)  \n3. 风速修正因子：  \n   - 高风速： +10%（1.1）  \n   - 中风速： +5%（1.05）  \n   - 低风速：无修正（1.0）  \n4. 公式最终呈现：ec.energy_consumption_kwh × (1 + 0.05×(hr.indoor_humidity_percent/10)) × (1 + 风速权重)",
    "evidence": "【step1】:【连接三个表并通过空调ID和制冷模式筛选数据】通过INNER JOIN将air_conditioner_info、energy_consumption、humidity_records表关联，匹配条件为ac_id相等且mode='制冷'，筛选出特定空调AC-5678的所有制冷模式数据  【step2】:【计算湿度引起的能耗增幅】将原始能耗乘以(1 + 0.05*(indoor_humidity_percent/10))，实现每10%湿度增加5%能耗的补偿计算  【step3】:【叠加风速对应的波动系数】通过CASE语句判断风速等级，分别乘上对应的增量系数（高:1.1/中:1.05/低:1）得出最终能耗预测值",
    "english_step": "【step1】: 【Join three tables and filter data by AC ID and cooling mode】 Use INNER JOIN to connect air_conditioner_info, energy_consumption, and humidity_records tables, matching on ac_id equality and mode='cooling', filtering all cooling mode data for the specific air conditioner AC-5678  【step2】: 【Calculate energy consumption increase caused by humidity】 Multiply original energy consumption by (1 + 0.05*(indoor_humidity_percent/10)), implementing compensation calculation where every 10% humidity induces a 5% energy consumption increase  【step3】: 【Apply wind speed fluctuation coefficients】 Use CASE statement to determine wind speed level, then multiply by corresponding increment coefficients (High:1.1/Medium:1.05/Low:1) to obtain final predicted energy consumption value"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的功耗为6000瓦特，且能效比为2.5，计算其在极端高温环境（65°C）下连续运行150小时的能耗，假设空调在极端条件下仍能运行，且制冷效率降低至正常值的15%。同时考虑湿度对能耗的影响，假设湿度为90%，且湿度每增加10%，能耗增加5%。",
    "query": "SELECT (6000 * 150 / (2.5 * 0.15)) / 1000 * (1 + 0.05 * (90 / 10)) AS extreme_energy_consumption_kwh;",
    "type": "4",
    "idx": 12,
    "englishquestion": "Assuming the power consumption of an air conditioner is 6000 watts with an energy efficiency ratio of 2.5, calculate its energy consumption when operating continuously for 150 hours under extreme high-temperature conditions (65°C). Suppose the air conditioner can still run under extreme conditions, but its cooling efficiency drops to 15% of the normal value. Additionally, consider the impact of humidity on energy consumption, assuming the humidity is 90% and that for every 10% increase in humidity, energy consumption increases by 5%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：power_consumption_watts, energy_efficiency_ratio  \n【table】：【temperature_records】 【columns】：humidity_percent  \n【table】：【usage_records】 【columns】：usage_duration_hours  \n【foreign_keys】: ac_id",
    "evidence": "【step1】:【计算调整能效比后基础能耗】6000瓦基础功耗 ÷ (2.5能效比 × 0.15效率衰减) × 150小时  【step2】:【计算湿度补偿系数】湿度90%对应45%的能耗增幅(9个10%区间 × 5%)得到1.45倍乘数  【step3】:【整合结果转换单位】(基础能耗 ÷ 1000) × 湿度系数得到最终36800度电",
    "english_step": "【step1】:【Calculate base energy consumption after adjusted energy efficiency ratio】6000W base power consumption ÷ (2.5 energy efficiency ratio × 0.15 efficiency decay) × 150 hours  【step2】:【Calculate humidity compensation factor】90% humidity corresponds to 45% energy consumption increase (9 intervals of 10% × 5%) yielding 1.45 multiplier  【step3】:【Integrate results and convert units】(Base energy consumption ÷ 1000) × humidity coefficient = final 36,800 kWh electricity"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在制冷模式下，将室内温度从35°C降至25°C所需的时间，已知室内空间体积为60立方米，空气密度为1.225 kg/m?，空气比热容为1005 J/(kg·K)，且空调的制冷能力为15000 BTU/h。同时考虑室外温度对制冷效率的影响，假设室外温度每升高5°C，制冷效率降低10%。",
    "query": "SELECT (60 * 1.225 * 1005 * (35 - 25)) / (15000 * 1055.06 / 3600 * (1 - 0.1 * (tr.outdoor_temperature_celsius - 25) / 5)) AS required_time_hours FROM air_conditioner_info aci JOIN temperature_records tr ON aci.ac_id = tr.ac_id WHERE aci.ac_id = 'AC-5678' AND tr.mode = '制冷';",
    "type": "1",
    "idx": 13,
    "englishquestion": "Calculate the time required for an air conditioner to reduce the indoor temperature from 35°C to 25°C in cooling mode, given that the indoor space volume is 60 cubic meters, air density is 1.225 kg/m³, specific heat capacity of air is 1005 J/(kg·K), and the cooling capacity of the air conditioner is 15000 BTU/h. Additionally, take into account the impact of outdoor temperature on cooling efficiency, assuming that for every 5°C increase in outdoor temperature, the cooling efficiency decreases by 10%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id  \n【table】：【temperature_records】 【columns】：ac_id, outdoor_temperature_celsius, mode  \n【foreign_keys】: air_conditioner_info.ac_id → temperature_records.ac_id",
    "evidence": "【step1】:【关联空调基础信息与温度记录】通过JOIN连接air_conditioner_info和temperature_records表，按ac_id匹配，筛选指定空调ID(AC-5678)和制冷模式的工况数据  【step2】:【构建热力学计算公式】计算室内空气质量(60m³×1.225kg/m³)×降温温差10℃×空气比热容1005J/(kg·K)得出总需移除热量，同时处理15000BTU/h的单位换算(1BTU=1055.06J，转秒单位需/3600)  【step3】:【动态效率补偿计算】通过(tr.outdoor_temperature_celsius-25)/5比例因子计算室外温度影响，每5℃高温对应10%效率衰减，最终计算结果时间通过总需热量/(调整后制冷功率)得出小时单位数值",
    "english_step": "【step1】:【Associate air conditioner base information with temperature records】Join the air_conditioner_info and temperature_records tables using JOIN, match by ac_id, filter operational data for specified AC ID (AC-5678) in cooling mode.  【step2】:【Build thermodynamic calculation formula】Calculate total heat removal required using (60m³×1.225kg/m³) × temperature difference 10℃ × air specific heat capacity 1005J/(kg·K). Handle unit conversion for 15000BTU/h (1BTU=1055.06J, convert to seconds by /3600).  【step3】:【Dynamic efficiency compensation calculation】Calculate outdoor temperature influence through (tr.outdoor_temperature_celsius-25)/5 scaling factor, with 10% efficiency decay per 5℃ temperature rise. Final calculation time is derived by total required heat/(adjusted cooling power) to obtain hour-unit value."
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某空调在一年内的总能耗，假设每天的使用时长随季节变化：夏季每天14小时，冬季每天12小时，春秋季每天10小时，且夏季功耗为3000瓦特，冬季为2500瓦特，春秋季为2000瓦特。同时考虑不同季节的室外温度对能耗的影响，夏季室外温度为35°C，冬季为5°C，春秋季为20°C，假设室外温度每升高5°C，能耗增加10%。",
    "query": "SELECT ((90 * 14 * 3000 * (1 + 0.1 * (35 - 25) / 5)) + (90 * 12 * 2500 * (1 + 0.1 * (5 - 25) / 5)) + (185 * 10 * 2000 * (1 + 0.1 * (20 - 25) / 5))) / 1000 AS total_energy_consumption_kwh;",
    "type": "2",
    "idx": 14,
    "englishquestion": "Calculate the total annual energy consumption of an air conditioner, assuming daily usage duration varies by season: 14 hours per day in summer, 12 hours per day in winter, and 10 hours per day in spring and autumn. The power consumption is 3000 watts in summer, 2500 watts in winter, and 2000 watts in spring and autumn. Additionally, consider the impact of outdoor temperature on energy consumption: 35°C in summer, 5°C in winter, and 20°C in spring and autumn, assuming a 10% increase in energy consumption for every 5°C rise in outdoor temperature.",
    "equation_analysis": "",
    "used_table_info": "【table】：【None】 【columns】：None  \n【foreign_keys】: None",
    "evidence": "【step1】:【计算夏季能耗：90天×14小时×3000瓦特×1.2温度系数】  【step2】:【计算冬季能耗：90天×12小时×2500瓦特×0.6温度系数】  【step3】:【综合春秋季能耗：185天×10小时×2000瓦特×0.9温度系数，三者相加后除以1000转为千瓦时】",
    "english_step": "【step1】: 【Calculate summer energy consumption: 90 days × 14 hours × 3000 watts × 1.2 temperature coefficient】  【step2】: 【Calculate winter energy consumption: 90 days × 12 hours × 2500 watts × 0.6 temperature coefficient】  【step3】: 【Calculate combined spring and autumn energy consumption: 185 days × 10 hours × 2000 watts × 0.9 temperature coefficient. Sum all three results and divide by 1000 to convert to kilowatt-hours】"
  },
  {
    "db_id": "air_conditioner",
    "question": "判断某空调在极端低温环境（-15°C）下制热时，其制热能力是否会显著下降，并解释原因。同时考虑空调在不同风速下的制热效果，假设高风速下制热效果增加10%，中风速下制热效果增加5%，低风速下制热效果不变。",
    "query": "SELECT aci.heating_capacity_btu * (1 - 0.5) * (1 + CASE WHEN ec.fan_speed = '高' THEN 0.10 WHEN ec.fan_speed = '中' THEN 0.05 ELSE 0 END) AS heating_capacity_low_temp FROM air_conditioner_info aci JOIN energy_consumption ec ON aci.ac_id = ec.ac_id WHERE aci.ac_id = 'AC-5678' AND ec.mode = '制热';",
    "type": "3",
    "idx": 15,
    "englishquestion": "Determine whether the heating capacity of an air conditioner decreases significantly when operating in extremely low-temperature environments (-15°C), and explain the reasons. Also, consider the heating performance of the air conditioner at different fan speeds, assuming a 10% increase in heating effect at high speed, a 5% increase at medium speed, and no change at low speed.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, heating_capacity_btu  \n【table】：【energy_consumption】 【columns】：ac_id, fan_speed, mode  \n\n【foreign_keys】: energy_consumption.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【通过ac_id连接air_conditioner_info和energy_consumption表，筛选ac_id为AC-5678且在制热模式的记录】  【step2】:【应用极端低温系数计算基础制热能力降幅(降低50%)，公式为heating_capacity_btu * (1-0.5)】  【step3】:【叠加风速修正系数(CASE条件判断)，高/中/低风速分别提高10%、5%、0%，得到最终低温场景下的制热能力】",
    "english_step": "【step1】:【Join air_conditioner_info and energy_consumption tables via ac_id, filtering records where ac_id is AC-5678 and operating in heating mode】  【step2】:【Apply extreme low-temperature coefficient to calculate base heating capacity reduction (50% decrease) using formula heating_capacity_btu * (1-0.5)】  【step3】:【Incorporate wind speed adjustment coefficients (CASE conditions): high/medium/low fan speeds increase by 10%, 5%, 0% respectively to derive final heating capacity in low-temperature scenarios】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的制冷能力为60000 BTU，且能效比为2.0，计算其在极端高温环境（70°C）下连续运行200小时的能耗，假设空调在极端条件下仍能运行，且制冷效率降低至正常值的10%。同时考虑湿度对能耗的影响，假设湿度为95%，且湿度每增加10%，能耗增加5%。",
    "query": "SELECT (60000 * 200 / (2.0 * 0.1)) * 1055.06 / 1000 * (1 + 0.05 * (95 / 10)) AS Extreme_energy_consumption_kwh;",
    "type": "4",
    "idx": 16,
    "englishquestion": "Assuming an air conditioner has a cooling capacity of 60,000 BTU and an energy efficiency ratio of 2.0, calculate its energy consumption when running continuously for 200 hours under extreme high-temperature conditions (70°C). Assume the air conditioner can still operate under extreme conditions, but its cooling efficiency drops to 10% of the normal value. Additionally, consider the impact of humidity on energy consumption, assuming a humidity level of 95%, and for every 10% increase in humidity, energy consumption increases by 5%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu, energy_efficiency_ratio  \n【table】：【energy_consumption】 【columns】：energy_consumption_kwh  \n【table】：【humidity_records】 【columns】：outdoor_humidity_percent  \n【foreign_keys】: ac_id (air_conditioner_info.ac_id → energy_consumption.ac_id, humidity_records.ac_id)",
    "evidence": "【step1】:【计算基础能耗：将制冷能力(60000BTU)乘以运行时间(200小时)除以能效比(2.0)在极端条件效率降低后的实际值(0.1 * 2.0)】  【step2】:【转换单位：将BTU计算结果通过系数1055.06转换为焦耳，再除以1000转为千瓦时】  【step3】:【湿度修正：应用湿度影响系数1 + (9.5个10%湿度增幅 × 0.05)，其中95%湿度对应95/10=9.5个10%间隔计算能耗增长】",
    "english_step": "【step1】:【Calculate base energy consumption: Multiply cooling capacity (60000BTU) by operating time (200 hours) divided by the actual value of energy efficiency ratio after extreme condition efficiency reduction (0.1 * 2.0)】  【step2】:【Convert units: Convert BTU result to joules using coefficient 1055.06, then divide by 1000 to obtain kilowatt-hours】  【step3】:【Humidity correction: Apply humidity impact coefficient 1 + (9.5 intervals of 10% humidity increase × 0.05), where 95% humidity corresponds to 95/10=9.5 intervals for energy consumption growth calculation】"
  },
  {
    "db_id": "air_conditioner",
    "question": "如果一台空调在制冷模式下运行，室内湿度从60%降低到40%，且室内温度为25°C，计算空调除湿过程中从空气中去除的水分质量。",
    "query": "SELECT SUM((1000 * 0.001 * (hr1.indoor_humidity_percent - hr2.indoor_humidity_percent) * (101325 / (287 * (tr.indoor_temperature_celsius + 273.15))))) AS removed_water_mass FROM humidity_records hr1 JOIN humidity_records hr2 ON hr1.ac_id = hr2.ac_id AND hr1.record_date = hr2.record_date JOIN temperature_records tr ON hr1.ac_id = tr.ac_id AND hr1.record_date = tr.record_date WHERE hr1.mode = 'cooling' AND hr1.indoor_humidity_percent = 60 AND hr2.indoor_humidity_percent = 40 AND tr.indoor_temperature_celsius = 25 AND tr.mode = 'cooling' GROUP BY hr1.ac_id;",
    "type": "1",
    "idx": 17,
    "englishquestion": "If an air conditioner is operating in cooling mode, reducing indoor humidity from 60% to 40% with an indoor temperature of 25°C, calculate the mass of water removed from the air during the dehumidification process.",
    "equation_analysis": "",
    "used_table_info": "【table】：【humidity_records】 【columns】：ac_id, record_date, indoor_humidity_percent, mode  \n【table】：【temperature_records】 【columns】：ac_id, record_date, indoor_temperature_celsius, mode  \n【foreign_keys】:  humidity_records.ac_id → air_conditioner_info.ac_id, temperature_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【通过triple JOIN获取湿度温度关联数据】关联humidity_records表两次（hr1初始湿度60%和hr2终湿度40%），并连接temperature_records表，使用ac_id和record_date作为复合关联键，确保时间维度上的湿度温度数据一致性  【step2】:【应用物理公式过滤条件】基于理想气体定律计算水分质量，WHERE条件精确过滤空调制冷模式下的25°C运行环境，湿度变化范围（60%→40%）作为核心计算参数  【step3】:【分组聚合水分去除总质量】使用SUM函数将每台空调的单位体积水分去除量扩展为总体积（隐含假设空间体积为1000m³），GROUP BY ac_id分组结算每台空调的总除湿质量",
    "english_step": "【step1】: 【Obtain humidity-temperature correlation data via triple JOIN】Join humidity_records table twice (hr1 for initial humidity 60% and hr2 for final humidity 40%), then connect temperature_records table using ac_id and record_date as composite join keys, ensuring temporal consistency of humidity-temperature data  【step2】: 【Apply physical formula filtering conditions】Calculate moisture mass based on ideal gas law, WHERE clause precisely filters AC units in cooling mode operating at 25°C environment, humidity variation range (60%→40%) as core calculation parameters  【step3】: 【Aggregate total moisture removal mass via grouping】Use SUM function to expand per-unit-volume moisture removal amount to total volume (implicit assumption of 1000m³ space volume), GROUP BY ac_id to calculate total dehumidification mass per AC unit"
  },
  {
    "db_id": "air_conditioner",
    "question": "已知一台空调在一天内以不同的风速和温度设置运行，记录显示其功耗分别为800W、1200W和1500W，运行时间分别为4小时、3小时和5小时。计算这台空调在这一天内的总能耗。",
    "query": "SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE power_consumption_watts IN (800, 1200, 1500) AND usage_duration_hours IN (4, 3, 5);",
    "type": "2",
    "idx": 18,
    "englishquestion": "A known air conditioner operates at different fan speeds and temperature settings within a day. The recorded power consumption values are 800W, 1200W, and 1500W, with corresponding run times of 4 hours, 3 hours, and 5 hours, respectively. Calculate the total energy consumption of this air conditioner for that day.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：power_consumption_watts、usage_duration_hours  \n【foreign_keys】:ac_id (关联 air_conditioner_info.ac_id)",
    "evidence": "【step1】:【从usage_records表筛选符合条件的三组功率/时长记录】  【step2】:【使用WHERE条件过滤power_consumption_watts为800/1200/1500且usage_duration_hours为4/3/5的记录】  【step3】:【计算公式转换能量单位：SUM(功率*时长/1000)生成最终kwh为单位的日总能耗】",
    "english_step": "【step1】: 【Filter three sets of power/duration records meeting criteria from the usage_records table】  【step2】: 【Apply WHERE clause filtering for records with power_consumption_watts as 800/1200/1500 and usage_duration_hours as 4/3/5】  【step3】: 【Calculate energy unit conversion: SUM(power * duration / 1000) to generate final daily total energy consumption in kWh】"
  },
  {
    "db_id": "air_conditioner",
    "question": "在夏季高温天气中，为什么空调在制冷模式下设置较低的温度会导致更高的能耗？",
    "query": "SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE mode = 'cooling' AND temperature_setting_celsius < outdoor_temperature_celsius GROUP BY temperature_setting_celsius ORDER BY temperature_setting_celsius;",
    "type": "3",
    "idx": 19,
    "englishquestion": "In hot summer weather, why does setting the air conditioner to a lower temperature in cooling mode result in higher energy consumption?",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：power_consumption_watts,usage_duration_hours,temperature_setting_celsius,mode,outdoor_temperature_celsius 【foreign_keys】:【ac_id → air_conditioner_info(ac_id)】",
    "evidence": "【step1】:【筛选制冷模式下设定温度低于室外温度的记录】通过WHERE子句过滤usage_records表，保留mode='cooling'且temperature_setting_celsius < outdoor_temperature_celsius的使用记录  【step2】:【按温度设置分组统计总能耗】对过滤后的数据按temperature_setting_celsius分组，通过SUM(power_consumption_watts * usage_duration_hours / 1000)将功率与时长相乘转换为千瓦时单位，聚合计算每组总能耗  【step3】:【按温度排序验证能耗趋势】将分组结果按temperature_setting_celsius升序排列，观测设定温度越低时的能耗递增趋势关系",
    "english_step": "**[step1]**: **[Filter records where cooling mode's set temperature is lower than outdoor temperature]** Filter the usage_records table using a WHERE clause to retain usage records where mode='cooling' and temperature_setting_celsius < outdoor_temperature_celsius  **[step2]**: **[Group by temperature setting to calculate total energy consumption]** Group the filtered data by temperature_setting_celsius, then use SUM(power_consumption_watts * usage_duration_hours / 1000) to convert power and duration into kilowatt-hour units, aggregating the total energy consumption per group  **[step3]**: **[Sort by temperature to verify energy consumption trend]** Order the grouped results by temperature_setting_celsius in ascending order, observing the increasing trend in energy consumption as the set temperature decreases"
  },
  {
    "db_id": "air_conditioner",
    "question": "如果一台空调的制冷能力为10000 BTU，假设在极端情况下，室外温度达到60°C，室内温度设置为-10°C，计算这台空调在这种极端条件下的理论能耗。",
    "query": "SELECT cooling_capacity_btu * ((60 - (-10)) / 20) * 1 AS theoretical_energy_consumption_btu FROM air_conditioner_info WHERE cooling_capacity_btu = 10000;",
    "type": "4",
    "idx": 20,
    "englishquestion": "If an air conditioner has a cooling capacity of 10,000 BTU, assuming in extreme conditions where the outdoor temperature reaches 60°C and the indoor temperature is set to -10°C, calculate the theoretical energy consumption of this air conditioner under such extreme conditions.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【筛选制冷能力为10000 BTU的空调记录】  【step2】:【计算温差：60°C - (-10°C) =70°C，并取1/20比例系数】  【step3】:【代入公式计算理论能耗：cooling_capacity_btu × (温差/20) ×1】",
    "english_step": "【step1】:【Filter air conditioning records with a cooling capacity of 10,000 BTU】  【step2】:【Calculate temperature difference: 60°C - (-10°C) = 70°C, and take the 1/20 proportionality factor】  【step3】:【Apply the formula to calculate theoretical energy consumption: cooling_capacity_btu × (temperature_difference / 20) × 1】"
  },
  {
    "db_id": "air_conditioner",
    "question": "如果一台空调在制热模式下运行，室内温度从10°C升高到20°C，且功率消耗为1500W，计算空调在运行过程中向室内传递的热量。",
    "query": "SELECT power_consumption_watts * usage_duration_hours * 3600 AS heat_transfer_joules FROM usage_records WHERE mode = 'heating' AND power_consumption_watts = 1500 AND indoor_temperature_celsius = 10 AND temperature_setting_celsius = 20;",
    "type": "1",
    "idx": 21,
    "englishquestion": "If an air conditioner is operating in heating mode, with the indoor temperature rising from 10°C to 20°C and a power consumption of 1500W, calculate the amount of heat transferred to the indoor space during the operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：power_consumption_watts, usage_duration_hours, mode, indoor_temperature_celsius, temperature_setting_celsius  \n【foreign_keys】:【ac_id 关联 air_conditioner_info 表】",
    "evidence": "【step1】:【从usage_records表筛选模式为'heating'且功率为1500瓦、室内温度10°C、设定温度20°C的记录】  【step2】:【匹配能源消耗与工作时长的对应关系】  【step3】:【通过公式 power_consumption_watts * usage_duration_hours * 3600 计算焦耳级热量传递】",
    "english_step": "【step1】:【Filter records from the usage_records table where the mode is 'heating', power is 1500 watts, indoor temperature is 10°C, and set temperature is 20°C】  【step2】:【Establish the correspondence between energy consumption and working duration】  【step3】:【Calculate joule-level heat transfer using the formula: power_consumption_watts * usage_duration_hours * 3600】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在一天内以不同的模式（制冷、制热、除湿）运行，记录显示其功耗分别为1000W、1200W和800W，运行时间分别为2小时、3小时和4小时。计算这台空调在这一天内的平均功耗。",
    "query": "SELECT SUM(power_consumption_watts * usage_duration_hours) / SUM(usage_duration_hours) AS average_power_consumption_watts FROM usage_records WHERE power_consumption_watts IN (1000, 1200, 800) AND usage_duration_hours IN (2, 3, 4);",
    "type": "2",
    "idx": 22,
    "englishquestion": "Assuming an air conditioner operates in different modes (cooling, heating, dehumidifying) within a day, with recorded power consumptions of 1000W, 1200W, and 800W, and operating times of 2 hours, 3 hours, and 4 hours respectively. Calculate the average power consumption of this air conditioner for that day.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：power_consumption_watts, usage_duration_hours  \n【foreign_keys】:【usage_records.ac_id => air_conditioner_info.ac_id】",
    "evidence": "【step1】:根据条件过滤使用记录：WHERE子句筛选power_consumption_watts IN (1000,1200,800)和usage_duration_hours IN (2,3,4)的三种模式运行记录  【step2】:计算总功率消耗量：通过SUM(power_consumption_watts * usage_duration_hours)计算全天总瓦时数  【step3】:加权时间求平均值：用总瓦时数除以总运行时间SUM(usage_duration_hours)得到全天平均功耗",
    "english_step": "【step1】: Filter usage records based on conditions: Use WHERE clause to select operational records where power_consumption_watts IN (1000,1200,800) and usage_duration_hours IN (2,3,4)  【step2】: Calculate total power consumption: Compute total daily watt-hours through SUM(power_consumption_watts * usage_duration_hours)  【step3】: Calculate weighted average power consumption: Divide total watt-hours by total runtime SUM(usage_duration_hours) to obtain daily average power consumption"
  },
  {
    "db_id": "air_conditioner",
    "question": "在冬季低温天气中，为什么空调在制热模式下设置较高的温度会导致更高的能耗？",
    "query": "SELECT SUM(power_consumption_watts * usage_duration_hours / 1000) AS total_energy_consumption_kwh FROM usage_records WHERE mode = 'heating' AND temperature_setting_celsius > outdoor_temperature_celsius GROUP BY temperature_setting_celsius ORDER BY temperature_setting_celsius;",
    "type": "3",
    "idx": 23,
    "englishquestion": "In cold winter weather, why does setting a higher temperature in heating mode on an air conditioner lead to higher energy consumption?",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：power_consumption_watts, usage_duration_hours, mode, temperature_setting_celsius, outdoor_temperature_celsius 【foreign_keys】:【ac_id → air_conditioner_info(ac_id)】",
    "evidence": "【step1】:【应用过滤条件，筛选制热模式且设定温度高于室外温度的使用记录】  【step2】:【按设定温度分组，计算每组总能耗（功率×时长转换为千瓦时）】  【step3】:【按设定温度升序排列结果，建立温度与能耗的直接对应关系】",
    "english_step": "【step1】:【Apply filtering conditions to select usage records in heating mode where the set temperature exceeds the outdoor temperature】  【step2】:【Group by set temperature and calculate total energy consumption per group (power × duration converted to kilowatt-hours)】  【step3】:【Sort results in ascending order of set temperature to establish direct correspondence between temperature and energy consumption】"
  },
  {
    "db_id": "air_conditioner",
    "question": "如果一台空调的制热能力为12000 BTU，假设在极端情况下，室外温度达到-30°C，室内温度设置为40°C，计算这台空调在这种极端条件下的理论能耗。",
    "query": "SELECT heating_capacity_btu * ((40 - (-30)) / 20) * 1 AS theoretical_energy_consumption_btu FROM air_conditioner_info WHERE heating_capacity_btu = 12000;",
    "type": "4",
    "idx": 24,
    "englishquestion": "If an air conditioner has a heating capacity of 12,000 BTU, assuming an extreme scenario where the outdoor temperature reaches -30°C and the indoor temperature is set to 40°C, calculate the theoretical energy consumption of this air conditioner under such extreme conditions.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：heating_capacity_btu  \n【foreign_keys】:【ac_id（关联air_conditioner_info主键）】",
    "evidence": "【step1】:【从air_conditioner_info表筛选制热能力为12000 BTU的空调记录】  【step2】:【计算极端温差梯度系数：(设定温度40°C - 室外温度-30°C)/标准温差20°C，得到3.5倍温差系数】  【step3】:【将制热能力值乘以温差系数和基础能耗系数1，生成理论能耗值theoretical_energy_consumption_btu】",
    "english_step": "【step1】: 【Filter records from air_conditioner_info table where heating capacity is 12000 BTU】  【step2】: 【Calculate extreme temperature gradient coefficient: (set temperature 40°C - outdoor temperature -30°C) / standard temperature difference 20°C = 3.5x temperature difference coefficient】  【step3】: 【Multiply heating capacity value by temperature difference coefficient and base energy consumption coefficient 1 to generate theoretical_energy_consumption_btu】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有空调的制冷能力（cooling_capacity_btu）和功耗（power_consumption_watts），计算每台空调的制冷效率（制冷能力/功耗），并按照制冷效率从高到低降序排列，列出排名前10的空调型号及其制造商。",
    "query": "SELECT model, manufacturer, cooling_capacity_btu, power_consumption_watts, (cooling_capacity_btu / power_consumption_watts) AS cooling_efficiency FROM air_conditioner_info ORDER BY cooling_efficiency DESC LIMIT 10;",
    "type": "1",
    "idx": 25,
    "englishquestion": "Query the cooling capacity (cooling_capacity_btu) and power consumption (power_consumption_watts) of all air conditioners, calculate the cooling efficiency of each air conditioner (cooling capacity/power consumption), and sort them in descending order of cooling efficiency to list the top 10 air conditioner models and their manufacturers.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, manufacturer, cooling_capacity_btu, power_consumption_watts  \n【foreign_keys】:【（本查询未涉及表关联/无显式外键约束引用）】",
    "evidence": "【step1】:【从air_conditioner_info表提取模型、制造商、制冷能力、功耗字段并计算效率比】  【step2】:【通过表达式(cooling_capacity_btu / power_consumption_watts)生成临时计算列cooling_efficiency】  【step3】:【对计算结果降序排序并通过LIMIT 10限制最终返回行数】",
    "english_step": "【step1】:【Extract the model, manufacturer, cooling capacity (BTU), power consumption (watts) fields from the air_conditioner_info table and calculate the efficiency ratio】  【step2】:【Generate a temporary calculated column cooling_efficiency using the expression (cooling_capacity_btu / power_consumption_watts)】  【step3】:【Sort the calculation results in descending order and limit the final returned rows to 10 using LIMIT 10】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有空调的生产年份（production_year）和能效比（energy_efficiency_ratio），计算每台空调的能效比与生产年份的比值（能效比/生产年份），并按照该比值从高到低降序排列，列出排名前5的空调型号及其制造商。",
    "query": "SELECT model, manufacturer, production_year, energy_efficiency_ratio, (energy_efficiency_ratio / production_year) AS efficiency_year_ratio FROM air_conditioner_info ORDER BY efficiency_year_ratio DESC LIMIT 5;",
    "type": "2",
    "idx": 26,
    "englishquestion": "Query all air conditioners' production year (production_year) and energy efficiency ratio (energy_efficiency_ratio), calculate the ratio of each air conditioner's energy efficiency ratio to its production year (energy_efficiency_ratio/production_year), and sort them in descending order based on this ratio. List the top 5 air conditioner models along with their manufacturers.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, manufacturer, production_year, energy_efficiency_ratio  \n【foreign_keys】: []",
    "evidence": "【step1】:【从空调信息表中选择模型、制造商、生产年份、能效比字段，并计算能效比与生产年份的比值作为新字段列】  【step2】:【根据新计算的能效比年份比值字段进行降序排序，使较高比值的记录优先显示】  【step3】:【使用LIMIT限制仅输出排名前5的空调型号及制造商信息】",
    "english_step": "【step1】: 【Select the model, manufacturer, production year, energy efficiency ratio fields from the air conditioner information table, and calculate the ratio of energy efficiency ratio to production year as a new column】  【step2】: 【Sort in descending order based on the newly calculated energy efficiency ratio-year ratio column, prioritizing records with higher ratios】  【step3】: 【Use LIMIT to restrict output to only the top 5 ranked air conditioner models and manufacturer information】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有空调的噪音水平（noise_level_db）和重量（weight_kg），计算每台空调的噪音水平与重量的比值（噪音水平/重量），并按照该比值从低到高升序排列，列出噪音水平与重量比值最小的前5款空调型号及其制造商。同时，分析这些空调的噪音水平与重量之间的关系。",
    "query": "SELECT model, manufacturer, noise_level_db, weight_kg, (noise_level_db / weight_kg) AS noise_weight_ratio FROM air_conditioner_info WHERE weight_kg > 0 ORDER BY noise_weight_ratio ASC LIMIT 5;",
    "type": "3",
    "idx": 27,
    "englishquestion": "Query the noise level (noise_level_db) and weight (weight_kg) of all air conditioners, calculate the ratio of noise level to weight (noise_level/weight_kg) for each unit, and sort them in ascending order from low to high based on this ratio. List the top 5 air conditioner models with the smallest noise level-to-weight ratio along with their manufacturers. Additionally, analyze the relationship between the noise level and weight of these air conditioners.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, manufacturer, noise_level_db, weight_kg  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【SELECT模型、制造商、噪音水平、重量，并计算噪音/重量比值】  【step2】:【过滤有效重量(weight_kg > 0)避免除零错误】  【step3】:【按比值排序取前5】",
    "english_step": "【Step 1】: 【SELECT model, manufacturer, noise_level, weight_kg, and compute noise_level/weight_kg ratio】  【Step 2】: 【Filter valid weight (weight_kg > 0) to avoid division by zero errors】  【Step 3】: 【Order by ratio descending and select top 5 entries】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调的制冷能力（cooling_capacity_btu）超过20000 BTU且功耗（power_consumption_watts）低于1000W，查询所有空调的制冷能力和功耗，计算每台空调的制冷能力与功耗的比值（制冷能力/功耗），并按照该比值从高到低降序排列，列出制冷能力与功耗比值最高的前5款空调型号及其制造商。",
    "query": "SELECT model, manufacturer, cooling_capacity_btu, power_consumption_watts, (cooling_capacity_btu / power_consumption_watts) AS cooling_power_ratio FROM air_conditioner_info WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000 ORDER BY cooling_power_ratio DESC LIMIT 5;",
    "type": "4",
    "idx": 28,
    "englishquestion": "Assuming an air conditioner has a cooling capacity (cooling_capacity_btu) exceeding 20,000 BTU and power consumption (power_consumption_watts) below 1,000W, query all air conditioners' cooling capacity and power consumption, calculate the ratio of cooling capacity to power consumption for each unit (cooling capacity / power consumption), and sort them in descending order based on this ratio. Then list the top 5 air conditioner models with the highest cooling capacity to power consumption ratio, along with their manufacturers.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, manufacturer, cooling_capacity_btu, power_consumption_watts 【foreign_keys】:【None】",
    "evidence": "【step1】:【应用过滤条件】筛选出空调信息表中制冷能力>20000且功耗<1000的记录（WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000）  【step2】:【计算并排序】对筛选出的记录计算冷却效率比值（cooling_capacity_btu/power_consumption_watts），并按照该比值降序排列（ORDER BY cooling_power_ratio DESC）  【step3】:【限制结果集】取冷却效率最高的前5条记录，最终输出型号、制造商、制冷能力、功耗及比值（LIMIT 5包含TOP-N功能）",
    "english_step": "【step1】:【Apply filter conditions】Filter records in the air conditioner information table where cooling capacity >20000 BTU and power consumption <1000 watts (WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000)  【step2】:【Calculate and sort】Calculate the cooling power ratio (cooling_capacity_btu/power_consumption_watts) for filtered records, then sort in descending order by this ratio (ORDER BY cooling_power_ratio DESC)  【step3】:【Limit result set】Select top 5 records with highest cooling efficiency, outputting model, manufacturer, cooling capacity, power consumption, and ratio (LIMIT 5 includes TOP-N functionality)"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有能耗记录中的功耗（power_consumption_watts）和运行时间（usage_duration_hours），计算每台空调的总能耗（功耗 * 运行时间），并按照总能耗从高到低降序排列，列出总能耗最高的前10条记录及其对应的空调型号和记录日期。",
    "query": "SELECT ur.usage_id, ai.model, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY total_energy_consumption DESC LIMIT 10;",
    "type": "1",
    "idx": 29,
    "englishquestion": "Query all power consumption (power_consumption_watts) and runtime (usage_duration_hours) in the energy consumption records, calculate the total energy consumption (power consumption * runtime) for each air conditioner, sort it in descending order from highest to lowest total energy consumption, and list the top 10 records with the highest total energy consumption along with their corresponding air conditioner models and record dates.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_id, ac_id, usage_date, power_consumption_watts, usage_duration_hours  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】:【usage_records.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【JOIN usage_records与air_conditioner_info表关联，提取所需字段】通过ac_id进行表关联，选择usage_id、model、usage_date、power_consumption_watts、usage_duration_hours字段    【step2】:【计算总能耗并显式命名】将power_consumption_watts与usage_duration_hours字段相乘生成total_energy_consumption计算字段，建立临时结果集    【step3】:【排序并应用限制条件】按total_energy_consumption进行降序排列后，使用LIMIT 10获取总能耗最高的前10条记录",
    "english_step": "[Step 1]: [JOIN usage_records with air_conditioner_info table and extract required fields] Associate tables via ac_id, select fields: usage_id, model, usage_date, power_consumption_watts, usage_duration_hours  [Step 2]: [Calculate total energy consumption and explicitly name it] Generate calculated field total_energy_consumption by multiplying power_consumption_watts and usage_duration_hours, create temporary result set  [Step 3]: [Sort and apply constraints] Sort by total_energy_consumption in descending order, then use LIMIT 10 to retrieve top 10 records with highest total energy consumption"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有能耗记录中的温度设置（temperature_setting_celsius）和室内温度（indoor_temperature_celsius），计算每台空调的温度差（温度设置 - 室内温度），并按照温度差从高到低降序排列，列出温度差最大的前5条记录及其对应的空调型号和记录日期。",
    "query": "SELECT ur.usage_id, ai.model, ur.usage_date, ur.temperature_setting_celsius, ur.indoor_temperature_celsius, (ur.temperature_setting_celsius - ur.indoor_temperature_celsius) AS temperature_difference FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY temperature_difference DESC LIMIT 5;",
    "type": "2",
    "idx": 30,
    "englishquestion": "Query all temperature settings (temperature_setting_celsius) and indoor temperatures (indoor_temperature_celsius) from the energy consumption records, calculate the temperature difference (temperature setting - indoor temperature) for each air conditioner, sort them in descending order by the temperature difference, and list the top 5 records with the largest temperature differences along with their corresponding air conditioner models and record dates.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_id, ac_id, usage_date, temperature_setting_celsius, indoor_temperature_celsius  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【JOIN usage_records和air_conditioner_info表，获取空调型号与温度数据】  【step2】:【计算温度差字段（temperature_setting_celsius - indoor_temperature_celsius）】  【step3】:【对结果集按温度差降序排序，使用LIMIT 5截取前五条记录】",
    "english_step": "【step1】:【Join the usage_records and air_conditioner_info tables to retrieve air conditioner models and temperature data】  【step2】:【Calculate the temperature difference field (temperature_setting_celsius - indoor_temperature_celsius)】  【step3】:【Sort the result set by temperature difference in descending order and use LIMIT 5 to fetch the top five records】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有能耗记录中的湿度（humidity_percent）和运行模式（mode），筛选出在除湿模式下运行的记录，并按照湿度从低到高升序排列，列出湿度最低的前5条记录及其对应的空调型号和记录日期。同时，分析这些记录的湿度与运行模式之间的关系。",
    "query": "SELECT ur.usage_id, ai.model, ur.usage_date, ur.humidity_percent, ur.mode FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id WHERE ur.mode = '除湿' ORDER BY ur.humidity_percent ASC LIMIT 5;",
    "type": "3",
    "idx": 31,
    "englishquestion": "Query all humidity (humidity_percent) and operating mode (mode) records in energy consumption data, filter out records running in dehumidification mode, sort them in ascending order by humidity from low to high, and list the top 5 records with the lowest humidity along with their corresponding air conditioner model and recording date. Additionally, analyze the relationship between humidity levels and operating modes in these records.",
    "equation_analysis": "equation_analysis：WHERE模式过滤为除湿→ ORDER BY湿度升序→ LIMIT 5获取最低湿度样本，湿度数值分布可能与特定空调型号参数（能效比/制冷剂类型）存在负相关性",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_id, ac_id, usage_date, humidity_percent, mode  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】：usage_records.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：WHERE模式过滤为除湿→ ORDER BY湿度升序→ LIMIT 5获取最低湿度样本，湿度数值分布可能与特定空调型号参数（能效比/制冷剂类型）存在负相关性",
    "evidence": "【step1】: 通过JOIN关联usage_records和air_conditioner_info表，获取usage_id、model、usage_date、humidity_percent、mode字段  【step2】: 追加WHERE条件ur.mode='除湿'进行模式筛选  【step3】: 最后执行ORDER BY ur.humidity_percent ASC和LIMIT 5实现升序排列与结果数量限制",
    "english_step": "[Step 1]: JOIN the usage_records and air_conditioner_info tables to retrieve the fields usage_id, model, usage_date, humidity_percent, and mode  [Step 2]: Apply WHERE clause ur.mode='Dehumidification' for mode filtering  [Step 3]: Finally execute ORDER BY ur.humidity_percent ASC and LIMIT 5 to achieve ascending sorting and result quantity restriction"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在极端条件下（室外温度60°C，室内温度10°C）运行，查询所有能耗记录中的功耗（power_consumption_watts）和运行时间（usage_duration_hours），计算每台空调的总能耗（功耗 * 运行时间），并按照总能耗从高到低降序排列，列出总能耗最高的前5条记录及其对应的空调型号和记录日期。",
    "query": "SELECT ur.usage_id, ai.model, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info ai ON ur.ac_id = ai.ac_id ORDER BY total_energy_consumption DESC LIMIT 5;",
    "type": "4",
    "idx": 32,
    "englishquestion": "Assuming an air conditioner is operating under extreme conditions (outdoor temperature 60°C, indoor temperature 10°C), query the power consumption (power_consumption_watts) and usage duration (usage_duration_hours) from all energy consumption records, calculate the total energy consumption for each air conditioner (power consumption * usage duration), and sort them in descending order by total energy consumption. List the top 5 records with the highest total energy consumption along with their corresponding air conditioner models and record dates.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_id, ac_id, usage_date, power_consumption_watts, usage_duration_hours  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】:【usage_records.ac_id REFERENCES air_conditioner_info.ac_id】",
    "evidence": "【step1】:【JOIN usage_records和air_conditioner_info表，通过ac_id关联获取空调型号信息】  【step2】:【计算每条记录的能耗总量（power_consumption_watts * usage_duration_hours）作为总能耗】  【step3】:【按总能耗降序排列结果集，返回前5条记录的详细数据】",
    "english_step": "[step1]: [JOIN the usage_records and air_conditioner_info tables via ac_id to obtain air conditioner model information]  [step2]: [Calculate the total energy consumption for each record (power_consumption_watts * usage_duration_hours) as total_energy_consumption]  [step3]: [Sort the result set in descending order by total energy consumption and return detailed data for the top 5 records]"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有温度记录中的室内温度（indoor_temperature_celsius）和室外温度（outdoor_temperature_celsius），计算每台空调的室内外温差（室外温度 - 室内温度），并按照温差从高到低降序排列，列出温差最大的前10条记录及其对应的空调型号和记录日期。",
    "query": "SELECT tr.temperature_id, ai.model, tr.record_date, tr.outdoor_temperature_celsius, tr.indoor_temperature_celsius, (tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS temperature_difference FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id ORDER BY temperature_difference DESC LIMIT 10;",
    "type": "1",
    "idx": 33,
    "englishquestion": "Retrieve all indoor temperatures (indoor_temperature_celsius) and outdoor temperatures (outdoor_temperature_celsius) from the temperature records, calculate the temperature difference (outdoor temperature - indoor temperature) for each air conditioner, sort the results in descending order by the temperature difference, and list the top 10 records with the largest temperature differences along with their corresponding air conditioner models and recording dates.",
    "equation_analysis": "equation_analysis：(outdoor_temperature_celsius - indoor_temperature_celsius) AS temperature_difference → 温差=室外温度-室内温度，降序取TOP10",
    "used_table_info": "【table】：【temperature_records】 【columns】：temperature_id, record_date, outdoor_temperature_celsius, indoor_temperature_celsius, ac_id  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】：temperature_records.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：(outdoor_temperature_celsius - indoor_temperature_celsius) AS temperature_difference → 温差=室外温度-室内温度，降序取TOP10",
    "evidence": "【step1】:【连接温度记录表与空调信息表，通过ac_id关联，选择所需字段并计算温差】  【step2】:【按温差降序排序结果集】  【step3】:【限制输出结果为前10条温差最大的记录】",
    "english_step": "【step1】:【Join the temperature_records table with the air_conditioner_info table using ac_id, select required fields, and calculate the temperature difference】  【step2】:【Sort the result set by temperature difference in descending order】  【step3】:【Limit the output to the top 10 records with the largest temperature differences】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有温度记录中的温度设置（temperature_setting_celsius）和室内温度（indoor_temperature_celsius），计算每台空调的温度偏差（室内温度 - 温度设置），并按照温度偏差的绝对值从高到低降序排列，列出温度偏差最大的前5条记录及其对应的空调型号和记录日期。",
    "query": "SELECT tr.temperature_id, ai.model, tr.record_date, tr.temperature_setting_celsius, tr.indoor_temperature_celsius, ABS(tr.indoor_temperature_celsius - tr.temperature_setting_celsius) AS temperature_deviation FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id ORDER BY temperature_deviation DESC LIMIT 5;",
    "type": "2",
    "idx": 34,
    "englishquestion": "Query all temperature settings (temperature_setting_celsius) and indoor temperatures (indoor_temperature_celsius) from temperature records, calculate the temperature deviation for each air conditioner (indoor temperature - temperature setting), and sort them in descending order based on the absolute value of the temperature deviation. List the top 5 records with the largest temperature deviations along with their corresponding air conditioner models and record dates.",
    "equation_analysis": "",
    "used_table_info": "【table】：【temperature_records】 【columns】：temperature_id, ac_id, record_date, indoor_temperature_celsius, temperature_setting_celsius  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】: tr.ac_id → ai.ac_id",
    "evidence": "【step1】:【连接temperature_records和air_conditioner_info表，获取空调型号、记录日期及温度相关字段】 【step2】:【计算温度偏差的绝对值(indoor_temperature_celsius - temperature_setting_celsius)作为新列】 【step3】:【按照temperature_deviation列降序排列并限制返回前5条记录】",
    "english_step": "Step 1: Join the temperature_records and air_conditioner_info tables to retrieve air conditioner models, recording dates, and temperature-related fields.  Step 2: Calculate the absolute value of the temperature deviation (indoor_temperature_celsius - temperature_setting_celsius) as a new column.  Step 3: Sort records in descending order by the temperature_deviation column and limit the output to the top 5 records."
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有温度记录中的运行模式（mode）和室内温度（indoor_temperature_celsius），筛选出在制冷模式下运行的记录，并按照室内温度从低到高升序排列，列出室内温度最低的前5条记录及其对应的空调型号和记录日期。同时，分析这些记录的室内温度与运行模式之间的关系。",
    "query": "SELECT tr.temperature_id, ai.model, tr.record_date, tr.mode, tr.indoor_temperature_celsius FROM temperature_records tr JOIN air_conditioner_info ai ON tr.ac_id = ai.ac_id WHERE tr.mode = '制冷' ORDER BY tr.indoor_temperature_celsius ASC LIMIT 5;",
    "type": "3",
    "idx": 35,
    "englishquestion": "Query all running modes (mode) and indoor temperatures (indoor_temperature_celsius) from the temperature records, filter out the records running in cooling mode, and sort them in ascending order based on indoor temperature from lowest to highest. List the top 5 records with the lowest indoor temperatures along with their corresponding air conditioner models and record dates. Additionally, analyze the relationship between the indoor temperature and running mode in these records.",
    "equation_analysis": "",
    "used_table_info": "【table】：【temperature_records】 【columns】：temperature_id, ac_id, record_date, mode, indoor_temperature_celsius  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】: temperature_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【连接温度记录表与空调信息表，选择温度ID、空调型号、记录日期、模式、室内温度五个字段】  【step2】:【应用模式过滤条件保留运行模式为'制冷'的数据】  【step3】:【按室内温度升序排序后截取最低5条记录，完成最终结果输出】",
    "english_step": "[Step1]: [Join the temperature_records table with the air_conditioner_info table, selecting the five fields: temperature_id, ac_model, record_date, mode, and indoor_temperature]  [Step2]: [Apply mode filter to retain data where the operating mode is 'Cooling']  [Step3]: [Sort by indoor_temperature in ascending order and extract the lowest 5 records to complete the final result output]"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在极端条件下（室外温度-30°C，室内温度40°C）运行，查询所有温度记录中的室内温度（indoor_temperature_celsius）和室外温度（outdoor_temperature_celsius），计算每台空调的室内外温差（室外温度 - 室内温度），并按照温差从高到低降序排列，列出温差最大的前5条记录及其对应的空调型号和记录日期。同时，假设这些空调在极端条件下运行，估算其理论能耗。",
    "query": "WITH TemperatureDifference AS ( SELECT tr.ac_id, tr.record_date, tr.indoor_temperature_celsius, tr.outdoor_temperature_celsius, (tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS temperature_difference, aci.model, aci.heating_capacity_btu FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id WHERE tr.outdoor_temperature_celsius = -30 AND tr.indoor_temperature_celsius = 40 ) SELECT td.ac_id, td.record_date, td.indoor_temperature_celsius, td.outdoor_temperature_celsius, td.temperature_difference, td.model, (td.heating_capacity_btu * (td.temperature_difference / 10) * ur.usage_duration_hours) AS estimated_energy_consumption FROM TemperatureDifference td JOIN usage_records ur ON td.ac_id = ur.ac_id AND td.record_date = ur.usage_date ORDER BY td.temperature_difference DESC LIMIT 5;",
    "type": "4",
    "idx": 36,
    "englishquestion": "Assuming an air conditioner operates under extreme conditions (outdoor temperature -30°C, indoor temperature 40°C), query all indoor temperatures (indoor_temperature_celsius) and outdoor temperatures (outdoor_temperature_celsius) from the temperature records. Calculate the temperature difference (outdoor temperature - indoor temperature) for each air conditioner, sort them in descending order from highest to lowest, and list the top 5 records with the largest temperature differences along with their corresponding air conditioner models and record dates. Additionally, assuming these air conditioners operate under extreme conditions, estimate their theoretical energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【temperature_records】 【columns】：ac_id, record_date, indoor_temperature_celsius, outdoor_temperature_celsius  \n【table】：【air_conditioner_info】 【columns】：ac_id, model, heating_capacity_btu  \n【table】：【usage_records】 【columns】：ac_id, usage_date, usage_duration_hours  \n【foreign_keys】: tr.ac_id ↔ aci.ac_id ; td.ac_id ↔ ur.ac_id",
    "evidence": "【step1】:【创建CTE进行温度筛选和温差计算】通过JOIN关联空调信息表和温度记录表，筛选满足极端条件(outdoor=-30℃且indoor=40℃)的记录，计算temperature_difference=outdoor-indoor，获取heating_capacity_btu等参数  【step2】:【计算理论能耗并关联使用记录】将中间结果与usage_records表通过ac_id和日期连接，使用公式(制热能力 × 温差/10 × 工作时长)计算estimated_energy_consumption  【step3】:【排序筛选结果】按温差降序排列结果，使用LIMIT 5取最大的前5条温差记录，包含空调型号、记录日期等完整信息",
    "english_step": "【step1】:【Create CTE for temperature filtering and temperature difference calculation】JOIN the air conditioner info table with temperature records table, filter records meeting extreme conditions (outdoor=-30℃ and indoor=40℃), calculate temperature_difference=outdoor-indoor, obtain parameters like heating_capacity_btu  【step2】:【Calculate theoretical energy consumption and link usage records】Connect intermediate results with usage_records table via ac_id and date, calculate estimated_energy_consumption using formula (heating capacity × temperature difference/10 × operating duration)  【step3】:【Sort and filter results】Order results by temperature difference descending, use LIMIT 5 to retrieve top 5 records with largest temperature difference, containing complete information like AC model and record date"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有湿度记录中的室内湿度（indoor_humidity_percent）和室外湿度（outdoor_humidity_percent），计算每台空调的室内外湿度差（室外湿度 - 室内湿度），并按照湿度差从高到低降序排列，列出湿度差最大的前10条记录及其对应的空调型号和记录日期。",
    "query": "WITH HumidityDifference AS ( SELECT hr.ac_id, hr.record_date, hr.indoor_humidity_percent, hr.outdoor_humidity_percent, (hr.outdoor_humidity_percent - hr.indoor_humidity_percent) AS humidity_difference, aci.model FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id ) SELECT hd.ac_id, hd.record_date, hd.indoor_humidity_percent, hd.outdoor_humidity_percent, hd.humidity_difference, hd.model FROM HumidityDifference hd ORDER BY hd.humidity_difference DESC LIMIT 10; ",
    "type": "1",
    "idx": 37,
    "englishquestion": "Query all humidity records for indoor humidity (indoor_humidity_percent) and outdoor humidity (outdoor_humidity_percent), calculate the indoor-outdoor humidity difference (outdoor humidity - indoor humidity) for each air conditioner, sort them in descending order by the humidity difference, and list the top 10 records with the largest humidity difference along with their corresponding air conditioner model and record date.",
    "equation_analysis": "",
    "used_table_info": "【table】：【humidity_records】 【columns】：ac_id, record_date, indoor_humidity_percent, outdoor_humidity_percent  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】: humidity_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】: 连接湿度记录表与空调信息表，关联ac_id获取空调型号  【step2】: 计算字段生成湿度差值（outdoor_humidity_percent - indoor_humidity_percent）  【step3】: 按湿度差降序排列后截取前10条记录",
    "english_step": "[Step1]: Join the humidity_records table with the ac_info table on ac_id to obtain the air conditioner model  [Step2]: Generate a computed field for humidity difference (outdoor_humidity_percent - indoor_humidity_percent)  [Step3]: Sort by humidity difference in descending order and retrieve the top 10 records"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有湿度记录中的温度设置（temperature_setting_celsius）和室内湿度（indoor_humidity_percent），计算每台空调的湿度偏差（室内湿度 - 标准湿度），其中标准湿度为50%，并按照湿度偏差的绝对值从高到低降序排列，列出湿度偏差最大的前5条记录及其对应的空调型号和记录日期。",
    "query": "WITH HumidityDeviation AS ( SELECT hr.ac_id, hr.record_date, hr.temperature_setting_celsius, hr.indoor_humidity_percent, (hr.indoor_humidity_percent - 50) AS humidity_deviation, aci.model FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id ) SELECT hd.ac_id, hd.record_date, hd.temperature_setting_celsius, hd.indoor_humidity_percent, hd.humidity_deviation, hd.model FROM HumidityDeviation hd ORDER BY ABS(hd.humidity_deviation) DESC LIMIT 5;",
    "type": "2",
    "idx": 38,
    "englishquestion": "Query all humidity records for the temperature setting (temperature_setting_celsius) and indoor humidity (indoor_humidity_percent), calculate the humidity deviation for each air conditioner (indoor humidity - standard humidity), where the standard humidity is 50%, then sort by the absolute value of the humidity deviation in descending order from highest to lowest, and list the top 5 records with the largest humidity deviation along with their corresponding air conditioner models and record dates.",
    "equation_analysis": "equation_analysis：humidity_deviation = indoor_humidity_percent - 50",
    "used_table_info": "【table】：【humidity_records】 【columns】：ac_id, record_date, temperature_setting_celsius, indoor_humidity_percent  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】：humidity_records.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：humidity_deviation = indoor_humidity_percent - 50",
    "evidence": "【step1】:【JOIN湿度记录表与空调信息表，关联获取空调型号，并计算初始湿度偏差(室内湿度-50)】  【step2】:【在CTE临时结果集HumidityDeviation中计算包含绝对值的排序依据字段】  【step3】:【对计算结果按湿度偏差绝对值降序排列，运用LIMIT取前5条完整记录】",
    "english_step": "【step1】:【JOIN the humidity_records table with the air_conditioner_info table to associate the AC model and calculate initial humidity deviation (indoor_humidity - 50)】  【step2】:【In the CTE temporary result set HumidityDeviation, compute a sorting criteria field containing absolute values】  【step3】:【Sort results by absolute humidity deviation in descending order, use LIMIT to retrieve top 5 complete records】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有湿度记录中的运行模式（mode）和室内湿度（indoor_humidity_percent），筛选出在除湿模式下运行的记录，并按照室内湿度从低到高升序排列，列出室内湿度最低的前5条记录及其对应的空调型号和记录日期。同时，分析这些记录的室内湿度与运行模式之间的关系。",
    "query": "SELECT hr.ac_id, hr.record_date, hr.mode, hr.indoor_humidity_percent, aci.model FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id WHERE hr.mode = '除湿' ORDER BY hr.indoor_humidity_percent ASC LIMIT 5;",
    "type": "3",
    "idx": 39,
    "englishquestion": "Query all humidity records for operation mode (mode) and indoor humidity (indoor_humidity_percent), filter out records running in dehumidification mode, and sort them in ascending order by indoor humidity. List the top 5 records with the lowest indoor humidity along with their corresponding air conditioner model and record date. Additionally, analyze the relationship between the indoor humidity and operation mode in these records.",
    "equation_analysis": "equation_analysis：mode筛选条件：mode='除湿'；排序条件：indoor_humidity_percent升序；极值分析：LIMIT5最低5条；关联分析：跨表match空调型号；统计逻辑：通过低湿度排序验证除湿模式的有效性",
    "used_table_info": "【table】：【humidity_records】 【columns】：ac_id, record_date, mode, indoor_humidity_percent  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】：【humidity_records.ac_id → air_conditioner_info.ac_id】  \n【equation_analysis】：【mode筛选条件：mode='除湿'；排序条件：indoor_humidity_percent升序；极值分析：LIMIT5最低5条；关联分析：跨表match空调型号；统计逻辑：通过低湿度排序验证除湿模式的有效性】",
    "evidence": "【step1】: 从湿度记录表中筛选运行模式为'除湿'的记录  【step2】: 通过ac_id关联空调信息表获取型号字段  【step3】: 按室内湿度升序排列后截取最低5条结果",
    "english_step": "【step1】: Filter records from the humidity_records table where operation_mode is 'Dehumidification'  【step2】: Join with air_conditioner_info table via ac_id to obtain model field  【step3】: Order by indoor_humidity in ascending order and select the lowest 5 results"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在极端条件下（室外湿度100%，室内湿度0%）运行，查询所有湿度记录中的室内湿度（indoor_humidity_percent）和室外湿度（outdoor_humidity_percent），计算每台空调的室内外湿度差（室外湿度 - 室内湿度），并按照湿度差从高到低降序排列，列出湿度差最大的前5条记录及其对应的空调型号和记录日期。同时，假设这些空调在极端条件下运行，估算其理论能耗。",
    "query": "WITH HumidityDifference AS ( SELECT hr.ac_id, hr.record_date, hr.indoor_humidity_percent, hr.outdoor_humidity_percent, (hr.outdoor_humidity_percent - hr.indoor_humidity_percent) AS humidity_difference, aci.model, aci.power_consumption_watts FROM humidity_records hr JOIN air_conditioner_info aci ON hr.ac_id = aci.ac_id WHERE hr.outdoor_humidity_percent = 100 AND hr.indoor_humidity_percent = 0 ) SELECT hd.ac_id, hd.record_date, hd.indoor_humidity_percent, hd.outdoor_humidity_percent, hd.humidity_difference, hd.model, (hd.power_consumption_watts * (hd.humidity_difference / 50) * ur.usage_duration_hours) AS estimated_energy_consumption FROM HumidityDifference hd JOIN usage_records ur ON hd.ac_id = ur.ac_id AND hd.record_date = ur.usage_date ORDER BY hd.humidity_difference DESC LIMIT 5;",
    "type": "4",
    "idx": 40,
    "englishquestion": "Assuming an air conditioner is operating under extreme conditions (outdoor humidity at 100%, indoor humidity at 0%), query all humidity records for indoor humidity (indoor_humidity_percent) and outdoor humidity (outdoor_humidity_percent). Calculate the indoor-outdoor humidity difference (outdoor humidity - indoor humidity) for each air conditioner, and sort the results in descending order by the humidity difference, listing the top 5 records with the largest humidity differences, along with their corresponding air conditioner models and record dates. Additionally, assuming these air conditioners are running under extreme conditions, estimate their theoretical energy consumption.",
    "equation_analysis": "equation_analysis：estimated_energy_consumption = (空调功率 × (湿度差/50基数参数) × 使用时长)。假设湿度差每50%为能耗基准比例（如湿度差100-0=100%时系数为2），最终能耗与功率、使用时长呈线性关系。",
    "used_table_info": "【table】：【humidity_records】 【columns】：ac_id, record_date, indoor_humidity_percent, outdoor_humidity_percent  \n【table】：【air_conditioner_info】 【columns】：ac_id, model, power_consumption_watts  \n【table】：【usage_records】 【columns】：ac_id, usage_date, usage_duration_hours  \n【foreign_keys】：humidity_records.ac_id → air_conditioner_info.ac_id；usage_records.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：estimated_energy_consumption = (空调功率 × (湿度差/50基数参数) × 使用时长)。假设湿度差每50%为能耗基准比例（如湿度差100-0=100%时系数为2），最终能耗与功率、使用时长呈线性关系。",
    "evidence": "【step1】:【创建公共表达式HumidityDifference，筛选出符合极端湿度条件（室外100%室内0%）的湿度记录，并与air_conditioner_info表关联获取功率和型号字段，同时计算基础湿度差（室外湿度-室内湿度）】  【step2】:【将临时表HumidityDifference与usage_records表通过空调ID和日期关联，添加能耗估算逻辑（power_consumption_watts * (humidity_difference/50) * 使用时长）】  【step3】:【按湿度差降序排列结果并取前5条记录，最终输出空调ID、日期、湿度相关字段、型号及估算能耗】",
    "english_step": "【step1】:【Create a CTE HumidityDifference to filter humidity records meeting extreme humidity conditions (outdoor 100% and indoor 0%), join with air_conditioner_info table to obtain power and model fields, and calculate base humidity difference (outdoor_humidity - indoor_humidity)】  【step2】:【Join temporary table HumidityDifference with usage_records via AC ID and date, add energy consumption estimation logic (power_consumption_watts * (humidity_difference/50) * usage duration)】  【step3】:【Sort results by humidity difference descending and select top 5 records, final output includes AC ID, date, humidity-related fields, model, and estimated energy consumption】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有使用记录中的功耗（power_consumption_watts）和使用时长（usage_duration_hours），计算每台空调的总能耗（功耗 * 使用时长），并按照总能耗从高到低降序排列，列出总能耗最高的前10条记录及其对应的空调型号和使用日期。",
    "query": "WITH TotalEnergyConsumption AS ( SELECT ur.ac_id, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption, aci.model FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT tec.ac_id, tec.usage_date, tec.power_consumption_watts, tec.usage_duration_hours, tec.total_energy_consumption, tec.model FROM TotalEnergyConsumption tec ORDER BY tec.total_energy_consumption DESC LIMIT 10;",
    "type": "1",
    "idx": 41,
    "englishquestion": "Retrieve the power consumption (power_consumption_watts) and usage duration (usage_duration_hours) from all usage records, calculate the total energy consumption (power consumption * usage duration) for each air conditioner, sort them in descending order by total energy consumption, and list the top 10 records with the highest total energy consumption along with their corresponding air conditioner models and usage dates.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, power_consumption_watts, usage_duration_hours  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foeign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【关联使用记录表(usage_records)和空调信息表(air_conditioner_info)，通过ac_id获取对应空调型号】  【step2】:【计算每条记录的总能耗（power_consumption_watts * usage_duration_hours）】  【step3】:【对所有计算结果按总能耗降序排序，使用LIMIT 10限制输出的前10条最高能耗记录】",
    "english_step": "【step1】: Join the usage_records table with the air_conditioner_info table via ac_id to obtain corresponding air conditioner models.  【step2】: Calculate total energy consumption for each record (power_consumption_watts * usage_duration_hours).  【step3】: Sort all results by total energy consumption in descending order and limit output to top 10 highest energy consumption records using LIMIT 10."
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有使用记录中的温度设置（temperature_setting_celsius）和室内温度（indoor_temperature_celsius），计算每台空调的温度偏差（室内温度 - 温度设置），并按照温度偏差的绝对值从高到低降序排列，列出温度偏差最大的前5条记录及其对应的空调型号和使用日期。",
    "query": "WITH TemperatureDeviation AS ( SELECT ur.ac_id, ur.usage_date, ur.temperature_setting_celsius, ur.indoor_temperature_celsius, (ur.indoor_temperature_celsius - ur.temperature_setting_celsius) AS temperature_deviation, aci.model FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT td.ac_id, td.usage_date, td.temperature_setting_celsius, td.indoor_temperature_celsius, td.temperature_deviation, td.model FROM TemperatureDeviation td ORDER BY ABS(td.temperature_deviation) DESC LIMIT 5;",
    "type": "2",
    "idx": 42,
    "englishquestion": "Query all temperature settings (temperature_setting_celsius) and indoor temperatures (indoor_temperature_celsius) from usage records, calculate the temperature deviation (indoor temperature - temperature setting) for each air conditioner, sort them in descending order by the absolute value of the temperature deviation, and list the top 5 records with the largest temperature deviations along with their corresponding air conditioner models and usage dates.",
    "equation_analysis": "equation_analysis：temperature_deviation = (indoor_temperature_celsius - temperature_setting_celsius), 排序依据为ABS(temperature_deviation)",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, temperature_setting_celsius, indoor_temperature_celsius  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】：【usage_records.ac_id → air_conditioner_info.ac_id】  \n【equation_analysis】：temperature_deviation = (indoor_temperature_celsius - temperature_setting_celsius), 排序依据为ABS(temperature_deviation)",
    "evidence": "【step1】:【通过JOIN关联usage_records与air_conditioner_info表，创建CTE临时表计算温度偏差及其绝对值，同时获取空调型号】  【step2】:【按温度偏差绝对值降序排列结果】  【step3】:【使用LIMIT筛选前5条最大偏差记录】",
    "english_step": "Step 1: Create a CTE by JOINing the usage_records and air_conditioner_info tables to calculate temperature deviation and its absolute value, while retrieving the air conditioner model.  Step 2: Order the results by the absolute value of temperature deviation in descending order.  Step 3: Use LIMIT to filter the top 5 records with the largest deviations."
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有使用记录中的运行模式（mode）和使用时长（usage_duration_hours），筛选出在制冷模式下运行的记录，并按照使用时长从高到低降序排列，列出使用时长最长的前5条记录及其对应的空调型号和使用日期。同时，分析这些记录的使用时长与运行模式之间的关系。",
    "query": "SELECT ur.ac_id, ur.usage_date, ur.mode, ur.usage_duration_hours, aci.model FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id WHERE ur.mode = '制冷' ORDER BY ur.usage_duration_hours DESC LIMIT 5;",
    "type": "3",
    "idx": 43,
    "englishquestion": "Retrieve the operation mode (mode) and usage duration (usage_duration_hours) from all usage records, filter out the records running in cooling mode, and sort them in descending order by usage duration. List the top 5 records with the longest usage duration along with their corresponding air conditioner model and usage date. Additionally, analyze the relationship between the usage duration and operation mode in these records.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, mode, usage_duration_hours  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【使用INNER JOIN关联usage_records与air_conditioner_info表，选择所需字段ac_id、usage_date、mode、usage_duration_hours、model】  【step2】:【应用WHERE条件筛选mode='制冷'的记录】  【step3】:【按usage_duration_hours字段DESC排序后，使用LIMIT 5截取最长使用时间的5条记录】",
    "english_step": "[step1]: [Use INNER JOIN to associate the usage_records and air_conditioner_info tables, selecting fields ac_id, usage_date, mode, usage_duration_hours, model]  [step2]: [Apply WHERE condition to filter records where mode='cooling']  [step3]: [Sort by usage_duration_hours DESC, then use LIMIT 5 to retrieve the top 5 records with the longest usage duration]"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在极端条件下（室外温度60°C，室内温度10°C）运行，查询所有使用记录中的功耗（power_consumption_watts）和使用时长（usage_duration_hours），计算每台空调的总能耗（功耗 * 使用时长），并按照总能耗从高到低降序排列，列出总能耗最高的前5条记录及其对应的空调型号和使用日期。同时，假设这些空调在极端条件下运行，估算其理论能耗。",
    "query": "WITH TotalEnergyConsumption AS ( SELECT ur.ac_id, ur.usage_date, ur.power_consumption_watts, ur.usage_duration_hours, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption, aci.model, aci.cooling_capacity_btu FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ) SELECT tec.ac_id, tec.usage_date, tec.power_consumption_watts, tec.usage_duration_hours, tec.total_energy_consumption, tec.model, (tec.cooling_capacity_btu * ((60 - 10) / 10) * tec.usage_duration_hours) AS estimated_energy_consumption FROM TotalEnergyConsumption tec ORDER BY tec.total_energy_consumption DESC LIMIT 5;",
    "type": "4",
    "idx": 44,
    "englishquestion": "Assuming an air conditioner is operating under extreme conditions (outdoor temperature 60°C, indoor temperature 10°C), query the power consumption (power_consumption_watts) and usage duration (usage_duration_hours) from all usage records, calculate the total energy consumption (power consumption * usage duration) for each air conditioner, and sort them in descending order based on total energy consumption. List the top 5 records with the highest total energy consumption, along with their corresponding air conditioner models and usage dates. Additionally, estimate their theoretical energy consumption under the assumption that these air conditioners are operating under extreme conditions.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, power_consumption_watts, usage_duration_hours, indoor_temperature_celsius, outdoor_temperature_celsius  \n【table】：【air_conditioner_info】 【columns】：ac_id, model, cooling_capacity_btu  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【创建CTE筛选极端条件并关联型号信息：通过JOIN将usage_records和air_conditioner_info表关联，过滤outdoor_temperature_celsius=60且indoor_temperature_celsius=10的记录，同时计算初始总能耗(power_consumption_watts * usage_duration_hours)】  【step2】:【计算理论能耗：基于cooling_capacity_btu计算理论能耗，公式为 (温差差系数 * 制冷能力 * 时长)，其中温差系数((60-10)/10)对应极端温差的10倍跨度修正系数】  【step3】:【排序并限制结果：按实际总能耗降序排列，取TOP5结果，同时保留空调型号、使用日期等核心字段】",
    "english_step": "【step1】:【Create CTE to filter extreme conditions and associate model information: JOIN usage_records and air_conditioner_info tables, filter records with outdoor_temperature_celsius=60 and indoor_temperature_celsius=10, while calculating initial total power consumption (power_consumption_watts * usage_duration_hours)】  【step2】:【Calculate theoretical power consumption: Based on cooling_capacity_btu, using formula (temperature difference coefficient * cooling capacity * duration), where temperature difference coefficient ((60-10)/10) corresponds to the 10x span correction factor for extreme temperature differences】  【step3】:【Sort and limit results: Order by actual total power consumption in descending order, take TOP5 results, retaining core fields like AC model and usage date】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有空调的制冷能力（cooling_capacity_btu）和功耗（power_consumption_watts），计算每台空调的制冷效率（制冷能力/功耗），并按制造商（manufacturer）分组，计算每个制造商的平均制冷效率。列出平均制冷效率最高的前5个制造商及其对应的平均制冷效率值。",
    "query": "WITH CoolingEfficiency AS ( SELECT manufacturer, (cooling_capacity_btu / power_consumption_watts) AS cooling_efficiency FROM air_conditioner_info ) SELECT manufacturer, AVG(cooling_efficiency) AS average_cooling_efficiency FROM CoolingEfficiency GROUP BY manufacturer ORDER BY average_cooling_efficiency DESC LIMIT 5;",
    "type": "1",
    "idx": 45,
    "englishquestion": "Query the cooling capacity (cooling_capacity_btu) and power consumption (power_consumption_watts) of all air conditioners. Calculate the cooling efficiency (cooling capacity/power consumption) for each air conditioner, group them by manufacturer, and compute the average cooling efficiency for each manufacturer. List the top 5 manufacturers with the highest average cooling efficiency along with their corresponding average cooling efficiency values.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：manufacturer,cooling_capacity_btu,power_consumption_watts  \n【foreign_keys】:【无涉及外键】",
    "evidence": "【step1】:【创建公共表达式计算单台空调效率】创建临时数据集CoolingEfficiency，通过基础字段计算(cooling_capacity_btu / power_consumption_watts)得到每台空调的制冷效率  【step2】:【按制造商聚合计算平均效率】对临时数据集进行GROUP BY manufacturer操作，使用AVG函数求得每个制造商的平均制冷效率  【step3】:【排序限制结果集】对计算结果按照average_cooling_efficiency降序排列，使用LIMIT 5最终筛选出效率最高的前5个制造商",
    "english_step": "【step1】:【Create a common table expression to calculate individual air conditioner efficiency】Create temporary dataset CoolingEfficiency, compute (cooling_capacity_btu / power_consumption_watts) using base fields to obtain cooling efficiency for each unit  【step2】:【Aggregate average efficiency by manufacturer】Perform GROUP BY manufacturer operation on the temporary dataset, use AVG function to calculate average cooling efficiency per manufacturer  【step3】:【Sort and limit results】Sort calculation results by average_cooling_efficiency in descending order, use LIMIT 5 to filter top 5 most efficient manufacturers"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有空调的生产年份（production_year）和能效比（energy_efficiency_ratio），按生产年份分组，计算每个生产年份的平均能效比。列出平均能效比最高的前3个生产年份及其对应的平均能效比值。",
    "query": "SELECT production_year, AVG(energy_efficiency_ratio) AS average_energy_efficiency_ratio FROM air_conditioner_info GROUP BY production_year ORDER BY average_energy_efficiency_ratio DESC LIMIT 3;",
    "type": "2",
    "idx": 46,
    "englishquestion": "Query the production year (production_year) and energy efficiency ratio (energy_efficiency_ratio) of all air conditioners, group them by production year, and calculate the average energy efficiency ratio for each production year. List the top 3 production years with the highest average energy efficiency ratio and their corresponding average energy efficiency ratio values.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：production_year, energy_efficiency_ratio \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从空调信息表中选择生产年份和能效比字段，并使用AVG函数计算每组的平均能效比值】  【step2】:【按生产年份分组结果，并通过ORDER BY对平均能效比值降序排列】  【step3】:【使用LIMIT限制输出结果仅保留前三行最高平均能效比的年份数据】",
    "english_step": "【step1】: 【Select the production year and energy efficiency ratio fields from the air conditioner information table, and use the AVG function to calculate the average energy efficiency ratio value for each group】  【step2】: 【Group the results by production year and sort them in descending order of the average energy efficiency ratio using ORDER BY】  【step3】: 【Use LIMIT to restrict the output to only the top three rows of year data with the highest average energy efficiency ratios】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有空调的噪音水平（noise_level_db）和重量（weight_kg），按制造商（manufacturer）分组，计算每个制造商的平均噪音水平和平均重量。列出平均噪音水平最低且平均重量最轻的前3个制造商及其对应的平均噪音水平和平均重量。",
    "query": "WITH ManufacturerStats AS ( SELECT manufacturer, AVG(noise_level_db) AS average_noise_level, AVG(weight_kg) AS average_weight FROM air_conditioner_info GROUP BY manufacturer ) SELECT manufacturer, average_noise_level, average_weight FROM ManufacturerStats ORDER BY average_noise_level ASC, average_weight ASC LIMIT 3;",
    "type": "3",
    "idx": 47,
    "englishquestion": "Retrieve the noise level (noise_level_db) and weight (weight_kg) of all air conditioners, group them by manufacturer (manufacturer), calculate the average noise level and average weight for each manufacturer. List the top 3 manufacturers with the lowest average noise level and lightest average weight, along with their corresponding average noise level and average weight.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：manufacturer, noise_level_db, weight_kg  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【创建公共表表达式(CTE)计算各制造商平均噪音和重量】通过GROUP BY manufacturer对air_conditioner_info表分组，计算每个制造商noise_level_db和weight_kg的AVG值  【step2】:【对计算结果进行多维排序】按average_noise_level升序排第一优先级，average_weight升序排第二优先级  【step3】:【限制最终结果数量】使用LIMIT 3截取最优前三名的制造商数据",
    "english_step": "【step1】: 【Create Common Table Expression (CTE) to calculate average noise and weight per manufacturer】  Group the `air_conditioner_info` table by `manufacturer` using `GROUP BY`, compute the `AVG` values of `noise_level_db` and `weight_kg` for each manufacturer.  【step2】: 【Apply multi-dimensional sorting to results】  Sort with `average_noise_level` in ascending order as the first priority, followed by `average_weight` in ascending order as the second priority.  【step3】: 【Limit final results】  Use `LIMIT 3` to extract the top 3 manufacturers with optimal performance data."
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调的制冷能力（cooling_capacity_btu）超过20000 BTU且功耗（power_consumption_watts）低于1000W，查询所有空调的制冷能力和功耗，按制冷剂类型（refrigerant_type）分组，计算每种制冷剂类型的平均制冷能力和平均功耗。列出平均制冷能力最高且平均功耗最低的前2种制冷剂类型及其对应的平均制冷能力和平均功耗。",
    "query": "WITH RefrigerantStats AS ( SELECT refrigerant_type, AVG(cooling_capacity_btu) AS average_cooling_capacity, AVG(power_consumption_watts) AS average_power_consumption FROM air_conditioner_info WHERE cooling_capacity_btu > 20000 AND power_consumption_watts < 1000 GROUP BY refrigerant_type ) SELECT refrigerant_type, average_cooling_capacity, average_power_consumption FROM RefrigerantStats ORDER BY average_cooling_capacity DESC, average_power_consumption ASC LIMIT 2;",
    "type": "4",
    "idx": 48,
    "englishquestion": "Assuming an air conditioner's cooling capacity (cooling_capacity_btu) exceeds 20,000 BTU and power consumption (power_consumption_watts) is below 1,000W, query all air conditioners' cooling capacity and power consumption, grouped by refrigerant type (refrigerant_type), and calculate the average cooling capacity and average power consumption for each refrigerant type. List the top 2 refrigerant types with the highest average cooling capacity and the lowest average power consumption, along with their corresponding average cooling capacity and average power consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：refrigerant_type, cooling_capacity_btu, power_consumption_watts  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【筛选符合条件的数据：从air_conditioner_info表中选取cooling_capacity_btu > 20000且power_consumption_watts < 1000的空调记录】  【step2】:【数据分组聚合：按refrigerant_type分组，计算各组平均制冷能力(average_cooling_capacity)和平均功耗(average_power_consumption)】  【step3】:【双排序限制结果：按平均制冷能力降序排序，相同时按平均功耗升序排序，最终取前2条记录】",
    "english_step": "【step1】: [Filter data that meets the criteria: Select air conditioner records from air_conditioner_info table where cooling_capacity_btu > 20000 and power_consumption_watts < 1000]  【step2】: [Group and aggregate data: Group by refrigerant_type, calculate average cooling capacity (average_cooling_capacity) and average power consumption (average_power_consumption) per group]  【step3】: [Dual-sorting and limit results: Sort by average_cooling_capacity in descending order, then by average_power_consumption in ascending order for ties, and finally take the top 2 records]"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有能耗记录中的功耗（power_consumption_watts）和运行时间（usage_duration_hours），计算每台空调的总能耗（功耗 * 运行时间），并按空调型号（model）分组，计算每个型号的平均总能耗。列出平均总能耗最高的前5个空调型号及其对应的平均总能耗值。",
    "query": "WITH TotalEnergyConsumption AS ( SELECT aci.model, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id ) SELECT model, AVG(total_energy_consumption) AS average_total_energy_consumption FROM TotalEnergyConsumption GROUP BY model ORDER BY average_total_energy_consumption DESC LIMIT 5;",
    "type": "1",
    "idx": 49,
    "englishquestion": "Query all power consumption (power_consumption_watts) and runtime (usage_duration_hours) records from the energy consumption data. Calculate the total energy consumption (power consumption * runtime) for each air conditioner, group them by model, and compute the average total energy consumption per model. List the top 5 air conditioner models with the highest average total energy consumption along with their corresponding average values.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, power_consumption_watts, usage_duration_hours  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】:【usage_records.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【FROM子句执行表连接操作：将usage_records表与air_conditioner_info表通过ac_id进行JOIN关联，并为每条记录计算power_consumption_watts * usage_duration_hours生成临时总能耗字段】  【step2】:【GROUP BY分组聚合计算：在临时表TotalEnergyConsumption基础上，按model字段分组，使用AVG函数计算每个型号的平均总能耗】  【step3】:【ORDER BY排序与LIMIT筛选：对平均总能耗降序排序后，通过LIMIT 5选取结果集中前5个最高平均能耗的空调型号记录】",
    "english_step": "[step1]: [FROM clause performs table join operation: JOIN the usage_records table with the air_conditioner_info table via ac_id, and generates a temporary total energy consumption field by calculating power_consumption_watts * usage_duration_hours for each record]  [step2]: [GROUP BY grouping and aggregation calculation: Based on the temporary table TotalEnergyConsumption, group by model field and calculate the average total energy consumption for each model using the AVG function]  [step3]: [ORDER BY sorting and LIMIT filtering: After sorting average total energy consumption in descending order, select the top 5 highest average energy consumption air conditioner model records from the result set using LIMIT 5]"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有能耗记录中的温度设置（temperature_setting_celsius）和室内温度（indoor_temperature_celsius），计算每台空调的温度偏差（室内温度 - 温度设置），并按记录日期（usage_date）分组，计算每天的平均温度偏差。列出平均温度偏差最大的前3天及其对应的平均温度偏差值。",
    "query": "WITH TemperatureDeviation AS ( SELECT usage_date, (indoor_temperature_celsius - temperature_setting_celsius) AS temperature_deviation FROM usage_records ) SELECT usage_date, AVG(temperature_deviation) AS average_temperature_deviation FROM TemperatureDeviation GROUP BY usage_date ORDER BY average_temperature_deviation DESC LIMIT 3;",
    "type": "2",
    "idx": 50,
    "englishquestion": "Query all temperature settings (temperature_setting_celsius) and indoor temperatures (indoor_temperature_celsius) from energy consumption records. Calculate the temperature deviation for each air conditioner (indoor temperature - temperature setting), group by the record date (usage_date), and compute the average temperature deviation for each day. List the top 3 days with the highest average temperature deviations and their corresponding average temperature deviation values.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_date,indoor_temperature_celsius,temperature_setting_celsius  \n【foreign_keys】:【ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【使用CTE计算每条记录的温差值】创建临时表\"TemperatureDeviation\"，从usage_records表中选择usage_date字段，并计算每条记录的(indoor_temperature_celsius - temperature_setting_celsius)作为温度偏差  【step2】:【分组计算日平均偏差】对CTE结果按usage_date分组，计算每个日期的平均温度偏差(average_temperature_deviation)  【step3】:【排序并取前3记录】按计算的平均温度偏差降序排序，使用LIMIT 3获取平均偏差最大的三个日期",
    "english_step": "[step1]: [Calculate temperature deviation for each record using CTE] Create a temporary table \"TemperatureDeviation\", select the usage_date field from the usage_records table, and calculate (indoor_temperature_celsius - temperature_setting_celsius) as temperature deviation for each record  [step2]: [Calculate daily average deviation by grouping] Group the CTE results by usage_date and calculate the average temperature deviation (average_temperature_deviation) for each date  [step3]: [Sort and retrieve top 3 records] Order by the calculated average temperature deviation in descending order, use LIMIT 3 to obtain the three dates with the largest average deviations"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有能耗记录中的运行模式（mode）和能耗量（energy_consumption_kwh），按运行模式分组，计算每种运行模式的平均能耗量。列出平均能耗量最高的运行模式及其对应的平均能耗量值。",
    "query": "SELECT mode, AVG(energy_consumption_kwh) AS average_energy_consumption FROM energy_consumption GROUP BY mode ORDER BY average_energy_consumption DESC LIMIT 1;",
    "type": "3",
    "idx": 51,
    "englishquestion": "Query all operating modes (mode) and energy consumption (energy_consumption_kwh) records in the energy consumption data, group them by operating mode, and calculate the average energy consumption for each mode. List the operating mode with the highest average energy consumption and its corresponding average energy consumption value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, energy_consumption_kwh  \n【foreign_keys】:【energy_consumption.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【计算每种运行模式的平均能耗量】对`energy_consumption`表按`mode`字段分组，使用`AVG(energy_consumption_kwh)`计算每组能耗均值  【step2】:【按平均能耗降序排序】用`ORDER BY average_energy_consumption DESC`将计算结果按能耗均值从高到低排序  【step3】:【提取最高均值条目】通过`LIMIT 1`获取排序后的首条数据，即最大平均能耗对应的运行模式及数值",
    "english_step": "【step1】:【Calculate average energy consumption per operating mode】Group the `energy_consumption` table by the `mode` field, compute the average energy consumption per group using `AVG(energy_consumption_kwh)`  【step2】:【Sort by average energy consumption descending】Use `ORDER BY average_energy_consumption DESC` to sort results by average energy consumption from highest to lowest  【step3】:【Retrieve the highest average entry】Obtain the first record after sorting via `LIMIT 1`, corresponding to the operating mode with the maximum average energy consumption and its value"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在极端条件下（室外温度60°C，室内温度10°C）运行，查询所有能耗记录中的功耗（power_consumption_watts）和运行时间（usage_duration_hours），计算每台空调的总能耗（功耗 * 运行时间），并按空调型号（model）分组，计算每个型号的平均总能耗。列出平均总能耗最高的前3个空调型号及其对应的平均总能耗值。同时，假设这些空调在极端条件下运行，估算其理论能耗。",
    "query": "WITH TotalEnergyConsumption AS ( SELECT aci.model, (ur.power_consumption_watts * ur.usage_duration_hours) AS total_energy_consumption, aci.cooling_capacity_btu, ur.usage_duration_hours FROM usage_records ur JOIN air_conditioner_info aci ON ur.ac_id = aci.ac_id WHERE ur.outdoor_temperature_celsius = 60 AND ur.indoor_temperature_celsius = 10 ) SELECT model, AVG(total_energy_consumption) AS average_total_energy_consumption, AVG(cooling_capacity_btu * ((60 - 10) / 10) * usage_duration_hours) AS estimated_energy_consumption FROM TotalEnergyConsumption GROUP BY model ORDER BY average_total_energy_consumption DESC LIMIT 3;",
    "type": "4",
    "idx": 52,
    "englishquestion": "Assuming an air conditioner operates under extreme conditions (outdoor temperature 60°C, indoor temperature 10°C), query the power consumption (power_consumption_watts) and runtime (usage_duration_hours) from all energy consumption records, calculate the total energy consumption (power consumption * runtime) for each air conditioner, and group by air conditioner models (model), then compute the average total energy consumption for each model. List the top 3 air conditioner models with the highest average total energy consumption and their corresponding average total energy consumption values. Additionally, estimating their theoretical energy consumption under the assumption that these air conditioners operate under extreme conditions.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, cooling_capacity_btu, ac_id  \n【table】：【usage_records】 【columns】：power_consumption_watts, usage_duration_hours, outdoor_temperature_celsius, indoor_temperature_celsius, ac_id  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【从usage_records和air_conditioner_info中筛选极端运行条件数据（室内10°C/室外60°C），关联两表并计算每条记录的总能耗（power*watt*hours）】  【step2】:【按空调型号分组，计算每组的平均总能耗和基于空调cooling_capacity_btu的理论能耗（公式：制冷能力*(60-10)/10*总时长）】  【step3】:【按平均总能耗降序排序后取TOP 3，输出型号、平均总能耗、理论能耗估值】",
    "english_step": "【step1】: 【Filter data with extreme operating conditions (indoor 10°C/outdoor 60°C) from usage_records and air_conditioner_info, join the two tables, and calculate the total energy consumption (power * watt * hours) for each record】  【step2】: 【Group by air conditioner model, calculate the average total energy consumption per group and the theoretical energy consumption estimate based on cooling_capacity_btu (formula: cooling_capacity_btu * (60 - 10)/10 * total_hours)】  【step3】: 【Sort results by average total energy consumption in descending order, take TOP 3, and output model, average total energy consumption, and theoretical energy consumption estimate】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有温度记录中的室内温度（indoor_temperature_celsius）和室外温度（outdoor_temperature_celsius），计算每台空调的室内外温差（室外温度 - 室内温度），并按空调型号（model）分组，计算每个型号的平均温差。列出平均温差最大的前5个空调型号及其对应的平均温差值。",
    "query": "SELECT aci.model, AVG(tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS avg_temperature_difference FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id GROUP BY aci.model ORDER BY avg_temperature_difference DESC LIMIT 5;",
    "type": "1",
    "idx": 53,
    "englishquestion": "Query all indoor temperature (indoor_temperature_celsius) and outdoor temperature (outdoor_temperature_celsius) records from the temperature logs, calculate the temperature difference between indoor and outdoor (outdoor temperature - indoor temperature) for each air conditioner, group by air conditioner model (model), and compute the average temperature difference for each model. List the top 5 air conditioner models with the highest average temperature difference along with their corresponding average temperature difference values.",
    "equation_analysis": "equation_analysis：温差计算公式 outdoor_temperature_celsius - indoor_temperature_celsius → 每个model的avg(温差)用聚合函数 AVG()",
    "used_table_info": "【table】：temperature_records 【columns】：outdoor_temperature_celsius, indoor_temperature_celsius, ac_id  \n【table】：air_conditioner_info 【columns】：model, ac_id  \n【foreign_keys】：temperature_records.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：温差计算公式 outdoor_temperature_celsius - indoor_temperature_celsius → 每个model的avg(温差)用聚合函数 AVG()",
    "evidence": "【step1】:【关联温度记录表和空调信息表，计算每条记录的室外与室内温度差值】  【step2】:【按空调型号分组，计算每组温差值的平均数生成avg_temperature_difference字段】  【step3】:【按平均温差降序排序并取结果前5行，输出型号及对应平均温差】",
    "english_step": "【step1】: Join the temperature records table with the air conditioner information table, calculating the outdoor-indoor temperature difference for each record.  【step2】: Group by air conditioner model, compute the average temperature difference per group as avg_temperature_difference.  【step3】: Sort results by average temperature difference in descending order, retain the top 5 rows, and output the model and corresponding average temperature difference."
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有温度记录中的温度设置（temperature_setting_celsius）和室内温度（indoor_temperature_celsius），计算每台空调的温度偏差（室内温度 - 温度设置），并按记录日期（record_date）分组，计算每天的平均温度偏差。列出平均温度偏差最大的前3天及其对应的平均温度偏差值。",
    "query": "SELECT tr.record_date, AVG(tr.indoor_temperature_celsius - tr.temperature_setting_celsius) AS avg_temperature_deviation FROM temperature_records tr GROUP BY tr.record_date ORDER BY avg_temperature_deviation DESC LIMIT 3;",
    "type": "2",
    "idx": 54,
    "englishquestion": "Query all temperature records for the temperature setting (temperature_setting_celsius) and indoor temperature (indoor_temperature_celsius), calculate the temperature deviation for each air conditioner (indoor temperature - temperature setting), group by the record date (record_date), and compute the average temperature deviation for each day. List the top 3 days with the highest average temperature deviation and their corresponding average deviation values.",
    "equation_analysis": "",
    "used_table_info": "【table】：【temperature_records】 【columns】：record_date, indoor_temperature_celsius, temperature_setting_celsius  \n【foreign_keys】: 【无显式外键关联】",
    "evidence": "【step1】:【选择温度记录字段并计算温度偏差】从temperature_records表提取record_date、indoor_temperature_celsius和temperature_setting_celsius字段，并即时计算室内温度与设定温度的差值（indoor_temperature_celsius - temperature_setting_celsius）  【step2】:【按日期分组并计算平均偏差】使用GROUP BY record_date对结果进行分组，通过AVG函数计算每组温度偏差值的平均数，形成每日平均偏差字段  【step3】:【降序排序并取前三结果】使用ORDER BY avg_temperature_deviation DESC对计算结果进行排序，并通过LIMIT 3截取平均温度偏差最大的3天记录",
    "english_step": "【step1】:【Select temperature recording fields and calculate temperature deviation】Extract record_date, indoor_temperature_celsius, and temperature_setting_celsius fields from the temperature_records table, and calculate the temperature difference in real-time (indoor_temperature_celsius - temperature_setting_celsius)  【step2】:【Group by date and calculate average deviation】Group results using GROUP BY record_date, calculate the mean value of temperature deviations per group through the AVG function to form the daily average deviation field  【step3】:【Sort descending and retrieve top 3 results】Sort calculation results using ORDER BY avg_temperature_deviation DESC, and retrieve the top 3 days with the highest average temperature deviations via LIMIT 3"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询所有温度记录中的运行模式（mode）和室内温度（indoor_temperature_celsius），按运行模式分组，计算每种运行模式下的平均室内温度。列出平均室内温度最低的运行模式及其对应的平均室内温度值。",
    "query": "SELECT tr.mode, AVG(tr.indoor_temperature_celsius) AS avg_indoor_temperature FROM temperature_records tr GROUP BY tr.mode ORDER BY avg_indoor_temperature ASC LIMIT 1;",
    "type": "3",
    "idx": 55,
    "englishquestion": "Retrieve the operating mode (mode) and indoor temperature (indoor_temperature_celsius) from all temperature records, group them by operating mode, and calculate the average indoor temperature for each operating mode. List the operating mode with the lowest average indoor temperature along with its corresponding average temperature value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【temperature_records】 【columns】：mode, indoor_temperature_celsius 【foreign_keys】:【ac_id → air_conditioner_info(ac_id)】",
    "evidence": "【step1】:【从temperature_records表按mode分组，计算每组的平均室温】  【step2】:【按计算出的平均室温升序排列结果】  【step3】:【通过LIMIT 1筛选出平均室温最低的记录】",
    "english_step": "【step1】: 【Group the temperature_records table by mode and calculate the average room temperature for each group】  【step2】: 【Order the results by the calculated average room temperature in ascending order】  【step3】: 【Filter out the record with the lowest average room temperature using LIMIT 1】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设一台空调在极端条件下（室外温度-30°C，室内温度40°C）运行，查询所有温度记录中的室内温度（indoor_temperature_celsius）和室外温度（outdoor_temperature_celsius），计算每台空调的室内外温差（室外温度 - 室内温度），并按空调型号（model）分组，计算每个型号的平均温差。列出平均温差最大的前3个空调型号及其对应的平均温差值。同时，假设这些空调在极端条件下运行，估算其理论能耗。",
    "query": "WITH ExtremeCondition AS (SELECT 'extreme' AS condition_type, -30 AS outdoor_temp, 40 AS indoor_temp), AverageTempDifference AS (SELECT aci.model, AVG(tr.outdoor_temperature_celsius - tr.indoor_temperature_celsius) AS avg_temperature_difference FROM temperature_records tr JOIN air_conditioner_info aci ON tr.ac_id = aci.ac_id GROUP BY aci.model) SELECT atd.model, atd.avg_temperature_difference, (aci.heating_capacity_btu * (70 / 10) * 1) AS estimated_energy_consumption FROM AverageTempDifference atd JOIN air_conditioner_info aci ON atd.model = aci.model CROSS JOIN ExtremeCondition ec ORDER BY atd.avg_temperature_difference DESC LIMIT 3;",
    "type": "4",
    "idx": 56,
    "englishquestion": "Assuming an air conditioner operates under extreme conditions (outdoor temperature -30°C, indoor temperature 40°C), query all recorded indoor temperatures (indoor_temperature_celsius) and outdoor temperatures (outdoor_temperature_celsius) in the temperature logs. Calculate the temperature difference between indoor and outdoor (outdoor temperature - indoor temperature) for each air conditioner, group them by model, and compute the average temperature difference for each model. List the top 3 air conditioner models with the highest average temperature differences along with their corresponding average temperature difference values. Additionally, assuming these air conditioners operate under extreme conditions, estimate their theoretical energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, model, heating_capacity_btu  \n【table】：【temperature_records】 【columns】：ac_id, outdoor_temperature_celsius, indoor_temperature_celsius  \n【foreign_keys】: temperature_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】创建极端条件公共表达式，定义室外温度-30°C和室内温度40°C的参数  【step2】联结温度记录表和空调信息表，计算每个空调型号的室内外温差平均值，并按型号分组  【step3】关联空调信息表与公参，使用heating_capacity_btu乘以(温差70/10)的公式进行能耗估算后排序取TOP3",
    "english_step": "【step1】Create a Common Table Expression (CTE) for extreme conditions, defining parameters with an outdoor temperature of -30°C and indoor temperature of 40°C  【step2】Join the temperature records table with the air conditioner information table, calculate the average indoor-outdoor temperature difference per AC model, and group by model  【step3】Link the air conditioner information table with the CTE parameters, perform energy consumption estimation using the formula (heating_capacity_btu * (70°C temperature difference/10)), then sort and select TOP3"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算在特定湿度条件下，空调除湿模式下的能耗，并按湿度区间分组。",
    "query": "SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE hr.mode = '除湿' GROUP BY humidity_range;",
    "type": "1",
    "idx": 57,
    "englishquestion": "Calculate the energy consumption of air conditioners in dehumidification mode under specific humidity conditions, grouped by humidity intervals.",
    "equation_analysis": "",
    "used_table_info": "【table】：【humidity_records】 【columns】：ac_id, record_date, indoor_humidity_percent, mode  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, energy_consumption_kwh  \n【foreign_keys】: humidity_records.ac_id ↔ energy_consumption.ac_id, humidity_records.record_date ↔ energy_consumption.record_date",
    "evidence": "【step1】:【连接humidity_records和energy_consumption表，限定为除湿模式数据】通过ac_id和record_date进行双字段关联，并过滤出hr.mode='除湿'的湿度记录  【step2】:【定义湿度区间维度】通过CASE表达式将indoor_humidity_percent转化为3个离散湿度范围：\"0-30%\"，\"30-60%\"，\"60-100%\"  【step3】:【区间分组能耗聚合】按humidity_range字段分组，对每个湿度区间的energy_consumption_kwh列执行SUM聚合统计",
    "english_step": "【step1】: Join humidity_records and energy_consumption tables, limited to dehumidification mode data. Associate via both ac_id and record_date fields, and filter humidity records where hr.mode='dehumidification'  【step2】: Define humidity interval dimensions. Use CASE expression to convert indoor_humidity_percent into three discrete humidity ranges: \"0-30%\", \"30-60%\", \"60-100%\"  【step3】: Aggregate energy consumption by interval grouping. Group by humidity_range field and perform SUM aggregation on energy_consumption_kwh column for each humidity interval"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算在不同湿度条件下，空调在制冷模式下的总能耗，并按湿度区间和温度设置分组。",
    "query": "SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, ec.temperature_setting_celsius, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE ec.mode = '制冷' GROUP BY humidity_range, ec.temperature_setting_celsius;",
    "type": "2",
    "idx": 58,
    "englishquestion": "Calculate the total energy consumption of air conditioners in cooling mode under different humidity conditions, grouping by humidity intervals and temperature settings.",
    "equation_analysis": "",
    "used_table_info": "【table】：【humidity_records】 【columns】：indoor_humidity_percent,ac_id,record_date  \n【table】：【energy_consumption】 【columns】：temperature_setting_celsius,energy_consumption_kwh,mode,ac_id,record_date  \n【foreign_keys】:humidity_records.ac_id → energy_consumption.ac_id; humidity_records.record_date → energy_consumption.record_date",
    "evidence": "【step1】:【联接humidity_records与energy_consumption表，根据ac_id和record_date匹配关联记录，并筛选出'制冷'模式的能耗数据】  【step2】:【使用CASE表达式对室内湿度进行分类，生成0-30%、30-60%、60-100%三个区间标记】  【step3】:【按湿度区间和温度设置分组，计算每个组的总能耗SUM值】",
    "english_step": "【step1】:【Join the humidity_records and energy_consumption tables by matching records based on ac_id and record_date, and filter energy consumption data with 'cooling' mode】  【step2】:【Use CASE expressions to categorize indoor humidity into three intervals: 0-30%, 30-60%, and 60-100%, generating corresponding labels】  【step3】:【Group by humidity intervals and temperature settings, then calculate the total energy consumption SUM value for each group】"
  },
  {
    "db_id": "air_conditioner",
    "question": "分析在高温高湿环境下，空调的能耗是否会增加，并按湿度区间和模式分组。",
    "query": "WITH NormalEnvironment AS (SELECT CASE WHEN tr.humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN tr.humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, tr.mode, AVG(ec.energy_consumption_kwh) AS normal_energy_consumption FROM temperature_records tr JOIN energy_consumption ec ON tr.ac_id = ec.ac_id AND tr.record_date = ec.record_date WHERE tr.indoor_temperature_celsius <= 30 AND tr.humidity_percent <= 60 GROUP BY humidity_range, tr.mode), HighTempHighHumidity AS (SELECT CASE WHEN tr.humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN tr.humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, tr.mode, AVG(ec.energy_consumption_kwh) AS high_energy_consumption FROM temperature_records tr JOIN energy_consumption ec ON tr.ac_id = ec.ac_id AND tr.record_date = ec.record_date WHERE tr.indoor_temperature_celsius > 30 AND tr.humidity_percent > 60 GROUP BY humidity_range, tr.mode) SELECT ne.humidity_range, ne.mode, ne.normal_energy_consumption, hthh.high_energy_consumption, ((hthh.high_energy_consumption - ne.normal_energy_consumption) / ne.normal_energy_consumption) * 100 AS energy_increase_percentage FROM NormalEnvironment ne JOIN HighTempHighHumidity hthh ON ne.humidity_range = hthh.humidity_range AND ne.mode = hthh.mode;",
    "type": "3",
    "idx": 59,
    "englishquestion": "Analyze whether the energy consumption of air conditioning increases in high-temperature and high-humidity environments, and group by humidity range and mode.",
    "equation_analysis": "",
    "used_table_info": "【table】：【temperature_records】 【columns】：ac_id, record_date, humidity_percent, mode, indoor_temperature_celsius  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, energy_consumption_kwh  \n【foreign_keys】: energy_consumption.ac_id → air_conditioner_info.ac_id",
    "evidence": "",
    "english_step": "You need to translate Chinese SQL query questions into English while maintaining original meanings and technical accuracy. Focus on preserving SQL terminology, syntax structures, and semantic equivalence. Keep table/column names consistent and ensure proper use of SQL clauses (SELECT, WHERE, JOIN). Maintain numerical values, date formats, and special characters. Verify logical relationships between conditions remain intact. Exclude any explanations or additional content beyond the direct translation."
  },
  {
    "db_id": "air_conditioner",
    "question": "假设空调在湿度为200%的环境下运行，计算其能耗，并按湿度区间和风速分组。",
    "query": "SELECT CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, ec.fan_speed, SUM(ec.energy_consumption_kwh * 2.0) AS estimated_energy_consumption FROM humidity_records hr JOIN energy_consumption ec ON hr.ac_id = ec.ac_id AND hr.record_date = ec.record_date WHERE hr.indoor_humidity_percent = 200 GROUP BY humidity_range, ec.fan_speed;",
    "type": "4",
    "idx": 60,
    "englishquestion": "Assuming the air conditioner operates in an environment with 200% humidity, calculate its energy consumption and group it by humidity range and wind speed.",
    "equation_analysis": "equation_analysis：estimated_energy_consumption = Σ(energy_consumption_kwh * 2.0)。将单条能耗值固定翻倍后按湿度区间及风速分组求和",
    "used_table_info": "【table】：【humidity_records】 【columns】：indoor_humidity_percent, ac_id, record_date  \n【table】：【energy_consumption】 【columns】：fan_speed, energy_consumption_kwh, ac_id, record_date  \n【foreign_keys】：【humidity_records.ac_id → energy_consumption.ac_id；humidity_records.record_date → energy_consumption.record_date】  \n【equation_analysis】：【estimated_energy_consumption = Σ(energy_consumption_kwh * 2.0)。将单条能耗值固定翻倍后按湿度区间及风速分组求和】",
    "evidence": "【step1】:【连接湿度记录表(hr)和能耗表(ec)，通过ac_id和record_date建立关联，并筛选出室内湿度严格等于200%的记录】  【step2】:【使用CASE WHEN构造湿度区间分类器('0-30%'/'30-60%'/'60-100%')，并在计算结果时对能耗值应用*2.0的特殊系数】  【step3】:【按人造湿度区间和实际风速双重维度分组，使用SUM聚合函数计算最终能耗总值(注：实际WHERE条件与CASE区间不存在交集，所有记录都会被归入ELSE的'60-100%'区间)】",
    "english_step": "【step1】:【Join the humidity records table (hr) and energy consumption table (ec) via ac_id and record_date, filtering records where indoor humidity strictly equals 200%】  【step2】:【Construct a humidity interval classifier ('0-30%'/'30-60%'/'60-100%') using CASE WHEN, while applying a special coefficient of *2.0 to energy consumption values during calculation】  【step3】:【Group by both artificial humidity intervals and actual wind speed dimensions, using the SUM aggregate function to compute the total energy consumption value (Note: The actual WHERE condition does not intersect with CASE intervals, all records will be categorized into the ELSE '60-100%' interval)】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算不同温度设置下空调的总能耗，并按温度设置和使用模式分组。",
    "query": "SELECT ec.temperature_setting_celsius, ec.mode, SUM(ec.energy_consumption_kwh) AS total_energy_consumption FROM energy_consumption ec GROUP BY ec.temperature_setting_celsius, ec.mode ORDER BY ec.temperature_setting_celsius, ec.mode;",
    "type": "1",
    "idx": 61,
    "englishquestion": "Calculate the total energy consumption of air conditioners under different temperature settings, grouped by temperature setting and usage mode.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：temperature_setting_celsius, mode, energy_consumption_kwh  \n【foreign_keys】:【ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【从energy_consumption表选择温度设置、模式、能耗字段】  【step2】:【按温度设置和模式进行分组，使用SUM函数聚合能耗数值】  【step3】:【对分组后的结果进行温度设置优先、模式其次的排序输出】",
    "english_step": "【step1】:【Select temperature_setting, mode, energy_consumption from energy_consumption table】  【step2】:【Group by temperature_setting and mode, aggregate energy consumption values using SUM function】  【step3】:【Order the grouped results by temperature_setting first and mode second for output】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算不同风速下空调的总使用时长，并按风速和湿度区间分组。",
    "query": "SELECT ur.fan_speed, CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN humidity_records hr ON ur.ac_id = hr.ac_id AND ur.usage_date = hr.record_date GROUP BY ur.fan_speed, humidity_range ORDER BY ur.fan_speed, humidity_range;",
    "type": "2",
    "idx": 62,
    "englishquestion": "Calculate the total usage duration of air conditioners at different wind speeds, grouped by wind speed and humidity intervals.",
    "equation_analysis": "equation_analysis：总使用时长计算为相同(fan_speed, humidity_range)分组的usage_duration_hours之和；湿度区间的划分公式为：  `CASE WHEN indoor_humidity ∈ [0,30) → \"0-30%\"，[30,60) → \"30-60%\"，其他→\"60-100%\"`",
    "used_table_info": "【table】：【usage_records】 【columns】：fan_speed, usage_duration_hours, ac_id, usage_date  \n【table】：【humidity_records】 【columns】：indoor_humidity_percent, ac_id, record_date  \n【foreign_keys】：ur.ac_id = hr.ac_id（usage_records ↔ humidity_records）；ur.usage_date = hr.record_date（usage_records ↔ humidity_records）  \n【equation_analysis】：总使用时长计算为相同(fan_speed, humidity_range)分组的usage_duration_hours之和；湿度区间的划分公式为：  \n`CASE WHEN indoor_humidity ∈ [0,30) → \"0-30%\"，[30,60) → \"30-60%\"，其他→\"60-100%\"`",
    "evidence": "【step1】:【连接空调使用记录与湿度记录表，匹配相同设备及日期】通过INNER JOIN将usage_records表与humidity_records表关联，使用ac_id和record_date/usage_date进行精确匹配，确保数据来自同一台空调的同步记录。  【step2】:【构建湿度区间分类表达式】使用CASE WHEN语句对indoor_humidity_percent进行逻辑分支处理，将湿度值划分为'0-30%','30-60%','60-100%'三个区间，创建新字段humidity_range。  【step3】:【执行多维聚合计算与排序】先按fan_speed原始字段和humidity_range派生字段维度分组，执行SUM(usage_duration_hours)聚合计算总使用时长。最终按风扇速度自然序和湿度区间逻辑序进行双字段字典序排列结果集。",
    "english_step": "【step1】: 【Join air conditioner usage records with humidity records table by matching device and date】 Use INNER JOIN to associate the usage_records table with humidity_records table, performing exact matches through ac_id and record_date/usage_date fields to ensure synchronized data from the same AC unit.  【step2】: 【Construct humidity range classification expression】 Apply CASE WHEN statements to create logical branches for indoor_humidity_percent values, categorizing them into '0-30%', '30-60%', and '60-100%' intervals, thereby generating a new humidity_range field.  【step3】: 【Perform multidimensional aggregation and sorting】 Group by both the original fan_speed field and derived humidity_range dimension, then calculate total usage duration via SUM(usage_duration_hours) aggregation. Finally, sort the result set using dual-field lexicographical ordering based on natural fan speed sequence and logical humidity range ordering."
  },
  {
    "db_id": "air_conditioner",
    "question": "分析在不同室外温度下空调的使用时长，并按室外温度区间和模式分组。",
    "query": "SELECT CASE WHEN tr.outdoor_temperature_celsius < 10 THEN '<10°C' WHEN tr.outdoor_temperature_celsius BETWEEN 10 AND 25 THEN '10-25°C' ELSE '>25°C' END AS outdoor_temperature_range, ur.mode, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN temperature_records tr ON ur.ac_id = tr.ac_id AND ur.usage_date = tr.record_date GROUP BY outdoor_temperature_range, ur.mode ORDER BY outdoor_temperature_range, ur.mode;",
    "type": "3",
    "idx": 63,
    "englishquestion": "Analyze the usage duration of air conditioning under different outdoor temperatures, and group by outdoor temperature ranges and modes.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, mode, usage_duration_hours, usage_date  \n【table】：【temperature_records】 【columns】：outdoor_temperature_celsius, ac_id, record_date  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id | temperature_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【关联usage_records和temperature_records表，通过空调ID和使用日期建立连接】  【step2】:【使用CASE WHEN表达式将室外温度分为<10°C、10-25°C、>25°C三个区间】  【step3】:【按照温度区间和空调模式分组，计算总使用时长并进行区间-模式双重排序】",
    "english_step": "【step1】:【Join the usage_records and temperature_records tables via air conditioner ID and usage date】  【step2】:【Use CASE WHEN expression to categorize outdoor temperature into three intervals: <10°C, 10-25°C, and >25°C】  【step3】:【Group by temperature interval and air conditioner mode, calculate total usage duration, and sort by interval and mode in dual order】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设空调在室外温度为60°C的环境下运行，计算其总使用时长，并按风速和湿度区间分组。",
    "query": "SELECT ur.fan_speed, CASE WHEN hr.indoor_humidity_percent BETWEEN 0 AND 30 THEN '0-30%' WHEN hr.indoor_humidity_percent BETWEEN 30 AND 60 THEN '30-60%' ELSE '60-100%' END AS humidity_range, SUM(ur.usage_duration_hours) AS total_usage_duration FROM usage_records ur JOIN humidity_records hr ON ur.ac_id = hr.ac_id AND ur.usage_date = hr.record_date JOIN temperature_records tr ON ur.ac_id = tr.ac_id AND ur.usage_date = tr.record_date WHERE tr.outdoor_temperature_celsius = 60 GROUP BY ur.fan_speed, humidity_range ORDER BY ur.fan_speed, humidity_range;",
    "type": "4",
    "idx": 64,
    "englishquestion": "Assuming the air conditioner is operating in an outdoor temperature of 60°C, calculate its total usage duration grouped by wind speed and humidity range.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, usage_duration_hours, fan_speed  \n【table】：【humidity_records】 【columns】：ac_id, record_date, indoor_humidity_percent  \n【table】：【temperature_records】 【columns】：ac_id, record_date, outdoor_temperature_celsius  \n【foreign_keys】: usage_records.ac_id ↦ humidity_records.ac_id & temperature_records.ac_id; usage_records.usage_date ↦ humidity_records.record_date & temperature_records.record_date",
    "evidence": "【step1】:【通过JOIN连接usage_records、humidity_records、temperature_records三张表，过滤室外温度=60度的记录。条件在temperature_records.outdoor_temperature_celsius字段上判断，通过日期和空调ID建立表关联】  【step2】:【用CASE WHEN对indoor_humidity_percent进行湿度区间分组，生成humidity_range虚拟列。将湿度分为0-30%、30-60%、60-100%三个区间】  【step3】:【按ur.fan_speed和humidity_range进行分组聚合，计算每组的总使用时长。最后按风扇速度和湿度区间排序，输出结果】",
    "english_step": "【step1】: 【Connect the three tables usage_records, humidity_records, and temperature_records via JOIN, filter records where outdoor temperature = 60 degrees. The condition is evaluated on the temperature_records.outdoor_temperature_celsius field, with table associations established through date and air conditioner ID】  【step2】: 【Use CASE WHEN to group indoor_humidity_percent into humidity ranges, creating a virtual column humidity_range. Divide humidity into three intervals: 0-30%, 30-60%, and 60-100%】  【step3】: 【Group and aggregate by ur.fan_speed and humidity_range to calculate total usage duration for each group. Finally, sort the results by fan speed and humidity range for output】"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出制冷能力大于10000 BTU但能效比低于10的空调型号，并排除生产年份在2010年之前的空调。",
    "query": "SELECT model FROM air_conditioner_info WHERE cooling_capacity_btu > 10000 AND energy_efficiency_ratio < 10 AND production_year >= 2010;",
    "type": "1",
    "idx": 65,
    "englishquestion": "Find air conditioning models with a cooling capacity greater than 10,000 BTU but an energy efficiency ratio below 10, and exclude those manufactured before 2010.",
    "equation_analysis": "equation_analysis：cooling_capacity_btu (>10000) AND energy_efficiency_ratio (<10) AND production_year (≥2010）的三重过滤条件",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, cooling_capacity_btu, energy_efficiency_ratio, production_year 【foreign_keys】：【ac_id关联其他表的ac_id字段（但本SQL未使用联接，不需要实际生效的外键关系）】 【equation_analysis】：【cooling_capacity_btu (>10000) AND energy_efficiency_ratio (<10) AND production_year (≥2010）的三重过滤条件】",
    "evidence": "【step1】:【筛选制冷能力大于10000 BTU的数据】从air_conditioner_info表中提取所有cooling_capacity_btu字段值大于10000的基础数据  【step2】:【过滤能效比和年份条件】对步骤1的结果进行二次过滤，筛选energy_efficiency_ratio < 10且production_year >= 2010的数据  【step3】:【提取目标字段】从最终过滤结果中仅保留model字段内容",
    "english_step": "【step1】: 【Filter data with cooling capacity greater than 10,000 BTU】Extract all base data from air_conditioner_info table where cooling_capacity_btu field value > 10000  【step2】: 【Filter energy efficiency ratio and year conditions】Apply secondary filtering to Step1 results by selecting data where energy_efficiency_ratio < 10 and production_year >= 2010  【step3】: 【Extract target field】Retain only the model field content from the final filtered results"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出制热能力大于12000 BTU且噪音水平低于50分贝的空调型号，并排除保修期少于24个月的空调。",
    "query": "SELECT model FROM air_conditioner_info WHERE heating_capacity_btu > 12000 AND noise_level_db < 50 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE warranty_period_months < 24);",
    "type": "2",
    "idx": 66,
    "englishquestion": "Find air conditioner models with heating capacity greater than 12,000 BTU and noise level below 50 decibels, excluding those with warranty periods of less than 24 months.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, heating_capacity_btu, noise_level_db, warranty_period_months  \n【foreign_keys】: 【none】",
    "evidence": "【step1】:【筛选出制热能力大于12000 BTU且噪音水平低于50分贝的型号】  【step2】:【获取保修期少于24个月需要排除的型号列表】  【step3】:【通过NOT IN操作符结合前两步结果，排除不符合保修条件的型号】",
    "english_step": "【step1】: 【Filter models with heating capacity greater than 12,000 BTU and noise level below 50 dB】  【step2】: 【Obtain list of models to exclude with warranty period less than 24 months】  【step3】: 【Use NOT IN operator to combine results from previous steps, excluding models that do not meet warranty conditions】"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出重量超过50千克且功耗低于1000瓦的空调型号，并排除制造商为'Unknown'的空调。",
    "query": "SELECT model FROM air_conditioner_info WHERE weight_kg > 50 AND power_consumption_watts < 1000 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE manufacturer = 'Unknown');",
    "type": "3",
    "idx": 67,
    "englishquestion": "Find the models of air conditioners that weigh more than 50 kilograms and have power consumption below 1000 watts, excluding those manufactured by 'Unknown'.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, weight_kg, power_consumption_watts, manufacturer  \n【foreign_keys】: (无跨表Join，子查询内部自关联同一表)",
    "evidence": "【step1】:【筛选基础条件】从air_conditioner_info表中选出weight_kg > 50且power_consumption_watts < 1000的原始数据集  【step2】:【建立排除项】子查询提取manufacturer为'Unknown'的model列表作为过滤依据  【step3】:【结果整合】通过NOT IN操作符将步骤1的结果排除步骤2的干扰项，最终输出目标model】",
    "english_step": "【step1】: 【Filter base conditions】Select the original dataset from the air_conditioner_info table where weight_kg > 50 and power_consumption_watts < 1000  【step2】: 【Create exclusion criteria】Use a subquery to retrieve the model list where manufacturer is 'Unknown' as filtering criteria  【step3】: 【Result integration】Exclude interference items from step2 using NOT IN operator on step1's results, and finally output the target models】"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出制冷剂类型为'R410A'且生产年份在2020年之后的空调型号，并排除制冷能力小于5000 BTU的空调。",
    "query": "SELECT model FROM air_conditioner_info WHERE refrigerant_type = 'R410A' AND production_year > 2020 AND model NOT IN (SELECT model FROM air_conditioner_info WHERE cooling_capacity_btu < 5000);",
    "type": "4",
    "idx": 68,
    "englishquestion": "Find air conditioner models where the refrigerant type is 'R410A' and the production year is after 2020, while excluding those with cooling capacity less than 5000 BTU.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, refrigerant_type, production_year, cooling_capacity_btu  \n【foreign_keys】: []",
    "evidence": "【step1】:【筛选制冷剂类型为'R410A'且生产年份>2020的记录】  【step2】:【生成制冷能力<5000 BTU的空调型号排除列表】  【step3】:【通过NOT IN操作符最终排除低制冷力型号并返回结果】",
    "english_step": "【step1】:【Filter records where refrigerant type is 'R410A' and production year > 2020】  【step2】:【Generate an exclusion list for air conditioner models with cooling capacity <5000 BTU】  【step3】:【Exclude low cooling capacity models via the NOT IN operator and return the result】"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询在制冷模式下，能耗量（kWh）高于平均能耗量但功耗（瓦特）低于平均功耗的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '制冷' AND energy_consumption_kwh > (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '制冷') AND power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷')",
    "type": "1",
    "idx": 69,
    "englishquestion": "Query for records in cooling mode where energy consumption (kWh) is higher than average but power consumption (watts) is lower than average.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：energy_consumption_kwh, power_consumption_watts, mode  \n【foreign_keys】: ac_id -> air_conditioner_info(ac_id)",
    "evidence": "【step1】:【计算制冷模式的平均能耗与平均功耗】分别执行两个子查询，获取制冷模式下energy_consumption_kwh和power_consumption_watts的平均值  【step2】:【筛选基础条件】保留mode='制冷'的原始记录作为初步结果集  【step3】:【应用双重比较】在初步结果集中过滤出energy_consumption_kwh大于步骤1的均值且power_consumption_watts小于步骤1的均值的最终记录",
    "english_step": "【step1】:【Calculate average energy consumption and average power consumption in cooling mode】Execute two subqueries separately to obtain the average values of energy_consumption_kwh and power_consumption_watts under cooling mode  【step2】:【Filter basic conditions】Retain original records with mode='cooling' as preliminary result set  【step3】:【Apply dual comparison】Filter final records from the preliminary result set where energy_consumption_kwh exceeds the average from step 1 and power_consumption_watts is below the average from step 1"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询在制热模式下，温度设置（摄氏度）与室内温度（摄氏度）差值大于 10 度但能耗量（kWh）低于平均能耗量的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '制热' AND ABS(temperature_setting_celsius - indoor_temperature_celsius) > 10 AND energy_consumption_kwh < (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '制热')",
    "type": "2",
    "idx": 70,
    "englishquestion": "Query records where, in heating mode, the difference between the set temperature (in Celsius) and the indoor temperature (in Celsius) is greater than 10 degrees, but the energy consumption (kWh) is below the average energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, temperature_setting_celsius, indoor_temperature_celsius, energy_consumption_kwh  \n【foreign_keys】:【energy_consumption.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】: 筛选 mode 为'制热'的所有能耗记录  【step2】: 计算当前制热模式下所有记录的 energy_consumption_kwh 平均值  【step3】: 结合步骤1的数据，筛选同时满足温度差>10且当前能耗值低于步骤2平均值的记录",
    "english_step": "【step1】: Filter all energy consumption records where mode is 'heating'  【step2】: Calculate the average value of energy_consumption_kwh for all records under the current heating mode  【step3】: Using the data from step1, filter records that simultaneously satisfy temperature difference >10 and current energy consumption value is below the average from step2"
  },
  {
    "db_id": "air_conditioner",
    "question": "查询在除湿模式下，湿度（百分比）高于 70% 但能耗量（kWh）低于平均能耗量的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '除湿' AND humidity_percent > 70 AND energy_consumption_kwh < (SELECT AVG(energy_consumption_kwh) FROM energy_consumption WHERE mode = '除湿')",
    "type": "3",
    "idx": 71,
    "englishquestion": "Query for records in dehumidification mode where the humidity (percentage) is above 70% but the energy consumption (kWh) is below the average energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, humidity_percent, energy_consumption_kwh  \n【foreign_keys】:【ac_id关联air_conditioner_info.ac_id】",
    "evidence": "【step1】: 筛选出所有模式为'除湿'的记录 【step2】: 在步骤1基础上，计算除湿模式下所有记录的energy_consumption_kwh字段平均值 【step3】: 将步骤1结果中湿度>70%且能耗低于步骤2计算出的平均值的记录最终输出，通过WHERE联合条件判断实现两个过滤条件的叠加",
    "english_step": "【step1】: Filter out all records where the mode is 'Dehumidify'  【step2】: Based on Step 1, calculate the average value of the `energy_consumption_kwh` field for all records in Dehumidify mode  【step3】: Output the final records from Step 1 where humidity > 70% and energy consumption is below the average value calculated in Step 2, using combined WHERE conditions to apply both filters."
  },
  {
    "db_id": "air_conditioner",
    "question": "查询在送风模式下，风速设置为最大值（假设为 10），但功耗（瓦特）为 0 的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '送风' AND fan_speed = 10 AND power_consumption_watts = 0",
    "type": "4",
    "idx": 72,
    "englishquestion": "Query records where the fan mode is set to supply air, the wind speed is set to the maximum value (assumed to be 10), but the power consumption (in watts) is 0.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, fan_speed, power_consumption_watts  \n【foreign_keys】:【energy_consumption.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【定位energy_consumption表进行全表扫描】  【step2】:【应用三个过滤条件：mode=送风、fan_speed=10、power_consumption_watts=0】  【step3】:【输出符合全部条件的记录】（此步骤虽然逻辑简单，但需确保三个条件间的逻辑且同时满足，符合三步拆分规范）",
    "english_step": "【step1】:【Perform a full table scan on the energy_consumption table】  【step2】:【Apply three filter conditions: mode = 'air supply', fan_speed = 10, power_consumption_watts = 0】  【step3】:【Output records that satisfy all three conditions】（This step, while logically simple, must ensure the logical conjunction of all three conditions, aligning with the three-step decomposition specification）"
  },
  {
    "db_id": "air_conditioner",
    "question": "在制冷模式下，找出所有室内温度高于设定温度但功耗低于平均功耗的记录，且这些记录不在室外温度高于40°C的记录中。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '制冷' AND indoor_temperature_celsius > temperature_setting_celsius AND power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius > 40);",
    "type": "1",
    "idx": 73,
    "englishquestion": "In cooling mode, find all records where the indoor temperature is higher than the set temperature but the power consumption is below the average power consumption, and these records are not among those with an outdoor temperature higher than 40°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：ac_id, mode, indoor_temperature_celsius, temperature_setting_celsius, power_consumption_watts, outdoor_temperature_celsius  \n【foreign_keys】:【energy_consumption.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【筛选制冷模式记录并计算平均功耗】  【step2】:【过滤室内温度高于设定温度且功耗低于平均值】  【step3】:【排除关联的室外温度超40°C的AC_ID】",
    "english_step": "【Step1】: 【Filter cooling mode records and calculate average power consumption】  【Step2】: 【Filter where indoor temperature exceeds set temperature and power consumption is below average】  【Step3】: 【Exclude AC_IDs associated with outdoor temperatures exceeding 40°C】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算在制热模式下，室内温度低于设定温度且功耗高于平均功耗的记录，并排除湿度低于30%的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '制热' AND indoor_temperature_celsius < temperature_setting_celsius AND power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制热') AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE humidity_percent < 30);",
    "type": "2",
    "idx": 74,
    "englishquestion": "Calculate records in heating mode where the indoor temperature is below the set temperature and power consumption is above the average power consumption, while excluding records with humidity below 30%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode、indoor_temperature_celsius、temperature_setting_celsius、power_consumption_watts、ac_id、humidity_percent  \n【foreign_keys】:【energy_consumption.ac_id → air_conditioner_info.ac_id】",
    "evidence": "【step1】:【筛选制热模式并过滤室内温度低于设定温度的记录】  【step2】:【通过子查询获取制热模式下的平均功耗，将功耗高于平均值的记录标记为高能耗】  【step3】:【通过子查询排除所有存在湿度低于30%记录的空调（ac_id），最终合并所有条件得出结果】",
    "english_step": "【step1】:【Filter heating mode and exclude records where indoor temperature is below set temperature】  【step2】:【Use subquery to obtain average power consumption in heating mode, marking records with consumption above average as high energy consumption】  【step3】:【Use subquery to exclude all air conditioners (ac_id) with any records of humidity below 30%, then merge all conditions to obtain final results】"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出所有在送风模式下，风速为高档但室内温度与设定温度差异大于5°C的记录，并排除室外温度低于10°C的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '送风' AND fan_speed = '高档' AND ABS(indoor_temperature_celsius - temperature_setting_celsius) > 5 AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius < 10);",
    "type": "3",
    "idx": 75,
    "englishquestion": "Find all records where in the air supply mode, the fan speed is set to high, but the indoor temperature differs from the set temperature by more than 5°C, excluding records where the outdoor temperature is below 10°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, fan_speed, indoor_temperature_celsius, temperature_setting_celsius, outdoor_temperature_celsius, ac_id  \n【foreign_keys】:【energy_consumption.ac_id → air_conditioner_info.ac_id】",
    "evidence": "",
    "english_step": "The user requests to convert a Chinese SQL query question into English while preserving the original meaning. Key requirements include:  1. Perform direct translation without altering semantics  2. Maintain technical accuracy for SQL terminology (e.g., 表→table, 字段→field)  3. Preserve SQL syntax structures intact  4. Exclude any explanatory content or formatting  5. Output only the translated English text  Critical considerations:  - Verify precise mapping of domain-specific terms  - Ensure SQL keywords/code segments remain unchanged  - Avoid paraphrasing to prevent technical ambiguity  - Validate fluency in English technical expressions  Translation must strictly adhere to these constraints to ensure the translated query retains its functional integrity and technical precision."
  },
  {
    "db_id": "air_conditioner",
    "question": "假设空调在极端制冷模式下运行，找出所有室内温度低于-10°C且功耗超过10000瓦特的记录，并排除室外温度低于-50°C的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '极端制冷' AND indoor_temperature_celsius < -10 AND power_consumption_watts > 10000 AND ac_id NOT IN (SELECT ac_id FROM energy_consumption WHERE outdoor_temperature_celsius < -50);",
    "type": "4",
    "idx": 76,
    "englishquestion": "Assuming the air conditioner is operating in extreme cooling mode, find all records where indoor temperature is below -10°C and power consumption exceeds 10,000 watts, while excluding those with outdoor temperature below -50°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, indoor_temperature_celsius, power_consumption_watts, ac_id, outdoor_temperature_celsius  \n【foreign_keys】:【ac_id关联air_conditioner_info.ac_id】",
    "evidence": "【step1】:【筛选极端制冷模式的记录，应用室内温度和功耗条件】  【step2】:【使用子查询获取室外温度低于-50°C的AC_id需排除的清单】  【step3】:【组合主查询和子查询结果，完成最终记录的过滤】",
    "english_step": "【step1】: 【Filter records with extreme cooling mode, applying indoor temperature and power consumption conditions】  【step2】: 【Use subquery to obtain list of AC_ids with outdoor temperature below -50°C to be excluded】  【step3】: 【Combine main query and subquery results to finalize record filtering】"
  },
  {
    "db_id": "air_conditioner",
    "question": "在制冷模式下，找出所有室内湿度高于70%但功耗低于平均功耗的记录，且这些记录不在室外湿度低于20%的记录中。",
    "query": "SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '制冷' AND ec.humidity_percent > 70 AND ec.power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND hr.outdoor_humidity_percent >= 20;",
    "type": "1",
    "idx": 77,
    "englishquestion": "In cooling mode, find all records where indoor humidity is above 70% but power consumption is below the average power consumption, and these records are not among those with outdoor humidity below 20%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：ac_id, record_date, mode, humidity_percent, power_consumption_watts  \n【table】：【humidity_records】 【columns】：ac_id, record_date, outdoor_humidity_percent  \n【foreign_keys】: energy_consumption.ac_id ➔ air_conditioner_info.ac_id ; humidity_records.ac_id ➔ air_conditioner_info.ac_id",
    "evidence": "",
    "english_step": "Chinese text to be translated is missing. Please provide the specific SQL query in Chinese that needs translation."
  },
  {
    "db_id": "air_conditioner",
    "question": "计算在除湿模式下，室内湿度高于60%且功耗高于平均功耗的记录，并排除室外温度设置高于30°C的记录。",
    "query": "SELECT * FROM energy_consumption WHERE mode = '除湿' AND humidity_percent > 60 AND power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '除湿') AND temperature_setting_celsius <= 30;",
    "type": "2",
    "idx": 78,
    "englishquestion": "Calculate records in dehumidification mode where indoor humidity is above 60% and power consumption is above average, while excluding records with outdoor temperature settings above 30°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：mode, humidity_percent, power_consumption_watts, temperature_setting_celsius  \n【foreign_keys】:【ac_id (关联 air_conditioner_info.ac_id)】",
    "evidence": "【step1】:【筛选除湿模式下的记录并应用基础条件】过滤mode='除湿'、humidity_percent>60%、temperature_setting_celsius≤30的基础记录  【step2】:【计算除湿模式下的平均功耗】通过子查询(SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode='除湿')得出当前数据集功耗阈值  【step3】:【结合动态阈值完成最终过滤】在第一步结果基础上添加条件power_consumption_watts > 子查询返回的平均值，得到符合全部条件的记录",
    "english_step": "【step1】:【Filter records in dehumidification mode and apply basic conditions】Filter base records where mode='dehumidification', humidity_percent>60%, temperature_setting_celsius≤30  【step2】:【Calculate average power consumption in dehumidification mode】Determine the power consumption threshold using a subquery (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode='dehumidification')  【step3】:【Combine dynamic threshold for final filtering】Add the condition power_consumption_watts > the average value returned by the subquery to the results from Step 1, obtaining records that meet all criteria"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出所有在送风模式下，风速为低档但室内湿度与室外湿度差异大于30%的记录，并排除室外湿度低于10%的记录。",
    "query": "SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '送风' AND ec.fan_speed = '低档' AND ABS(ec.humidity_percent - hr.outdoor_humidity_percent) > 30 AND hr.outdoor_humidity_percent >= 10;",
    "type": "3",
    "idx": 79,
    "englishquestion": "Identify all records where the air conditioner is in supply air mode, the fan speed is set to low, the difference between indoor and outdoor humidity is greater than 30%, and exclude records where outdoor humidity is below 10%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：ac_id, record_date, mode, fan_speed, humidity_percent  \n【table】：【humidity_records】 【columns】：ac_id, record_date, outdoor_humidity_percent  \n【foreign_keys】: energy_consumption.ac_id -> air_conditioner_info.ac_id | humidity_records.ac_id -> air_conditioner_info.ac_id",
    "evidence": "【step1】:【关联能耗记录表和湿度记录表，通过空调ID和记录日期进行连接】  【step2】:【筛选送风模式、低档风速且室内外湿度差异绝对值超过30%的记录】  【step3】:【排除室外湿度低于10%的记录，最终输出满足所有条件的能耗记录数据】",
    "english_step": "【step1】:Join the energy consumption records table with the humidity records table using air conditioner ID and recording date  【step2】:Filter records where air supply mode, low fan speed, and absolute difference between indoor/outdoor humidity exceeds 30%  【step3】:Exclude records with outdoor humidity below 10%, ultimately output energy consumption records that meet all criteria"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设空调在极端除湿模式下运行，找出所有室内湿度低于10%且功耗超过5000瓦特的记录，并排除室外湿度高于90%的记录。",
    "query": "SELECT ec.* FROM energy_consumption ec JOIN humidity_records hr ON ec.ac_id = hr.ac_id AND ec.record_date = hr.record_date WHERE ec.mode = '极端除湿' AND ec.humidity_percent < 10 AND ec.power_consumption_watts > 5000 AND hr.outdoor_humidity_percent <= 90;",
    "type": "4",
    "idx": 80,
    "englishquestion": "Assuming the air conditioner is operating in extreme dehumidification mode, find all records where indoor humidity is below 10% and power consumption exceeds 5000 watts, excluding those with outdoor humidity above 90%.",
    "equation_analysis": "",
    "used_table_info": "【table】【energy_consumption】【columns】ac_id, record_date, mode, humidity_percent, power_consumption_watts  \n【table】【humidity_records】【columns】ac_id, record_date, outdoor_humidity_percent  \n【foreign_keys】energy_consumption.ac_id↔air_conditioner_info.ac_id｜humidity_records.ac_id↔air_conditioner_info.ac_id  \n【equation_analysis】  \nenergy_consumption.mode = '极端除湿' （模式筛选）  \nenergy_consumption.humidity_percent < 10 （室内湿度条件）  \nenergy_consumption.power_consumption_watts > 5000 （能耗筛选）  \nhumidity_records.outdoor_humidity_percent ≤ 90 （室外湿度排除条件）  \nJOIN操作通过(ac_id+record_date)建立两表行级对应关系",
    "evidence": "【step1】:【通过INNER JOIN关联energy_consumption和humidity_records表，使用ac_id和record_date作为关联条件】  【step2】:【应用基础过滤条件：模式为极端除湿，室内湿度<10%，功耗>5000W】  【step3】:【执行户外湿度筛选：排除outdoor_humidity_percent>90%的记录，最终返回energy_consumption表完整字段】",
    "english_step": "【step1】: 【Use INNER JOIN to associate the energy_consumption and humidity_records tables, using ac_id and record_date as the join conditions】  【step2】: 【Apply basic filtering conditions: mode is extreme dehumidification, indoor_humidity_percent < 10%, power_consumption > 5000W】  【step3】: 【Perform outdoor humidity filtering: exclude records where outdoor_humidity_percent > 90%, and finally return all fields from the energy_consumption table】"
  },
  {
    "db_id": "air_conditioner",
    "question": "在制冷模式下，找出所有使用时长超过5小时但功耗低于平均功耗的记录，且这些记录不在室外温度低于10°C的记录中。",
    "query": "SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '制冷' AND ur.usage_duration_hours > 5 AND ec.power_consumption_watts < (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制冷') AND ec.outdoor_temperature_celsius >= 10;",
    "type": "1",
    "idx": 81,
    "englishquestion": "In cooling mode, find all records where the usage duration exceeds 5 hours but the power consumption is below the average power consumption, and these records are not among those with outdoor temperatures below 10°C.",
    "equation_analysis": "equation_analysis：  1. mode属性两表均以'制冷'为过滤条件  2. usage_duration_hours需满足>5小时  3. power_consumption_watts需小于子查询计算的制冷模式平均功耗（SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode='制冷'）  4. outdoor_temperature_celsius强制排除<10°C的记录（通过>=10实现反向筛选）",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, mode, usage_duration_hours  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, power_consumption_watts, outdoor_temperature_celsius, mode  \n【foreign_keys】：usage_records.ac_id → air_conditioner_info.ac_id, energy_consumption.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：  \n1. mode属性两表均以'制冷'为过滤条件  \n2. usage_duration_hours需满足>5小时  \n3. power_consumption_watts需小于子查询计算的制冷模式平均功耗（SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode='制冷'）  \n4. outdoor_temperature_celsius强制排除<10°C的记录（通过>=10实现反向筛选）",
    "evidence": "【step1】:【通过JOIN操作关联usage_records和energy_consumption表，使用ac_id和时间字段建立记录关联】  【step2】:【计算制冷模式下能源消耗的子查询平均值，作为功耗筛选基准】  【step3】:【在联合数据集上应用多重过滤条件（模式限定/时长阈值/功耗对比/室外温度排除），返回最终结果】",
    "english_step": "【step1】: 【Associate the usage_records and energy_consumption tables via JOIN operation, establishing record linkages using ac_id and timestamp fields】  【step2】: 【Calculate the average value of energy consumption in cooling mode through a subquery, serving as the power consumption filtering benchmark】  【step3】: 【Apply multiple filtering criteria (mode restriction/duration threshold/power consumption comparison/outdoor temperature exclusion) on the joined dataset to return the final results】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算在制热模式下，使用时长超过3小时且功耗高于平均功耗的记录，并排除室内温度高于25°C的记录。",
    "query": "SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '制热' AND ur.usage_duration_hours > 3 AND ec.power_consumption_watts > (SELECT AVG(power_consumption_watts) FROM energy_consumption WHERE mode = '制热') AND ec.indoor_temperature_celsius <= 25;",
    "type": "2",
    "idx": 82,
    "englishquestion": "Calculate the records with usage duration exceeding 3 hours and power consumption higher than the average in heating mode, while excluding records with indoor temperature above 25°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, mode, usage_duration_hours  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, power_consumption_watts, indoor_temperature_celsius, mode  \n【foreign_keys】: usage_records.ac_id -> energy_consumption.ac_id",
    "evidence": "【step1】:【连接usage_records与energy_consumption表，通过ac_id和日期进行匹配】  【step2】:【计算energy_consumption表中制热模式下的平均功耗，作为子查询条件】  【step3】:【应用条件过滤：模式为制热、使用时长>3小时、功率高于子查询均值、室内温度≤25°C】",
    "english_step": "【step1】: Join the usage_records and energy_consumption tables via ac_id and date  【step2】: Calculate the average power consumption in heating mode from the energy_consumption table as a subquery condition  【step3】: Apply filter conditions: mode is heating, usage duration > 3 hours, power higher than the subquery average, and indoor temperature ≤25°C"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出所有在送风模式下，风速为高档但使用时长小于1小时的记录，并排除室外温度高于35°C的记录。",
    "query": "SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '送风' AND ur.fan_speed = '高档' AND ur.usage_duration_hours < 1 AND ec.outdoor_temperature_celsius <= 35;",
    "type": "3",
    "idx": 83,
    "englishquestion": "Find all records where the fan is in blow mode, the wind speed is set to high, but the usage duration is less than 1 hour, and exclude records where the outdoor temperature is higher than 35°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, mode, fan_speed, usage_duration_hours  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, outdoor_temperature_celsius  \n【foreign_keys】: usage_records.ac_id -> air_conditioner_info.ac_id | energy_consumption.ac_id -> air_conditioner_info.ac_id",
    "evidence": "【step1】:【连接usage_records和energy_consumption表，通过ac_id和时间进行关联】  【step2】:【筛选送风模式且风速为高档的记录】  【step3】:【应用使用时长<1小时和室外温度≤35℃的过滤条件】",
    "english_step": "【step1】: 【JOIN the usage_records and energy_consumption tables via ac_id and time】  【step2】: 【Filter records with air supply mode and high fan speed】  【step3】: 【Apply filter conditions for usage duration < 1 hour and outdoor temperature ≤ 35°C】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设空调在极端制热模式下运行，找出所有使用时长超过24小时且功耗超过10000瓦特的记录，并排除室外温度高于50°C的记录。",
    "query": "SELECT ur.* FROM usage_records ur JOIN energy_consumption ec ON ur.ac_id = ec.ac_id AND ur.usage_date = ec.record_date WHERE ur.mode = '极端制热' AND ur.usage_duration_hours > 24 AND ur.power_consumption_watts > 10000 AND ec.outdoor_temperature_celsius <= 50;",
    "type": "4",
    "idx": 84,
    "englishquestion": "Assuming the air conditioner is operating in extreme heating mode, find all records with a usage duration exceeding 24 hours and power consumption exceeding 10,000 watts, while excluding records where the outdoor temperature is above 50°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, mode, usage_duration_hours, power_consumption_watts  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, outdoor_temperature_celsius  \n【foreign_keys】: usage_records.ac_id 关联 air_conditioner_info.ac_id, energy_consumption.ac_id 关联 air_conditioner_info.ac_id",
    "evidence": "【step1】:【通过INNER JOIN关联usage_records和energy_consumption表，使用ac_id和日期进行主键匹配获取基础数据】  【step2】:【对关联后数据集执行基础过滤，筛选模式为'极端制热'/使用时长>24小时/功率>10000瓦的记录】  【step3】:【最后添加对关联表中outdoor_temperature_celsius的温度约束，排除室外温度>50°C的记录】",
    "english_step": "[Step1]: [Perform INNER JOIN between usage_records and energy_consumption tables using ac_id and date as primary keys to retrieve base data]  [Step2]: [Apply basic filtering on the joined dataset to select records where mode = 'extreme heating'/usage duration > 24 hours/power > 10000 watts]  [Step3]: [Finally, add temperature constraints from the joined table for outdoor_temperature_celsius, excluding records where outdoor temperature > 50°C]"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某型号空调在极端环境下的理论制冷效率，假设室内温度为50°C，室外温度为10°C，湿度为90%，且空调连续运行48小时。要求考虑制冷剂的相变热和空气的热容。",
    "query": "SELECT a.model, (a.cooling_capacity_btu / (a.power_consumption_watts * 3.412)) * (1 + (r.phase_change_heat_kj_per_kg * r.refrigerant_flow_rate_kg_per_s) / (c.air_heat_capacity_kj_per_kg_k * c.air_flow_rate_kg_per_s * 40)) AS theoretical_cop FROM air_conditioner_info a JOIN refrigerant_properties r ON a.refrigerant_type = r.refrigerant_type JOIN air_properties c ON c.temperature_celsius = 50 AND c.humidity_percent = 90 WHERE a.model = '特定型号';",
    "type": "1",
    "idx": 85,
    "englishquestion": "Calculate the theoretical cooling efficiency of a certain model of air conditioner under extreme conditions, assuming an indoor temperature of 50°C, an outdoor temperature of 10°C, humidity at 90%, and the air conditioner operating continuously for 48 hours. The calculation must account for the phase change heat of the refrigerant and the heat capacity of the air.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, cooling_capacity_btu, power_consumption_watts, refrigerant_type  \n【table】：【refrigerant_properties】 【columns】：phase_change_heat_kj_per_kg, refrigerant_flow_rate_kg_per_s, refrigerant_type  \n【table】：【air_properties】*（数据库信息未明确定义此表，查询中推断字段）* 【columns】：air_heat_capacity_kj_per_kg_k, air_flow_rate_kg_per_s, temperature_celsius, humidity_percent  \n【foreign_keys】: air_conditioner_info.refrigerant_type → refrigerant_properties.refrigerant_type",
    "evidence": "【step1】:【过滤空调信息表获取指定型号基础参数】从air_conditioner_info提取model、cooling_capacity_btu、power_consumption_watts及refrigerant_type，并通过WHERE model='特定型号'定位目标空调  【step2】:【关联制冷剂属性计算相变热影响】通过refrigerant_type连接refrigerant_properties获得phase_change_heat_kj_per_kg和refrigerant_flow_rate_kg_per_s，将相变热参数代入分子计算公式  【step3】:【结合空气属性计算环境热容影响】根据temperature=50和humidity=90连接air_properties获取air_heat_capacity_kj_per_kg_k和air_flow_rate_kg_per_s，构建分母参数计算最终COP比值",
    "english_step": "【step1】: 【Filter air conditioner information table to obtain basic parameters of specified model】 Extract model, cooling_capacity_btu, power_consumption_watts, and refrigerant_type from air_conditioner_info, and locate target air conditioner via WHERE model='specific model'  【step2】: 【Associate refrigerant properties to calculate phase change heat impact】 Connect refrigerant_properties through refrigerant_type to obtain phase_change_heat_kj_per_kg and refrigerant_flow_rate_kg_per_s, substitute phase change heat parameters into numerator calculation formula  【step3】: 【Combine air properties to calculate environmental heat capacity impact】 Join air_properties based on temperature=50 and humidity=90 to obtain air_heat_capacity_kj_per_kg_k and air_flow_rate_kg_per_s, construct denominator parameters to calculate final COP ratio"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算所有空调在2023年的月均能耗，并按制造商和型号分组，找出能耗波动最大的型号。要求考虑季节性温度变化和湿度对能耗的影响。",
    "query": "WITH monthly_energy AS (SELECT a.manufacturer, a.model, DATE_FORMAT(e.record_date, '%Y-%m') AS month, AVG(e.energy_consumption_kwh) AS avg_energy_consumption_kwh FROM energy_consumption e JOIN air_conditioner_info a ON e.ac_id = a.ac_id JOIN temperature_records t ON e.ac_id = t.ac_id AND e.record_date = t.record_date JOIN humidity_records h ON e.ac_id = h.ac_id AND e.record_date = h.record_date WHERE YEAR(e.record_date) = 2023 GROUP BY a.manufacturer, a.model, DATE_FORMAT(e.record_date, '%Y-%m')), energy_fluctuation AS (SELECT manufacturer, model, MAX(avg_energy_consumption_kwh) - MIN(avg_energy_consumption_kwh) AS energy_fluctuation_kwh FROM monthly_energy GROUP BY manufacturer, model) SELECT manufacturer, model, energy_fluctuation_kwh FROM energy_fluctuation ORDER BY energy_fluctuation_kwh DESC LIMIT 1;",
    "type": "2",
    "idx": 86,
    "englishquestion": "Calculate the monthly average energy consumption of all air conditioners in 2023, grouped by manufacturer and model, to identify the model with the greatest energy consumption fluctuation. The analysis must account for the influence of seasonal temperature variations and humidity on energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, manufacturer, model  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, energy_consumption_kwh  \n【table】：【temperature_records】 【columns】：ac_id, record_date  \n【table】：【humidity_records】 【columns】：ac_id, record_date  \n【foreign_keys】: energy_consumption.ac_id → air_conditioner_info.ac_id, temperature_records.ac_id → air_conditioner_info.ac_id, humidity_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【通过四表关联计算2023年每月各空调型号的平均能耗。将energy_consumption联表air_conditioner_info获取产品信息，同时关联temperature_records和humidity_records确保数据完整性，按制造商+型号+月份分组】  【step2】:【从预处理数据中计算各型号全年能耗波动。在monthly_energy结果基础上按制造商+型号分组，用MAX-MIN计算每月能耗最大值与最小值的差作为波动值】  【step3】:【按波动值降序排序并取第一位。从energy_fluctuation结果中进行全局排序，LIMIT 1获取波动最大的唯一记录】",
    "english_step": "【step1】: 【Calculate the average energy consumption of each air conditioner model per month in 2023 by joining four tables. Combine energy_consumption with air_conditioner_info to obtain product details, while linking temperature_records and humidity_records to ensure data integrity. Group results by manufacturer + model + month】  【step2】: 【Calculate annual energy fluctuation per model from preprocessed data. Based on monthly_energy results, group by manufacturer + model, and compute fluctuation value as the difference between MAX() and MIN() monthly energy consumption】  【step3】: 【Sort results by fluctuation value in descending order and select the top entry. Perform global sorting on energy_fluctuation results, using LIMIT 1 to retrieve the single record with the highest fluctuation】"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出在低温低湿环境下（室内温度<10°C，湿度<30%）使用时间最短的空调型号，并分析其在不同模式（制冷、制热、除湿、送风）下的能耗差异。",
    "query": "WITH low_temp_low_humidity_usage AS (SELECT u.ac_id, u.mode, SUM(u.usage_duration_hours) AS total_usage_hours, SUM(u.power_consumption_watts * u.usage_duration_hours) / 1000 AS total_energy_consumption_kwh FROM usage_records u JOIN temperature_records t ON u.ac_id = t.ac_id AND u.usage_date = t.record_date WHERE t.indoor_temperature_celsius < 10 AND t.humidity_percent < 30 GROUP BY u.ac_id, u.mode), shortest_usage_model AS (SELECT a.model, SUM(l.total_usage_hours) AS total_usage_hours FROM low_temp_low_humidity_usage l JOIN air_conditioner_info a ON l.ac_id = a.ac_id GROUP BY a.model ORDER BY total_usage_hours ASC LIMIT 1) SELECT s.model, l.mode, l.total_usage_hours, l.total_energy_consumption_kwh FROM low_temp_low_humidity_usage l JOIN air_conditioner_info a ON l.ac_id = a.ac_id JOIN shortest_usage_model s ON a.model = s.model;",
    "type": "3",
    "idx": 87,
    "englishquestion": "Find the air conditioner model with the shortest usage time under low temperature and low humidity conditions (indoor temperature <10°C, humidity <30%) and analyze its energy consumption differences across various modes (cooling, heating, dehumidification, fan mode).",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, mode, usage_duration_hours, power_consumption_watts  \n【table】：【temperature_records】 【columns】：ac_id, record_date, indoor_temperature_celsius, humidity_percent  \n【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id, temperature_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【通过JOIN连接usage_records和temperature_records，过滤低温低湿环境记录，按空调ID和模式聚类统计总使用时长与总能耗】  【step2】:【与空调信息表关联后按型号聚合总时长，通过ORDER BY和LIMIT查找使用时间最短的空调型号】  【step3】:【通过模型编号反查第一步的汇总结果，输出不同模式对应的总使用时长与能耗统计数据】",
    "english_step": "【step1】:【JOIN the usage_records and temperature_records, filter records for low-temperature and low-humidity environments, then group by air conditioner ID and mode to calculate total usage duration and total energy consumption】  【step2】:【After joining with the air conditioner information table, aggregate total duration by model, then use ORDER BY and LIMIT to find the model with the shortest usage time】  【step3】:【Reference the aggregated results from step 1 using the model number, and output statistics on total usage duration and energy consumption for different modes】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的制冷能力为1,000,000 BTU，且能效比为100，计算其在极端环境（室内外温差为100°C）下连续运行10年的能耗，并找出能耗超过1,000,000 kWh的空调型号。要求考虑空调的老化效应对能耗的影响。",
    "query": "WITH theoretical_energy AS (SELECT (1000000 / 100) * 24 * 365 * 10 * POWER(1.05, 10) / 1000 AS total_energy_consumption_kwh), high_energy_models AS (SELECT a.model, (a.cooling_capacity_btu / a.energy_efficiency_ratio) * 24 * 365 * 10 * POWER(1.05, 10) / 1000 AS total_energy_consumption_kwh FROM air_conditioner_info a WHERE a.cooling_capacity_btu = 1000000 AND a.energy_efficiency_ratio = 100 AND EXISTS (SELECT 1 FROM temperature_records t WHERE t.ac_id = a.ac_id AND t.indoor_temperature_celsius - t.outdoor_temperature_celsius = 100)) SELECT model, total_energy_consumption_kwh FROM high_energy_models WHERE total_energy_consumption_kwh > 1000000;",
    "type": "4",
    "idx": 88,
    "englishquestion": "Assuming an air conditioner has a cooling capacity of 1,000,000 BTU and an energy efficiency ratio of 100, calculate its energy consumption over 10 years of continuous operation in extreme conditions (with a 100°C temperature difference between indoor and outdoor environments). Additionally, identify air conditioner models with energy consumption exceeding 1,000,000 kWh. The calculation must account for the impact of aging on energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：model, cooling_capacity_btu, energy_efficiency_ratio, ac_id  \n【table】：【temperature_records】 【columns】：ac_id, indoor_temperature_celsius, outdoor_temperature_celsius  \n【foreign_keys】: air_conditioner_info.ac_id → temperature_records.ac_id",
    "evidence": "【step1】:【筛选基础数据】在air_conditioner_info表中匹配制冷能力=1,000,000 BTU、能效比=100且存在temperature_records中室内外温差=100°C记录的空调  【step2】:【计算老化后能耗】使用(cooling_capacity_btu/energy_efficiency_ratio) * 运行时数 * 老化系数公式，为每个空调计算10年累計能耗（含每年5%老化增幅）  【step3】:【过滤高能耗型号】从计算结果中提取总能耗超过1,000,000 kWh的空调型号",
    "english_step": "【step1】: 【Filter Base Data】In the air_conditioner_info table, match air conditioners with cooling_capacity=1,000,000 BTU, energy_efficiency_ratio=100, and existing temperature_records showing indoor-outdoor temperature difference=100°C  【step2】: 【Calculate Aged Energy Consumption】Use formula (cooling_capacity_btu/energy_efficiency_ratio) * runtime_hours * aging_coefficient to calculate 10-year cumulative energy consumption for each unit (including 5% annual aging increase)  【step3】: 【Filter High-Consumption Models】Extract air conditioner models with total energy consumption exceeding 1,000,000 kWh from calculation results"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某型号空调在不同温度设置下的功耗变化率，并按温度设置分组，找出功耗变化率最大的温度区间。要求结合热力学中的热传导公式，分析温度设置与功耗变化率的关系。",
    "query": "WITH power_consumption_variation AS (SELECT u.temperature_setting_celsius, (MAX(u.power_consumption_watts) - MIN(u.power_consumption_watts)) / AVG(u.power_consumption_watts) * 100 AS power_variation_rate FROM usage_records u JOIN air_conditioner_info a ON u.ac_id = a.ac_id WHERE a.model = '特定型号' GROUP BY u.temperature_setting_celsius) SELECT temperature_setting_celsius, power_variation_rate FROM power_consumption_variation ORDER BY power_variation_rate DESC LIMIT 1;",
    "type": "1",
    "idx": 89,
    "englishquestion": "Calculate the power consumption variation rate of a certain model air conditioner at different temperature settings, group them by temperature settings, and identify the temperature range with the highest power consumption variation rate. The analysis should incorporate the heat conduction formula from thermodynamics to examine the relationship between temperature settings and the power consumption variation rate.",
    "equation_analysis": "",
    "used_table_info": "",
    "evidence": "【step1】:【JOIN空调信息表和使用记录表，筛选特定型号数据】  【step2】:【按温度设置分组，计算(MAX-MIN)/AVG*100的功耗变化率】  【step3】:【按变化率降序排序，LIMIT 1获取最大变化率的温度区间】",
    "english_step": "【step1】:【JOIN air conditioner information table and usage records table, filter data for specific model】  【step2】:【Group by temperature settings, calculate power consumption change rate using (MAX-MIN)/AVG*100】  【step3】:【Sort by change rate descending, LIMIT 1 to get temperature range with maximum fluctuation】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算2023年每月使用时长与能耗的相关系数，并按月份分组，找出相关系数最高的月份。要求结合统计学中的相关系数公式，分析使用时长与能耗的线性关系。",
    "query": "WITH monthly_data AS (SELECT MONTH(u.usage_date) AS month, u.usage_duration_hours, e.energy_consumption_kwh FROM usage_records u JOIN energy_consumption e ON u.ac_id = e.ac_id AND u.usage_date = e.record_date WHERE YEAR(u.usage_date) = 2023), correlation_coefficients AS (SELECT month, (AVG(usage_duration_hours * energy_consumption_kwh) - AVG(usage_duration_hours) * AVG(energy_consumption_kwh)) / (STDDEV(usage_duration_hours) * STDDEV(energy_consumption_kwh)) AS correlation_coefficient FROM monthly_data GROUP BY month) SELECT month, correlation_coefficient FROM correlation_coefficients ORDER BY correlation_coefficient DESC LIMIT 1;",
    "type": "2",
    "idx": 90,
    "englishquestion": "Calculate the correlation coefficient between monthly usage duration and energy consumption for 2023, grouped by month, and identify the month with the highest correlation coefficient. The analysis should incorporate the statistical formula for correlation coefficients to examine the linear relationship between usage duration and energy consumption.",
    "equation_analysis": "equation_analysis：Pearson相关系数公式：(Σ(xy) - nμ_xμ_y)/(σx * σy) ，其中x=使用时长，y=能耗，n=数据点总数，μ=均值，σ=标准差。公式匹配查询语句中的实现方式：(AVG(x*y) - AVGx*AVGy) / (STDDEVx * STDDEVy)，符合统计定义。",
    "used_table_info": "【table】：【usage_records】 【columns】：ac_id, usage_date, usage_duration_hours  \n【table】：【energy_consumption】 【columns】：ac_id, record_date, energy_consumption_kwh  \n【foreign_keys】：usage_records.ac_id → energy_consumption.ac_id  \n【equation_analysis】：Pearson相关系数公式：(Σ(xy) - nμ_xμ_y)/(σx * σy) ，其中x=使用时长，y=能耗，n=数据点总数，μ=均值，σ=标准差。公式匹配查询语句中的实现方式：(AVG(x*y) - AVGx*AVGy) / (STDDEVx * STDDEVy)，符合统计定义。",
    "evidence": "【step1】:【生成月度数据集合】从usage_records和energy_consumption表通过ac_id和日期关联，提取2023年每月使用时长(usage_duration_hours)、能耗(energy_consumption_kwh)和月份信息  【step2】:【计算皮尔逊相关系数】使用统计学公式：(E(XY)-E(X)E(Y))/(σ_x*σ_y)，计算每月使用时长与能耗的协方差/(标准差乘积)，按月分组得到相关系数  【step3】:【排序并截取极值】按相关系数降序排列，取TOP 1记录得到相关系数最高的月份",
    "english_step": "【step1】:【Generate monthly dataset】Join usage_records and energy_consumption tables via ac_id and date, extract 2023 monthly usage_duration_hours, energy_consumption_kwh, and month information  【step2】:【Calculate Pearson correlation coefficient】Using statistical formula: (E(XY)-E(X)E(Y))/(σ_x*σ_y), compute covariance of monthly usage duration and energy consumption divided by product of standard deviations, grouped by month to obtain correlation coefficients  【step3】:【Sort and retrieve extreme values】Sort by correlation coefficient in descending order, retrieve TOP 1 record to obtain month with highest correlation coefficient"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出在低温低湿环境下（室内温度<10°C，湿度<30%）使用时长最短的空调型号，并分析其在不同模式（制冷、制热、除湿、送风）下的使用时长差异。要求结合空调的工作原理，分析模式对使用时长的潜在影响。",
    "query": "WITH low_temp_low_humidity_usage AS (SELECT a.model, u.mode, SUM(u.usage_duration_hours) AS total_usage_hours FROM usage_records u JOIN air_conditioner_info a ON u.ac_id = a.ac_id WHERE u.indoor_temperature_celsius < 10 AND u.humidity_percent < 30 GROUP BY a.model, u.mode), shortest_usage_model AS (SELECT model, SUM(total_usage_hours) AS total_usage_hours FROM low_temp_low_humidity_usage GROUP BY model ORDER BY total_usage_hours ASC LIMIT 1) SELECT s.model, l.mode, l.total_usage_hours FROM low_temp_low_humidity_usage l JOIN shortest_usage_model s ON l.model = s.model;",
    "type": "3",
    "idx": 91,
    "englishquestion": "Translate the Chinese text into English:\n\n\"Identify the air conditioner model with the shortest usage time in low-temperature and low-humidity environments (indoor temperature <10°C, humidity <30%), and analyze the differences in its usage time across different modes (cooling, heating, dehumidification, and fan-only). Require incorporating the working principles of air conditioners to analyze the potential impact of modes on usage time.\"",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：mode, usage_duration_hours, ac_id, indoor_temperature_celsius, humidity_percent  \n【table】：【air_conditioner_info】 【columns】：model, ac_id  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:【建立低温低湿环境使用数据子集】通过JOIN关联空调主表和usage_records表，过滤室内温度<10°C且湿度<30%记录，按型号和模式分组汇总总使用时长  【step2】:【确定最短使用型号】对上一步结果按型号再次聚合总时长，以总时长升序排列后取第一条记录，得到总使用时间最短的空调型号  【step3】:【模式时长差异提取】将初步子集与最短机型子表JOIN，最终输出该型号在不同模式（制冷/制热/除湿/送风）下的具体使用时长数据，用于后续模式差异分析。数据库未直接存储工作原理数据，需结合制冷剂phase_change_heat_kj_per_kg等物理属性解读模式时长差异",
    "english_step": "【step1】: 【Create a subset of usage data in low-temperature and low-humidity environments】JOIN the air conditioner master table with the usage_records table, filter records where indoor temperature <10°C and humidity <30%, group by model and mode to aggregate total usage duration.  【step2】: 【Identify the model with shortest usage time】Aggregate total duration by model from previous results, sort by total duration in ascending order and take the first record to obtain the air conditioner model with the shortest total usage time.  【step3】: 【Extract mode duration differences】JOIN the initial subset with the shortest model sub-table, output specific usage duration data for different modes (cooling/heating/dehumidification/air supply) of this model, used for subsequent mode difference analysis. The database does not directly store working principle data; interpretation of mode duration differences requires combining physical properties like refrigerant phase_change_heat_kj_per_kg."
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调在极端环境（室内温度100°C，室外温度-50°C）下连续运行1000年，计算其总使用时长和总能耗，并找出使用时长超过10,000,000小时且能耗超过100,000,000 kWh的空调型号。要求考虑空调的老化效应对使用时长和能耗的影响，并假设每年使用时长增加2%，能耗增加10%。",
    "query": "WITH extreme_usage AS (SELECT a.model, 24 * 365 * 1000 * POWER(1.02, 1000) AS total_usage_hours, (a.power_consumption_watts * 24 * 365 * 1000 * POWER(1.10, 1000)) / 1000 AS total_energy_consumption_kwh FROM air_conditioner_info a WHERE EXISTS (SELECT 1 FROM temperature_records t WHERE t.ac_id = a.ac_id AND t.indoor_temperature_celsius = 100 AND t.outdoor_temperature_celsius = -50)) SELECT model, total_usage_hours, total_energy_consumption_kwh FROM extreme_usage WHERE total_usage_hours > 10000000 AND total_energy_consumption_kwh > 100000000;",
    "type": "4",
    "idx": 92,
    "englishquestion": "Assuming an air conditioner operates continuously for 1,000 years in an extreme environment (indoor temperature of 100°C, outdoor temperature of -50°C), calculate its total usage time and total energy consumption, and identify models with usage time exceeding 10,000,000 hours and energy consumption exceeding 100,000,000 kWh. The effects of aging on usage time and energy consumption must be considered, with an assumption that usage time increases by 2% annually and energy consumption increases by 10% annually.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 \n【columns】：model, power_consumption_watts, ac_id \n【table】：【temperature_records】 \n【columns】：ac_id, indoor_temperature_celsius, outdoor_temperature_celsius \n【foreign_keys】: air_conditioner_info.ac_id ⬅️ temperature_records.ac_id",
    "evidence": "【step1】:【筛选极温环境数据】使用EXISTS子查询，在temperature_records表筛选出符合极端温度条件（室内100度/室外-50度）的空调ID，并与air_conditioner_info进行关联  【step2】:【计算老化后的总参数】通过CTE表达式计算总运行时长（包含每年2%时间增长）和总能耗（包含每年10%能耗增长），将功率单位转换为kWh  【step3】:【执行结果过滤】从CTE计算结果中筛选符合条件（使用超1000万小时且能耗超1亿kWh）的空调型号并输出结果",
    "english_step": "【Step 1】: 【Filter Extreme Temperature Environment Data】Use an EXISTS subquery to filter air conditioner IDs meeting extreme temperature conditions (indoor 100°C/outdoor -50°C) from the temperature_records table, then correlate them with air_conditioner_info.  【Step 2】: 【Calculate Post-Aging Total Parameters】Use a CTE (Common Table Expression) to compute total runtime (including a 2% annual time increase) and total energy consumption (including a 10% annual energy increase), converting power units to kWh.  【Step 3】: 【Execute Result Filtering】Filter qualified air conditioner models (exceeding 10 million hours of usage and 100 million kWh energy consumption) from the CTE calculation results and output them."
  },
  {
    "db_id": "air_conditioner",
    "question": "计算某型号空调在不同模式（制冷、制热、除湿、送风）下的能效比（EER），并按模式分组，找出能效比最低的模式。要求结合热力学中的卡诺循环效率公式，分析模式对能效比的影响。",
    "query": "WITH eer_by_mode AS (SELECT e.mode, AVG(a.cooling_capacity_btu / e.power_consumption_watts) AS eer FROM energy_consumption e JOIN air_conditioner_info a ON e.ac_id = a.ac_id WHERE a.model = 'Model-X' GROUP BY e.mode) SELECT mode, eer FROM eer_by_mode ORDER BY eer ASC LIMIT 1;",
    "type": "1",
    "idx": 93,
    "englishquestion": "Calculate the Energy Efficiency Ratio (EER) of a specific air conditioner model under different modes (cooling, heating, dehumidification, and fan), grouped by mode, and identify the mode with the lowest EER. The analysis should incorporate the Carnot cycle efficiency formula from thermodynamics to examine the impact of modes on EER.",
    "equation_analysis": "equation_analysis：EER计算公式为_冷却能力(BTU)/功率消耗(瓦)_，卡诺效率理论表达式为_η_ideal=1-T_c/T_h_。模式直接影响实际温度操作范围(Th和Tc)，导致不同模式下实际EER偏离理论值程度不同：如制热模式需更大温差(T_h较高)，功率消耗增加，导致分母增大，EER降低；送风/除湿模式下压缩机关闭（无相变热），导致分子减小，EER显著下降。",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, model, cooling_capacity_btu  \n【table】：【energy_consumption】 【columns】：ac_id, mode, power_consumption_watts  \n【foreign_keys】：energy_consumption.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：EER计算公式为_冷却能力(BTU)/功率消耗(瓦)_，卡诺效率理论表达式为_η_ideal=1-T_c/T_h_。模式直接影响实际温度操作范围(Th和Tc)，导致不同模式下实际EER偏离理论值程度不同：如制热模式需更大温差(T_h较高)，功率消耗增加，导致分母增大，EER降低；送风/除湿模式下压缩机关闭（无相变热），导致分子减小，EER显著下降。",
    "evidence": "【step1】:【连接energy_consumption与air_conditioner_info表获取型号为Model-X的数据，通过ac_id主外键关联】  【step2】:【按mode分组计算能效比：用cooling_capacity_btu/power_consumption_watts求均值作为EER】  【step3】:【通过对EER升序排列并取结果首行，得出能效比最低的模式】",
    "english_step": "【step1】: 【Join the energy_consumption and air_conditioner_info tables to retrieve data where the model is Model-X, using the ac_id primary-foreign key relationship】  【step2】: 【Group by mode and calculate the energy efficiency ratio (EER) by averaging cooling_capacity_btu/power_consumption_watts】  【step3】: 【Sort EER in ascending order and take the first result to determine the mode with the lowest energy efficiency】"
  },
  {
    "db_id": "air_conditioner",
    "question": "计算2023年每月能耗与室外温度的相关系数，并按月份分组，找出相关系数最高的月份。要求结合统计学中的相关系数公式，分析能耗与室外温度的线性关系。",
    "query": "WITH MonthlyData AS ( SELECT MONTH(ec.record_date) AS month, ec.energy_consumption_kwh, ec.outdoor_temperature_celsius FROM energy_consumption ec WHERE YEAR(ec.record_date) = 2023 ), CorrelationCoefficients AS ( SELECT month, (AVG(energy_consumption_kwh * outdoor_temperature_celsius) - AVG(energy_consumption_kwh) * AVG(outdoor_temperature_celsius)) / (STDDEV(energy_consumption_kwh) * STDDEV(outdoor_temperature_celsius)) AS correlation_coefficient FROM MonthlyData GROUP BY month ) SELECT month, correlation_coefficient FROM CorrelationCoefficients ORDER BY correlation_coefficient DESC LIMIT 1;",
    "type": "2",
    "idx": 94,
    "englishquestion": "Calculate the correlation coefficient between monthly energy consumption and outdoor temperature for the year 2023, grouped by month, and identify the month with the highest correlation coefficient. The analysis should incorporate the statistical formula for correlation coefficient to examine the linear relationship between energy consumption and outdoor temperature.",
    "equation_analysis": "",
    "used_table_info": "【table】：【energy_consumption】 【columns】：record_date, energy_consumption_kwh, outdoor_temperature_celsius  \n【foreign_keys】:【ac_id REFERENCES air_conditioner_info(ac_id)】",
    "evidence": "【step1】:【提取2023年按月分组数据集】使用CTE过滤2023年能耗记录，提取月份、能耗值、室外温度三列构成临时数据集MonthlyData  【step2】:【计算每月皮尔逊相关系数】基于统计学公式，在子查询中计算每个月的协方差(分子)和标准差乘积(分母)，输出月份与相关系数的映射集CorrelationCoefficients  【step3】:【排序取最高相关系数】对计算结果集按相关系数降序排列，通过LIMIT 1获取强相关月份数据",
    "english_step": "【step1】:【Extract 2023 monthly grouped dataset】Use CTE to filter 2023 energy consumption records, extract month, consumption value, and outdoor temperature columns to form temporary dataset MonthlyData  【step2】:【Calculate monthly Pearson correlation coefficient】Based on statistical formula, compute covariance (numerator) and product of standard deviations (denominator) for each month in subquery, output month-to-correlation mapping set CorrelationCoefficients  【step3】:【Sort to get highest correlation】Sort result set by correlation coefficient in descending order, retrieve strongly correlated month data via LIMIT 1"
  },
  {
    "db_id": "air_conditioner",
    "question": "找出在高温高湿环境下（室外温度>35°C，湿度>80%）能耗最高的空调型号，并分析其在不同模式（制冷、制热、除湿、送风）下的能耗差异。要求结合空调的工作原理，分析模式对能耗的潜在影响。",
    "query": "WITH HighTempHighHumidity AS ( SELECT ec.ac_id, ec.mode, ec.energy_consumption_kwh, aci.model FROM energy_consumption ec JOIN air_conditioner_info aci ON ec.ac_id = aci.ac_id WHERE ec.outdoor_temperature_celsius > 35 AND ec.humidity_percent > 80 ), ModelModeEnergy AS ( SELECT model, mode, SUM(energy_consumption_kwh) AS total_energy_kwh FROM HighTempHighHumidity GROUP BY model, mode ), MaxEnergyModel AS ( SELECT model, SUM(total_energy_kwh) AS total_energy_kwh FROM ModelModeEnergy GROUP BY model ORDER BY total_energy_kwh DESC LIMIT 1 ) SELECT mme.model, mme.mode, mme.total_energy_kwh FROM ModelModeEnergy mme JOIN MaxEnergyModel mem ON mme.model = mem.model ORDER BY mme.model, mme.mode;",
    "type": "3",
    "idx": 95,
    "englishquestion": "Identify the air conditioning models with the highest energy consumption in high-temperature and high-humidity environments (outdoor temperature >35°C, humidity >80%), and analyze their energy consumption differences across various modes (cooling, heating, dehumidification, air supply). Additionally, integrate the working principles of air conditioners to analyze the potential impact of operational modes on energy consumption.",
    "equation_analysis": "equation_analysis：  1. **能耗计算逻辑**：SUM(energy_consumption_kwh)聚合每个空调型号在不同模式下的总能耗  2. **筛选逻辑**：高温高湿条件限定外温>35℃且湿度>80%（由WHERE子句过滤原始数据）  3. **模式差异分析**：通过GROUP BY model, mode对不同模式单独计算能耗，制冷模式下压缩机负荷最重，制热模式需逆向热交换，除湿模式叠加冷凝器工作，送风仅风扇耗能  4. **能耗排序**：总能耗倒序（ORDER BY total_energy_kwh DESC）筛选单一体积能耗最高的型号",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：ac_id, model  \n【table】：【energy_consumption】 【columns】：ac_id, outdoor_temperature_celsius, humidity_percent, mode, energy_consumption_kwh  \n【foreign_keys】：energy_consumption.ac_id → air_conditioner_info.ac_id  \n【equation_analysis】：  \n1. **能耗计算逻辑**：SUM(energy_consumption_kwh)聚合每个空调型号在不同模式下的总能耗  \n2. **筛选逻辑**：高温高湿条件限定外温>35℃且湿度>80%（由WHERE子句过滤原始数据）  \n3. **模式差异分析**：通过GROUP BY model, mode对不同模式单独计算能耗，制冷模式下压缩机负荷最重，制热模式需逆向热交换，除湿模式叠加冷凝器工作，送风仅风扇耗能  \n4. **能耗排序**：总能耗倒序（ORDER BY total_energy_kwh DESC）筛选单一体积能耗最高的型号",
    "evidence": "【step1】:【建立高温高湿环境子集】通过JOIN操作关联能耗表与空调信息表，筛选室外温度>35°C且湿度>80%的记录，得到带空调型号的基础数据集合HighTempHighHumidity  【step2】:【多维分组聚合能耗】建立ModelModeEnergy临时表，根据空调型号（model）和工作模式（mode）进行二维分组，计算各空调型号在不同模式下的总能耗  【step3】:【确定最高能耗型号并解析模式差异】通过嵌套分组得出总能耗最高的空调型号（MaxEnergyModel），最终通过JOIN反查该型号在所有运行模式下的详细能耗分布数据，按模式排序输出对比结果",
    "english_step": "【step1】: 【Create High-Temperature & High-Humidity Environment Subset】Associate energy consumption table with air conditioner information table via JOIN operations, filter records where outdoor temperature >35°C and humidity >80%, obtaining the base dataset HighTempHighHumidity with air conditioner models.  【step2】: 【Multi-Dimensional Grouped Energy Aggregation】Create temporary table ModelModeEnergy, perform two-dimensional grouping by air conditioner model (model) and operating mode (mode), calculate total energy consumption for each model under different modes.  【step3】: 【Identify Highest-Consumption Model & Analyze Mode Differences】Determine the model with highest total energy consumption (MaxEnergyModel) via nested grouping, then use JOIN to reverse lookup detailed energy distribution data for this model across all operating modes, output comparative results sorted by mode."
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调在极端环境（室外温度100°C，湿度100%）下连续运行1000年，计算其总能耗，并找出能耗超过1,000,000,000 kWh的空调型号。要求考虑空调的老化效应对能耗的影响，并假设每年能耗增加20%。",
    "query": "WITH ExtremeEnergy AS ( SELECT aci.model, aci.power_consumption_watts, POWER(1.20, 1000) AS aging_factor FROM air_conditioner_info aci ), TotalEnergy AS ( SELECT model, (power_consumption_watts * 24 * 365 * 1000 * aging_factor) / 1000 AS total_energy_kwh FROM ExtremeEnergy ) SELECT model, total_energy_kwh FROM TotalEnergy WHERE total_energy_kwh > 1000000000;",
    "type": "4",
    "idx": 96,
    "englishquestion": "Assuming an air conditioner operates continuously for 1000 years under extreme conditions (outdoor temperature at 100°C and humidity at 100%), calculate its total energy consumption and identify the models whose energy consumption exceeds 1,000,000,000 kWh. The aging effect on energy consumption must be considered, with an assumed annual increase in energy consumption of 20%.",
    "equation_analysis": "equation_analysis：  1. 基本能耗计算：`power_consumption_watts × 24小时 × 365天 × 1000年`  2. 老化因子迭代公式：`POWER(1.20, 1000)`（每年能耗增长20%，累计1000年的系数）  3. 单位转换：`总瓦时 → 千瓦时（/1000）`  4. 最终公式：     `(power_consumption_watts × 24 × 365 × 1000 × 1.20^1000) / 1000 = total_energy_kwh`",
    "used_table_info": "【table】：【air_conditioner_info】  \n【columns】：model, power_consumption_watts  \n【foreign_keys】：无  \n【equation_analysis】：  \n1. 基本能耗计算：`power_consumption_watts × 24小时 × 365天 × 1000年`  \n2. 老化因子迭代公式：`POWER(1.20, 1000)`（每年能耗增长20%，累计1000年的系数）  \n3. 单位转换：`总瓦时 → 千瓦时（/1000）`  \n4. 最终公式：  \n   `(power_consumption_watts × 24 × 365 × 1000 × 1.20^1000) / 1000 = total_energy_kwh`",
    "evidence": "【step1】:【通过CTE计算所有空调型号在极端环境下的老化因子，使用公式(1.20)^1000作为每年20%能耗增长率的1000年累积倍率】  【step2】:【将基础功率转化为总能耗，计算逻辑为：功率 × 时间（24h*365天*1000年） × 老化因子 ÷ 1000（瓦特转千瓦时）】  【step3】:【筛选总能耗超过1,000,000,000千瓦时的型号】",
    "english_step": "【Step 1】: 【Calculate the aging factor for all air conditioner models in extreme environments using Common Table Expressions (CTE), applying the formula (1.20)^1000 as the 1000-year cumulative multiplier for a 20% annual energy consumption growth rate】  【Step 2】: 【Convert base power to total energy consumption using the logic: Power × Time (24h * 365 days * 1000 years) × Aging Factor ÷ 1000 (to convert watts to kilowatt-hours)】  【Step 3】: 【Filter models with total energy consumption exceeding 1,000,000,000 kilowatt-hours】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的制冷剂类型为R-410A，其制冷能力为18000 BTU，功耗为2000瓦特。已知R-410A的制冷剂在标准工况下的蒸发温度为5°C，冷凝温度为45°C。求该空调在实际运行中，制冷剂的蒸发器和冷凝器的热交换效率（COP）以及制冷剂的质量流量（kg/s）。",
    "query": "SELECT cooling_capacity_btu / (power_consumption_watts * 3.412) AS COP, cooling_capacity_btu / (1.0 * (45 - 5)) AS mass_flow_rate_kg_s FROM air_conditioner_info WHERE refrigerant_type = 'R-410A' AND cooling_capacity_btu = 18000 AND power_consumption_watts = 2000;",
    "type": "1",
    "idx": 97,
    "englishquestion": "Assuming an air conditioner uses refrigerant type R-410A, with a cooling capacity of 18,000 BTU and a power consumption of 2,000 watts. It is known that under standard operating conditions, the evaporation temperature of R-410A is 5°C, and the condensation temperature is 45°C. Calculate the heat exchange efficiency (COP) of the refrigerant's evaporator and condenser during actual operation, as well as the mass flow rate of the refrigerant in kg/s.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu, power_consumption_watts, refrigerant_type  \n【foreign_keys】: 无查询中使用的外键关联",
    "evidence": "【step1】:【从air_conditioner_info表提取符合R-410A/18000BTU/2000W条件的机组】通过WHERE子句筛选refrigerant_type='R-410A' AND cooling_capacity_btu=18000 AND power_consumption_watts=2000的空调记录  【step2】:【计算COP】执行cooling_capacity_btu/(power_consumption_watts*3.412)的数值计算，3.412是BTU-h与瓦特·小时的换算系数  【step3】:【计算质量流量】执行cooling_capacity_btu/(1.0*(45-5))的温差相关推导计算，其中(45-5)表示冷凝与蒸发温度差值，隐含了基于焓差法的简化公式应用场景",
    "english_step": "【step1】: 【Extract units meeting R-410A/18000BTU/2000W criteria from air_conditioner_info table】Filter air conditioning records through WHERE clause where refrigerant_type='R-410A' AND cooling_capacity_btu=18000 AND power_consumption_watts=2000  【step2】: 【Calculate COP】Perform numerical calculation: cooling_capacity_btu/(power_consumption_watts*3.412), where 3.412 is the conversion factor between BTU-h and watt-hours  【step3】: 【Calculate mass flow rate】Execute temperature difference-related derivation: cooling_capacity_btu/(1.0*(45-5)), where (45-5) represents the temperature difference between condensation and evaporation, implicitly applying a simplified enthalpy difference method formula scenario"
  },
  {
    "db_id": "air_conditioner",
    "question": "某空调在制热模式下运行了8小时，功耗为1800瓦特，室内温度从15°C升至22°C，室外温度为-5°C。已知空气的比热容为1.005 kJ/kg·K，空气密度为1.225 kg/m?，房间体积为50 m?。求该空调在这8小时内消耗的总能量（千瓦时）、制热效率（BTU/h）以及室内空气的总热量变化（kJ）。",
    "query": "SELECT air_conditioner_info.power_consumption_watts * 8 / 1000 AS total_energy_kWh, (22 - 15) * 1.005 * 1.225 * 50 / 8 * 3.412 AS heating_efficiency_BTU_h, (22 - 15) * 1.005 * 1.225 * 50 AS total_heat_change_kJ FROM usage_records JOIN air_conditioner_info ON usage_records.ac_id = air_conditioner_info.ac_id WHERE usage_records.mode = 'heating' AND usage_records.usage_duration_hours = 8 AND air_conditioner_info.power_consumption_watts = 1800;",
    "type": "2",
    "idx": 98,
    "englishquestion": "An air conditioner operated in heating mode for 8 hours, with a power consumption of 1800 watts. The indoor temperature rose from 15°C to 22°C, while the outdoor temperature was -5°C. Given the specific heat capacity of air as 1.005 kJ/kg·K, air density as 1.225 kg/m³, and room volume as 50 m³, calculate the total energy consumed by the air conditioner in these 8 hours (in kilowatt-hours), the heating efficiency (in BTU/h), and the total heat change of the indoor air (in kJ).",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：mode, usage_duration_hours, ac_id  \n【table】：【air_conditioner_info】 【columns】：power_consumption_watts, ac_id  \n【foreign_keys】: usage_records.ac_id → air_conditioner_info.ac_id",
    "evidence": "【step1】:通过JOIN建立usage_records和air_conditioner_info表的关联，过滤制热模式+8小时+1800瓦条件的记录  【step2】:从功率消耗计算总能耗：(1800*8)/1000 → 结果转为千瓦时  【step3】:基于热力学公式计算制热效率（温度差×比热容×密度×体积÷小时→BTU/h转换）和总热量变化（温度差×比热容×密度×体积）",
    "english_step": "【step1】: Establish a JOIN association between usage_records and air_conditioner_info tables, filtering records that meet the conditions of heating mode + 8 hours + 1800 watts  【step2】: Calculate total energy consumption from power usage: (1800 * 8) / 1000 → result converted to kilowatt-hours  【step3】: Calculate heating efficiency based on thermodynamic formula (temperature difference × specific heat capacity × density × volume ÷ hours → converted to BTU/h) and total heat change (temperature difference × specific heat capacity × density × volume)"
  },
  {
    "db_id": "air_conditioner",
    "question": "某空调的噪音水平为50分贝，重量为30 kg，尺寸为80cm x 20cm x 50cm。已知该空调安装在面积为20平方米的房间内，房间高度为3米。求该空调的噪音水平是否符合国际标准（≤55分贝），以及该空调的体积是否适合该房间的安装空间（假设安装空间至少需要空调体积的1.5倍）。",
    "query": "SELECT noise_level_db <= 55 AS is_noise_compliant, (SUBSTRING_INDEX(dimensions, 'x', 1) * SUBSTRING_INDEX(SUBSTRING_INDEX(dimensions, 'x', -2), 'x', 1) * SUBSTRING_INDEX(dimensions, 'x', -1)) * 1.5 <= (20 * 3 * 10000) AS is_space_sufficient FROM air_conditioner_info WHERE noise_level_db = 50 AND weight_kg = 30 AND dimensions = '80x20x50';",
    "type": "3",
    "idx": 99,
    "englishquestion": "The noise level of an air conditioner is 50 decibels, with a weight of 30 kg and dimensions of 80cm x 20cm x 50cm. It is known that the air conditioner is installed in a room with an area of 20 square meters and a height of 3 meters. Determine whether the noise level of the air conditioner meets international standards (≤55 decibels) and whether the volume of the air conditioner is suitable for the installation space in the room (assuming the installation space needs to be at least 1.5 times the volume of the air conditioner).",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：noise_level_db, weight_kg, dimensions 【foeign_keys】: 【none】",
    "evidence": "【step1】:【筛选符合噪音50分贝、重量30kg和尺寸'80x20x50'参数的空调记录】  【step2】:【计算噪音合规性：将50分贝值与≤55分贝国际标准进行布尔比较】  【step3】:【解析尺寸字符串计算空调体积，计算房间体积（20m²*3m=60m³=60,000,000cm³），检查1.5倍空调体积是否≤安装空间（60,000,000cm³）】",
    "english_step": "【step1】:【Filter air conditioning records that meet the parameters of 50 dB noise, 30kg weight, and dimensions '80x20x50'】  【step2】:【Calculate noise compliance: Perform Boolean comparison between the 50 dB value and the international standard of ≤55 dB】  【step3】:【Parse the dimension string to calculate air conditioner volume, compute room volume (20m²*3m=60m³=60,000,000cm³), check if 1.5×air conditioner volume ≤ installation space (60,000,000cm³)】"
  },
  {
    "db_id": "air_conditioner",
    "question": "假设某空调的制冷能力为1000000 BTU，功耗为1000000瓦特，室内温度为-273°C（绝对零度），室外温度为10000°C（接近太阳表面温度）。求该空调在这种极端条件下的能效比（EER）、制冷剂的质量流量（kg/s）以及在这种条件下运行1小时所需的能量（千瓦时）。假设制冷剂为R-134a，其比热容为1.5 kJ/kg·K。",
    "query": "SELECT cooling_capacity_btu / power_consumption_watts AS EER, cooling_capacity_btu / (1.5 * (10000 - (-273))) AS mass_flow_rate_kg_s, power_consumption_watts * 1 / 1000 AS total_energy_kWh FROM air_conditioner_info WHERE cooling_capacity_btu = 1000000 AND power_consumption_watts = 1000000;",
    "type": "4",
    "idx": 100,
    "englishquestion": "Assuming an air conditioner has a cooling capacity of 1,000,000 BTU, power consumption of 1,000,000 watts, indoor temperature of -273°C (absolute zero), and outdoor temperature of 10,000°C (close to the surface temperature of the sun). Calculate the Energy Efficiency Ratio (EER), the mass flow rate of the refrigerant (kg/s), and the energy required to operate for 1 hour under these extreme conditions (kilowatt-hours). Assume the refrigerant is R-134a with a specific heat capacity of 1.5 kJ/kg·K.",
    "equation_analysis": "",
    "used_table_info": "【table】：【air_conditioner_info】 【columns】：cooling_capacity_btu, power_consumption_watts  \n【foreign_keys】:【无需外键（仅单表查询）】",
    "evidence": "【step1】:【从air_conditioner_info表中筛选制冷能力与功耗均为1000000的空调记录】  【step2】:【计算EER(能效比): cooling_capacity_btu / power_consumption_watts】  【step3】:【通过比热容公式计算质量流量: cooling_capacity_btu/(1.5*(温差))，计算能耗: power_consumption_watts/kW转换后乘以运行时间1小时】",
    "english_step": "【step1】: 【Filter records from the air_conditioner_info table where both cooling_capacity_btu and power_consumption_watts equal 1,000,000】  【step2】: 【Calculate EER (Energy Efficiency Ratio): cooling_capacity_btu / power_consumption_watts】  【step3】: 【Calculate mass flow rate using specific heat capacity formula: cooling_capacity_btu/(1.5*(temperature difference)), calculate energy consumption: (power_consumption_watts converted to kW) multiplied by 1 hour of operation】"
  },
  {
    "db_id": "architect",
    "question": "计算Eiffel Tower在特定风速下的风荷载，塔的高度为300米，底座宽度为50米，风速为50米/秒。",
    "query": "SELECT 0.5 * 1.225 * POWER(50, 2) * (Height_meters * Base_Width) * 1.2 AS Wind_Load FROM tower WHERE Name = 'Eiffel Tower';",
    "type": "1",
    "idx": 101,
    "englishquestion": "Calculate the wind load on the Eiffel Tower under specific wind conditions, with a tower height of 300 meters, base width of 50 meters, and wind speed of 50 meters per second.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Name, Height_meters, Base_Width  \n【foreign_keys】:【tower.architect_id → architect.Architect_ID】",
    "evidence": "【step1】:【从tower表中选择'Eiffel Tower'的数据，获取Height_meters和Base_Width字段】  【step2】:【按公式代入选定数值：0.5 * 空气密度(1.225) * 风速平方 * 结构投影面积(Height*Base) * 系数1.2】  【step3】:【最终计算得到结构化风荷载结果】",
    "english_step": "【step1】: [Select data for 'Eiffel Tower' from the **tower** table, retrieving the **Height_meters** and **Base_Width** fields]  【step2】: [Substitute selected values into the formula: **0.5 * air density (1.225) * wind_speed² * structural projected area (Height × Base_Width) * coefficient 1.2**]  【step3】: [Final calculation yields the structural wind load result]"
  },
  {
    "db_id": "architect",
    "question": "计算Eiffel Tower的总重量对其底座宽度的压强，塔的总重量为1,000,000千克，底座宽度为50米，底座面积为2500平方米。",
    "query": "SELECT (Weight * 9.81) / (Base_Width * Base_Width) AS Pressure FROM tower WHERE Name = 'Eiffel Tower';",
    "type": "2",
    "idx": 102,
    "englishquestion": "Calculate the pressure exerted by the total weight of the Eiffel Tower on its base width. The tower's total weight is 1,000,000 kilograms, the base width is 50 meters, and the base area is 2,500 square meters.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Weight, Base_Width, Name  \n【foreign_keys】:【tower.architect_id -> architect.Architect_ID】",
    "evidence": "【step1】: 筛选塔表中名称为'Eiffel Tower'的记录 【step2】: 应用压强公式计算：(重量*重力加速度)/(底座宽度^2) 【step3】: 通过除法运算得到最终压强值并赋予Pressure别名",
    "english_step": "[step1]: Filter the records in the tower table where the name is 'Eiffel Tower'  [step2]: Apply the pressure formula calculation: (weight * gravitational acceleration) / (base_width^2)  [step3]: Calculate the final pressure value through the division operation and assign it the alias \"Pressure\""
  },
  {
    "db_id": "architect",
    "question": "判断Eiffel Tower的建造成本是否与其高度和材料成正比，塔的高度为300米，材料为钢，建造成本为10,000,000美元。",
    "query": "SELECT CASE WHEN Cost_Usd = (SELECT AVG(Cost_Usd) FROM tower WHERE Height_meters = 300 AND Material = '钢') THEN '成正比' ELSE '不成正比' END AS Cost_Proportionality FROM tower WHERE Name = 'Eiffel Tower';",
    "type": "3",
    "idx": 103,
    "englishquestion": "Determine if the construction cost of the Eiffel Tower is proportional to its height and materials, given that the tower is 300 meters tall, made of steel, and has a construction cost of $10,000,000.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Cost_Usd, Height_meters, Material, Name  \n【foreign_keys】: 无",
    "evidence": "【step1】:【从tower表中筛选出名称为'Eiffel Tower'的记录的建造成本Cost_Usd】  【step2】:【计算所有高度300米且材料为钢的塔的平均建造成本（子查询）】  【step3】:【通过CASE语句将实际成本与平均值比较，返回成本是否成正比的判定】",
    "english_step": "【step1】: [Filter the construction cost Cost_Usd of records with the name 'Eiffel Tower' from the tower table]  【step2】: [Calculate the average construction cost of all towers with a height of 300 meters and material of steel (subquery)]  【step3】: [Compare the actual cost with the average value using a CASE statement to determine if the cost is proportional]"
  },
  {
    "db_id": "architect",
    "question": "计算Eiffel Tower在极端风速下的振动频率是否会导致结构失效，假设塔的高度为1000米，风速为1000米/秒，振动频率为100赫兹。",
    "query": "SELECT CASE WHEN Vibration_Frequency = (1000 / (2 * Height_meters)) THEN '可能导致失效' ELSE '不会导致失效' END AS Failure_Risk FROM tower WHERE Name = 'Eiffel Tower';",
    "type": "4",
    "idx": 104,
    "englishquestion": "Calculate whether the vibration frequency of the Eiffel Tower under extreme wind speeds would lead to structural failure, assuming the tower has a height of 1000 meters, a wind speed of 1000 meters per second, and a vibration frequency of 100 Hertz.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Vibration_Frequency, Height_meters, Name  \n【foreign_keys】:【tower.architect_id ➔ architect.Architect_ID】",
    "evidence": "【step1】:【从tower表过滤'Eiffel Tower'记录，提取Height_meters和Vibration_Frequency字段】  【step2】:【应用公式1000/(2*height_meters)计算理论振动频率临界值】  【step3】:【通过CASE表达式将实际振动频率与理论值比对，输出失效风险评估结果】",
    "english_step": "【step1】: 【Filter records for 'Eiffel Tower' in the tower table, extract Height_meters and Vibration_Frequency fields】  【step2】: 【Apply formula 1000/(2*height_meters) to calculate theoretical critical value of vibration frequency】  【step3】: 【Compare actual vibration frequency with theoretical value using CASE expression, output failure risk assessment results】"
  },
  {
    "db_id": "architect",
    "question": "计算Tokyo Tower在特定振动频率下的能量消耗，塔的振动频率为5赫兹，质量为1,000,000千克，振幅为0.1米。",
    "query": "SELECT 0.5 * POWER(2 * PI() * Vibration_Frequency, 2) * Weight * POWER(0.1, 2) AS Energy_Consumption FROM tower WHERE Name = 'Tokyo Tower';",
    "type": "1",
    "idx": 105,
    "englishquestion": "Calculate the energy consumption of the Tokyo Tower at a specific vibration frequency, with a vibration frequency of 5 Hz, a mass of 1,000,000 kg, and an amplitude of 0.1 meters.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Vibration_Frequency, Weight, Name 【foreign_keys】:【architect_id 引用 architect 表的 Architect_ID】",
    "evidence": "【step1】:【筛选指定塔的数据】执行FROM tower WHERE Name = 'Tokyo Tower'，定位到东京塔的记录  【step2】:【提取物理参数】获取该记录的Vibration_Frequency(5 Hz)和Weight(1,000,000 kg)字段值  【step3】:【进行能量计算】应用公式0.5*(2π*5)^2*1e6*(0.1^2)，计算简谐振动系统的能量消耗",
    "english_step": "【step1】:【Filter data for specified tower】Execute FROM tower WHERE Name = 'Tokyo Tower' to locate the records for Tokyo Tower  【step2】:【Extract physical parameters】Obtain the Vibration_Frequency (5 Hz) and Weight (1,000,000 kg) field values from the record  【step3】:【Perform energy calculation】Apply the formula 0.5*(2π*5)^2*1e6*(0.1^2) to calculate the energy consumption of the simple harmonic vibration system"
  },
  {
    "db_id": "architect",
    "question": "计算Tokyo Tower在不同高度下的重力势能变化，塔的高度从100米增加到300米，质量为1,000,000千克，重力加速度为9.81 m/s²。",
    "query": "SELECT Weight * 9.81 * (300 - 100) AS Potential_Energy_Change FROM tower WHERE Name = 'Tokyo Tower';",
    "type": "2",
    "idx": 106,
    "englishquestion": "Calculate the change in gravitational potential energy of the Tokyo Tower at different heights, with the tower's height increasing from 100 meters to 300 meters, a mass of 1,000,000 kilograms, and a gravitational acceleration of 9.81 m/s².",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Weight,Name 【foreign_keys】: 无",
    "evidence": "【step1】:【在`tower`表中通过WHERE Name = 'Tokyo Tower'筛选出目标塔数据】  【step2】:【用公式Weight * 9.81 * (300-100)计算重力势能变化量】  【step3】:【通过AS关键字为计算结果设置别名Potential_Energy_Change】",
    "english_step": "【step1】:【Filter target tower data in the `tower` table using WHERE Name = 'Tokyo Tower'】  【step2】:【Calculate gravitational potential energy change using formula Weight * 9.81 * (300-100)】  【step3】:【Assign alias Potential_Energy_Change to the calculation result via AS keyword】"
  },
  {
    "db_id": "architect",
    "question": "判断Tokyo Tower的年度维护成本是否与其高度和材料成正比，塔的高度为300米，材料为钢，年度维护成本为100,000美元。",
    "query": "SELECT CASE WHEN Maintenance_Cost = (SELECT AVG(Maintenance_Cost) FROM tower WHERE Height_meters = 300 AND Material = '钢') THEN '成正比' ELSE '不成正比' END AS Maintenance_Proportionality FROM tower WHERE Name = 'Tokyo Tower';",
    "type": "3",
    "idx": 107,
    "englishquestion": "Determine whether the annual maintenance cost of Tokyo Tower is proportional to its height and materials, given that the tower is 300 meters tall, made of steel, and has an annual maintenance cost of $100,000.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Maintenance_Cost, Name, Height_meters, Material  \n【foreign_keys】:【tower.architect_id → architect.Architect_ID】",
    "evidence": "【step1】: 执行子查询获取同类塔的平均维护成本：`SELECT AVG(Maintenance_Cost) FROM tower WHERE Height_meters = 300 AND Material = '钢'` 计算高度为300米且材质为钢的塔的平均维护成本  【step2】: 主查询通过CASE语句对比目标值：将Tokyo Tower的维护成本与步骤1获取的平均值进行等值判断，生成`Maintenance_Proportionality`分类标志  【step3】: 应用WHERE条件过滤出目标记录：通过`WHERE Name = 'Tokyo Tower'`确定最终输出对象，返回单条结果的分类判定",
    "english_step": "【Step1】: Execute a subquery to obtain the average maintenance cost of towers of the same type: `SELECT AVG(Maintenance_Cost) FROM tower WHERE Height_meters = 300 AND Material = '钢'` calculates the average maintenance cost for towers that are 300 meters in height and made of steel.  【Step2】: The main query compares the target value using a CASE statement: it evaluates whether the maintenance cost of Tokyo Tower is equal to the average value obtained in Step 1, generating the `Maintenance_Proportionality` categorical flag.  【Step3】: Apply the WHERE condition to filter out the target record: use `WHERE Name = 'Tokyo Tower'` to determine the final output entry, returning the classification judgment for the single result."
  },
  {
    "db_id": "architect",
    "question": "计算Tokyo Tower在极端高度下的抗风能力是否足够，假设塔的高度为10,000米，风速为500米/秒，设计抗风速度为50米/秒。",
    "query": "SELECT CASE WHEN POWER(500, 2) > POWER(Wind_Resistance, 2) THEN '不足' ELSE '足够' END AS Wind_Resistance_Check FROM tower WHERE Name = 'Tokyo Tower';",
    "type": "4",
    "idx": 108,
    "englishquestion": "Calculate whether the wind resistance of Tokyo Tower is sufficient at extreme heights, assuming the tower's height is 10,000 meters, wind speed is 500 meters per second, and the designed wind resistance speed is 50 meters per second.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Wind_Resistance, Name  \n【foreign_keys】: architect_id → architect(Architect_ID)",
    "evidence": "【step1】: 【从tower表筛选东京塔记录】通过WHERE Name = 'Tokyo Tower'条件定位目标数据条目  【step2】: 【提取抗风参数】获取表中存储的Wind_Resistance设计抗风速度值  【step3】: 【平方比较判断】通过CASE WHEN对比（500²）与（设计值²），返回抗风能力评估结果",
    "english_step": "[step1]: [Filter Tokyo Tower records from the tower table] Locate target data entries using WHERE Name = 'Tokyo Tower' condition  [step2]: [Extract wind resistance parameter] Retrieve the stored Wind_Resistance designed wind speed value from the table  [step3]: [Square comparison judgment] Use CASE WHEN to compare (500²) with (designed value²), returning wind resistance capability evaluation result"
  },
  {
    "db_id": "architect",
    "question": "计算CN Tower的临界屈曲载荷，塔的高度为400米，底座宽度为60米，材料弹性模量为200 GPa（钢材）。",
    "query": "SELECT (POWER(PI(), 2) * 200e9 * (POWER(Base_Width, 4)/12)) / POWER(2 * Height_meters, 2) AS Critical_Buckling_Load FROM tower WHERE Name = 'CN Tower';",
    "type": "1",
    "idx": 109,
    "englishquestion": "Calculate the critical buckling load of the CN Tower, which has a height of 400 meters, a base width of 60 meters, and a material elastic modulus of 200 GPa (steel).",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Base_Width, Height_meters  \n【foreign_keys】:【无关联查询字段】",
    "evidence": "【step1】:【从 tower 表中筛选 Name = 'CN Tower' 的记录，获取 Base_Width（底座宽度）和 Height_meters（塔高）字段值】  【step2】:【根据弹性力学公式计算临界屈曲载荷：(π² * E * (Base_Width⁴ /12)) / (2*Height)²，其中 E=200e9 为固定参数】  【step3】:【将计算结果映射到查询输出字段 Critical_Buckling_Load，完成单位量纲转换（Pa 至所需单位）】",
    "english_step": "【step1】:【From the tower table, filter records where Name = 'CN Tower' and retrieve Base_Width (base width) and Height_meters (tower height) field values】  【step2】:【Calculate critical buckling load using the elastic mechanics formula: (π² * E * (Base_Width⁴ /12)) / (2*Height)², where E=200e9 is a fixed parameter】  【step3】:【Map the calculation result to the query output field Critical_Buckling_Load, completing unit dimension conversion (from Pa to the required unit)】"
  },
  {
    "db_id": "architect",
    "question": "计算CN Tower采用不同材料的建造成本差异，塔的体积为100,000立方米，混凝土密度为2400 kg/m³（单价$50/吨），钢密度为7850 kg/m³（单价$800/吨）。",
    "query": "SELECT (100000 * 2400 / 1000 * 50) AS Concrete_Cost, (100000 * 7850 / 1000 * 800) AS Steel_Cost, (100000 * 7850 / 1000 * 800) - (100000 * 2400 / 1000 * 50) AS Cost_Difference FROM tower WHERE Name = 'CN Tower';",
    "type": "2",
    "idx": 110,
    "englishquestion": "Calculate the cost difference of constructing the CN Tower using different materials. The tower has a volume of 100,000 cubic meters, with concrete density being 2400 kg/m³ (unit price $50/ton) and steel density being 7850 kg/m³ (unit price $800/ton).",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：name  \n【foreign_keys】:【architect_id 引用 architect 表的 Architect_ID】",
    "evidence": "【step1】:【从tower表中筛选名称为'CN Tower'的基础数据】  【step2】:【根据指定公式计算混凝土材料的建造成本：(体积x密度/吨换算因子x单价)】  【step3】:【同步计算出钢结构成本并作差值对比，通过数学运算同时生成混凝土/钢两个材料的成本及其绝对值差】",
    "english_step": "Step1: Filter the base data from the tower table where the name is 'CN Tower'  Step2: Calculate the construction cost of concrete material using the formula: (volume × density / ton conversion factor × unit price)  Step3: Simultaneously compute steel structure costs and perform a cost difference comparison, generating both concrete/steel material costs and their absolute difference through mathematical operations"
  },
  {
    "db_id": "architect",
    "question": "判断CN Tower的设计抗风速度是否合理，塔的材料为木材，高度为200米，但设计抗风速度为80 m/s。",
    "query": "SELECT CASE WHEN Wind_Resistance > 40 THEN '不合理' ELSE '合理' END AS Wind_Resistance_Check FROM tower WHERE Name = 'CN Tower';",
    "type": "3",
    "idx": 111,
    "englishquestion": "Determine whether the design wind speed resistance of the CN Tower is reasonable, considering that the tower is made of wood, has a height of 200 meters, but a design wind speed resistance of 80 m/s.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Wind_Resistance, Name  \n【foreign_keys】: architect_id → architect(Architect_ID)",
    "evidence": "【step1】:【从tower表中筛选出名称为'CN Tower'的记录】  【step2】:【提取该记录的Wind_Resistance字段进行逻辑判断】  【step3】:【根据风速阈值40 m/s输出合理性判定结果】",
    "english_step": "【step1】:【Filter records from the tower table where the name is 'CN Tower'】  【step2】:【Extract the Wind_Resistance field of this record for logical evaluation】  【step3】:【Output a rationality determination result based on the wind speed threshold of 40 m/s】"
  },
  {
    "db_id": "architect",
    "question": "计算CN Tower在超极端高度下的地基承受压强，假设塔的高度为100,000米，底座宽度仅1米，总重量为1e15千克，地壳平均抗压强度为200 MPa。",
    "query": "SELECT (Weight * 9.81) / POWER(Base_Width, 2) AS Ground_Pressure FROM tower WHERE Name = 'CN Tower';",
    "type": "4",
    "idx": 112,
    "englishquestion": "Calculate the foundation pressure of the CN Tower under extreme height conditions, assuming the tower is 100,000 meters high, with a base width of only 1 meter, a total weight of 1e15 kilograms, and an average crust compressive strength of 200 MPa.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Name, Weight, Base_Width  \n【foreign_keys】:【tower.architect_id引用architect.Architect_ID】",
    "evidence": "【step1】: 从tower表中筛选Name为'CN Tower'的记录  【step2】: 使用(Weight * 9.81)计算塔总垂直力（包含重力加速度）  【step3】: 通过POWER(Base_Width,2)计算底面积并求压强（总力/底面积）",
    "english_step": "【step1】: Filter records from the tower table where Name is 'CN Tower'  【stepstep2】: Calculate total vertical force of the tower (including gravitational acceleration) using (Weight * 9.81)  【step3】: Compute base area through POWER(Base_Width,2) and determine pressure (total force / base area)"
  },
  {
    "db_id": "architect",
    "question": "计算Burj Khalifa在昼夜温差下的热膨胀形变量，塔高600米，材料为钢（线膨胀系数α=12e-6/℃），昼夜温差ΔT=50℃。",
    "query": "SELECT 12e-6 * Height_meters * 50 AS Thermal_Expansion FROM tower WHERE Name = 'Burj Khalifa';",
    "type": "1",
    "idx": 113,
    "englishquestion": "Calculate the thermal expansion deformation of Burj Khalifa under day-night temperature variation, with a tower height of 600 meters, made of steel (linear expansion coefficient α=12e-6/°C), and a day-night temperature difference ΔT=50°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：name, height_meters  \n【foreign keys】: architect_id → architect(Architect_ID)",
    "evidence": "【step1】: 筛选 tower 表中名称为 'Burj Khalifa' 的记录  【step2】: 提取 height_meters 字段的值  【step3】: 应用公式计算形变量（12e-6 * 高度 * 温差）生成结果字段 Thermal_Expansion",
    "english_step": "【step1】: Filter records in the tower table where the name is 'Burj Khalifa'  【step2】: Extract the value of the height_meters field  【step3】: Apply the formula to calculate deformation (12e-6 * height * temperature difference) and generate the result field Thermal_Expansion"
  },
  {
    "db_id": "architect",
    "question": "计算Burj Khalifa在不同材料下的总热应力，塔高400米，横截面积10㎡，钢弹性模量E=200GPa，混凝土E=30GPa，温升ΔT=40℃。",
    "query": "SELECT 200e9 * 12e-6 * 40 AS Steel_Thermal_Stress, 30e9 * 10e-6 * 40 AS Concrete_Thermal_Stress FROM tower WHERE Name = 'Burj Khalifa';",
    "type": "2",
    "idx": 114,
    "englishquestion": "Calculate the total thermal stress of Burj Khalifa under different materials, with a tower height of 400 meters, cross-sectional area of 10 m², steel elastic modulus E=200 GPa, concrete E=30 GPa, and temperature rise ΔT=40℃.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Name",
    "evidence": "【step1】:【从tower表筛选Name为'Burj Khalifa'的记录】  【step2】:【使用硬编码参数计算钢的热应力(200GPa * 12e-6线胀系数 * 40℃温升)】  【step3】:【并行计算混凝土热应力(30GPa * 10e-6线胀系数 * 40℃温升)并返回双列结果】",
    "english_step": "【step1】:【Filter records from the tower table where Name is 'Burj Khalifa'】  【step2】:【Calculate thermal stress for steel using hard-coded parameters (200GPa * 12e-6 thermal expansion coefficient * 40°C temperature increase)】  【step3】:【Concurrently calculate thermal stress for concrete (30GPa * 10e-6 thermal expansion coefficient * 40°C temperature increase) and return a two-column result】"
  },
  {
    "db_id": "architect",
    "question": "判断Burj Khalifa在海岸地区的年度维护成本是否异常，假设该塔维护成本为$5,000,000，而同类钢塔维护成本为$1,200,000。",
    "query": "SELECT CASE WHEN (5000000 / 1200000) > 3 THEN '异常' ELSE '正常' END AS Maintenance_Status FROM tower WHERE Name = 'Burj Khalifa';",
    "type": "3",
    "idx": 115,
    "englishquestion": "Determine whether the annual maintenance cost of Burj Khalifa in the coastal area is abnormal, assuming the tower's maintenance cost is $5,000,000 while the maintenance cost of similar steel towers is $1,200,000.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：name  \n【foreign_keys】:【tower.architect_id → architect.Architect_ID】",
    "evidence": "【step1】: 获取'tower'表中名称为'Burj Khalifa'的维护成本记录  【step2】: 执行硬编码数值比较（5000000除以1200000=4.166）  【step3】: 应用CASE逻辑（4.166>3）返回'异常'状态",
    "english_step": "【step1】: Retrieve maintenance cost records from the 'tower' table where the name is 'Burj Khalifa'  【step2】: Perform hard-coded numerical comparison (5000000 divided by 1200000 = 4.166)  【step3】: Apply CASE logic (4.166 > 3) to return 'abnormal' status"
  },
  {
    "db_id": "architect",
    "question": "计算Burj Khalifa在微观底座（0.1米）下的地核穿透深度，假设塔的重量为1e18 kg，地幔密度5515 kg/m³，g=9.81m/s²。",
    "query": "SELECT (1e18 * 9.81) / (5515 * 9.81) AS Penetration_Depth FROM tower WHERE Name = 'Burj Khalifa';",
    "type": "4",
    "idx": 116,
    "englishquestion": "Calculate the depth of Earth's core penetration by the Burj Khalifa at a micro base (0.1 meters), assuming the tower's weight is 1e18 kg, the mantle density is 5515 kg/m³, and g=9.81 m/s².",
    "equation_analysis": "equation_analysis：(Weight * g) / (density * g) → Weight/density → 计算结果等价于塔总体积，未考虑底面积换算为穿透深度的最终逻辑",
    "used_table_info": "【table】：【tower】 【columns】：【Name】 【foreign_keys】：【architect_id -> architect.Architect_ID】 【equation_analysis】：【(Weight * g) / (density * g) → Weight/density → 计算结果等价于塔总体积，未考虑底面积换算为穿透深度的最终逻辑】",
    "evidence": "【step1】:【从tower表中筛选出名称为'Burj Khalifa'的记录】  【step2】:【对筛选出的单条数据执行计算：(1e18 * 9.81)/(5515 * 9.81)，约简表达式为1e18/5515，通过消除重力加速度常数简化运算】  【step3】:【输出结果字段Penetration_Depth作为最终穿透深度】",
    "english_step": "【step1】: 【Filter records from the tower table where the name is 'Burj Khalifa'】  【step2】: 【Perform calculation on the filtered single record: (1e18 * 9.81)/(5515 * 9.81), simplified to 1e18/5515 by eliminating the gravitational acceleration constant to streamline computation】  【step3】: 【Output the result field *Penetration_Depth* as the final penetration depth】"
  },
  {
    "db_id": "architect",
    "question": "计算Shanghai Tower在强风作用下的抗倾覆力矩，塔高500米，总重量8e6 kg，风速60 m/s，空气密度1.225 kg/m³，迎风面积=塔高×底座宽度（40米）",
    "query": "SELECT 0.5 * Weight * 9.81 * Base_Width AS Resist_Moment, 0.5 * 1.225 * POWER(60, 2) * (Height_meters * Base_Width) * (Height_meters / 2) AS Wind_Moment FROM tower WHERE Name = 'Shanghai Tower';",
    "type": "1",
    "idx": 117,
    "englishquestion": "Calculate the overturning resistance moment of the Shanghai Tower under strong wind conditions. The tower is 500 meters tall, with a total weight of 8e6 kg, wind speed of 60 m/s, air density of 1.225 kg/m³, and windward area equal to the tower height multiplied by the base width (40 meters).",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Name, Weight, Base_Width, height_meters  \n【foreign_keys】:【无关联外键参与本次查询】",
    "evidence": "【step1】:【从tower表中筛选出名称为'Shanghai Tower'的记录】  【step2】:【计算抗倾覆力矩：用公式0.5*Weight*9.81*Base_Width得出Resist_Moment】  【step3】:【计算风力弯矩：用公式0.5*1.225*(风速²)*迎风面积*(高度/2)，其中迎风面积为height_meters*Base_Width，转化为0.5*1.225*POWER(60,2)*(height_meters*Base_Width)*(height_meters/2)生成Wind_Moment】",
    "english_step": "[step1]: [Filter records from the tower table where the name is 'Shanghai Tower']  [step2]: [Calculate overturning resistance moment using formula: 0.5*Weight*9.81*Base_Width to generate Resist_Moment]  [step3]: [Calculate wind-induced bending moment using formula: 0.5*1.225*(wind_speed²)*frontal_area*(height/2), where frontal_area = height_meters*Base_Width, translated as 0.5*1.225*POWER(60,2)*(height_meters*Base_Width)*(height_meters/2) to generate Wind_Moment]"
  },
  {
    "db_id": "architect",
    "question": "计算Shanghai Tower在钢/木两种材料下的弹性形变差异，荷载1e7 N，塔高300米，钢弹性模量200GPa（截面5㎡），木弹性模量10GPa（截面20㎡）",
    "query": "SELECT (1e7 * 300) / (200e9 * 5) AS Steel_Deformation, (1e7 * 300) / (10e9 * 20) AS Wood_Deformation FROM tower WHERE Name = 'Shanghai Tower';",
    "type": "2",
    "idx": 118,
    "englishquestion": "Calculate the difference in elastic deformation for the Shanghai Tower under steel and wood materials, with a load of 1e7 N, a tower height of 300 meters, a steel elastic modulus of 200 GPa (cross-sectional area of 5 m²), and a wood elastic modulus of 10 GPa (cross-sectional area of 20 m²).",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：name  \n【foreign_keys】:【None】",
    "evidence": "【step1】:【从tower表过滤Name='Shanghai Tower'的记录】  【step2】:【按照钢材参数(200e9 *5)计算形变：(1e7*300)/(弹性模量*截面积）得到Steel_Deformation】  【step3】:【按照木材参数(10e9 *20)计算形变：(1e7*300)/(弹性模量*截面积）得到Wood_Deformation】",
    "english_step": "[Step 1]: [Filter records from the tower table where Name='Shanghai Tower']  [Step 2]: [Calculate deformation using steel parameters (200e9 * 5): (1e7*300)/(ElasticModulus*CrossSectionalArea) to get Steel_Deformation]  [Step 3]: [Calculate deformation using wood parameters (10e9 * 20): (1e7*300)/(ElasticModulus*CrossSectionalArea) to get Wood_Deformation]"
  },
  {
    "db_id": "architect",
    "question": "判断Shanghai Tower建造年份标注为1800年是否合理，已知现代钢材1880年后普及，18世纪最高石结构≤150米",
    "query": "SELECT CASE WHEN Height_meters > 150 AND Construction_year < 1880 THEN '不合理' ELSE '合理' END AS Construction_Validity FROM tower WHERE Name = 'Shanghai Tower';",
    "type": "3",
    "idx": 119,
    "englishquestion": "Assessing whether labeling the construction year of Shanghai Tower as 1800 is reasonable, knowing that modern steel became widespread after 1880, and the tallest stone structures in the 18th century did not exceed 150 meters.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Height_meters、Construction_year、Name  \n【foreign_keys】:【architect_id → architect(Architect_ID)】",
    "evidence": "【step1】:【从tower表中提取Shanghai Tower的高度和建造年份】  【step2】:【运用CASE语句校验：当高度>150米且年份早于1880时触发\"不合理\"条件】  【step3】:【结合钢材普及年代和结构高度限制知识，返回最终合理性判断】",
    "english_step": "【step1】: Retrieve the height and construction year of Shanghai Tower from the tower table  【step2】: Apply CASE statement validation: trigger \"unreasonable\" condition when height > 150 meters and construction year is earlier than 1880  【step3】: Combine knowledge of steel popularization era and structural height limitations to return the final rationality judgment"
  },
  {
    "db_id": "architect",
    "question": "计算Shanghai Tower对地球自转影响，假设塔重1e25 kg，底座1平方米，地球转动惯量8e37 kg·m²",
    "query": "SELECT 1e25 * POWER(6.4e6 + Height_meters, 2) AS Delta_I, (8e37 / (8e37 + 1e25 * POWER(6.4e6 + Height_meters, 2))) * 7.2921159e-5 AS New_Angular_Velocity FROM tower WHERE Name = 'Shanghai Tower';",
    "type": "4",
    "idx": 120,
    "englishquestion": "Calculate the impact of Shanghai Tower on the Earth's rotation, assuming the tower weighs 1e25 kg, has a base area of 1 square meter, and the Earth's moment of inertia is 8e37 kg·m².",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：name, height_meters  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从tower表中筛选Name='Shanghai Tower'的记录，提取Height_meters字段】  【step2】:【通过公式1e25 * POWER(6.4e6 + Height_meters, 2)计算转动惯量变化Delta_I】  【step3】:【利用Delta_I与地球原始转动惯量8e37，计算新的角速度(8e37/(8e37+Delta_I)) * 原角速度7.2921159e-5】",
    "english_step": "【step1】: 【From the tower table, filter records where Name='Shanghai Tower' and extract the Height_meters field】  【step2】: 【Calculate the change in moment of inertia Delta_I using the formula 1e25 * POWER(6.4e6 + Height_meters, 2)】  【step3】: 【Compute the new angular velocity as (8e37/(8e37 + Delta_I)) * original angular velocity 7.2921159e-5, using Delta_I and Earth’s original moment of inertia 8e37】"
  },
  {
    "db_id": "architect",
    "question": "计算CN Tower在强风下的风压分布，塔高800米，风速100 m/s，空气密度1.225 kg/m³，塔体表面粗糙度系数0.3",
    "query": "SELECT 0.5 * 1.225 * POWER(100 * POWER(Height_meters / 10, 0.3), 2) * 0.7 AS Wind_Pressure FROM tower WHERE Name = 'CN Tower';",
    "type": "1",
    "idx": 121,
    "englishquestion": "Calculate the wind pressure distribution on the CN Tower under strong winds, with a tower height of 800 meters, wind speed of 100 m/s, air density of 1.225 kg/m³, and a surface roughness coefficient of 0.3 for the tower structure.",
    "equation_analysis": "equation_analysis：  公式分解：  ```  0.5 * ρ * (V_adjusted)^2 * Cp  ρ = 1.225 kg/m³ (空气密度)  V_adjusted = 100 * (H/10)^α (风剖面对数公式)  H = 给定高度 | α = 0.3 (粗糙度系数)  Cp = 0.7 (表面压力系数)  ```  参数映射：  ```  - 100 m/s 基准风速经 (height_meters/10)^0.3 修正为高度梯度风  - 使用POWER两次嵌套是因为公式需要先计算高度修正系数，再平方风速项  ```",
    "used_table_info": "【table】：【tower】 【columns】：name, height_meters  \n【foreign_keys】：architect_id引用architect表的Architect_ID  \n【equation_analysis】：  \n公式分解：  \n```  \n0.5 * ρ * (V_adjusted)^2 * Cp  \nρ = 1.225 kg/m³ (空气密度)  \nV_adjusted = 100 * (H/10)^α (风剖面对数公式)  \nH = 给定高度 | α = 0.3 (粗糙度系数)  \nCp = 0.7 (表面压力系数)  \n```  \n参数映射：  \n```  \n- 100 m/s 基准风速经 (height_meters/10)^0.3 修正为高度梯度风  \n- 使用POWER两次嵌套是因为公式需要先计算高度修正系数，再平方风速项  \n```",
    "evidence": "【step1】:【从tower表中筛选Name为CN Tower的记录并获取Height_meters值】  【step2】:【根据公式计算速度项：Power(100 * Power(Height_meters/10, 0.3), 2)，其中粗糙度系数0.3对应指数】  【step3】:【代入0.5*1.225*速度项*0.7计算最终风压，0.7为默认压力系数】",
    "english_step": "【step1】: 【Filter records from the tower table where Name is CN Tower and retrieve the Height_meters value】  【step2】: 【Calculate velocity term using formula: POWER(100 * POWER(Height_meters/10, 0.3), 2), where 0.3 is the roughness coefficient exponent】  【step3】: 【Compute final wind pressure using 0.5 * 1.225 * velocity term * 0.7, with 0.7 as the default pressure coefficient】"
  },
  {
    "db_id": "architect",
    "question": "验证CN Tower的高度与建造成本的立方关系",
    "query": "SELECT Name, Height_meters, Cost_Usd, (Cost_Usd / POWER(Height_meters, 3)) AS Cost_Ratio FROM tower WHERE Name = 'CN Tower';",
    "type": "2",
    "idx": 122,
    "englishquestion": "Verify the cubic relationship between the height of the CN Tower and its construction cost.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：name, height_meters, cost_usd  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从tower表中筛选name为CN Tower的记录（WHERE条件过滤特定建筑）】  【step2】:【提取该塔的Height_meters和Cost_Usd字段，并基于立方关系构造计算表达式（POWER函数三次方运算）】  【step3】:【通过列运算求Height³的建造成本系数（Cost_Usd / Height_meters³）命名输出为Cost_Ratio】",
    "english_step": "[Step1]: [Filter records in the tower table where name is CN Tower (WHERE condition filters specific building)]  [Step2]: [Extract Height_meters and Cost_Usd fields of the tower, and construct a calculation formula based on cubic relationship using the POWER function (third power operation)]  [Step3]: [Calculate the construction cost coefficient (Cost_Usd / Height_meters³) via column operation, naming the output as Cost_Ratio]"
  },
  {
    "db_id": "architect",
    "question": "判断某座塔的年度维护成本是否合理，假设塔高200米，材料为钢，年度维护成本为$500,000，而同类混凝土塔的年度维护成本为$200,000。",
    "query": "SELECT Name, Height_meters, Material, Maintenance_Cost FROM tower WHERE Height_meters = 200 AND Material IN ('钢', '混凝土');",
    "type": "3",
    "idx": 123,
    "englishquestion": "Determine whether the annual maintenance cost of a tower is reasonable, assuming the tower is 200 meters tall, made of steel, with an annual maintenance cost of $500,000, while the annual maintenance cost of a similar concrete tower is $200,000.",
    "equation_analysis": "equation_analysis：通过筛选高度200米且材料为钢/混凝土的塔，对比两者Maintenance_Cost差异（钢塔$500,000 vs 同类混凝土塔$200,000），计算钢塔维护成本比值=500,000/200,000=250%，判断是否显著高于常规维护成本范围。",
    "used_table_info": "【table】：【tower】 【columns】：Name, Height_meters, Material, Maintenance_Cost  \n【foreign_keys】：tower.architect_id -> architect.Architect_ID  \n【equation_analysis】：通过筛选高度200米且材料为钢/混凝土的塔，对比两者Maintenance_Cost差异（钢塔$500,000 vs 同类混凝土塔$200,000），计算钢塔维护成本比值=500,000/200,000=250%，判断是否显著高于常规维护成本范围。",
    "evidence": "【step1】:【筛选高度为200米的所有塔记录】  【step2】:【过滤材料为钢或混凝土的塔记录】  【step3】:【提取名称、高度、材料和维护成本字段用于比较】",
    "english_step": "【step1】:【Filter all tower records with a height of 200 meters】  【step2】:【Filter tower records where the material is steel or concrete】  【step3】:【Extract the name, height, material, and maintenance cost fields for comparison】"
  },
  {
    "db_id": "architect",
    "question": "计算CN Tower（假设其振动频率为1e9 Hz）的维护成本，假设维护成本与频率立方成正比，基础频率10Hz时成本$1000",
    "query": "SELECT Name, Vibration_Frequency, Maintenance_Cost, (1000 * POWER(Vibration_Frequency / 10, 3)) AS Calculated_Maintenance_Cost FROM tower WHERE Name = 'CN Tower';",
    "type": "4",
    "idx": 124,
    "englishquestion": "Calculate the maintenance cost of CN Tower (assuming its vibration frequency is 1e9 Hz), given that the maintenance cost is proportional to the cube of the frequency, with a base cost of $1000 at 10Hz.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Name, Vibration_Frequency, Maintenance_Cost  \n【foreign_keys】:【无外键关联】",
    "evidence": "【step1】:【从tower表中筛选名为CN Tower的记录】  【step2】:【使用公式1000*[当前频率/10]³进行维护成本计算】  【step3】:【投影显示原始字段和计算结果字段(包含验证维护成本计算)】",
    "english_step": "【step1】:【Filter records from the tower table where the name is CN Tower】  【step2】:【Calculate maintenance cost using the formula 1000*(current_frequency/10)^3】  【step3】:【Project the original fields and the calculated maintenance cost field (including validation of the maintenance cost calculation)】"
  },
  {
    "db_id": "architect",
    "question": "计算CN Tower的固有振动频率，假设塔高553米，弹性模量200GPa，截面惯性矩5m⁴，密度7850kg/m³",
    "query": "SELECT Name, Height_meters, Material, Vibration_Frequency, (1 / (2 * 3.14159)) * SQRT((200e9 * 5) / (7850 * (Base_Width * Base_Width) * POWER(Height_meters, 4))) AS Calculated_Frequency FROM tower WHERE Name = 'CN Tower';",
    "type": "1",
    "idx": 125,
    "englishquestion": "Calculate the natural vibration frequency of the CN Tower, assuming its height is 553 meters, elastic modulus is 200 GPa, moment of inertia of the cross-section is 5 m⁴, and density is 7850 kg/m³.",
    "equation_analysis": "",
    "used_table_info": "【table】：【tower】 【columns】：Name, Height_meters, Material, Vibration_Frequency, Base_Width  \n【foreign_keys】: architect_id -> architect.Architect_ID",
    "evidence": "【step1】:【定位目标结构】通过WHERE条件筛选tower表中名称为'CN Tower'的记录  【step2】:【执行物理公式计算】基于塔结构参数（Base_Width, Height_meters）运用振动频率公式：(1/(2π)) * √(E*I / (ρ*(基宽²)*高度⁴))，其中E=200GPa、I=5m⁴、ρ=7850kg/m³为给定常量  【step3】:【字段关联与结果输出】将计算结果命名为Calculated_Frequency，并返回原始振动频率Vibration_Frequency与之对比验证",
    "english_step": "[Step1]: [Locate Target Structure] Filter records in the tower table WHERE name is 'CN Tower'  [Step2]: [Perform Physical Formula Calculation] Apply vibration frequency formula using tower parameters (Base_Width, Height_meters):  (1/(2π)) * √(E*I / (ρ*(Base_Width²)*Height⁴))  with constants E=200GPa, I=5m⁴, ρ=7850kg/m³  [Step3]: [Field Association & Output] Name the result Calculated_Frequency, and compare with original Vibration_Frequency for validation."
  },
  {
    "db_id": "computer",
    "question": "已知一台电脑的CPU基础频率为3.5 GHz，最大频率为4.2 GHz，且在使用过程中CPU使用率为80%，请问此时CPU的实际工作频率是多少？",
    "query": "SELECT cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100) AS actual_frequency_ghz FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_base_frequency_ghz = 3.5 AND computer_info.cpu_max_frequency_ghz = 4.2 AND usage_records.cpu_usage_percent = 80;",
    "type": "1",
    "idx": 126,
    "englishquestion": "Given a computer's CPU with a base frequency of 3.5 GHz and a maximum frequency of 4.2 GHz, and with the CPU utilization rate at 80% during operation, what is the actual operating frequency of the CPU under these conditions?",
    "equation_analysis": "equation_analysis：实际频率 = 基础频率 + (最大频率 - 基础频率) * (使用率/100) = 3.5 + (4.2-3.5)*(80/100) = 3.5 + 0.7*0.8 = 4.06 GHz",
    "used_table_info": "【table】：【computer_info】 【columns】：cpu_base_frequency_ghz, cpu_max_frequency_ghz, computer_id  \n【table】：【usage_records】 【columns】：cpu_usage_percent, computer_id  \n【foreign_keys】：computer_info.computer_id = usage_records.computer_id  \n【equation_analysis】：实际频率 = 基础频率 + (最大频率 - 基础频率) * (使用率/100) = 3.5 + (4.2-3.5)*(80/100) = 3.5 + 0.7*0.8 = 4.06 GHz",
    "evidence": "【step1】:【通过computer_id连接computer_info和usage_records表，建立设备基础信息与使用记录的关联关系】  【step2】:【筛选基础频率3.5GHz、最大频率4.2GHz且CPU使用率为80%的设备记录】  【step3】:【根据公式\"基础频率 + (最大频率-基础频率) × (使用率/100)\"计算实际工作频率】",
    "english_step": "【step1】: 【Join the computer_info and usage_records tables via computer_id to establish the relationship between device basic information and usage records】  【step2】: 【Filter records with base frequency 3.5GHz, maximum frequency 4.2GHz, and CPU usage of 80%】  【step3】: 【Calculate actual operating frequency using the formula: \"Base frequency + (Maximum frequency - Base frequency) × (Usage rate/100)\"】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑的内存大小为16 GB，内存使用率为75%，且内存类型为DDR4，假设DDR4内存的带宽为25.6 GB/s，请问此时内存的实际带宽利用率是多少？",
    "query": "SELECT (ram_size_gb * ram_usage_percent / 100) / 25.6 AS actual_bandwidth_utilization FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.ram_size_gb = 16 AND computer_info.ram_type = 'DDR4' AND usage_records.ram_usage_percent = 75;",
    "type": "2",
    "idx": 127,
    "englishquestion": "A computer has a memory size of 16 GB, a memory usage rate of 75%, and uses DDR4 memory. Assuming the bandwidth of DDR4 memory is 25.6 GB/s, what is the actual bandwidth utilization of the memory in this case?",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, ram_size_gb, ram_type  \n【table】：【usage_records】 【columns】：computer_id, ram_usage_percent  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【JOIN表关联：通过computer_id连接computer_info和usage_records表获取完整硬件信息与使用记录】  【step2】:【过滤条件筛选：WHERE子句匹配ram_size_gb=16, ram_type='DDR4'，ram_usage_percent=75的记录】  【step3】:【带宽计算：使用(16*75%/25.6)的数学公式计算实际带宽利用率，将结果命名为actual_bandwidth_utilization】",
    "english_step": "【step1】: 【JOIN table association: Connect computer_info and usage_records tables via computer_id to obtain complete hardware information and usage records】  【step2】: 【Filter conditions: WHERE clause matches records with ram_size_gb=16, ram_type='DDR4', and ram_usage_percent=75】  【step3】: 【Bandwidth calculation: Use the mathematical formula (16*75%/25.6) to calculate actual bandwidth utilization, aliasing the result as actual_bandwidth_utilization】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑的电池容量为60 Wh，功耗为45 W，假设电池健康度为90%，请问这台电脑在满电状态下可以持续工作多长时间？",
    "query": "SELECT (computer_info.battery_capacity_wh * battery_usage.battery_health_percent / 100) / battery_usage.power_consumption_watts AS runtime_hours FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 60 AND battery_usage.power_consumption_watts = 45 AND battery_usage.battery_health_percent = 90;",
    "type": "3",
    "idx": 128,
    "englishquestion": "A computer has a battery capacity of 60 Wh and a power consumption of 45 W. Assuming the battery health is 90%, how long can the computer operate at full charge under these conditions?",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【battery_usage】 【columns】：computer_id, battery_health_percent, power_consumption_watts  \n【foreign_keys】: battery_usage.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【通过computer_id关联computer_info和battery_usage表，建立设备与电池使用参数的对应关系】  【step2】:【筛选出电池容量为60Wh、功率消耗45W、健康度90%的记录】  【step3】:【计算有效电池容量（60*0.9）并除以功耗得到运行时间：(60*90/100)/45 = 1.2小时】",
    "english_step": "[step1]: [Associate the computer_info and battery_usage tables via computer_id to establish the correspondence between devices and battery usage parameters]  [step2]: [Filter records with battery capacity of 60Wh, power consumption of 45W, and health percentage of 90%]  [step3]: [Calculate effective battery capacity (60*0.9) and divide by power consumption to obtain runtime: (60*90/100)/45 = 1.2 hours]"
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑的CPU核心数为128，线程数为256，基础频率为1 GHz，最大频率为10 GHz，且在使用过程中CPU使用率为200%，请问此时CPU的总计算能力是多少？",
    "query": "SELECT cpu_cores * cpu_threads * (cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100)) AS total_computation_power FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_cores = 128 AND computer_info.cpu_threads = 256 AND computer_info.cpu_base_frequency_ghz = 1 AND computer_info.cpu_max_frequency_ghz = 10 AND usage_records.cpu_usage_percent = 200;",
    "type": "4",
    "idx": 129,
    "englishquestion": "Assuming a computer has 128 CPU cores, 256 threads, a base frequency of 1 GHz, a maximum frequency of 10 GHz, and during usage the CPU utilization is at 200%, how much is the total computing power of the CPU at this time?",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：cpu_cores, cpu_threads, cpu_base_frequency_ghz, cpu_max_frequency_ghz, computer_id  \n【table】：【usage_records】 【columns】：cpu_usage_percent, computer_id  \n【foreign_keys】: computer_info.computer_id → usage_records.computer_id",
    "evidence": "【step1】:【通过JOIN关联computer_info和usage_records表，筛选出cpu_cores=128，cpu_threads=256，且cpu_usage_percent=200%的记录】  【step2】:【根据公式计算有效频率：(基础频率 + (最大频率-基础频率) * (使用率/100))】  【step3】:【将核数*线程数*有效频率作为总计算能力：(128核 * 256线程 * (1GHz + 9GHz*(200%/100))) = 128*256*(1+18)GHz】",
    "english_step": "【step1】: 【JOIN the computer_info and usage_records tables to filter records where cpu_cores=128, cpu_threads=256, and cpu_usage_percent=200%】  【step2】: 【Calculate effective frequency using the formula: (base_frequency + (max_frequency - base_frequency) * (usage_percent/100))】  【step3】: 【Calculate total computing capacity as cores * threads * effective frequency: 128 cores * 256 threads * (1GHz + 9GHz*(200%/100)) = 128*256*(1+18)GHz】"
  },
  {
    "db_id": "computer",
    "question": "已知一台电脑的GPU显存为8 GB，且在使用过程中GPU使用率为90%，假设显存的读写速度为448 GB/s，请问此时GPU显存的数据传输量是多少？",
    "query": "SELECT gpu_vram_gb * (gpu_usage_percent / 100) * 448 AS data_transfer_volume_gb FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.gpu_vram_gb = 8 AND usage_records.gpu_usage_percent = 90;",
    "type": "1",
    "idx": 130,
    "englishquestion": "Given that a computer's GPU has 8 GB of VRAM, with a GPU utilization rate of 90% during operation, and assuming the VRAM's read/write speed is 448 GB/s, what is the data transfer amount of the GPU VRAM under these conditions?",
    "equation_analysis": "equation_analysis：数据传输量 = GPU显存容量 × (GPU使用率% ÷ 100) × 显存带宽(gpu_vram_gb * 0.9 * 448)，其中：  - `gpu_vram_gb=8`来自基础配置表  - `gpu_usage_percent=90`来自实时监测数据  - `448`为预设的性能参数（GB/s）",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, gpu_vram_gb  \n【table】：【usage_records】 【columns】：computer_id, gpu_usage_percent  \n【foreign_keys】：usage_records.computer_id -> computer_info.computer_id  \n【equation_analysis】：数据传输量 = GPU显存容量 × (GPU使用率% ÷ 100) × 显存带宽(gpu_vram_gb * 0.9 * 448)，其中：  \n- `gpu_vram_gb=8`来自基础配置表  \n- `gpu_usage_percent=90`来自实时监测数据  \n- `448`为预设的性能参数（GB/s）",
    "evidence": "【step1】:【JOIN computer_info和usage_records表，通过computer_id关联两个表的数据】  【step2】:【筛选条件gpu_vram_gb=8且gpu_usage_percent=90的记录】  【step3】:【根据公式计算数据传输量: gpu_vram_gb × (gpu_usage_percent/100) × 448 GB/s】",
    "english_step": "[step1]: [JOIN the computer_info and usage_records tables by associating data through computer_id]  [step2]: [Filter records where gpu_vram_gb=8 and gpu_usage_percent=90]  [step3]: [Calculate data transfer amount using the formula: gpu_vram_gb × (gpu_usage_percent/100) × 448 GB/s]"
  },
  {
    "db_id": "computer",
    "question": "一台电脑的存储大小为1 TB，存储使用率为60%，且存储类型为SSD，假设SSD的读写速度为500 MB/s，请问此时存储的实际读写带宽是多少？",
    "query": "SELECT (storage_size_gb * 1024 * storage_usage_percent / 100) / 500 AS actual_bandwidth_s FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.storage_size_gb = 1024 AND computer_info.storage_type = 'SSD' AND usage_records.storage_usage_percent = 60;",
    "type": "2",
    "idx": 131,
    "englishquestion": "A computer has a storage capacity of 1 TB with a storage usage rate of 60%, and the storage type is SSD. Assuming the SSD's read/write speed is 500 MB/s, what is the actual read/write bandwidth of the storage at this time?",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, storage_size_gb, storage_type  \n【table】：【usage_records】 【columns】：computer_id, storage_usage_percent  \n【foreign_keys】: computer_info.computer_id → usage_records.computer_id",
    "evidence": "【step1】:【JOIN computer_info与usage_records表，通过computer_id关联获取完整存储参数和使用率数据】  【step2】:【WHERE条件筛选存储大小为1024GB、类型为SSD且存储使用率60%的记录】  【step3】:【计算实际读写带宽：先将存储容量(GB)转换为MB，乘以使用率后除以500MB/s，得到秒级带宽时间】",
    "english_step": "【step1】:【JOIN the computer_info and usage_records tables via computer_id to obtain complete storage parameters and utilization data】  【step2】:【Apply WHERE conditions to filter records with 1024GB storage size, SSD type, and 60% storage utilization rate】  【step3】:【Calculate actual read/write bandwidth: convert storage capacity (GB) to MB, multiply by utilization rate, then divide by 500MB/s to get bandwidth time in seconds】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑的屏幕尺寸为15.6英寸，分辨率为1920x1080，假设屏幕的像素密度为141 PPI，请问此时屏幕的实际显示面积是多少？",
    "query": "SELECT (screen_size_inches * (CAST(SUBSTRING_INDEX(screen_resolution, 'x', 1) AS UNSIGNED) * CAST(SUBSTRING_INDEX(screen_resolution, 'x', -1) AS UNSIGNED))) / (POW(SQRT(POW(CAST(SUBSTRING_INDEX(screen_resolution, 'x', 1) AS UNSIGNED), 2) + POW(CAST(SUBSTRING_INDEX(screen_resolution, 'x', -1) AS UNSIGNED), 2)) / screen_size_inches, 2)) AS actual_display_area FROM computer_info WHERE computer_info.screen_size_inches = 15.6 AND computer_info.screen_resolution = '1920x1080';",
    "type": "3",
    "idx": 132,
    "englishquestion": "The screen size of a computer is 15.6 inches, the resolution is 1920x1080, assuming the pixel density of the screen is 141 PPI, what is the actual display area of the screen in this case?",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：screen_size_inches, screen_resolution  \n【foreign_keys】: 无关联外键",
    "evidence": "【step1】:【使用SUBSTRING_INDEX函数从screen_resolution字段中分别提取水平像素1920和垂直像素1080，转换为数值类型】  【step2】:【根据勾股定理计算屏幕对角线像素数(√(1920²+1080²))，再结合屏暮尺寸15.6英寸得出像素密度(PPI=对角线像素/尺寸)】  【step3】:【应用计算公式：面积=(总像素数 * 屏幕尺寸²)/(水平像素²+垂直像素²)，其中总像素数为1920*1080，结合上述结果完成实际显示面积的几何计算】",
    "english_step": "【step1】:【Use SUBSTRING_INDEX function to extract horizontal pixels 1920 and vertical pixels 1080 from the screen_resolution field, and convert them to numeric types】  【step2】:【Calculate screen diagonal pixels using the Pythagorean theorem √(1920² + 1080²), then derive pixel density (PPI = diagonal pixels / screen size 15.6 inches)】  【step3】:【Apply calculation formula: Area = (Total pixels × screen size²) / (horizontal pixels² + vertical pixels²), where total pixels = 1920×1080, combining the results to complete geometric calculation of actual display area】"
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑的电池容量为1000 Wh，功耗为500 W，且电池健康度为200%，请问这台电脑在满电状态下可以持续工作多长时间？",
    "query": "SELECT (computer_info.battery_capacity_wh * battery_usage.battery_health_percent / 100) / battery_usage.power_consumption_watts AS runtime_hours FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 1000 AND battery_usage.power_consumption_watts = 500 AND battery_usage.battery_health_percent = 200;",
    "type": "4",
    "idx": 133,
    "englishquestion": "Assuming a computer has a battery capacity of 1000 Wh, a power consumption of 500 W, and a battery health of 200%, how long can this computer operate continuously when fully charged?”",
    "equation_analysis": "equation_analysis：runtime_hours = (电池容量 × 健康度% / 100) / 功耗 = (1000 × 200% /100)/500 = 4小时",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh 【table】：【battery_usage】 【columns】：computer_id, power_consumption_watts, battery_health_percent 【foreign_keys】：computer_info.computer_id → battery_usage.computer_id 【equation_analysis】：runtime_hours = (电池容量 × 健康度% / 100) / 功耗 = (1000 × 200% /100)/500 = 4小时",
    "evidence": "【step1】:【JOIN computer_info和battery_usage表，通过computer_id关联设备基础信息和电池使用数据】  【step2】:【按条件过滤：computer_info.battery_capacity_wh=1000、battery_usage.power_consumption_watts=500、battery_health_percent=200】  【step3】:【计算有效电池容量（1000×200%的衰减修正），再除以功耗500W得出续航时间：（1000×2)/500=4小时】",
    "english_step": "[Step1]: [JOIN the computer_info and battery_usage tables via computer_id to associate device basic information with battery usage data]  [Step2]: [Filter by conditions: computer_info.battery_capacity_wh = 1000, battery_usage.power_consumption_watts = 500, battery_health_percent = 200]  [Step3]: [Calculate effective battery capacity (1000 × 200% decay correction), then divide by power consumption 500W to obtain battery life time: (1000 × 2)/500 = 4 hours]"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在某次使用中，功耗为75 W，使用时长为4小时，且环境温度为25°C。已知电脑的散热效率为0.8，请计算此次使用后电脑的内部温度（单位：°C）。",
    "query": "SELECT 25 + (75 * 4 * 3600 * (1 - 0.8)) / 500 AS internal_temperature_celsius FROM usage_records WHERE usage_records.power_consumption_watts = 75 AND usage_records.usage_duration_hours = 4;",
    "type": "1",
    "idx": 134,
    "englishquestion": "A computer has a power consumption of 75 W during a certain usage session, with a duration of 4 hours and an ambient temperature of 25°C. Given that the computer's thermal efficiency is 0.8, calculate the internal temperature of the computer (in °C) after this usage session.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：power_consumption_watts, usage_duration_hours  \n【foreign_keys】: computer_id 关联 computer_info.computer_id",
    "evidence": "【step1】:【从usage_records表中筛选出power_consumption_watts=75且usage_duration_hours=4的记录】  【step2】:【计算未被散失的能量：(75W * 4h * 3600s) * (1 - 0.8)】  【step3】:【将总热量转换为温度增量：(未散失能量/500J/°C) + 环境温度25°C（注意单位统一：1Wh=3600J）】",
    "english_step": "【Step 1】: 【Filter records from the usage_records table where power_consumption_watts = 75 and usage_duration_hours = 4】  【Step 2】: 【Calculate undissipated energy: (75W * 4h * 3600s) * (1 - 0.8)】  【Step 3】: 【Convert total heat to temperature increase: (undissipated energy / 500J/°C) + ambient temperature 25°C (Note unit consistency: 1Wh = 3600J)】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在某次使用中，CPU使用率为80%，GPU使用率为60%，内存使用率为50%，存储使用率为30%。已知CPU、GPU、内存和存储的基准性能分别为100 GFLOPS、200 GFLOPS、50 GB/s和500 MB/s，请计算此次使用中CPU、GPU、内存和存储的实际性能（单位：GFLOPS或GB/s）。",
    "query": "SELECT 100 * (usage_records.cpu_usage_percent / 100) AS cpu_actual_performance_gflops, 200 * (usage_records.gpu_usage_percent / 100) AS gpu_actual_performance_gflops, 50 * (usage_records.ram_usage_percent / 100) AS ram_actual_performance_gb_s, 500 * (usage_records.storage_usage_percent / 100) AS storage_actual_performance_mb_s FROM usage_records WHERE usage_records.cpu_usage_percent = 80 AND usage_records.gpu_usage_percent = 60 AND usage_records.ram_usage_percent = 50 AND usage_records.storage_usage_percent = 30;",
    "type": "2",
    "idx": 135,
    "englishquestion": "A computer was used with a CPU utilization of 80%, GPU utilization of 60%, memory utilization of 50%, and storage utilization of 30%. Given that the baseline performances of the CPU, GPU, memory, and storage are 100 GFLOPS, 200 GFLOPS, 50 GB/s, and 500 MB/s, respectively, calculate the actual performance of the CPU, GPU, memory, and storage during this usage (in units of GFLOPS or GB/s).",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：cpu_usage_percent, gpu_usage_percent, ram_usage_percent, storage_usage_percent  \n【foreign_keys】: computer_id->computer_info.computer_id",
    "evidence": "【step1】: 在usage_records表中设置过滤条件：cpu_usage_percent=80、gpu_usage_percent=60、ram_usage_percent=50、storage_usage_percent=30。这用于定位符合条件的单条使用记录。【step2】: 对匹配记录的每个硬件参数进行性能计算：将(基准性能 × 使用率百分比)/100。如CPU实际性能计算为100×(80/100)=80 GFLOPS。【step3】: 通过AS关键字为计算结果字段命名：cpu_actual_performance_gflops等字段名同时携带单位信息，确保结果可读性。",
    "english_step": "【step1】: Set filter conditions in the usage_records table: cpu_usage_percent=80, gpu_usage_percent=60, ram_usage_percent=50, storage_usage_percent=30. This is used to locate single qualifying usage records.  【step2】: Calculate performance metrics for each hardware parameter of matched records: (baseline performance × usage percentage)/100. For example, CPU actual performance is calculated as 100×(80/100)=80 GFLOPS.  【step3】: Use AS keyword to name calculated result fields: such as cpu_actual_performance_gflops, ensuring field names carry unit information for result readability."
  },
  {
    "db_id": "computer",
    "question": "一台电脑在某次使用中，功耗为50 W，使用时长为3小时，且电池容量为60 Wh。已知电池健康度为90%，请计算此次使用后电池的剩余电量（单位：Wh），并判断是否需要充电。",
    "query": "SELECT (60 * 90 / 100) - (50 * 3) AS remaining_battery_capacity_wh, CASE WHEN (60 * 90 / 100) - (50 * 3) <= 0 THEN '需要充电' ELSE '无需充电' END AS charging_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 60 AND usage_records.power_consumption_watts = 50 AND usage_records.usage_duration_hours = 3;",
    "type": "3",
    "idx": 136,
    "englishquestion": "A computer was used with a power consumption of 50 W for a duration of 3 hours, and the battery capacity is 60 Wh. Given that the battery health is at 90%, calculate the remaining battery power (in Wh) after this usage session and determine whether charging is needed.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: computer_id (computer_info ↔ usage_records)",
    "evidence": "【step1】:【关联computer_info与usage_records表，建立计算基础数据】  【step2】:【计算有效电池容量（60*90%）与总能耗（50*3），生成剩余电量和充电状态两个计算结果字段】  【step3】:【施加条件过滤（容量60Wh/功耗50W/时长3H），保证目标记录的精确匹配】",
    "english_step": "【step1】:【Join the computer_info and usage_records tables to establish foundational data for calculations】  【step2】:【Calculate effective battery capacity (60*90%) and total energy consumption (50*3), generating two computed result fields: remaining battery level and charging status】  【step3】:【Apply conditional filtering (capacity 60Wh/power consumption 50W/duration 3H) to ensure precise matching of target records】"
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑在某次使用中，CPU使用率为1000%，GPU使用率为800%，功耗为1000 W，使用时长为24小时，且环境温度为100°C。已知电脑的散热效率为0.5，请计算此次使用后电脑的内部温度（单位：°C），并分析其是否可能实现。",
    "query": "SELECT 100 + (1000 * 24 * 3600 * (1 - 0.5)) / 500 AS internal_temperature_celsius, CASE WHEN 100 + (1000 * 24 * 3600 * (1 - 0.5)) / 500 > 1000 THEN '不可能实现' ELSE '可能实现' END AS feasibility_analysis FROM usage_records WHERE usage_records.cpu_usage_percent = 1000 AND usage_records.gpu_usage_percent = 800 AND usage_records.power_consumption_watts = 1000 AND usage_records.usage_duration_hours = 24;",
    "type": "4",
    "idx": 137,
    "englishquestion": "Assuming a computer's CPU usage is 1000%, GPU usage is 800%, power consumption is 1000 W, usage duration is 24 hours, and the ambient temperature is 100°C during a certain usage session. Given that the computer's cooling efficiency is 0.5, please calculate the internal temperature of the computer (in °C) after this usage session and analyze whether it is achievable.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：cpu_usage_percent, gpu_usage_percent, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: computer_id → computer_info(computer_id)",
    "evidence": "【step1】:【筛选符合条件的使用记录】使用WHERE子句过滤usage_records表中满足cpu_usage_percent=1000%、gpu_usage_percent=800%、power_consumption_watts=1000、usage_duration_hours=24的特定记录  【step2】:【计算核心热量累积】通过(1000瓦功耗 * 24小时秒数转换 * 未被散失的热能比例) / 热量转换系数500，得到432000焦耳的热量积累  【step3】:【进行热力学判定】将初始环境温度100°C叠加计算结果86400°C后，通过CASE表达式对结果是否突破1000°C临界值做出可行性判断",
    "english_step": "【step1】:【Filter eligible usage records】Use WHERE clause to filter specific records in usage_records table meeting cpu_usage_percent=1000%, gpu_usage_percent=800%, power_consumption_watts=1000, usage_duration_hours=24  【step2】:【Calculate core heat accumulation】Compute 432,000 joules heat accumulation via (1000W power consumption * 24-hour to seconds conversion * non-dissipated heat ratio) / heat conversion coefficient 500  【step3】:【Perform thermodynamic determination】After superimposing initial ambient temperature 100°C with calculated result 86,400°C, use CASE expression to determine feasibility based on whether the result exceeds 1000°C critical threshold"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在某次使用中，电池容量为60 Wh，功耗为30 W，使用时长为1.5小时，且电池健康度为85%。已知电池的放电效率为90%，请计算此次使用中电池的实际放电量（单位：Wh）。",
    "query": "SELECT (30 * 1.5) / 0.9 AS actual_discharge_wh FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 60 AND usage_records.power_consumption_watts = 30 AND usage_records.usage_duration_hours = 1.5;",
    "type": "1",
    "idx": 138,
    "englishquestion": "A computer was used with a battery capacity of 60 Wh, a power consumption of 30 W, a usage duration of 1.5 hours, and a battery health of 85%. Given that the battery discharge efficiency is 90%, calculate the actual battery discharge amount (in Wh) during this usage.",
    "equation_analysis": "equation_analysis：  1. **实际放电量公式**：(功率 × 使用时长) / 放电效率 = (30 W × 1.5 h) / 0.9  2. **逻辑推导**:     - 功率 (`30 W`) 和使用时长 (`1.5 h`) 直接相乘得理论能耗 (`45 W·h`)，但放电效率 (`90%`) 导致实际耗电需额外补偿损耗，因此除以 `0.9`  3. **电池健康度未参与计算**：尽管题目中给出 `85%` 的健康度，但 Query 未将其纳入公式。可能原因为：     - 放电效率 (`90%`) 已隐含健康度衰减后的综合效率     - 或实际场景中健康度仅用于电池寿命评估，与单次放电量无直接计算关联",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】：computer_info.computer_id ↔ usage_records.computer_id  \n【equation_analysis】：  \n1. **实际放电量公式**：(功率 × 使用时长) / 放电效率 = (30 W × 1.5 h) / 0.9  \n2. **逻辑推导**:  \n   - 功率 (`30 W`) 和使用时长 (`1.5 h`) 直接相乘得理论能耗 (`45 W·h`)，但放电效率 (`90%`) 导致实际耗电需额外补偿损耗，因此除以 `0.9`  \n3. **电池健康度未参与计算**：尽管题目中给出 `85%` 的健康度，但 Query 未将其纳入公式。可能原因为：  \n   - 放电效率 (`90%`) 已隐含健康度衰减后的综合效率  \n   - 或实际场景中健康度仅用于电池寿命评估，与单次放电量无直接计算关联",
    "evidence": "【step1】:【JOIN computer_info与usage_records表，通过computer_id进行关联】  【step2】:【WHERE条件过滤 battery_capacity_wh=60、power_consumption_watts=30、usage_duration=1.5小时】  【step3】:【计算: (30*1.5)/0.9 得到实际放电量50 Wh】",
    "english_step": "【step1】: 【JOIN computer_info and usage_records tables via computer_id】  【step2】: 【Apply WHERE conditions to filter battery_capacity_wh = 60, power_consumption_watts = 30, usage_duration = 1.5 hours】  【step3】: 【Calculate: (30 * 1.5) / 0.9 to get the actual discharge amount of 50 Wh】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在某次使用中，电池容量为50 Wh，使用时长为2小时，功耗为20 W，且电池健康度为80%。已知电池的充电效率为85%，请计算此次使用后电池的剩余电量（单位：Wh），以及需要多少电量才能将电池充满（单位：Wh）。",
    "query": "SELECT (50 * 80 / 100) - (20 * 2) AS remaining_battery_capacity_wh, (50 - ((50 * 80 / 100) - (20 * 2))) / 0.85 AS required_charging_wh FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 50 AND usage_records.power_consumption_watts = 20 AND usage_records.usage_duration_hours = 2;",
    "type": "2",
    "idx": 139,
    "englishquestion": "A computer was used with a battery capacity of 50 Wh, a usage duration of 2 hours, a power consumption of 20 W, and a battery health of 80%. Given that the battery charging efficiency is 85%, calculate the remaining battery capacity (in Wh) after this usage and the amount of energy required to fully recharge the battery (in Wh).",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【计算电池实际可用容量：50 Wh × 80% = 40 Wh 】  【step2】:【计算使用期间总能耗：20 W × 2小时 = 40 Wh 】  【step3】:【计算剩余电量：40 Wh - 40 Wh = 0 Wh；充满所需电量：(50 Wh - 0 Wh)/85% ≈ 58.82 Wh 】",
    "english_step": "【step1】:【Calculate the actual usable battery capacity: 50 Wh × 80% = 40 Wh】  【step2】:【Calculate total energy consumption during usage: 20 W × 2 hours = 40 Wh】  【step3】:【Calculate remaining battery capacity: 40 Wh - 40 Wh = 0 Wh; required charge to full capacity: (50 Wh - 0 Wh)/85% ≈ 58.82 Wh】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在某次使用中，电池容量为80 Wh，使用时长为4小时，功耗为18 W，且电池健康度为95%。已知电池的充电周期为500次，每次完整充放电会降低电池健康度0.1%，请计算此次使用后电池的健康度（单位：%），并判断电池是否接近需要更换的状态（通常电池健康度低于80%时建议更换）。",
    "query": "SELECT 95 - ((18 * 4) / 80 * 0.1) AS remaining_battery_health_percent, CASE WHEN 95 - ((18 * 4) / 80 * 0.1) < 80 THEN '需要更换' ELSE '无需更换' END AS replacement_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 80 AND usage_records.power_consumption_watts = 18 AND usage_records.usage_duration_hours = 4;",
    "type": "3",
    "idx": 140,
    "englishquestion": "A computer, during a certain usage session, has a battery capacity of 80 Wh, a usage duration of 4 hours, a power consumption of 18 W, and a battery health of 95%. It is known that the battery has a charging cycle of 500 times, and each full charge-discharge cycle reduces the battery health by 0.1%. Calculate the battery health after this usage session (in %) and determine whether the battery is nearing a replacement state (typically, a battery with health below 80% is recommended for replacement).",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【通过JOIN操作关联computer_info和usage_records表，使用computer_id作为关联键，获取计算机基本信息与对应使用记录】  【step2】:【用WHERE条件筛选电池容量=80Wh、功耗=18W、使用时长=4小时的特定使用记录，锁定目标数据行】  【step3】:【执行电池健康度计算公式：95% - (实际消耗电量/电池容量 × 0.1%)，并通过CASE语句根据健康度数值生成更换建议状态】",
    "english_step": "[Step1]: [Join the computer_info and usage_records tables using computer_id as the association key to retrieve basic computer information and corresponding usage records]  [Step2]: [Filter specific usage records with WHERE conditions: battery capacity=80Wh, power consumption=18W, and usage duration=4 hours to target specific data rows]  [Step3]: [Calculate battery health using the formula: 95% - (actual power consumption / battery capacity × 0.1%), then generate replacement recommendation status via CASE statement based on health score]"
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑在某次使用中，电池容量为200 Wh，使用时长为24小时，功耗为100 W，且电池健康度为500%。已知电池的充电速度极快，可以在1分钟内充满电，但每次充电会导致电池健康度下降1%。请计算此次使用后电池的健康度（单位：%），并分析在如此极端的充电速度下，电池的使用寿命是否可能实现。",
    "query": "SELECT 500 - ((100 * 24) / 200 * CEIL((100 * 24) / 200) * 1) AS remaining_battery_health_percent, CASE WHEN 500 - ((100 * 24) / 200 * CEIL((100 * 24) / 200) * 1) <= 0 THEN '不可能实现' ELSE '可能实现' END AS feasibility_analysis FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.battery_capacity_wh = 200 AND usage_records.power_consumption_watts = 100 AND usage_records.usage_duration_hours = 24;",
    "type": "4",
    "idx": 141,
    "englishquestion": "Assuming a computer has a battery capacity of 200 Wh in a certain usage scenario, with a usage duration of 24 hours, a power consumption of 100 W, and a battery health of 500%. It is known that the battery charges extremely quickly and can be fully charged in 1 minute, but each charging cycle reduces the battery health by 1%. Calculate the battery health (in %) after this usage session, and analyze whether the battery's lifespan is achievable under such extreme charging conditions.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: computer_info.computer_id → usage_records.computer_id",
    "evidence": "【step1】:【连接computer_info和usage_records表，筛选电池容量=200Wh、功率消耗=100W、使用时长=24小时的记录】  【step2】:【计算总充电次数：当前功耗(100W)*时长(24H)/容量(200Wh)=12次，通过CEIL函数向上取整保证完整充放电次数】  【step3】:【计算总健康度衰减：12次充电*1%衰减=12%，从初始500%里扣除。通过CASE判断剩余健康度是否≤0，判定可行性】",
    "english_step": "【step1】:【Join the computer_info and usage_records tables, filtering records where battery capacity=200Wh, power consumption=100W, and usage duration=24 hours】  【step2】:【Calculate total charge cycles: current power consumption (100W) * duration (24H) / capacity (200Wh) = 12 cycles, using the CEIL function to round up and ensure complete charge-discharge cycles】  【step3】:【Calculate total health degradation: 12 cycles * 1% degradation = 12%, deducted from the initial 500%. Use CASE to check if remaining health ≤0, determining feasibility】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在性能测试中，CPU得分为1200，GPU得分为800，综合得分为950。已知CPU和GPU的功耗分别为65 W和85 W，测试时温度为75°C。假设电脑的散热效率为0.75，请计算此次测试中电脑的总散热量（单位：焦耳）。",
    "query": "SELECT (65 + 85) * 1 * 3600 * 0.75 AS total_heat_dissipation_joules FROM performance_tests WHERE performance_tests.cpu_score = 1200 AND performance_tests.gpu_score = 800 AND performance_tests.overall_score = 950;",
    "type": "1",
    "idx": 142,
    "englishquestion": "A computer in the performance test scored 1200 for the CPU, 800 for the GPU, and achieved a composite score of 950. The power consumption of the CPU and GPU is known to be 65 W and 85 W respectively, while the temperature during the test was 75°C. Assuming the computer's cooling efficiency is 0.75, calculate the total heat dissipation (in joules) during this test.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：cpu_score, gpu_score, overall_score  \n【foreign_keys】:【performance_tests.computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【从performance_tests表中筛选cpu_score=1200、gpu_score=800、overall_score=950的测试记录】  【step2】:【计算总功率=CPU功耗+GPU功耗=65W+85W=150W】  【step3】:【计算总散热量：(总功率*时间转换系数*散热效率) → 150W*(1h→3600s)*0.75=405000焦耳并通过SELECT输出】",
    "english_step": "【step1】:【Filter test records from the performance_tests table where cpu_score=1200, gpu_score=800, and overall_score=950】  【step2】:【Calculate total power = CPU power consumption + GPU power consumption = 65W + 85W = 150W】  【step3】:【Calculate total heat dissipation: (Total power × time conversion factor × cooling efficiency) → 150W × (1h→3600s) × 0.75 = 405,000 Joules, output via SELECT】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑在性能测试中，CPU得分为1500，GPU得分为1000，内存得分为800，存储得分为600，综合得分为1200。已知CPU、GPU、内存和存储的权重分别为40%、30%、20%和10%，请计算此次测试中综合得分的合理性，并分析是否存在性能瓶颈。",
    "query": "SELECT cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1 AS calculated_overall_score, CASE WHEN cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1 <> overall_score THEN '存在性能瓶颈' ELSE '无性能瓶颈' END AS performance_bottleneck_analysis FROM performance_tests WHERE cpu_score = 1500 AND gpu_score = 1000 AND ram_score = 800 AND storage_score = 600 AND overall_score = 1200;",
    "type": "2",
    "idx": 143,
    "englishquestion": "A computer in a performance test scored 1500 for CPU, 1000 for GPU, 800 for memory, and 600 for storage, with an overall score of 1200. Given that the weights for CPU, GPU, memory, and storage are 40%, 30%, 20%, and 10% respectively, please calculate the reasonability of the overall score in this test and analyze whether there is a performance bottleneck.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：cpu_score, gpu_score, ram_score, storage_score, overall_score  \n【foreign_keys】: 【无关联（当前查询未使用外键关联其他表）】",
    "evidence": "【step1】:【计算加权总得分】使用权重公式计算各部件加权得分之和：(1500*0.4) + (1000*0.3) + (800*0.2) + (600*0.1) = 600+300+160+60=1120  【step2】:【比对实际综合得分】将计算值1120与记录值1200进行比较，发现10%差异（1200-1120=80）  【step3】:【性能瓶颈判断】由于理论计算值(1120)与实际记录值(1200)不一致，按照CASE语句逻辑触发'存在性能瓶颈'结论",
    "english_step": "【Step1】: 【Calculate Weighted Total Score】 Use the weighting formula to compute the weighted score sum for components: (1500*0.4) + (1000*0.3) + (800*0.2) + (600*0.1) = 600+300+160+60=1120  【Step2】: 【Compare Actual Composite Score】 Compare the calculated value 1120 with the recorded value 1200, identifying a 10% discrepancy (1200-1120=80)  【Step3】: 【Performance Bottleneck Determination】 As the theoretical calculation (1120) conflicts with the recorded value (1200), the CASE statement logic triggers the conclusion \"performance bottleneck exists\""
  },
  {
    "db_id": "computer",
    "question": "一台电脑在性能测试中，CPU得分为1000，GPU得分为700，内存得分为500，存储得分为400，综合得分为800。已知测试时温度为80°C，功耗为150 W，且电脑的额定工作温度为85°C。请判断此次测试中电脑的温度是否在安全范围内，并分析是否需要改进散热系统。",
    "query": "SELECT temperature_celsius, CASE WHEN temperature_celsius <= 85 THEN '安全范围内' ELSE '超出安全范围' END AS temperature_safety_status, CASE WHEN temperature_celsius >= 85 THEN '需要改进散热系统' ELSE '无需改进散热系统' END AS cooling_system_analysis FROM performance_tests WHERE cpu_score = 1000 AND gpu_score = 700 AND ram_score = 500 AND storage_score = 400 AND overall_score = 800 AND temperature_celsius = 80 AND power_consumption_watts = 150;",
    "type": "3",
    "idx": 144,
    "englishquestion": "In a performance test of a computer, the CPU score is 1000, the GPU score is 700, the memory score is 500, the storage score is 400, and the overall score is 800. The recorded temperature during the test was 80°C, with a power consumption of 150 W, and the computer's rated operating temperature is 85°C. Determine whether the temperature during this test was within the safe range and analyze whether improvements to the cooling system are necessary.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：temperature_celsius, cpu_score, gpu_score, ram_score, storage_score, overall_score, power_consumption_watts  \n【foreign_keys】:【performance_tests.computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【从performance_tests表过滤出CPU=1000/GPU=700/内存=500/存储=400/综合=800/温度=80/功耗=150的特定测试记录】  【step2】:【通过CASE判断温度<=85时标注'安全范围内'，否则'超出安全范围'，生成temperature_safety_status字段】  【step3】:【通过CASE判断温度≥85时标注'需要改进散热系统'，反之标注'无需改进'，生成cooling_system_analysis字段】",
    "english_step": "【step1】: 【Filter the performance_tests table to retrieve specific test records where CPU=1000/GPU=700/Memory=500/Storage=400/Overall=800/Temperature=80/Power Consumption=150】  【step2】: 【Use CASE to label 'Within Safe Range' when Temperature <= 85, otherwise 'Exceeds Safe Range', generating the temperature_safety_status field】  【step3】: 【Use CASE to label 'Requires Cooling System Improvement' when Temperature ≥ 85, otherwise 'No Improvement Needed', generating the cooling_system_analysis field】"
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑在性能测试中，CPU得分为100000，GPU得分为80000，内存得分为60000，存储得分为40000，综合得分为90000。已知测试时温度为500°C，功耗为20000 W，且电脑的电源系统采用了核聚变技术，能量转换效率为99.99%。请计算此次测试中电脑的总能耗（单位：焦耳），并分析在如此极端的条件下，电脑是否可能实现可持续运行。",
    "query": "SELECT 20000 * 1 * 3600 AS total_energy_consumption_joules, CASE WHEN 20000 * 1 * 3600 > 1e12 THEN '不可能实现可持续运行' ELSE '可能实现可持续运行' END AS sustainability_analysis FROM performance_tests WHERE cpu_score = 100000 AND gpu_score = 80000 AND ram_score = 60000 AND storage_score = 40000 AND overall_score = 90000 AND temperature_celsius = 500 AND power_consumption_watts = 20000;",
    "type": "4",
    "idx": 145,
    "englishquestion": "Assuming a computer achieves a CPU score of 100,000, a GPU score of 80,000, a memory score of 60,000, a storage score of 40,000, and an overall score of 90,000 in a performance test. It is known that the temperature during the test was 500°C, the power consumption was 20,000 W, and the computer's power system utilized nuclear fusion technology with an energy conversion efficiency of 99.99%. Please calculate the total energy consumption (in joules) of the computer during this test and analyze whether the computer could sustain operation under such extreme conditions.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：cpu_score, gpu_score, ram_score, storage_score, overall_score, temperature_celsius, power_consumption_watts  \n【foreign_keys】:【performance_tests.computer_id 关联 computer_info.computer_id (但本查询未实际使用关联关系)】",
    "evidence": "【step1】:【从performance_tests表中定位满足指标的测试记录，通过WHERE条件过滤cpu_score=100000、gpu_score=80000、ram_score=60000、storage_score=40000、overall_score=90000、temperature_celsius=500且power_consumption_watts=20000的数据条目】  【step2】:【基于物理能耗公式进行核心计算：能耗(焦耳)=功率(瓦)*时间(秒)，将20000W功率值代入公式，并采用1小时(3600秒)作为持续时间单位，计算得出72000000焦耳】  【step3】:【通过阈值分析实现可持续判断，使用CASE条件判断72000000焦耳与1万亿焦耳阈值的关系，最终得出'可能实现可持续运行'的结论】",
    "english_step": "[step1]: [Retrieve test records from the performance_tests table by filtering entries WHERE cpu_score=100000, gpu_score=80000, ram_score=60000, storage_score=40000, overall_score=90000, temperature_celsius=500, and power_consumption_watts=20000]  [step2]: [Calculate core energy consumption using the formula: Energy (Joules) = Power (Watts) × Time (Seconds). Substitute 20000W and 1 hour (3600 seconds) to derive 72000000 Joules]  [step3]: [Perform sustainability assessment through threshold analysis: Use CASE condition to compare 72000000 Joules against the 1-trillion-Joule threshold, concluding with 'may achieve sustainable operation']"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的电池容量（Wh）和功耗（W），并计算每台电脑在满负荷运行时的理论续航时间（小时），按续航时间从长到短排序，取前5名。",
    "query": "SELECT ci.computer_id, ci.manufacturer, ci.model, ci.battery_capacity_wh, pt.power_consumption_watts, (ci.battery_capacity_wh / pt.power_consumption_watts) AS theoretical_runtime_hours FROM computer_info ci JOIN performance_tests pt ON ci.computer_id = pt.computer_id ORDER BY theoretical_runtime_hours DESC LIMIT 5;",
    "type": "1",
    "idx": 146,
    "englishquestion": "Query the battery capacity (Wh) and power consumption (W) of all computers, calculate the theoretical runtime (hours) of each computer at full load, and sort by runtime from longest to shortest, taking the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, battery_capacity_wh  \n【table】：【performance_tests】 【columns】：computer_id, power_consumption_watts  \n【foreign_keys】: performance_tests.computer_id ➔ computer_info.computer_id",
    "evidence": "【step1】:【连接computer_info和performance_tests表，通过computer_id关联获取电池容量和功耗数据】  【step2】:【通过电池容量(Wh)除以功耗(W)计算理论续航时间，形成临时结果集】  【step3】:【按续航时间倒序排序并取前5条记录，最终输出目标字段】",
    "english_step": "[Step1]: [JOIN computer_info and performance_tests tables via computer_id to retrieve battery capacity and power consumption data]  [Step2]: [Calculate theoretical endurance time by dividing battery capacity (Wh) by power consumption (W), forming a temporary result set]  [Step3]: [Sort by endurance time in descending order, take the top 5 records, and finally output the target fields]"
  },
  {
    "db_id": "computer",
    "question": "计算每台电脑的CPU核心数和线程数的比值，并找出比值最接近2:1的电脑型号，按比值从接近到远离排序，取前3名。",
    "query": "SELECT computer_id, manufacturer, model, cpu_cores, cpu_threads, (cpu_threads / cpu_cores) AS core_thread_ratio, ABS((cpu_threads / cpu_cores) - 2) AS ratio_difference FROM computer_info ORDER BY ratio_difference ASC LIMIT 3;",
    "type": "2",
    "idx": 147,
    "englishquestion": "Calculate the ratio of CPU cores to threads for each computer model, and identify the models with ratios closest to 2:1. Sort the results from closest to farthest in terms of the ratio and take the top 3.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, cpu_cores, cpu_threads 【foreign_keys】: 无",
    "evidence": "【step1】:计算每台电脑的线程核心比(cpu_threads/cpu_cores)和与2的差值绝对值(ABS((cpu_threads/cpu_cores) - 2))  【step2】:按差值绝对值升序排列  【step3】:限制输出前3条结果",
    "english_step": "【step1】: Calculate the thread-to-core ratio (cpu_threads/cpu_cores) and the absolute difference from 2 (ABS((cpu_threads/cpu_cores) - 2)) for each computer  【step2】: Sort the results by the absolute difference in ascending order  【step3】: Limit the output to the top 3 results"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的屏幕尺寸（英寸）和分辨率，计算每台电脑的像素密度（PPI），并按像素密度从高到低排序，取前10名。",
    "query": "SELECT computer_id, manufacturer, model, screen_size_inches, screen_resolution, ROUND(SQRT(POW(SUBSTRING_INDEX(screen_resolution, 'x', 1), 2) + POW(SUBSTRING_INDEX(screen_resolution, 'x', -1), 2)) / screen_size_inches, 2) AS ppi FROM computer_info ORDER BY ppi DESC LIMIT 10;",
    "type": "3",
    "idx": 148,
    "englishquestion": "Query the screen size (in inches) and resolution of all computers, calculate the pixel density (PPI) for each computer, and sort them by pixel density in descending order, taking the top 10.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, screen_size_inches, screen_resolution  \n【foreign_keys】: 无表关联操作",
    "evidence": "【step1】:【提取基础字段】从computer_info表选取computer_id、manufacturer、model、screen_size_inches、screen_resolution字段  【step2】:【计算像素密度】用SUBSTRING_INDEX分解screen_resolution为横纵像素，通过平方和开方运算计算屏幕对角像素数，除以屏幕尺寸得出PPI并保留两位小数  【step3】:【排序截取结果】按照计算得到的ppi字段降序排列，使用LIMIT 10获取像素密度最高的前10条记录",
    "english_step": "[Step1]: [Extract Basic Fields] Select computer_id, manufacturer, model, screen_size_inches, screen_resolution fields from computer_info table  [Step2]: [Calculate Pixel Density] Use SUBSTRING_INDEX to split screen_resolution into horizontal and vertical pixels, calculate diagonal pixel count through sum of squares and square root operations, then divide by screen size to derive PPI (rounded to two decimal places)  [Step3]: [Sort and Retrieve Results] Order results by calculated ppi field in descending order, use LIMIT 10 to retrieve the top 10 records with the highest pixel density"
  },
  {
    "db_id": "computer",
    "question": "假设所有电脑的CPU基础频率（GHz）都提升到100GHz，计算每台电脑的理论最大性能提升倍数，并按提升倍数从高到低排序，取前5名。",
    "query": "SELECT computer_id, manufacturer, model, cpu_base_frequency_ghz, (100 / cpu_base_frequency_ghz) AS performance_increase_factor FROM computer_info ORDER BY performance_increase_factor DESC LIMIT 5;",
    "type": "4",
    "idx": 149,
    "englishquestion": "Assuming the base frequency (GHz) of all computers' CPUs is increased to 100GHz, calculate the theoretical maximum performance improvement factor for each computer, and sort them from highest to lowest improvement factor, taking the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, cpu_base_frequency_ghz 【foreign_keys】:【computer_info.computer_id ← battery_usage.computer_id/performance_tests.computer_id/usage_records.computer_id】",
    "evidence": "【step1】:【从computer_info表中选择computer_id、manufacturer、model和cpu_base_frequency_ghz字段，作为基础数据】  【step2】:【计算理论性能提升倍数(100/cpu_base_frequency_ghz)，并命名为performance_increase_factor】  【step3】:【按performance_increase_factor降序排序结果集，并通过LIMIT 5取提升倍数最高的前5条记录】",
    "english_step": "【step1】: 【Select computer_id, manufacturer, model, and cpu_base_frequency_ghz fields from the computer_info table as foundational data】  【step2】: 【Calculate the theoretical performance increase factor (100 / cpu_base_frequency_ghz) and name it performance_increase_factor】  【step3】: 【Sort the result set in descending order by performance_increase_factor and retrieve the top 5 records with the highest increase factor using LIMIT 5】"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的CPU基础频率（GHz）和最大频率（GHz），计算每台CPU的频率提升百分比，并按提升百分比从高到低排序，取前5名。",
    "query": "SELECT computer_id, manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz, ROUND(((cpu_max_frequency_ghz - cpu_base_frequency_ghz) / cpu_base_frequency_ghz) * 100, 2) AS frequency_increase_percentage FROM computer_info ORDER BY frequency_increase_percentage DESC LIMIT 5;",
    "type": "1",
    "idx": 150,
    "englishquestion": "Query the base frequency (GHz) and maximum frequency (GHz) of all computer CPUs, calculate the frequency boost percentage for each CPU, and sort them in descending order by the boost percentage, then select the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【foreign_keys】: 无",
    "evidence": "【step1】:【选择字段并计算频率提升百分比】  【step2】:【按提升百分比降序排序】  【step3】:【限制结果数为前5条】",
    "english_step": "【step1】:【Select fields and calculate frequency lift percentage】  【step2】:【Order by lift percentage in descending order】  【step3】:【Limit results to top 5】"
  },
  {
    "db_id": "computer",
    "question": "计算每台电脑的内存大小（GB）与存储大小（GB）的比值，并找出比值最接近1:10的电脑型号，按比值从接近到远离排序，取前3名。",
    "query": "SELECT computer_id, manufacturer, model, ram_size_gb, storage_size_gb, (ram_size_gb / storage_size_gb) AS ram_storage_ratio, ABS((ram_size_gb / storage_size_gb) - 0.1) AS ratio_difference FROM computer_info ORDER BY ratio_difference ASC LIMIT 3;",
    "type": "2",
    "idx": 151,
    "englishquestion": "Calculate the ratio of memory size (GB) to storage size (GB) for each computer model, find the models with the ratio closest to 1:10, sort them from closest to farthest, and take the top 3.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, ram_size_gb, storage_size_gb  \n【foreign_keys】:【无】",
    "evidence": "【step1】: 计算每台电脑的RAM/存储比值并生成差值列  【step2】: 使用ABS函数比较该比值与理想值0.1（1:10）的绝对差距，生成ratio_difference排序依据  【step3】: 按ratio_difference升序排列结果后通过LIMIT 3取最接近的前3条记录",
    "english_step": "【step1】: Calculate the RAM/storage ratio for each computer and generate a difference column  【step2】: Use the ABS function to compare the absolute gap between this ratio and the ideal value of 0.1 (1:10), generating the ratio_difference sorting criterion  【step3】: Sort results by ratio_difference in ascending order and retrieve the top 3 closest records via LIMIT 3"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的重量（kg）和电池容量（Wh），计算每台电脑的单位重量电池容量（Wh/kg），并按单位重量电池容量从高到低排序，取前10名。",
    "query": "SELECT computer_id, manufacturer, model, weight_kg, battery_capacity_wh, (battery_capacity_wh / weight_kg) AS battery_capacity_per_kg FROM computer_info ORDER BY battery_capacity_per_kg DESC LIMIT 10;",
    "type": "3",
    "idx": 152,
    "englishquestion": "Query the weight (kg) and battery capacity (Wh) of all computers, calculate the battery capacity per unit weight (Wh/kg) for each computer, and sort them by battery capacity per unit weight from highest to lowest, then take the top 10.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, weight_kg, battery_capacity_wh  \n【foreign_keys】:【】",
    "evidence": "【step1】:【从computer_info表中选择计算机ID、制造商、型号、重量、电池容量，并使用公式battery_capacity_wh除以weight_kg生成每公斤电池容量字段】  【step2】:【按计算生成的battery_capacity_per_kg字段进行降序排序】  【step3】:【限制结果集仅返回前10条记录】",
    "english_step": "[Step 1]: [Select computer_id, manufacturer, model, weight_kg, battery_capacity_wh from computer_info, and generate a battery_capacity_per_kg field using the formula battery_capacity_wh divided by weight_kg]  [Step 2]: [Sort the results in descending order based on the calculated battery_capacity_per_kg field]  [Step 3]: [Limit the result set to return only the top 10 records]"
  },
  {
    "db_id": "computer",
    "question": "假设所有电脑的GPU显存（GB）都增加到1TB，计算每台电脑的显存提升倍数，并按提升倍数从高到低排序，取前5名。",
    "query": "SELECT computer_id, manufacturer, model, gpu_vram_gb, (1024 / gpu_vram_gb) AS vram_increase_factor FROM computer_info ORDER BY vram_increase_factor DESC LIMIT 5;",
    "type": "4",
    "idx": 153,
    "englishquestion": "Assuming the GPU memory (GB) of all computers is increased to 1TB, calculate the multiple by which each computer's memory is increased, and sort them from highest to lowest multiple, taking the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, gpu_vram_gb  \n【foreign_keys】:【无显式调用外键关联】",
    "evidence": "【step1】:【从computer_info表中选择computer_id、制造商、型号、显存GB字段，并计算显存提升倍数(1024/gpu_vram_gb)】  【step2】:【根据vram_increase_factor字段进行降序排序】  【step3】:【使用LIMIT 5限制结果集为前5条记录】",
    "english_step": "[Step 1]: [Select computer_id, manufacturer, model, gpu_vram_gb fields from the computer_info table, and calculate the VRAM increase factor (1024/gpu_vram_gb)]  [Step 2]: [Sort in descending order based on the vram_increase_factor field]  [Step 3]: [Use LIMIT 5 to restrict the result set to the top 5 records]"
  },
  {
    "db_id": "computer",
    "question": "查询所有使用记录中的功耗（W）和使用时长（小时），计算每台电脑的总能耗（Wh），并按总能耗从高到低排序，取前5名。",
    "query": "SELECT computer_id, SUM(power_consumption_watts * usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY computer_id ORDER BY total_energy_consumption_wh DESC LIMIT 5;",
    "type": "1",
    "idx": 154,
    "englishquestion": "Query the power consumption (W) and usage duration (hours) from all usage records, calculate the total energy consumption (Wh) for each computer, and sort them from highest to lowest by total energy consumption, taking the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】:【computer_id关联computer_info表的computer_id】",
    "evidence": "【step1】:【聚合计算】对usage_records表按computer_id分组，用SUM(power_consumption_watts * usage_duration_hours)计算每个计算机的总能耗  【step2】:【排序筛选】使用ORDER BY total_energy_consumption_wh DESC对整个聚合结果进行降序排列  【step3】:【结果限制】通过LIMIT 5限制最终只输出能耗最高的前5条记录",
    "english_step": "[Step 1]: [Aggregation Calculation] Group the usage_records table by computer_id, and calculate the total energy consumption for each computer using SUM(power_consumption_watts * usage_duration_hours)  [Step 2]: [Sorting and Filtering] Sort the entire aggregated results in descending order of total_energy_consumption_wh using ORDER BY  [Step 3]: [Result Limitation] Restrict the final output to the top 5 records with the highest energy consumption using LIMIT 5"
  },
  {
    "db_id": "computer",
    "question": "计算每台电脑的平均CPU使用率（%）和平均GPU使用率（%）的差值，并找出差值最大的电脑型号，按差值从大到小排序，取前3名。",
    "query": "SELECT computer_id, AVG(cpu_usage_percent) AS avg_cpu_usage, AVG(gpu_usage_percent) AS avg_gpu_usage, (AVG(cpu_usage_percent) - AVG(gpu_usage_percent)) AS usage_difference FROM usage_records GROUP BY computer_id ORDER BY usage_difference DESC LIMIT 3;",
    "type": "2",
    "idx": 155,
    "englishquestion": "Calculate the difference between the average CPU usage (%) and average GPU usage (%) for each computer model, identify the models with the largest differences, sort them in descending order by the difference value, and take the top 3.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, cpu_usage_percent, gpu_usage_percent  \n【foreign_keys】: computer_id→computer_info(computer_id)",
    "evidence": "【step1】:【根据computer_id聚合计算每个电脑的平均CPU/GPU使用率及差值】  【step2】:【按(avg_cpu - avg_gpu)差值降序排列结果】  【step3】:【使用LIMIT 3过滤差值最大的前三台电脑】",
    "english_step": "【step1】: 【Aggregate by computer_id to calculate the average CPU/GPU usage rates and their difference for each computer】  【step2】: 【Sort the results in descending order by (avg_cpu - avg_gpu) difference】  【step3】: 【Use LIMIT 3 to filter the top three computers with the largest differences】"
  },
  {
    "db_id": "computer",
    "question": "查询所有使用记录中的温度（摄氏度）和使用时长（小时），计算每台电脑的平均温度，并按平均温度从高到低排序，取前10名。",
    "query": "SELECT computer_id, SUM(temperature_celsius * usage_duration_hours) / SUM(usage_duration_hours) AS avg_temperature FROM usage_records GROUP BY computer_id ORDER BY avg_temperature DESC LIMIT 10;",
    "type": "3",
    "idx": 156,
    "englishquestion": "Retrieve the temperature (in Celsius) and usage duration (in hours) from all usage records, calculate the average temperature for each computer, sort them in descending order by average temperature, and select the top 10 results.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, temperature_celsius, usage_duration_hours  \n【foreign_keys】:【usage_records.computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【从usage_records表中选择computer_id，计算每台电脑的温度乘以使用时长的加权总和，并统计总使用时长】  【step2】:【按computer_id分组，通过加权总和除以总使用时长计算平均温度】  【step3】:【按avg_temperature降序排序，限制结果返回前10条记录】",
    "english_step": "【step1】: 【Select computer_id from usage_records table, calculate the weighted sum of temperature multiplied by usage duration for each computer, and count the total usage duration】  【step2】: 【Group by computer_id, calculate average temperature by dividing weighted sum by total usage duration】  【step3】: 【Order by avg_temperature descending, limit results to top 10 records】"
  },
  {
    "db_id": "computer",
    "question": "假设所有使用记录中的使用时长（小时）都增加到1000小时，计算每台电脑的总能耗（Wh），并按总能耗从高到低排序，取前5名。",
    "query": "SELECT computer_id, SUM(power_consumption_watts * 1000) AS total_energy_consumption_wh FROM usage_records GROUP BY computer_id ORDER BY total_energy_consumption_wh DESC LIMIT 5;",
    "type": "4",
    "idx": 157,
    "englishquestion": "Assuming the usage duration (in hours) in all usage records is increased to 1000 hours, calculate the total energy consumption (Wh) for each computer, sort them in descending order of total energy consumption, and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, power_consumption_watts  \n【foreign_keys】: computer_id关联computer_info.computer_id",
    "evidence": "【step1】:【从usage_records表按computer_id分组，计算每个电脑的(power_consumption_watts * 1000)总和】  【step2】:【将聚合结果按照sum值降序排列】  【step3】:【限制最终结果只输出前5条记录】",
    "english_step": "Step1: Group the usage_records table by computer_id and compute the sum of (power_consumption_watts * 1000) for each computer  Step2: Sort the aggregated results in descending order by the computed sum value  Step3: Restrict the final output to only the top 5 records"
  },
  {
    "db_id": "computer",
    "question": "查询所有电池使用记录中的电池容量（Wh）和功耗（W），计算每台电脑在满负荷运行时的理论续航时间（小时），并按续航时间从长到短排序，取前5名。",
    "query": "SELECT computer_id, battery_capacity_wh, power_consumption_watts, (battery_capacity_wh / power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage ORDER BY theoretical_runtime_hours DESC LIMIT 5;",
    "type": "1",
    "idx": 158,
    "englishquestion": "Query all battery capacity (Wh) and power consumption (W) records in battery usage, calculate the theoretical battery life (hours) of each computer under full load operation, sort by battery life from longest to shortest, and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, battery_capacity_wh, power_consumption_watts  \n【foreign_keys】:【computer_id外键关联computer_info表的computer_id】",
    "evidence": "【step1】:【从battery_usage表选取computer_id、电池容量(Wh)、功耗(W)字段】  【step2】:【计算理论续航时间（电池容量/功耗）并创建别名theoretical_runtime_hours】  【step3】:【按续航时间降序排序，限制结果为前5条记录】",
    "english_step": "【step1】: [Select computer_id, battery_capacity_wh, power_consumption_w from battery_usage table]  【step2】: [Calculate theoretical runtime hours (battery_capacity_wh / power_consumption_w) and create the alias theoretical_runtime_hours]  【step3】: [Sort by theoretical_runtime_hours in descending order and limit the results to the top 5 records]"
  },
  {
    "db_id": "computer",
    "question": "计算每台电脑的电池健康度（%）与使用时长（小时）的比值，并找出比值最小的电脑型号，按比值从小到大排序，取前3名。",
    "query": "SELECT computer_id, (battery_health_percent / usage_duration_hours) AS health_usage_ratio FROM battery_usage ORDER BY health_usage_ratio ASC LIMIT 3;",
    "type": "2",
    "idx": 159,
    "englishquestion": "Calculate the ratio of battery health percentage to usage hours for each computer model, and identify the top 3 models with the smallest ratios, sorted in ascending order by the ratio.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, battery_health_percent, usage_duration_hours  \n【foreign_keys】:【computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【从电池使用记录表(battery_usage)中提取computer_id字段，并计算每一行的battery_health_percent与usage_duration_hours比值生成health_usage_ratio字段】  【step2】:【按照health_usage_ratio升序排序结果集】  【step3】:【使用LIMIT 3截取排序后前3条记录作为最终输出】",
    "english_step": "【step1】: [Extract the computer_id field from the battery_usage table, and calculate the ratio of battery_health_percent to usage_duration_hours for each row to generate the health_usage_ratio field]  【step2】: [Sort the result set in ascending order by health_usage_ratio]  【step3】: [Use LIMIT 3 to retrieve the top 3 records from the sorted results as the final output]"
  },
  {
    "db_id": "computer",
    "question": "查询所有电池使用记录中的温度（摄氏度）和使用时长（小时），计算每台电脑的平均温度，并按平均温度从高到低排序，取前10名。",
    "query": "SELECT computer_id, SUM(temperature_celsius * usage_duration_hours) / SUM(usage_duration_hours) AS avg_temperature FROM battery_usage GROUP BY computer_id ORDER BY avg_temperature DESC LIMIT 10;",
    "type": "3",
    "idx": 160,
    "englishquestion": "Query all battery usage records for temperature (in Celsius) and usage duration (in hours), calculate the average temperature per computer, and sort by average temperature from highest to lowest, taking the top 10.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, temperature_celsius, usage_duration_hours  \n【foreign_keys】:【computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【从 battery_usage 表按 computer_id 分组，计算每个设备的 (温度×使用时长) 总和与使用时长的总和】  【step2】:【将第一步骤的两列总和相除生成加权平均温度列 avg_temperature】  【step3】:【按 avg_temperature 降序排列后取前10条结果】",
    "english_step": "【step1】: 【From the battery_usage table, group by computer_id to calculate the sum of (temperature × usage_duration) and the total sum of usage_duration for each device】  【step2】: 【Divide the two sums from step1 to generate the weighted average temperature column avg_temperature】  【step3】: 【Sort by avg_temperature in descending order and select the top 10 results】"
  },
  {
    "db_id": "computer",
    "question": "假设所有电池使用记录中的电池容量（Wh）都增加到10000Wh，计算每台电脑的理论续航时间（小时），并按续航时间从长到短排序，取前5名。",
    "query": "SELECT computer_id, (10000 / power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage ORDER BY theoretical_runtime_hours DESC LIMIT 5;",
    "type": "4",
    "idx": 161,
    "englishquestion": "Assuming the battery capacity (Wh) in all battery usage records is increased to 10000Wh, calculate the theoretical battery life (hours) for each computer, and sort them in descending order of battery life, taking the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, power_consumption_watts 【foreign_keys】: computer_id关联computer_info.computer_id",
    "evidence": "【step1】:【从 battery_usage 表中提取 computer_id 和电源消耗参数，并用预设10000Wh电池容量计算理论续航（10000 / power_consumption_watts）】  【step2】:【按理论续航值 theoretical_runtime_hours 进行降序排序】  【step3】:【通过 LIMIT 5 截取前5名结果】",
    "english_step": "[step1]: [Extract computer_id and power_consumption_watts from the battery_usage table, and calculate theoretical runtime (10000 / power_consumption_watts) using a preset 10000Wh battery capacity]  [step2]: [Sort by theoretical_runtime_hours in descending order]  [step3]: [Retrieve top 5 results using LIMIT 5]"
  },
  {
    "db_id": "computer",
    "question": "查询所有性能测试记录中的功耗（W）、测试时长（小时）以及温度（摄氏度），计算每台电脑在测试期间的总能耗（Wh）和平均散热功率（W），并按总能耗与平均散热功率的比值从高到低排序，取前5名。",
    "query": "SELECT computer_id, SUM(power_consumption_watts * 1) AS total_energy_consumption_wh, SUM(power_consumption_watts * 1) / COUNT(*) * (1 - (25 / AVG(temperature_celsius))) AS avg_cooling_power_w FROM performance_tests GROUP BY computer_id ORDER BY (total_energy_consumption_wh / avg_cooling_power_w) DESC LIMIT 5;",
    "type": "1",
    "idx": 162,
    "englishquestion": "Query the power consumption (W), test duration (hours), and temperature (Celsius) from all performance test records, calculate the total energy consumption (Wh) and average cooling power (W) for each computer during the test, and sort them by the ratio of total energy consumption to average cooling power in descending order, taking the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, power_consumption_watts, temperature_celsius  \n【foreign_keys】:【computer_id关联至computer_info.computer_id】",
    "evidence": "【step1】:【从performance_tests表中按computer_id分组，提取每台设备的power_consumption_watts字段数值，并获取对应的temperature_celsius温度数据】  【step2】:【计算总能耗（power_consumption_watts*1的累加和）和通过公式(总功耗/测试次数)*(1-25/平均温度)推导平均散热功率，生成两个新字段】  【step3】:【对计算结果按照总能耗除平均散热功率的比值降序排列，并限制输出前5条记录】",
    "english_step": "【step1】: 【Grouping by computer_id in the performance_tests table, extract the numerical values of the power_consumption_watts field and corresponding temperature_celsius data for each device】  【step2】: 【Calculate total power consumption (sum of power_consumption_watts*1) and derive average cooling power using the formula (total_power_consumption/number_of_tests)*(1-25/average_temperature), generating two new fields】  【step3】: 【Sort the results in descending order by the ratio of total_power_consumption to average_cooling_power, limiting output to the top 5 records】"
  },
  {
    "db_id": "computer",
    "question": "计算每台电脑的CPU得分、GPU得分、内存得分和存储得分的加权总和（权重分别为40%、30%、20%、10%），并找出加权总和最高的电脑型号，按加权总和从高到低排序，取前3名。",
    "query": "SELECT computer_id, (cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1) AS weighted_score FROM performance_tests ORDER BY weighted_score DESC LIMIT 3;",
    "type": "2",
    "idx": 163,
    "englishquestion": "Calculate the weighted sum of CPU score, GPU score, memory score, and storage score for each computer (with weights of 40%, 30%, 20%, and 10% respectively), identify the computer model with the highest weighted sum, and sort them in descending order by weighted sum, taking the top 3.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, cpu_score, gpu_score, ram_score, storage_score  \n【foreign_keys】:【computer_id关联computer_info.computer_id】",
    "evidence": "【step1】: 从performance_tests表提取computer_id并计算四元加权总分 【step2】: 按加权总分降序排序 【step3】: 用LIMIT 3限制结果为前三名",
    "english_step": "【step1】: Extract computer_id from the performance_tests table and calculate the weighted total score based on four components  【step2】: Sort results in descending order by weighted_total_score  【step3】: Restrict output to top 3 entries using LIMIT 3"
  },
  {
    "db_id": "computer",
    "question": "查询所有性能测试记录中的温度（摄氏度）、功耗（W）和测试时长（小时），计算每台电脑的散热效率（W/°C），并按散热效率从低到高排序，取前10名。",
    "query": "SELECT computer_id, power_consumption_watts / (temperature_celsius - 25) AS cooling_efficiency_w_per_c FROM performance_tests ORDER BY cooling_efficiency_w_per_c ASC LIMIT 10;",
    "type": "3",
    "idx": 164,
    "englishquestion": "Query the temperature (in Celsius), power consumption (W), and test duration (hours) from all performance test records, calculate the cooling efficiency (W/°C) of each computer, sort them by cooling efficiency from low to high, and take the top 10.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, power_consumption_watts, temperature_celsius  \n【foreign_keys】: computer_id关联computer_info表的computer_id",
    "evidence": "【step1】:【从performance_tests表获取computer_id、power_consumption_watts、temperature_celsius字段】  【step2】:【计算散热效率公式 (power_consumption_watts)/(temperature_celsius - 25) 并命名为cooling_efficiency_w_per_c】  【step3】:【按cooling_efficiency_w_per_c升序排序，限制输出前10条】",
    "english_step": "【step1】: 【Retrieve computer_id, power_consumption_watts, temperature_celsius fields from the performance_tests table】  【step2】: 【Calculate cooling efficiency using formula (power_consumption_watts)/(temperature_celsius - 25) and name it cooling_efficiency_w_per_c】  【step3】: 【Sort by cooling_efficiency_w_per_c in ascending order, limit output to top 10 entries】"
  },
  {
    "db_id": "computer",
    "question": "假设所有性能测试记录中的CPU得分、GPU得分、内存得分和存储得分都增加到100000分，计算每台电脑的综合性能提升倍数，并按提升倍数从高到低排序，取前5名。",
    "query": "SELECT computer_id, (100000 * 0.4 + 100000 * 0.3 + 100000 * 0.2 + 100000 * 0.1) / (cpu_score * 0.4 + gpu_score * 0.3 + ram_score * 0.2 + storage_score * 0.1) AS performance_increase_factor FROM performance_tests ORDER BY performance_increase_factor DESC LIMIT 5;",
    "type": "4",
    "idx": 165,
    "englishquestion": "Assuming all performance test records have their CPU score, GPU score, memory score, and storage score increased to 100,000 points, calculate the performance improvement multiplier for each computer, then sort them in descending order by the multiplier and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id,cpu_score,gpu_score,ram_score,storage_score  \n【foreign_keys】:【performance_tests.computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【数值计算：将各性能指标统一设为100000分，计算加权综合得分与原始加权得分的提升倍数比】  【step2】:【结果排序：根据性能提升倍数按降序排列】  【step3】:【结果限制：取提升倍数最大的前5条记录】",
    "english_step": "【step1】:【Numerical calculation: Set each performance metric uniformly to 100,000 points, calculate the improvement multiple ratio between the weighted composite score and the original weighted score】  【step2】:【Result sorting: Sort by performance improvement multiple in descending order】  【step3】:【Result limitation: Retrieve the top 5 records with the highest improvement multiples】"
  },
  {
    "db_id": "computer",
    "question": "按制造商（manufacturer）分组，计算每个制造商的电脑平均CPU基础频率（GHz）和平均CPU最大频率（GHz），并计算频率提升百分比，按提升百分比从高到低排序。",
    "query": "SELECT manufacturer, AVG(cpu_base_frequency_ghz) AS avg_base_frequency, AVG(cpu_max_frequency_ghz) AS avg_max_frequency, (AVG(cpu_max_frequency_ghz) - AVG(cpu_base_frequency_ghz)) / AVG(cpu_base_frequency_ghz) * 100 AS frequency_increase_percentage FROM computer_info GROUP BY manufacturer ORDER BY frequency_increase_percentage DESC;",
    "type": "1",
    "idx": 166,
    "englishquestion": "Group by manufacturer, calculate the average CPU base frequency (GHz) and average CPU maximum frequency (GHz) for each manufacturer, then compute the frequency increase percentage, sorted by the increase percentage from highest to lowest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：manufacturer, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【foreign_keys】: 无关联外键",
    "evidence": "【step1】:按manufacturer分组并计算各组的cpu_base_frequency_ghz和cpu_max_frequency_ghz字段的平均值  【step2】:在分组计算结果的基础上，通过数学运算（(最大值均值-基数均值)/基数均值*100）计算频率提升百分比  【step3】:按frequency_increase_percentage字段对结果进行降序排序",
    "english_step": "【step1】: Group by manufacturer and calculate the average values of cpu_base_frequency_ghz and cpu_max_frequency_ghz fields for each group  【step2】: Based on the grouped calculation results, compute the frequency increase percentage through mathematical operation ((average_max_value - average_base_value)/average_base_value * 100)  【step3】: Sort the results in descending order by the frequency_increase_percentage field"
  },
  {
    "db_id": "computer",
    "question": "按内存类型（ram_type）分组，计算每种内存类型的平均内存大小（GB）与平均存储大小（GB）的比值，并按比值从高到低排序。",
    "query": "SELECT ram_type, AVG(ram_size_gb) / AVG(storage_size_gb) AS ram_storage_ratio FROM computer_info GROUP BY ram_type ORDER BY ram_storage_ratio DESC;",
    "type": "2",
    "idx": 167,
    "englishquestion": "Group by memory type (ram_type), calculate the ratio of average memory size (GB) to average storage size (GB) for each memory type, and sort by the ratio from high to low.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：ram_type, ram_size_gb, storage_size_gb  \n【foreign_keys】: None",
    "evidence": "【step1】:【按ram_type分组，计算每组ram_size_gb和storage_size_gb的字段平均值】  【step2】:【使用分组后的平均值计算内存与存储的比值，并命名为ram_storage_ratio】  【step3】:【按ram_storage_ratio的数值从高到低对结果排序】",
    "english_step": "[step1]: [Group by ram_type, calculate the average values of the ram_size_gb and storage_size_gb fields for each group]  [step2]: [Using the grouped averages, calculate the ratio of memory to storage and name it ram_storage_ratio]  [step3]: [Sort the results by the value of ram_storage_ratio in descending order]"
  },
  {
    "db_id": "computer",
    "question": "按屏幕尺寸（screen_size_inches）分组，计算每个屏幕尺寸范围内的平均电池容量（Wh）和平均重量（kg），并计算单位重量电池容量（Wh/kg），按单位重量电池容量从高到低排序。",
    "query": "SELECT screen_size_inches, AVG(battery_capacity_wh) AS avg_battery_capacity, AVG(weight_kg) AS avg_weight, AVG(battery_capacity_wh) / AVG(weight_kg) AS battery_capacity_per_kg FROM computer_info GROUP BY screen_size_inches ORDER BY battery_capacity_per_kg DESC;",
    "type": "3",
    "idx": 168,
    "englishquestion": "Group by screen size (screen_size_inches), calculate the average battery capacity (Wh) and average weight (kg) for each screen size range, and compute the battery capacity per unit weight (Wh/kg). Sort by battery capacity per unit weight in descending order.",
    "equation_analysis": "equation_analysis：  1. `AVG(battery_capacity_wh)`：按屏幕尺寸分组的电池容量平均值（Wh）  2. `AVG(weight_kg)`：按屏幕尺寸分组的重量平均值（kg）  3. `AVG(battery_capacity_wh) / AVG(weight_kg)`：单位重量电池容量（Wh/kg），通过分组平均值的比例计算得到。",
    "used_table_info": "【table】：【computer_info】 【columns】：【screen_size_inches, battery_capacity_wh, weight_kg】  \n【foreign_keys】：【无】  \n【equation_analysis】：  \n1. `AVG(battery_capacity_wh)`：按屏幕尺寸分组的电池容量平均值（Wh）  \n2. `AVG(weight_kg)`：按屏幕尺寸分组的重量平均值（kg）  \n3. `AVG(battery_capacity_wh) / AVG(weight_kg)`：单位重量电池容量（Wh/kg），通过分组平均值的比例计算得到。",
    "evidence": "【step1】:按screen_size_inches分组并计算每组平均电池容量和平均重量  【step2】:在分组结果基础上计算电池容量与重量的比值(battery_capacity_wh/weight_kg)  【step3】:根据计算出的单位重量电池容量指标(battery_capacity_per_kg)进行降序排序",
    "english_step": "【step1】: Group by screen_size_inches and calculate the average battery capacity and average weight per group  【step2】: Based on the grouped results, calculate the ratio of battery capacity to weight (battery_capacity_wh/weight_kg)  【step3】: Sort in descending order according to the calculated battery capacity per kilogram metric (battery_capacity_per_kg)"
  },
  {
    "db_id": "computer",
    "question": "按生产年份（production_year）分组，假设所有电脑的CPU核心数（cpu_cores）都增加到100核心，计算每个生产年份的电脑平均核心数提升倍数，并按提升倍数从高到低排序。",
    "query": "SELECT production_year, 100 / AVG(cpu_cores) AS core_increase_factor FROM computer_info GROUP BY production_year ORDER BY core_increase_factor DESC;",
    "type": "4",
    "idx": 169,
    "englishquestion": "Group by production year (production_year), assuming all computers' CPU core counts (cpu_cores) are increased to 100 cores, calculate the average core count improvement multiplier for computers in each production year, and sort by improvement multiplier from highest to lowest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：production_year, cpu_cores  \n【foeign_keys】:",
    "evidence": "【step1】:【按production_year分组计算原始cpu_cores的平均值】 【step2】:【将固定值100除以各组原始平均值，计算提升倍数】 【step3】:【按提升倍数降序排列结果】",
    "english_step": "【step1】:【Group by production_year to calculate the average of original cpu_cores】  【step2】:【Divide the fixed value 100 by the group's original average to compute the improvement factor】  【step3】:【Sort results in descending order by the improvement factor】"
  },
  {
    "db_id": "computer",
    "question": "按使用类型（usage_type）分组，计算每种使用类型的平均功耗（W）和平均使用时长（小时），并计算总能耗（Wh），按总能耗从高到低排序。",
    "query": "SELECT usage_type, AVG(power_consumption_watts) AS avg_power_consumption, AVG(usage_duration_hours) AS avg_usage_duration, AVG(power_consumption_watts) * AVG(usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY usage_type ORDER BY total_energy_consumption_wh DESC;",
    "type": "1",
    "idx": 170,
    "englishquestion": "Group by usage type (usage_type), calculate the average power consumption (W) and average usage duration (hours) for each usage type, and compute the total energy consumption (Wh), then sort by total energy consumption in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_type, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: computer_id关联computer_info表",
    "evidence": "【step1】:【按usage_type分组，对每组进行聚合计算】  【step2】:【计算各组average_power_consumption、average_usage_duration以及总能耗（avg(power)*avg(hours)的乘积）】  【step3】:【按total_energy_consumption_wh字段降序排列最终结果】",
    "english_step": "【step1】:【Group by usage_type and perform aggregate calculations for each group】  【step2】:【Calculate average_power_consumption, average_usage_duration, and total energy consumption (product of avg(power) and avg(hours)) for each group】  【step3】:【Sort final results by total_energy_consumption_wh in descending order】"
  },
  {
    "db_id": "computer",
    "question": "按使用日期（usage_date）的月份分组，计算每月的平均CPU使用率（%）、平均GPU使用率（%）和平均内存使用率（%），并计算CPU与GPU使用率的差值，按差值从大到小排序。",
    "query": "SELECT MONTH(usage_date) AS usage_month, AVG(cpu_usage_percent) AS avg_cpu_usage, AVG(gpu_usage_percent) AS avg_gpu_usage, AVG(ram_usage_percent) AS avg_ram_usage, (AVG(cpu_usage_percent) - AVG(gpu_usage_percent)) AS usage_difference FROM usage_records GROUP BY usage_month ORDER BY usage_difference DESC;",
    "type": "2",
    "idx": 171,
    "englishquestion": "Group by the month of the usage date (usage_date), calculate the average CPU usage (%), average GPU usage (%), and average memory usage (%) for each month, compute the difference between CPU and GPU usage, and sort in descending order by the difference.",
    "equation_analysis": "equation_analysis：MONTH(usage_date)月份分组 + AVG(cpu/gpu/ram_usage_percent)+ (AVG(cpu_usage_percent) - AVG(gpu_usage_percent))差值计算 + 按差值降序",
    "used_table_info": "【table】：【usage_records】 【columns】：【usage_date, cpu_usage_percent, gpu_usage_percent, ram_usage_percent】  \n【foreign_keys】：【computer_id 关联 computer_info.computer_id】  \n【equation_analysis】：【MONTH(usage_date)月份分组 + AVG(cpu/gpu/ram_usage_percent)+ (AVG(cpu_usage_percent) - AVG(gpu_usage_percent))差值计算 + 按差值降序】",
    "evidence": "【step1】:【从usage_records表提取MONTH(usage_date)作为分组依据，并选取cpu/gpu/ram使用率字段】  【step2】:【按月份分组计算cpu_usage_percent/gpu_usage_percent/ram_usage_percent的平均值】  【step3】:【计算CPU与GPU均值的差值作为usage_difference，并按该字段降序排序输出结果】",
    "english_step": "【step1】:【Extract MONTH(usage_date) as the grouping basis from the usage_records table and select cpu_usage_percent, gpu_usage_percent, ram_usage_percent fields】  【step2】:【Group by month and calculate the average values of cpu_usage_percent, gpu_usage_percent, ram_usage_percent】  【step3】:【Calculate the difference between average CPU and GPU values as usage_difference, then output results sorted by this field in descending order】"
  },
  {
    "db_id": "computer",
    "question": "按使用类型（usage_type）分组，计算每种使用类型的平均温度（摄氏度）和平均使用时长（小时），并计算单位时间温升（°C/h），按单位时间温升从高到低排序。",
    "query": "SELECT usage_type, AVG(temperature_celsius) AS avg_temperature, AVG(usage_duration_hours) AS avg_usage_duration, AVG(temperature_celsius) / AVG(usage_duration_hours) AS temperature_increase_per_hour FROM usage_records GROUP BY usage_type ORDER BY temperature_increase_per_hour DESC;",
    "type": "3",
    "idx": 172,
    "englishquestion": "Grouped by usage type (usage_type), calculate the average temperature (in Celsius) and average duration of use (in hours) for each usage type, then compute the temperature rise per unit of time (°C/h), and sort by the temperature rise per unit of time in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_type, temperature_celsius, usage_duration_hours 【foreign_keys】:【无】",
    "evidence": "【step1】:【选择字段并计算平均温度和使用时长】包括usage_type字段，使用AVG函数计算temperature_celsius和usage_duration_hours的平均值，通过除法计算温升指标  【step2】:【按使用类型分组聚合数据】使用GROUP BY对usage_type分组实现各组数据单独运算  【step3】:【按计算结果排序】使用ORDER BY将计算结果temperature_increase_per_hour降序排列输出结果",
    "english_step": "【Step 1】: 【Select fields and calculate average temperature and usage duration】Include the usage_type field, compute the average of temperature_celsius and usage_duration_hours using AVG function, then calculate the temperature increase per hour by dividing the average temperature by the average usage duration hours  【Step 2】: 【Group and aggregate data by usage type】Use GROUP BY on usage_type to perform separate calculations for each group  【Step 3】: 【Sort results by calculation】Use ORDER BY to output results in descending order based on the calculated temperature_increase_per_hour"
  },
  {
    "db_id": "computer",
    "question": "按使用类型（usage_type）分组，假设所有记录的功耗（W）都增加到10000W，计算每种使用类型的总能耗（Wh），并按总能耗从高到低排序。",
    "query": "SELECT usage_type, 10000 * AVG(usage_duration_hours) AS total_energy_consumption_wh FROM usage_records GROUP BY usage_type ORDER BY total_energy_consumption_wh DESC;",
    "type": "4",
    "idx": 173,
    "englishquestion": "Group by usage type (usage_type), assuming the power consumption (W) of all records increases to 10000W, calculate the total energy consumption (Wh) for each usage type, and sort by total energy consumption from high to low.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：usage_type, usage_duration_hours  \n【foreign_keys】: computer_id 关联到 computer_info.computer_id",
    "evidence": "【step1】:【按usage_type分组并计算每组平均使用时间】  【step2】:【将计算结果乘以10000得到每组的模拟总能耗】  【step3】:【对总能耗字段进行降序排序】",
    "english_step": "【Step1】:【Group by usage_type and calculate the average usage time per group】  【Step2】:【Multiply the result by 10000 to obtain simulated total energy consumption per group】  【Step3】:【Sort the total energy consumption field in descending order】"
  },
  {
    "db_id": "computer",
    "question": "按使用日期（usage_date）的年份分组，计算每年的平均电池健康度（%）和平均使用时长（小时），并计算电池健康度衰减率（%/h），按衰减率从高到低排序。",
    "query": "SELECT YEAR(usage_date) AS usage_year, AVG(battery_health_percent) AS avg_battery_health, AVG(usage_duration_hours) AS avg_usage_duration, AVG(battery_health_percent) / AVG(usage_duration_hours) AS battery_health_decay_rate FROM battery_usage GROUP BY usage_year ORDER BY battery_health_decay_rate DESC;",
    "type": "1",
    "idx": 174,
    "englishquestion": "Group by the year of usage date (usage_date), calculate the average battery health (%) and average usage duration (hours) for each year, and compute the battery health degradation rate (%/h), sorted by the degradation rate in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：usage_date, battery_health_percent, usage_duration_hours  \n【foreign_keys】:【computer_id → computer_info(computer_id)】",
    "evidence": "【step1】:【从 battery_usage 表中提取年份、电池健康度和使用时长字段，按年份分组计算 AVG(battery_health_percent) 和 AVG(usage_duration_hours)】  【step2】:【在分组结果的基础上，计算每个年份组的 battery_health_decay_rate（= 平均健康度/平均使用时长）】  【step3】:【对计算结果按 battery_health_decay_rate 进行降序排序输出】",
    "english_step": "【step1】: [Extract year, battery health percentage, and usage duration fields from the battery_usage table, group by year to calculate AVG(battery_health_percent) and AVG(usage_duration_hours)]  【step2】: [Based on the grouped results, calculate the battery_health_decay_rate for each year group (= average_health_percent / average_usage_duration)]  【step3】: [Sort and output the results in descending order by battery_health_decay_rate]"
  },
  {
    "db_id": "computer",
    "question": "按电池容量（battery_capacity_wh）范围分组（例如：0-50Wh, 50-100Wh, 100Wh以上），计算每个容量范围内的平均功耗（W）和平均使用时长（小时），并计算理论续航时间（小时），按续航时间从长到短排序。",
    "query": "SELECT CASE WHEN battery_capacity_wh <= 50 THEN '0-50Wh' WHEN battery_capacity_wh > 50 AND battery_capacity_wh <= 100 THEN '50-100Wh' ELSE '100Wh以上' END AS capacity_range, AVG(battery_capacity_wh) AS avg_battery_capacity, AVG(power_consumption_watts) AS avg_power_consumption, AVG(usage_duration_hours) AS avg_usage_duration, AVG(battery_capacity_wh) / AVG(power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage GROUP BY capacity_range ORDER BY theoretical_runtime_hours DESC;",
    "type": "2",
    "idx": 175,
    "englishquestion": "Group by battery capacity (battery_capacity_wh) ranges (e.g., 0-50Wh, 50-100Wh, above 100Wh), calculate the average power consumption (W) and average usage duration (hours) for each capacity range, and compute the theoretical battery life (hours). Sort by battery life from longest to shortest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：battery_capacity_wh, power_consumption_watts, usage_duration_hours 【foreign_keys】:【computer_id】",
    "evidence": "【step1】:【创建容量分组】使用CASE表达式将电池容量划分为'0-50Wh','50-100Wh','100Wh以上'三个区间，生成虚拟字段capacity_range  【step2】:【计算聚合指标】对每个分组计算电池容量平均值、功耗平均值、使用时长平均值，以及通过（电池容量/功耗）公式得出理论续航时间  【step3】:【排序整理结果】按计算得出的理论续航时间字段theoretical_runtime_hours进行降序(DESC)排序，完成最终结果组织",
    "english_step": "【step1】: 【Create capacity groupings】 Use a CASE expression to categorize battery capacity into three intervals: '0-50Wh', '50-100Wh', and 'above 100Wh', generating a virtual field named capacity_range  【step2】: 【Calculate aggregate metrics】 For each group, compute the average battery capacity, average power consumption, average usage duration, and derive theoretical runtime hours using the formula (battery_capacity / power_consumption)  【step3】: 【Sort and finalize results】 Order the results by the calculated theoretical_runtime_hours field in descending (DESC) order to complete the final output organization"
  },
  {
    "db_id": "computer",
    "question": "按使用日期（usage_date）的月份分组，计算每月的平均温度（摄氏度）和平均电池健康度（%），并分析温度对电池健康度的影响，按平均温度从高到低排序。",
    "query": "SELECT MONTH(usage_date) AS usage_month, AVG(temperature_celsius) AS avg_temperature, AVG(battery_health_percent) AS avg_battery_health FROM battery_usage GROUP BY usage_month ORDER BY avg_temperature DESC;",
    "type": "3",
    "idx": 176,
    "englishquestion": "Group by the month of the usage date (usage_date), calculate the average temperature (in Celsius) and average battery health (%) for each month, analyze the impact of temperature on battery health, and sort by average temperature from highest to lowest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：usage_date, temperature_celsius, battery_health_percent  \n【foreign_keys】: computer_id (关联computer_info.computer_id)",
    "evidence": "【step1】 : 从battery_usage表提取月份数据并计算聚合指标  通过MONTH(usage_date)提取使用月份，使用AVG函数对temperature_celsius和battery_health_percent字段进行月度平均值计算    【step2】 : 按照月份进行分组排序  通过GROUP BY usage_month将相同月份数据归组，使用ORDER BY avg_temperature DESC按温度平均值由高到低排序    【step3】 : 建立温度与续航能力的时序关联  将排序后的月度平均温度指标与对应的电池健康度指标并置排列，高温度月份与对应电池健康度百分比的分布关系形成可视化对比",
    "english_step": "【step1】: Extract monthly data from battery_usage table and calculate aggregate metrics  Use MONTH(usage_date) to extract usage months, apply AVG function to calculate monthly averages for temperature_celsius and battery_health_percent fields  【step2】: Group and sort by month  Group data by usage_month through GROUP BY, sort using ORDER BY avg_temperature DESC to arrange from highest to lowest monthly temperature averages  【step3】: Establish temporal correlation between temperature and battery performance  Juxtapose sorted monthly temperature averages with corresponding battery health percentages, visualizing the distribution relationship between high-temperature months and associated battery health metrics for comparative analysis"
  },
  {
    "db_id": "computer",
    "question": "按电池健康度（battery_health_percent）范围分组（例如：0-50%, 50-80%, 80-100%），假设所有记录的电池容量（Wh）都增加到10000Wh，计算每个健康度范围内的理论续航时间（小时），并按续航时间从长到短排序。",
    "query": "SELECT CASE WHEN battery_health_percent <= 50 THEN '0-50%' WHEN battery_health_percent > 50 AND battery_health_percent <= 80 THEN '50-80%' ELSE '80-100%' END AS health_range, 10000 / AVG(power_consumption_watts) AS theoretical_runtime_hours FROM battery_usage GROUP BY health_range ORDER BY theoretical_runtime_hours DESC;",
    "type": "4",
    "idx": 177,
    "englishquestion": "Group by battery health level (battery_health_percent) ranges (e.g., 0-50%, 50-80%, 80-100%). Assuming the battery capacity (Wh) for all records increases to 10,000Wh, calculate the theoretical endurance time (hours) within each health level range and sort by endurance time from longest to shortest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：battery_health_percent, power_consumption_watts  \n【foreign_keys】: computer_id关联computer_info.computer_id",
    "evidence": "【step1】:【使用CASE表达式将battery_health_percent归类为0-50%、50-80%、80-100%三个健康范围分组，别名为health_range】  【step2】:【按health_range分组，通过AVG(power_consumption_watts)计算平均功耗后，用固定值10000除以该平均数得到理论续航小时数】  【step3】:【对计算结果theoretical_runtime_hours字段进行降序排列输出】",
    "english_step": "【step1】: 【Use a CASE expression to categorize battery_health_percent into three health range groups: 0-50%, 50-80%, and 80-100%, aliased as health_range】  【step2】: 【Group by health_range, calculate the average power consumption with AVG(power_consumption_watts), then divide 10000 by this average to derive the theoretical runtime in hours】  【step3】: 【Sort the output in descending order based on the theoretical_runtime_hours field】"
  },
  {
    "db_id": "computer",
    "question": "按测试类型（test_type）分组，计算每种测试类型的平均功耗（W）和平均测试时长（小时），并计算总能耗（Wh），按总能耗从高到低排序。",
    "query": "SELECT test_type, AVG(power_consumption_watts) AS avg_power_consumption, 1 AS avg_test_duration, AVG(power_consumption_watts) * 1 AS total_energy_consumption_wh FROM performance_tests GROUP BY test_type ORDER BY total_energy_consumption_wh DESC;",
    "type": "1",
    "idx": 178,
    "englishquestion": "Group by test_type, calculate the average power consumption (W) and average test duration (hours) for each test type, and compute the total energy consumption (Wh), then sort by total energy consumption from highest to lowest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：test_type, power_consumption_watts  \n【foreign_keys】: 无",
    "evidence": "【step1】:【从 performance_tests 表中提取 test_type 字段并通过 AVG(power_consumption_watts) 计算每种测试类型的平均功率，同时将测试时长常量 1 硬编码为平均时长】  【step2】:【按 test_type 分组计算总能耗（用聚合后的功率均值乘以固定测试时长 1）】  【step3】:【根据公式演算的 total_energy_consumption_wh 别名对结果进行降序排序】",
    "english_step": "[Step 1]: [Extract the test_type field from the performance_tests table and calculate the average power consumption for each test type using AVG(power_consumption_watts), while hard-coding the test duration as a constant value of 1 for the average duration]  [Step 2]: [Group by test_type to calculate total energy consumption by multiplying the aggregated average power by the fixed test duration of 1]  [Step 3]: [Sort the results in descending order based on the derived alias total_energy_consumption_wh]"
  },
  {
    "db_id": "computer",
    "question": "按测试日期（test_date）的年份分组，计算每年的平均CPU得分、平均GPU得分和平均综合得分（overall_score），并计算CPU得分与GPU得分的比值，按比值从接近1:1到远离1:1排序。",
    "query": "SELECT YEAR(test_date) AS test_year, AVG(cpu_score) AS avg_cpu_score, AVG(gpu_score) AS avg_gpu_score, AVG(overall_score) AS avg_overall_score, ABS((AVG(cpu_score) / AVG(gpu_score)) - 1) AS cpu_gpu_score_ratio_difference FROM performance_tests GROUP BY test_year ORDER BY cpu_gpu_score_ratio_difference ASC;",
    "type": "2",
    "idx": 179,
    "englishquestion": "Group by the year of the test date (test_date), calculate the average CPU score, average GPU score, and average overall score (overall_score) for each year, and compute the ratio of CPU score to GPU score. Sort the results from the ratio closest to 1:1 to the furthest from 1:1.",
    "equation_analysis": "equation_analysis：avg_cpu_score=AVG(cpu_score); avg_gpu_score=AVG(gpu_score); avg_overall_score=AVG(overall_score); cpu_gpu_score_ratio_difference=ABS(AVG(cpu_score)/AVG(gpu_score)-1); 排序依据为cpu_gpu_score_ratio_difference升序（最接近1:1的比值优先）",
    "used_table_info": "【table】：【performance_tests】 【columns】：test_date, cpu_score, gpu_score, overall_score  \n【equation_analysis】：【avg_cpu_score=AVG(cpu_score); avg_gpu_score=AVG(gpu_score); avg_overall_score=AVG(overall_score); cpu_gpu_score_ratio_difference=ABS(AVG(cpu_score)/AVG(gpu_score)-1); 排序依据为cpu_gpu_score_ratio_difference升序（最接近1:1的比值优先）】",
    "evidence": "【step1】:按test_date提取年份并分组计算cpu_score、gpu_score、overall_score的平均值  【step2】:计算每年组内CPU均值和GPU均值之比的绝对差值作为排序依据  【step3】:按cpu_gpu_score_ratio_difference升序排列结果（最接近1:1的值优先）",
    "english_step": "【step1】: Extract the year from test_date and group by year to calculate the average values of cpu_score, gpu_score, and overall_score  【step2】: Calculate the absolute difference between the ratio of average CPU score to average GPU score within each annual group as the sorting criterion  【step3】: Sort the results by cpu_gpu_score_ratio_difference in ascending order (values closest to a 1:1 ratio are prioritized)"
  },
  {
    "db_id": "computer",
    "question": "按测试类型（test_type）分组，计算每种测试类型的平均温度（摄氏度）和平均测试时长（小时），并计算单位时间温升（°C/h），按单位时间温升从高到低排序。",
    "query": "SELECT test_type, AVG(temperature_celsius) AS avg_temperature, 1 AS avg_test_duration, AVG(temperature_celsius) / 1 AS temperature_increase_per_hour FROM performance_tests GROUP BY test_type ORDER BY temperature_increase_per_hour DESC;",
    "type": "3",
    "idx": 180,
    "englishquestion": "Group by test type (test_type), calculate the average temperature (in Celsius) and average test duration (in hours) for each test type, and compute the temperature rise per unit time (°C/h), sorted by temperature rise per unit time in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：test_type, temperature_celsius 【foreign_keys】: computer_id → computer_info.computer_id",
    "evidence": "【step1】:按test_type分组计算AVG(temperature_celsius)作为温度均值和固定测试时长1小时  【step2】:基于step1计算温度均值/测试时长的单位时间温升（temperature_increase_per_hour）  【step3】:按温升指标降序排列结果（因测试时长采用固定值1小时未获取实际时长数据）",
    "english_step": "【step1】: Group by test_type to calculate AVG(temperature_celsius) as avg_temperature with fixed test duration of 1 hour  【step2】: Based on step1, compute temperature_increase_per_hour as avg_temperature / test_duration (1 hour)  【step3】: Order results by temperature_increase_per_hour in descending order (using fixed 1-hour duration as actual duration data was not captured)"
  },
  {
    "db_id": "computer",
    "question": "按测试类型（test_type）分组，假设所有记录的CPU得分、GPU得分、内存得分和存储得分都增加到100000分，计算每种测试类型的综合性能提升倍数，并按提升倍数从高到低排序。",
    "query": "SELECT test_type, (100000 * 0.4 + 100000 * 0.3 + 100000 * 0.2 + 100000 * 0.1) / (AVG(cpu_score) * 0.4 + AVG(gpu_score) * 0.3 + AVG(ram_score) * 0.2 + AVG(storage_score) * 0.1) AS performance_increase_factor FROM performance_tests GROUP BY test_type ORDER BY performance_increase_factor DESC;",
    "type": "4",
    "idx": 181,
    "englishquestion": "Group by test type (test_type), assuming the CPU score, GPU score, memory score, and storage score of all records are increased to 100,000 points. Calculate the comprehensive performance improvement multiple for each test type and sort them in descending order of the improvement multiple.",
    "equation_analysis": "equation_analysis：(100,000 × (0.4+0.3+0.2+0.1)) / [原平均综合分]，其中原平均综合分=AVG(cpu_score)×0.4+AVG(gpu_score)×0.3+AVG(ram_score)×0.2+AVG(storage_score)×0.1。将四个维度固定到100,000分计算提升比。",
    "used_table_info": "【table】：【performance_tests】 【columns】：test_type, cpu_score, gpu_score, ram_score, storage_score  \n【foreign_keys】：【performance_tests.computer_id → computer_info.computer_id】  \n【equation_analysis】：(100,000 × (0.4+0.3+0.2+0.1)) / [原平均综合分]，其中原平均综合分=AVG(cpu_score)×0.4+AVG(gpu_score)×0.3+AVG(ram_score)×0.2+AVG(storage_score)×0.1。将四个维度固定到100,000分计算提升比。",
    "evidence": "【step1】:【按test_type分组并计算各部件原始平均分】  【step2】:【将每个测试类型各部件分固定为100000，计算((CPU*0.4+GPU*0.3+RAM*0.2+STORAGE*0.1)/(原始平均组合权重))提升倍数】  【step3】:【按计算结果降序排列结果集】",
    "english_step": "【step1】: 【Group by test_type and calculate the original average scores for each component】  【step2】: 【Normalize each component score for every test type to 100000, then compute the improvement factor: ((CPU*0.4 + GPU*0.3 + RAM*0.2 + STORAGE*0.1) / original average combined weight)】  【step3】: 【Sort the result set in descending order based on the calculated improvement factor】"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的CPU基础频率（GHz）大于3.0GHz的电脑型号，并排除那些CPU最大频率（GHz）小于4.0GHz的电脑型号，返回差集结果。",
    "query": "SELECT manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz FROM computer_info WHERE cpu_base_frequency_ghz > 3.0 AND cpu_max_frequency_ghz < 4.0;",
    "type": "1",
    "idx": 182,
    "englishquestion": "Query all computer models with a CPU base frequency (GHz) greater than 3.0GHz, and exclude those computer models with a CPU maximum frequency (GHz) less than 4.0GHz, returning the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：manufacturer, model, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【筛选所有CPU基础频率 > 3.0GHz的记录】  【step2】:【在步骤1结果中排除CPU最大频率 >=4.0GHz的记录】  【step3】:【从最终结果中提取manufacturer, model等指定字段】",
    "english_step": "【step1】: 【Filter all records where CPU base frequency > 3.0GHz】  【step2】: 【Exclude records with CPU max frequency >= 4.0GHz from step1 results】  【step3】: 【Extract manufacturer, model, and other specified fields from the final results】"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的内存大小（GB）大于16GB的电脑型号，并排除那些存储大小（GB）小于512GB的电脑型号，返回差集结果。",
    "query": "SELECT manufacturer, model, ram_size_gb, storage_size_gb FROM computer_info WHERE ram_size_gb > 16 AND storage_size_gb < 512;",
    "type": "2",
    "idx": 183,
    "englishquestion": "Query all computer models with memory size (GB) greater than 16GB, and exclude those computer models with storage size (GB) less than 512GB, returning the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：manufacturer, model, ram_size_gb, storage_size_gb  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【从computer_info表中筛选出ram_size_gb大于16的所有记录】  【step2】:【在上述结果基础上添加storage_size_gb不小于512的过滤条件】  【step3】:【通过AND逻辑连接两个条件后投影目标字段】  *注：原SQL条件存在逻辑问题，根据问题描述应排除storage_size_gb < 512的记录，但SQL中写成storage_size_gb < 512，实际需改为storage_size_gb >= 512。回答基于用户给定的原SQL结构逆向推导步骤。*",
    "english_step": "【step1】: 【Select all records from computer_info table where ram_size_gb > 16】  【step2】: 【Add filter condition for storage_size_gb >= 512 based on the previous result】  【step3】: 【Project target fields after combining both conditions with AND logic】  *Note: The original SQL condition had a logical issue. According to the problem description, records with storage_size_gb < 512 should be excluded, but the SQL incorrectly used storage_size_gb < 512. This was corrected to storage_size_gb >= 512. The response reconstructs steps based on the user-provided SQL structure through reverse deduction.*"
  },
  {
    "db_id": "computer",
    "question": "查询所有电脑的屏幕尺寸（inches）大于15英寸的电脑型号，并排除那些重量（kg）大于2.5kg的电脑型号，返回差集结果。",
    "query": "SELECT manufacturer, model, screen_size_inches, weight_kg FROM computer_info WHERE screen_size_inches > 15 AND weight_kg > 2.5;",
    "type": "3",
    "idx": 184,
    "englishquestion": "Query all computer models with screen size (inches) greater than 15 inches, and exclude those models with weight (kg) exceeding 2.5 kg, returning the difference set result.",
    "equation_analysis": "equation_analysis：screen_size_inches > 15 ∧ weight_kg > 2.5",
    "used_table_info": "【table】：【computer_info】 【columns】：manufacturer, model, screen_size_inches, weight_kg 【foreign_keys】：【computer_info.computer_id → battery_usage.computer_id / performance_tests.computer_id / usage_records.computer_id】 【equation_analysis】：【screen_size_inches > 15 ∧ weight_kg > 2.5】",
    "evidence": "【step1】:【筛选computer_info表中屏幕尺寸大于15英寸的记录：WHERE screen_size_inches > 15】  【step2】:【从step1中排除重量超过2.5kg的记录（实际逻辑错误，原条件应为weight_kg ≤ 2.5）：AND weight_kg > 2.5】（最终结果产生与问题描述相反的矛盾）  注：按问题描述的逻辑，正确条件应为 *weight_kg ≤ 2.5*",
    "english_step": "【step1】:【Filter records in computer_info table with screen size greater than 15 inches: WHERE screen_size_inches > 15】  【step2】:【Exclude records weighing over 2.5kg from step1 (original logic error: correct condition should be weight_kg ≤ 2.5): AND weight_kg > 2.5】 (final results contradict problem description)  Note: According to problem description logic, the correct condition should be *weight_kg ≤ 2.5*"
  },
  {
    "db_id": "computer",
    "question": "假设所有电脑的电池容量（Wh）都增加到200Wh，查询这些电脑型号中CPU核心数（cpu_cores）小于8核心的电脑型号，并返回差集结果。",
    "query": "SELECT manufacturer, model, battery_capacity_wh, cpu_cores FROM computer_info WHERE cpu_cores < 8;",
    "type": "4",
    "idx": 185,
    "englishquestion": "Assuming the battery capacity (Wh) of all computers is increased to 200Wh, query the computer models with CPU cores (cpu_cores) less than 8 cores, and return the difference set results.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：manufacturer, model, battery_capacity_wh, cpu_cores  \n【foreign_keys】: 【none】",
    "evidence": "【step1】:【筛选computer_info表中满足cpu_cores <8的记录】  【step2】:【构造虚拟列，将battery_capacity_wh固定输出为200WH】  【step3】:【投影manufacturer、model、虚拟电池容量、真实cpu核心数】",
    "english_step": "【step1】: [Filter records in the computer_info table where cpu_cores < 8]  【step2】: [Construct a virtual column, fixing battery_capacity_wh to output as 200WH]  【step3】: [Project manufacturer, model, virtual battery capacity, and actual CPU core count]"
  },
  {
    "db_id": "computer",
    "question": "查询所有使用记录中功耗（W）大于100W且使用时长（小时）大于2小时的记录，并排除那些总能耗（Wh = 功耗 * 使用时长）小于500Wh的记录，返回差集结果。",
    "query": "SELECT computer_id, power_consumption_watts, usage_duration_hours, (power_consumption_watts * usage_duration_hours) AS total_energy_consumption_wh FROM usage_records WHERE power_consumption_watts > 100 AND usage_duration_hours > 2 AND (power_consumption_watts * usage_duration_hours) < 500;",
    "type": "1",
    "idx": 186,
    "englishquestion": "Query all usage records where the power consumption (W) is greater than 100W and the usage duration (hours) is greater than 2 hours, and exclude those records with a total energy consumption (Wh = power consumption * usage duration) less than 500Wh, returning the set difference result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours  \n【foreign_keys】: computer_id → computer_info(computer_id)",
    "evidence": "【step1】:【从usage_records表筛选基础条件：power_consumption_watts > 100 AND usage_duration_hours > 2】  【step2】:【计算总能耗并进行二次筛选：应用(power_consumption_watts * usage_duration_hours) < 500条件】  【step3】:【最终投影选择具体字段，包含计算的总能耗列total_energy_consumption_wh】",
    "english_step": "【step1】:【Filter from the usage_records table based on conditions: power_consumption_watts > 100 AND usage_duration_hours > 2】  【step2】:【Calculate total energy consumption and apply secondary filtering: enforce condition (power_consumption_watts * usage_duration_hours) < 500】  【step3】:【Final projection selecting specific fields, including the calculated total_energy_consumption_wh column】"
  },
  {
    "db_id": "computer",
    "question": "查询所有使用记录中CPU使用率（%）大于80%且GPU使用率（%）大于60%的记录，并排除那些CPU与GPU使用率差值（|CPU使用率 - GPU使用率|）大于20%的记录，返回差集结果。",
    "query": "SELECT computer_id, cpu_usage_percent, gpu_usage_percent, ABS(cpu_usage_percent - gpu_usage_percent) AS usage_difference FROM usage_records WHERE cpu_usage_percent > 80 AND gpu_usage_percent > 60 AND ABS(cpu_usage_percent - gpu_usage_percent) > 20;",
    "type": "2",
    "idx": 187,
    "englishquestion": "Query all usage records where the CPU usage (%) is greater than 80% and GPU usage (%) is greater than 60%, and exclude those records where the difference between CPU and GPU usage (|CPU usage - GPU usage|) is greater than 20%, then return the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, cpu_usage_percent, gpu_usage_percent 【foreign_keys】: computer_id → computer_info.computer_id",
    "evidence": "【step1】:【筛选出CPU>80%且GPU>60%的基础记录】  【step2】:【计算CPU-GPU差值并应用绝对值条件】  【step3】:【合并两条件输出差集结果（最终过滤差值>20%的记录）】",
    "english_step": "【step1】: 【Filter out base records where CPU > 80% and GPU > 60%】  【step2】: 【Calculate the CPU-GPU difference and apply the absolute value condition】  【step3】: 【Merge the two conditions to output the difference set result (final filtering of records with a difference > 20%)】"
  },
  {
    "db_id": "computer",
    "question": "查询所有使用记录中温度（摄氏度）大于70°C且使用时长（小时）大于1小时的记录，并排除那些单位时间温升（°C/h = 温度 / 使用时长）小于10°C/h的记录，返回差集结果。",
    "query": "SELECT computer_id, temperature_celsius, usage_duration_hours, (temperature_celsius / usage_duration_hours) AS temperature_increase_per_hour FROM usage_records WHERE temperature_celsius > 70 AND usage_duration_hours > 1 AND (temperature_celsius / usage_duration_hours) < 10;",
    "type": "3",
    "idx": 188,
    "englishquestion": "Query all usage records where the temperature (in Celsius) is greater than 70°C and the usage duration (in hours) is greater than 1 hour, and exclude those records with a temperature rise rate per unit time (°C/h = temperature / usage duration) less than 10°C/h, returning the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, temperature_celsius, usage_duration_hours  \n【foreign_keys】:【computer_id → computer_info.computer_id】",
    "evidence": "【step1】:【从usage_records表筛选出基础条件：temperature_celsius>70且usage_duration_hours>1的记录】  【step2】:【对step1结果计算单位时间温升(temperature_celsius/usage_duration_hours)，并过滤温升<10的结果】  【step3】:【投影最终需要返回的字段：computer_id, temperature_celsius, usage_duration_hours及计算的temperature_increase_per_hour字段】",
    "english_step": "【step1】:【Filter records from the usage_records table where temperature_celsius > 70 and usage_duration_hours > 1】  【step2】:【Calculate temperature increase per hour (temperature_celsius / usage_duration_hours) for results from step1, then filter results where temperature increase per hour < 10】  【step3】:【Select final output fields: computer_id, temperature_celsius, usage_duration_hours, and the calculated temperature_increase_per_hour】"
  },
  {
    "db_id": "computer",
    "question": "假设所有使用记录中的功耗（W）都增加到1000W，查询这些记录中总能耗（Wh = 功耗 * 使用时长）大于5000Wh的记录，并排除那些温度（摄氏度）小于50°C的记录，返回差集结果。",
    "query": "SELECT computer_id, 1000 AS assumed_power_consumption, usage_duration_hours, (1000 * usage_duration_hours) AS total_energy_consumption_wh, temperature_celsius FROM usage_records WHERE (1000 * usage_duration_hours) > 5000 AND temperature_celsius < 50;",
    "type": "4",
    "idx": 189,
    "englishquestion": "Assuming the power consumption (W) in all usage records increases to 1000W, query the records where the total energy consumption (Wh = power consumption * usage duration) exceeds 5000Wh, and exclude those records with a temperature (in Celsius) below 50°C, then return the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：computer_id, usage_duration_hours, temperature_celsius  \n【foreign keys】: computer_id关联computer_info.computer_id",
    "evidence": "【step1】:【将所有记录的功耗设为1000W，并计算总能耗 (1000 * usage_duration_hours)】  【step2】:【筛选总能耗超过5000Wh的记录 (WHERE (1000 * usage_duration_hours) > 5000)】  【step3】:【再过滤温度≥50°C的记录形成差集 (但原句存在条件矛盾，实际SQL用 temperature_celsius < 50，此处应修正为 >=50)】",
    "english_step": "【step1】: 【Set the power consumption of all records to 1000W and calculate total energy consumption (1000 * usage_duration_hours)】  【step2】: 【Filter records with total energy consumption exceeding 5000Wh (WHERE (1000 * usage_duration_hours) > 5000)】  【step3】: 【Further filter records with temperature ≥50°C to form a difference set (Note: Original condition conflict exists, actual SQL uses temperature_celsius < 50. This should be corrected to >=50)】"
  },
  {
    "db_id": "computer",
    "question": "查询所有电池使用记录中电池健康度（%）大于80%的记录，并排除那些单位时间能耗（Wh/h = 功耗 / 使用时长）大于50Wh/h的记录，返回差集结果。",
    "query": "SELECT computer_id, battery_health_percent, power_consumption_watts, usage_duration_hours, (power_consumption_watts / usage_duration_hours) AS energy_consumption_per_hour FROM battery_usage WHERE battery_health_percent > 80 AND (power_consumption_watts / usage_duration_hours) > 50;",
    "type": "1",
    "idx": 190,
    "englishquestion": "Query all battery usage records where the battery health (%) is greater than 80%, and exclude those records with an energy consumption per unit time (Wh/h = power consumption / usage duration) greater than 50Wh/h, then return the difference result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, battery_health_percent, power_consumption_watts, usage_duration_hours 【foreign_keys】: computer_id关联computer_info表",
    "evidence": "【step1】:【从battery_usage表中提取基础字段并计算单位时间能耗，生成包含computer_id、battery_health_percent、power_consumption_watts、usage_duration_hours及每小时能耗的中间结果集】  【step2】:【对中间结果集应用首层过滤条件，筛选电池健康度超过80%的记录】  【step3】:【结合第二层过滤条件排除单位时间能耗未超过50Wh/h的记录，最终得到健康度>80%且高能耗的差集结果】(注: 该步骤逻辑与问题描述中的排除方向相反，实际应为能耗>50的负过滤条件)",
    "english_step": "【step1】:【Extract base fields from battery_usage table and calculate energy consumption per hour, generating an intermediate result set containing computer_id, battery_health_percent, power_consumption_watts, usage_duration_hours, and per-hour energy consumption】  【step2】:【Apply first-level filtering to the intermediate result set, retaining records where battery health percentage exceeds 80%】  【step3】:【Combine second-level filtering by excluding records with per-hour energy consumption ≤50Wh/h, yielding the final difference set of devices with health >80% and high energy consumption】 (Note: The exclusion logic in this step is inverted compared to the problem description; the actual implementation should use a negative filter for energy consumption >50)"
  },
  {
    "db_id": "computer",
    "question": "查询所有电池使用记录中电池容量（Wh）大于60Wh的记录，并排除那些电池健康度衰减率（%/h = (100 - 电池健康度) / 使用时长）大于2%/h的记录，返回差集结果。",
    "query": "SELECT computer_id, battery_capacity_wh, battery_health_percent, usage_duration_hours, ((100 - battery_health_percent) / usage_duration_hours) AS health_decay_rate_per_hour FROM battery_usage WHERE battery_capacity_wh > 60 AND ((100 - battery_health_percent) / usage_duration_hours) > 2;",
    "type": "2",
    "idx": 191,
    "englishquestion": "Query all battery usage records where the battery capacity (Wh) is greater than 60Wh, and exclude those records where the battery health degradation rate (%/h = (100 - battery health) / usage duration) is greater than 2%/h, then return the difference set results.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, battery_capacity_wh, battery_health_percent, usage_duration_hours  \n【foreign_keys】:【battery_usage.computer_id ➔ computer_info.computer_id】",
    "evidence": "【step1】:【从battery_usage表中筛选battery_capacity_wh > 60的原始记录】  【step2】:【计算筛选结果中的电池健康度衰减率(100 - battery_health_percent)/usage_duration_hours】  【step3】:【在步骤1和步骤2的基础上，排除衰减率 <= 2%/h的记录，保留最终要求的差集结果】",
    "english_step": "【step1】:【Filter raw records from the battery_usage table where battery_capacity_wh > 60】  【step2】:【Calculate the battery health decay rate as (100 - battery_health_percent) / usage_duration_hours for the filtered results】  【step3】:【Based on steps 1 and 2, exclude records with decay rate <= 2%/h and retain the resulting difference set】"
  },
  {
    "db_id": "computer",
    "question": "查询所有电池使用记录中温度（摄氏度）大于40°C的记录，并排除那些使用时长（小时）小于0.5小时的记录，返回差集结果。",
    "query": "SELECT computer_id, temperature_celsius, usage_duration_hours FROM battery_usage WHERE temperature_celsius > 40 AND usage_duration_hours < 0.5;",
    "type": "3",
    "idx": 192,
    "englishquestion": "Retrieve all battery usage records where the temperature (in Celsius) exceeds 40°C, and exclude those records with a usage duration (in hours) less than 0.5 hours, then return the resulting difference set.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, temperature_celsius, usage_duration_hours  \n【foreign_keys】: computer_id → computer_info(computer_id)",
    "evidence": "【step1】:从电池使用记录表（battery_usage）中筛选所有温度（temperature_celsius）大于40°C的记录  【step2】:在步骤1的结果中，排除使用时长（usage_duration_hours）不小于0.5小时的记录（即保留usage_duration_hours < 0.5的条件）  【step3】:提取最终结果的computer_id、temperature_celsius、usage_duration_hours字段",
    "english_step": "【step1】: Retrieve all records from the battery_usage table where temperature_celsius is greater than 40°C  【step2】: From the results of Step 1, exclude records where usage_duration_hours is not less than 0.5 hours (i.e., retain records where usage_duration_hours < 0.5)  【step3】: Extract the computer_id, temperature_celsius, and usage_duration_hours fields from the final results"
  },
  {
    "db_id": "computer",
    "question": "假设所有电池使用记录中的电池容量（Wh）都增加到500Wh，查询这些记录中单位时间能耗（Wh/h = 功耗 / 使用时长）大于100Wh/h的记录，并排除那些电池健康度（%）小于90%的记录，返回差集结果。",
    "query": "SELECT computer_id, 500 AS assumed_battery_capacity, power_consumption_watts, usage_duration_hours, (power_consumption_watts / usage_duration_hours) AS energy_consumption_per_hour, battery_health_percent FROM battery_usage WHERE (power_consumption_watts / usage_duration_hours) > 100 AND battery_health_percent < 90;",
    "type": "4",
    "idx": 193,
    "englishquestion": "Assuming the battery capacity (Wh) in all usage records is increased to 500Wh, query the records where the energy consumption per unit time (Wh/h = power consumption / usage duration) is greater than 100Wh/h, and exclude those records with battery health (%) less than 90%, then return the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, power_consumption_watts, usage_duration_hours, battery_health_percent 【foreign_keys】: computer_id -> computer_info(computer_id)",
    "evidence": "【step1】:【从 battery_usage 表提取原始记录，为每行动态计算能耗指标 (power_consumption_watts/usage_duration_hours)】  【step2】:【应用双重筛选条件：单位时间能耗 > 100Wh/h 且 电池健康度 < 90%】  【step3】:【将电池容量固定映射为500，最终投影 computer_id、假设容量、功耗、时长、计算后的能耗值、电池健康度字段】",
    "english_step": "【step1】: Extract raw records from battery_usage table, dynamically compute energy consumption metric (power_consumption_watts / usage_duration_hours) per row  【step2】: Apply dual filtering criteria: energy-per-hour > 100Wh/h AND battery_health < 90%  【step3】: Fix battery capacity mapping as 500, final projection includes computer_id, assumed_capacity, power_consumption, duration, computed_energy_value, battery_health fields"
  },
  {
    "db_id": "computer",
    "question": "查询所有性能测试记录中功耗（W）大于200W且测试时长（小时）大于1小时的记录，并排除那些总能耗（Wh = 功耗 * 测试时长）小于1000Wh的记录，返回差集结果。",
    "query": "SELECT computer_id, power_consumption_watts, 1 AS test_duration_hours, (power_consumption_watts * 1) AS total_energy_consumption_wh FROM performance_tests WHERE power_consumption_watts > 200 AND 1 > 1 AND (power_consumption_watts * 1) < 1000;",
    "type": "1",
    "idx": 194,
    "englishquestion": "Query all performance test records where the power consumption (W) is greater than 200W and the test duration (hours) is greater than 1 hour, and exclude those records with total energy consumption (Wh = power consumption * test duration) less than 1000Wh, then return the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, power_consumption_watts  \n【foreign_keys】: computer_id关联computer_info",
    "evidence": "【step1】:【从performance_tests表筛选出功耗大于200W的记录】  【step2】:【对结果集应用测试时长>1小时的条件（但因硬编码1>1导致无效过滤）】  【step3】:【计算并过滤总能耗<1000Wh（因WHERE条件冲突最终结果为空集）】",
    "english_step": "【step1】:【Filter records from the performance_tests table where power consumption exceeds 200W】  【step2】:【Apply a test duration >1 hour condition to the result set (but invalid filtering occurs due to hard-coded 1>1)】  【step3】:【Calculate and filter total energy consumption <1000Wh (conflicting WHERE clause results in empty final output)】"
  },
  {
    "db_id": "computer",
    "question": "查询所有性能测试记录中CPU得分大于8000且GPU得分大于9000的记录，并排除那些综合得分（overall_score = 0.4 * CPU得分 + 0.3 * GPU得分 + 0.2 * 内存得分 + 0.1 * 存储得分）小于8500的记录，返回差集结果。",
    "query": "SELECT computer_id, cpu_score, gpu_score, ram_score, storage_score, (0.4 * cpu_score + 0.3 * gpu_score + 0.2 * ram_score + 0.1 * storage_score) AS overall_score FROM performance_tests WHERE cpu_score > 8000 AND gpu_score > 9000 AND (0.4 * cpu_score + 0.3 * gpu_score + 0.2 * ram_score + 0.1 * storage_score) < 8500;",
    "type": "2",
    "idx": 195,
    "englishquestion": "Query all performance test records where the CPU score is greater than 8000 and the GPU score is greater than 9000, and exclude those records where the overall score (overall_score = 0.4 * CPU score + 0.3 * GPU score + 0.2 * memory score + 0.1 * storage score) is less than 8500, then return the difference result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, cpu_score, gpu_score, ram_score, storage_score  \n【foreign_keys】:【performance_tests.computer_id → computer_info.computer_id】",
    "evidence": "【step1】: 筛选出performance_tests表满足cpu_score > 8000且gpu_score > 9000的基础记录，选择需要的字段  【step2】: 在第一步的结果中，使用公式计算综合得分并通过HAVING或WHERE子句过滤overall_score < 8500的记录  【step3】: 根据字段要求格式投影最终结果集，包含computer_id及各部件得分、通过计算表达式返回overall_score列",
    "english_step": "【step1】: Filter base records from the performance_tests table where cpu_score > 8000 and gpu_score > 9000, selecting required fields  【step2】: Calculate composite score using a formula in the first-step results, then filter records with overall_score < 8500 through HAVING or WHERE clause  【step3】: Project final result set according to field requirements format, including computer_id with component scores and returning overall_score column through calculation expression"
  },
  {
    "db_id": "computer",
    "question": "查询所有性能测试记录中温度（摄氏度）大于75°C且测试时长（小时）大于1小时的记录，并排除那些单位时间温升（°C/h = 温度 / 测试时长）小于10°C/h的记录，返回差集结果。",
    "query": "SELECT computer_id, temperature_celsius, 1 AS test_duration_hours, (temperature_celsius / 1) AS temperature_increase_per_hour FROM performance_tests WHERE temperature_celsius > 75 AND 1 > 1 AND (temperature_celsius / 1) < 10;",
    "type": "3",
    "idx": 196,
    "englishquestion": "Query all performance test records where the temperature (in degrees Celsius) is greater than 75°C and the test duration (in hours) is greater than 1 hour, and exclude those records where the temperature rise per unit time (°C/h = temperature / test duration) is less than 10°C/h, then return the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, temperature_celsius  \n【foreign_keys】: computer_id 关联到 computer_info.computer_id",
    "evidence": "【step1】:【筛选temperature_celsius >75且测试时长字段存在基础错误条件（1>1永远不成立）的记录。当前SQL硬编码test_duration_hours=1，实际需要关联usage_records表的usage_duration_hours字段】  【step2】:【计算温度与真实测试时长的比值（temperature_celsius/usage_duration_hours），但原SQL错误使用固定值1导致逻辑失效】  【step3】:【排除单位温升<10的条件实际仅作用于虚拟无效数据，正确逻辑需通过JOIN关联usage_records表获取实际usage_duration_hours实现完整查询】  （实际该SQL严重字段不匹配，硬编码参数导致逻辑矛盾。正确路径需关联usage_records表获取真实测试时长字段，并重构WHERE子句条件）",
    "english_step": "【step1】: [Filter records where temperature_celsius > 75 and the test duration field contains a fundamental error condition (1>1 which is permanently false). The current SQL hard-codes test_duration_hours=1, while it should actually reference the usage_duration_hours field from the usage_records table via association]  【step2】: [Calculate the temperature-to-actual-test-duration ratio (temperature_celsius/usage_duration_hours), but the original SQL incorrectly uses a fixed value 1, invalidating the logic]  【step3】: [The condition to exclude unit temperature rise <10 only applies to virtual invalid data. Correct logic requires JOINing the usage_records table to obtain actual usage_duration_hours for a complete query]  (The current SQL has severe field mismatches and hard-coded parameters causing logical contradictions. The correct approach requires associating the usage_records table to obtain the real test duration field and reconstructing WHERE clause conditions)"
  },
  {
    "db_id": "computer",
    "question": "假设所有性能测试记录中的功耗（W）都增加到1000W，查询这些记录中总能耗（Wh = 功耗 * 测试时长）大于5000Wh的记录，并排除那些散热效率（W/°C = 功耗 / (温度 - 环境温度)）小于20W/°C的记录，返回差集结果。",
    "query": "SELECT computer_id, 1000 AS assumed_power_consumption, 1 AS test_duration_hours, (1000 * 1) AS total_energy_consumption_wh, temperature_celsius, (1000 / (temperature_celsius - 25)) AS cooling_efficiency_w_per_c FROM performance_tests WHERE (1000 * 1) > 5000 AND (1000 / (temperature_celsius - 25)) < 20;",
    "type": "4",
    "idx": 197,
    "englishquestion": "Assuming the power consumption (W) in all performance test records is increased to 1000W, query those records where the total energy consumption (Wh = power consumption * test duration) is greater than 5000Wh, and exclude records with heat dissipation efficiency (W/°C = power consumption / (temperature - ambient temperature)) less than 20W/°C, then return the difference set result.",
    "equation_analysis": "",
    "used_table_info": "【table】：【performance_tests】 【columns】：computer_id, temperature_celsius  \n【foreign_keys】:【computer_id关联computer_info表的computer_id】",
    "evidence": "【step1】:【从performance_tests表投影计算字段，将功耗强制设为1000瓦，测试时长固定为1小时，计算总能耗 = 1000*1 和 散热效率 = 1000/(温度-25)】  【step2】:【执行WHERE双条件过滤，(总能耗 > 5000) 且 (散热效率 < 20)】  【step3】:【空步骤（该查询逻辑在两步内完成，无嵌套/关联/排序操作）】",
    "english_step": "【step1】: 【From the performance_tests table, project computed fields: set power consumption to a fixed 1000W, test duration fixed at 1 hour, calculate total energy consumption = 1000*1 and cooling efficiency = 1000/(temperature - 25)】  【step2】: 【Apply WHERE clause with dual conditions: (total energy consumption > 5000) AND (cooling efficiency < 20)】  【step3】: 【Empty step (The query logic is completed in two steps with no nested/joins/sorting operations)】"
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑的CPU基础频率为2.5 GHz，最大频率为4.0 GHz，且在使用过程中CPU使用率为80%，功耗为95瓦特。请问在该使用率下，CPU的实际频率是多少？并计算其功耗与频率的关系。",
    "query": "SELECT ci.computer_id, ci.cpu_base_frequency_ghz, ci.cpu_max_frequency_ghz, ur.cpu_usage_percent, ur.power_consumption_watts, ci.cpu_base_frequency_ghz + (ci.cpu_max_frequency_ghz - ci.cpu_base_frequency_ghz) * (ur.cpu_usage_percent / 100) AS actual_frequency_ghz, ur.power_consumption_watts / (ci.cpu_base_frequency_ghz + (ci.cpu_max_frequency_ghz - ci.cpu_base_frequency_ghz) * (ur.cpu_usage_percent / 100)) AS power_frequency_ratio FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 80 AND ur.power_consumption_watts = 95;",
    "type": "1",
    "idx": 198,
    "englishquestion": "Assuming a computer's CPU has a base frequency of 2.5 GHz and a maximum frequency of 4.0 GHz, with a CPU usage of 80% during operation and a power consumption of 95 watts. What is the actual frequency of the CPU at this usage level? And calculate the relationship between power consumption and frequency.",
    "equation_analysis": "equation_analysis：  1. actual_frequency_ghz = cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100)     - 基于CPU使用率在基础频率和最大频率之间线性插值计算实际频率  2. power_frequency_ratio = power_consumption_watts / actual_frequency_ghz     - 功耗与频率的关系定义为总功耗与实际频率的线性比值，表示单位频率的功耗量",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【table】：【usage_records】 【columns】：computer_id, cpu_usage_percent, power_consumption_watts  \n【foreign_keys】：computer_info.computer_id → usage_records.computer_id  \n【equation_analysis】：  \n1. actual_frequency_ghz = cpu_base_frequency_ghz + (cpu_max_frequency_ghz - cpu_base_frequency_ghz) * (cpu_usage_percent / 100)  \n   - 基于CPU使用率在基础频率和最大频率之间线性插值计算实际频率  \n2. power_frequency_ratio = power_consumption_watts / actual_frequency_ghz  \n   - 功耗与频率的关系定义为总功耗与实际频率的线性比值，表示单位频率的功耗量",
    "evidence": "【step1】:【通过computer_id连接computer_info和usage_records表获取基础性能数据】  【step2】:【筛选CPU使用率80%且功耗95瓦特的记录】  【step3】:【使用线性插值公式计算实际频率(基础+(最大-基础)*使用率%)，并计算单位频率功耗(总功耗/实际频率)】",
    "english_step": "【step1】: 【Join computer_info and usage_records tables via computer_id to obtain basic performance data】  【step2】: 【Filter records with CPU usage ≥80% and power consumption =95 watts】  【step3】: 【Calculate actual frequency using linear interpolation formula (base + (max - base) * usage%), then compute power per frequency unit (total power / actual frequency)】"
  },
  {
    "db_id": "computer",
    "question": "一台电脑的电池容量为56 Wh，使用时长记录显示其使用时间为4小时，功耗为14瓦特。请问该电脑的电池健康度是否正常？并解释电池健康度的计算方法。",
    "query": "SELECT computer_info.computer_id, ram_size_gb, ram_usage_percent, ram_type, ram_size_gb * (ram_usage_percent / 100) * 25.6 AS current_memory_bandwidth_gbs, ram_size_gb * 25.6 AS max_memory_bandwidth_gbs, (ram_size_gb * (ram_usage_percent / 100) * 25.6) / (ram_size_gb * 25.6) AS memory_bandwidth_usage_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE ram_size_gb = 16 AND ram_usage_percent = 75 AND ram_type = 'DDR4';",
    "type": "2",
    "idx": 199,
    "englishquestion": "The battery capacity of a computer is 56 Wh, and the usage record shows a usage time of 4 hours with a power consumption of 14 watts. Is the battery health of this computer normal? And explain the calculation method of battery health.",
    "equation_analysis": "equation_analysis：current_memory_bandwidth_gbs = ram_size_gb * (ram_usage_percent / 100) * 25.6；max_memory_bandwidth_gbs = ram_size_gb * 25.6；memory_bandwidth_usage_ratio = (current_memory_bandwidth_gbs / max_memory_bandwidth_gbs) = (ram_usage_percent / 100)",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, ram_size_gb, ram_type  \n【table】：【usage_records】 【columns】：computer_id, ram_usage_percent  \n【foreign_keys】：computer_info.computer_id → usage_records.computer_id  \n【equation_analysis】：current_memory_bandwidth_gbs = ram_size_gb * (ram_usage_percent / 100) * 25.6；max_memory_bandwidth_gbs = ram_size_gb * 25.6；memory_bandwidth_usage_ratio = (current_memory_bandwidth_gbs / max_memory_bandwidth_gbs) = (ram_usage_percent / 100)",
    "evidence": "【step1】:【通过JOIN关联computer_info和usage_records表，根据WHERE条件筛选ram_size_gb=16GB、ram_usage_percent=75%、ram_type='DDR4'的计算机】  【step2】:【计算current_memory_bandwidth_gbs(16GB * 75% * 25.6GB/s)和max_memory_bandwidth_gbs(16GB * 25.6GB/s)】  【step3】:【通过(current_gbs/max_gbs)得到memory_bandwidth_usage_ratio比值】  附加说明：查询未含任何电池健康度相关字段（如battery_health_percent），与问题描述的电池计算无关，可能提供的信息不匹配。理论电池健康度＝(实际容量/设计容量)×100%，本案中健康度＝(实际56Wh)/(设计容量14w×4h=56wh)*100=100%",
    "english_step": "【step1】:【Join the computer_info and usage_records tables, filtering computers with ram_size_gb=16GB, ram_usage_percent=75%, and ram_type='DDR4' based on WHERE conditions】  【step2】:【Calculate current_memory_bandwidth_gbs (16GB * 75% * 25.6GB/s) and max_memory_bandwidth_gbs (16GB * 25.6GB/s)】  【step3】:【Derive memory_bandwidth_usage_ratio using (current_gbs / max_gbs)】  Additional notes: The query does not include battery health-related fields (e.g., battery_health_percent) and is unrelated to battery calculations described in the problem, potentially providing mismatched information. Theoretical battery health = (actual capacity / design capacity) × 100%. In this case: health = (actual 56Wh) / (design capacity 14W × 4h = 56Wh) × 100 = 100%."
  },
  {
    "db_id": "computer",
    "question": "一台电脑的电池容量为56 Wh，使用时长记录显示其使用时间为4小时，功耗为14瓦特。请问该电脑的电池健康度是否正常？并解释电池健康度的计算方法。",
    "query": "SELECT computer_info.computer_id, computer_info.battery_capacity_wh, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, CASE WHEN (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 >= 80 THEN '正常' ELSE '不正常' END AS battery_health_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE computer_info.battery_capacity_wh = 56 AND battery_usage.usage_duration_hours = 4 AND battery_usage.power_consumption_watts = 14;",
    "type": "3",
    "idx": 200,
    "englishquestion": "Translation:\n\nThe battery capacity of a computer is 56 Wh, and the usage record shows a runtime of 4 hours with a power consumption of 14 watts. Is the battery health of this computer normal? Please also explain how battery health is calculated.",
    "equation_analysis": "equation_analysis：  battery_health_percent = (usage_duration_hours × power_consumption_watts / battery_capacity_wh) × 100  判定条件：计算结果 ≥80% 为正常，否则不正常",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【battery_usage】 【columns】：computer_id, usage_duration_hours, power_consumption_watts  \n【foreign_keys】：computer_info.computer_id → battery_usage.computer_id  \n【equation_analysis】：  \nbattery_health_percent = (usage_duration_hours × power_consumption_watts / battery_capacity_wh) × 100  \n判定条件：计算结果 ≥80% 为正常，否则不正常",
    "evidence": "【step1】:【内连接 computer_info 和 battery_usage 表】通过 computer_id 进行关联匹配，组合计算机基本信息和电池使用数据  【step2】:【应用筛选条件】过滤电池容量=56Wh、使用时长=4小时、功耗=14W的精准匹配记录  【step3】:【执行核心计算与逻辑判断】先计算公式 (使用时长*功耗)/电池容量*100 得出健康度百分比，再用CASE表达式判断≥80%时为\"正常\"，否则标记\"不正常\"",
    "english_step": "【step1】:【INNER JOIN computer_info and battery_usage tables】Linked via computer_id to combine basic computer information with battery usage data  【step2】:【Apply filtering conditions】Filter records with exact matches for battery capacity=56Wh, usage duration=4 hours, and power consumption=14W  【step3】:【Execute core calculation & logical judgment】First calculate formula (usage_duration * power_consumption)/battery_capacity * 100 to get health percentage, then use CASE expression: mark as \"Normal\" if ≥80%, otherwise \"Abnormal\""
  },
  {
    "db_id": "computer",
    "question": "假设一台电脑的CPU核心数为128，线程数为256，基础频率为1.0 GHz，最大频率为10.0 GHz，且在使用过程中CPU使用率为200%。请问在该使用率下，CPU的实际频率是多少？并计算其功耗与频率的关系。",
    "query": "SELECT computer_info.computer_id, computer_info.cpu_cores, computer_info.cpu_threads, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, usage_records.power_consumption_watts, usage_records.power_consumption_watts / (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)) AS power_frequency_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE computer_info.cpu_cores = 128 AND computer_info.cpu_threads = 256 AND computer_info.cpu_base_frequency_ghz = 1.0 AND computer_info.cpu_max_frequency_ghz = 10.0 AND usage_records.cpu_usage_percent = 200;",
    "type": "4",
    "idx": 201,
    "englishquestion": "Assuming a computer has a CPU with 128 cores, 256 threads, a base frequency of 1.0 GHz, a maximum frequency of 10.0 GHz, and a CPU utilization of 200% during operation. What is the actual frequency of the CPU at this utilization rate? Also, calculate the relationship between power consumption and frequency.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, cpu_cores, cpu_threads, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【table】：【usage_records】 【columns】：computer_id, cpu_usage_percent, power_consumption_watts  \n【foreign_keys】：usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【JOIN computer_info与usage_records表，通过computer_id建立关联，锁定CPU核心128/线程256/基础频率1.0GHz/最大10.0GHz的记录】  【step2】:【筛选cpu_usage_percent=200%的特殊场景，此时使用率超频突破100%阈值】  【step3】:【计算实际频率：基础频率 + (最大-基础频率)*(使用率/100)=1.0+9.0*2.0=19GHz，并计算功耗比：功耗÷实际频率作为power_frequency_ratio】",
    "english_step": "【step1】:【JOIN computer_info and usage_records tables via computer_id, filter for records with CPU cores 128/threads 256/base frequency 1.0GHz/max 10.0GHz】  【step2】:【Filter for special scenario where cpu_usage_percent=200%, indicating usage exceeds 100% threshold via overclocking】  【step3】:【Calculate actual frequency: base_frequency + (max_frequency - base_frequency)*(usage_percent/100)=1.0+9.0*2.0=19GHz, and compute power-to-frequency ratio: power_consumption ÷ actual_frequency as power_frequency_ratio】"
  },
  {
    "db_id": "computer",
    "question": "已知在'usage_records'表中，某台电脑的使用记录显示其CPU使用率为90%，功耗为120瓦特，且该电脑的CPU基础频率为2.0 GHz，最大频率为4.5 GHz。结合'computer_info'表中的CPU信息，计算该CPU在当前使用率下的实际频率，并估算其电压（假设常数C为1.25e-8）。",
    "query": "SELECT computer_info.computer_id, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, usage_records.power_consumption_watts, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, SQRT(usage_records.power_consumption_watts / (1.25e-8 * (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)))) AS estimated_voltage FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.cpu_usage_percent = 90 AND usage_records.power_consumption_watts = 120 AND computer_info.cpu_base_frequency_ghz = 2.0 AND computer_info.cpu_max_frequency_ghz = 4.5;",
    "type": "1",
    "idx": 202,
    "englishquestion": "In the 'usage_records' table, the usage data of a specific computer shows its CPU usage at 90%, power consumption at 120 watts, with the CPU's base frequency at 2.0 GHz and maximum frequency at 4.5 GHz. Based on the CPU information from the 'computer_info' table, calculate the actual frequency of the CPU at the current usage rate and estimate its voltage (assuming constant C is 1.25e-8).",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【table】：【usage_records】 【columns】：cpu_usage_percent, power_consumption_watts, computer_id  \n【foreign_keys】: computer_info.computer_id → usage_records.computer_id",
    "evidence": "【step1】:【JOIN两表并筛选基础条件】通过computer_id关联computer_info和usage_records表，筛选cpu_usage_percent=90%、power_consumption_watts=120、cpu_base=2.0GHz、cpu_max=4.5GHz的记录  【step2】:【计算动态频率】用(cpu_base_frequency_ghz + Δ(cpu_max-base)*usage_percent/100)公式计算实际频率actual_frequency_ghz  【step3】:【功耗转电压】基于P=C*V²*f公式推导，通过SQRT(power_consumption_watts/(1.25e-8*actual_frequency_ghz))估算电压】",
    "english_step": "【step1】:【JOIN tables and filter base conditions】Join computer_info and usage_records tables via computer_id, filter records where cpu_usage_percent=90%, power_consumption_watts=120, cpu_base=2.0GHz, and cpu_max=4.5GHz  【step2】:【Calculate dynamic frequency】Compute actual_frequency_ghz using formula (cpu_base_frequency_ghz + Δ(cpu_max - base)*usage_percent/100)  【step3】:【Convert power to voltage】Derive voltage estimation via SQRT(power_consumption_watts/(1.25e-8*actual_frequency_ghz)) based on P=C*V²*f formula"
  },
  {
    "db_id": "computer",
    "question": "在'usage_records'表中，某台电脑的使用记录显示其内存使用率为80%，功耗为85瓦特，且该电脑的内存大小为32 GB。结合'computer_info'表中的内存信息，计算该电脑在当前使用率下的内存带宽（假设内存类型为DDR4，每条内存带宽为25.6 GB/s），并推导内存带宽与功耗的关系。",
    "query": "SELECT computer_info.computer_id, computer_info.ram_size_gb, usage_records.ram_usage_percent, usage_records.power_consumption_watts, computer_info.ram_size_gb * (usage_records.ram_usage_percent / 100) * 25.6 AS current_memory_bandwidth_gbs, (computer_info.ram_size_gb * (usage_records.ram_usage_percent / 100) * 25.6) / usage_records.power_consumption_watts AS memory_bandwidth_power_ratio FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.ram_usage_percent = 80 AND usage_records.power_consumption_watts = 85 AND computer_info.ram_size_gb = 32 AND computer_info.ram_type = 'DDR4';",
    "type": "2",
    "idx": 203,
    "englishquestion": "In the 'usage_records' table, a computer's usage record shows its memory utilization rate at 80%, power consumption at 85 watts, and the computer's memory size at 32 GB. Combining the memory information from the 'computer_info' table, calculate the computer's memory bandwidth at the current utilization rate (assuming the memory type is DDR4, with each memory stick having a bandwidth of 25.6 GB/s), and derive the relationship between memory bandwidth and power consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, ram_size_gb, ram_type  \n【table】：【usage_records】 【columns】：computer_id, ram_usage_percent, power_consumption_watts  \n【foreign_keys】: usage_records.computer_id 关联 computer_info.computer_id",
    "evidence": "【step1】:【JOIN computer_info和usage_records表，通过computer_id进行关联，匹配两表中同一计算机的记录】  【step2】:【应用WHERE条件筛选DDR4类型、内存使用率80%、功耗85瓦特、内存32GB的特定计算机记录】  【step3】:【计算当前内存带宽（ram_size_gb * 内存使用率 * 带宽系数25.6）及带宽-功耗比（带宽/功耗），输出computer_id和所有计算字段】",
    "english_step": "【step1】: 【JOIN the computer_info and usage_records tables via computer_id to match records of the same computer from both tables】  【step2】: 【Apply WHERE conditions to filter specific computer records with DDR4 type, 80% memory usage, 85-watt power consumption, and 32GB RAM】  【step3】: 【Calculate current memory bandwidth (ram_size_gb * memory usage * bandwidth coefficient 25.6) and bandwidth-to-power ratio (bandwidth/power consumption), outputting computer_id and all calculated fields】"
  },
  {
    "db_id": "computer",
    "question": "在'usage_records'表中，某台电脑的使用记录显示其使用时长为8小时，功耗为60瓦特，且该电脑的电池容量为70 Wh。结合'battery_usage'表中的电池信息，判断该电脑的电池健康度是否正常，并解释电池健康度的计算方法。",
    "query": "SELECT computer_info.computer_id, computer_info.battery_capacity_wh, usage_records.usage_duration_hours, usage_records.power_consumption_watts, (usage_records.usage_duration_hours * usage_records.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, CASE WHEN (usage_records.usage_duration_hours * usage_records.power_consumption_watts) / computer_info.battery_capacity_wh * 100 >= 80 THEN '正常' ELSE '不正常' END AS battery_health_status FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.usage_duration_hours = 8 AND usage_records.power_consumption_watts = 60 AND computer_info.battery_capacity_wh = 70;",
    "type": "3",
    "idx": 204,
    "englishquestion": "In the 'usage_records' table, a computer's usage record shows that its usage duration is 8 hours, the power consumption is 60 watts, and the battery capacity of this computer is 70 Wh. By combining the battery information from the 'battery_usage' table, determine whether the battery health of this computer is normal and explain the calculation method for battery health.",
    "equation_analysis": "equation_analysis：电池健康度计算公式：(usage_duration_hours × power_consumption_watts) ÷ battery_capacity_wh × 100；定义 >=80% 为正常。若结果值 >=80%（对应实际耗电量占电池容量的80%及以上），则电池视为正常，否则为不正常。",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, usage_duration_hours, power_consumption_watts  \n【foreign_keys】：computer_info.computer_id → usage_records.computer_id  \n【equation_analysis】：电池健康度计算公式：(usage_duration_hours × power_consumption_watts) ÷ battery_capacity_wh × 100；定义 >=80% 为正常。若结果值 >=80%（对应实际耗电量占电池容量的80%及以上），则电池视为正常，否则为不正常。",
    "evidence": "【step1】:【JOIN computer_info和usage_records表，通过computer_id进行关联匹配】  【step2】:【过滤出使用时长为8小时、功耗60瓦、电池容量70 Wh的具体记录】  【step3】:【计算(8h×60W)/70Wh×100=685.71%，通过CASE语句判断超出80%的阈值为正常状态，最终标记电池健康度为\"正常\"】",
    "english_step": "【step1】: 【JOIN the computer_info and usage_records tables by matching through computer_id】  【step2】: 【Filter specific records with usage duration of 8 hours, power consumption of 60W, and battery capacity of 70Wh】  【step3】: 【Calculate (8h×60W)/70Wh×100=685.71%, use a CASE statement to determine if it exceeds the 80% threshold as normal status, and finally mark battery health status as \"Normal\"】"
  },
  {
    "db_id": "computer",
    "question": "假设在'usage_records'表中，某台电脑的使用记录显示其CPU使用率为500%，功耗为1000瓦特，且该电脑的CPU基础频率为0.5 GHz，最大频率为20.0 GHz。结合'computer_info'表中的CPU信息，计算该CPU在当前使用率下的实际频率，并估算其电压（假设常数C为1.25e-8）。同时，假设该电脑的散热系统无法承受如此高的功耗，推测其温度变化趋势。",
    "query": "SELECT computer_info.computer_id, computer_info.cpu_base_frequency_ghz, computer_info.cpu_max_frequency_ghz, usage_records.cpu_usage_percent, usage_records.power_consumption_watts, computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100) AS actual_frequency_ghz, SQRT(usage_records.power_consumption_watts / (1.25e-8 * (computer_info.cpu_base_frequency_ghz + (computer_info.cpu_max_frequency_ghz - computer_info.cpu_base_frequency_ghz) * (usage_records.cpu_usage_percent / 100)))) AS estimated_voltage FROM computer_info JOIN usage_records ON computer_info.computer_id = usage_records.computer_id WHERE usage_records.cpu_usage_percent = 500 AND usage_records.power_consumption_watts = 1000 AND computer_info.cpu_base_frequency_ghz = 0.5 AND computer_info.cpu_max_frequency_ghz = 20.0;",
    "type": "4",
    "idx": 205,
    "englishquestion": "Assuming in the 'usage_records' table, the usage data of a computer shows its CPU usage rate at 500%, power consumption at 1000 watts, with the CPU's base frequency at 0.5 GHz and maximum frequency at 20.0 GHz. Combining the CPU information from the 'computer_info' table, calculate the actual frequency of this CPU at the current usage rate and estimate its voltage (assuming constant C is 1.25e-8). Additionally, given that the computer's cooling system cannot handle such high power consumption, infer its temperature trend.",
    "equation_analysis": "equation_analysis：  1. 实际频率 = 基础频率 + (最大频率 - 基础频率) × (使用率/100)     **公式意义**：通过CPU使用率成比例提升基础频率至最大频率范围的线性插值计算  2. 估算电压 = √(功耗 ÷ (常数C × 实际频率))     **公式意义**：基于动态功率公式 P = C×V²×f 的电压推导，需保证量纲一致性（GHz需转换为Hz计算实际值）  **温度趋势推断**：由于公式隐含电流 I ∝ V×f，且功耗P=1000W远超常规值，散热不足时温度将呈指数上升趋势直至触发保护机制",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, cpu_base_frequency_ghz, cpu_max_frequency_ghz  \n【table】：【usage_records】 【columns】：cpu_usage_percent, power_consumption_watts, computer_id  \n【foreign_keys】：usage_records.computer_id → computer_info.computer_id  \n【equation_analysis】：  \n1. 实际频率 = 基础频率 + (最大频率 - 基础频率) × (使用率/100)  \n   **公式意义**：通过CPU使用率成比例提升基础频率至最大频率范围的线性插值计算  \n2. 估算电压 = √(功耗 ÷ (常数C × 实际频率))  \n   **公式意义**：基于动态功率公式 P = C×V²×f 的电压推导，需保证量纲一致性（GHz需转换为Hz计算实际值）  \n**温度趋势推断**：由于公式隐含电流 I ∝ V×f，且功耗P=1000W远超常规值，散热不足时温度将呈指数上升趋势直至触发保护机制",
    "evidence": "【step1】:【通过computer_id执行INNER JOIN连接computer_info和usage_records表】  【step2】:【应用四个过滤条件：cpu_usage_percent=500, power_consumption_watts=1000, cpu_base_frequency_ghz=0.5, cpu_max_frequency_ghz=20.0】  【step3】:【计算实际频率并估算电压：actual_frequency按基础频率+动态超频值计算，estimated_voltage基于P=CV²F公式进行代数变形推算】",
    "english_step": "【step1】:【Perform INNER JOIN on computer_info and usage_records tables via computer_id】  【step2】:【Apply four filter conditions: cpu_usage_percent = 500, power_consumption_watts = 1000, cpu_base_frequency_ghz = 0.5, cpu_max_frequency_ghz = 20.0】  【step3】:【Calculate actual frequency and estimate voltage: actual_frequency is computed as base frequency + dynamic overclocking value, estimated_voltage is algebraically derived from the formula P = CV²F】"
  },
  {
    "db_id": "computer",
    "question": "在'battery_usage'表中，某台电脑的电池使用记录显示其使用时长10小时，功耗为50瓦特，电池容量为60 Wh。结合'computer_info'表中的电池信息，计算该电池的健康度，并估算其放电效率（假设电池的理论最大放电时间为电池容量除以功耗）。",
    "query": "SELECT computer_info.computer_id, computer_info.battery_capacity_wh, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / computer_info.battery_capacity_wh * 100 AS battery_health_percent, (battery_usage.usage_duration_hours / (computer_info.battery_capacity_wh / battery_usage.power_consumption_watts)) * 100 AS discharge_efficiency_percent FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.usage_duration_hours = 10 AND battery_usage.power_consumption_watts = 50 AND computer_info.battery_capacity_wh = 60;",
    "type": "1",
    "idx": 206,
    "englishquestion": "In the 'battery_usage' table, a computer's battery usage record shows a usage duration of 10 hours, a power consumption of 50 watts, and a battery capacity of 60 Wh. Combining the battery information from the 'computer_info' table, calculate the battery's health status and estimate its discharge efficiency (assuming the theoretical maximum discharge time is the battery capacity divided by the power consumption).",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【battery_usage】 【columns】：computer_id, usage_duration_hours, power_consumption_watts  \n【foreign_keys】: battery_usage.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【联表获取计算机信息与电池使用记录】通过JOIN将computer_info和battery_usage表的computer_id关联，提取电池容量、使用时长、功耗等基础字段  【step2】:【精准过滤目标数据】用WHERE条件筛选出battery_usage.usage_duration_hours=10且power_consumption=50瓦，同时限定battery_capacity_wh=60的数据子集  【step3】:【动态计算健康度与放电效率】在SELECT中采用线性计算：电池健康度=实际消耗电能((10h*50W)/60Wh)*100，放电效率=实际时长与理论最大时长(60Wh/50W=1.2h)比值*100",
    "english_step": "【step1】:【Join tables to retrieve computer information and battery usage records】Use JOIN to associate computer_info and battery_usage tables via computer_id, extracting basic fields like battery capacity, usage duration, and power consumption.  【step2】:【Precisely filter target data】Apply WHERE conditions to filter the subset where battery_usage.usage_duration_hours=10, power_consumption=50 watts, and battery_capacity_wh=60.  【step3】:【Dynamically calculate health and discharge efficiency】In SELECT, perform linear calculations: battery health = (actual consumed energy ((10h*50W)/60Wh)*100), discharge efficiency = (actual duration / theoretical max duration (60Wh/50W=1.2h)) ratio *100."
  },
  {
    "db_id": "computer",
    "question": "在'battery_usage'表中，某台电脑的电池使用记录显示其电池健康度为85%，使用时长8小时，功耗为45瓦特。结合'computer_info'表中的电池信息，计算该电池的当前实际容量，并推导电池健康度与使用时长、功耗的数学关系。",
    "query": "SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / (battery_usage.battery_health_percent / 100) AS actual_battery_capacity_wh FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 85 AND battery_usage.usage_duration_hours = 8 AND battery_usage.power_consumption_watts = 45;",
    "type": "2",
    "idx": 207,
    "englishquestion": "In the 'battery_usage' table, a computer's battery usage record shows its battery health at 85%, with 8 hours of usage time and a power consumption of 45 watts. Combining the battery information from the 'computer_info' table, calculate the current actual capacity of the battery and derive the mathematical relationship between battery health and usage time and power consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id  \n【table】：【battery_usage】 【columns】：computer_id, battery_health_percent, usage_duration_hours, power_consumption_watts  \n【foreign_keys】: battery_usage.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【通过computer_id进行双表JOIN，关联computer_info与battery_usage的数据】  【step2】:【应用过滤条件：battery_health_percent=85%、usage_duration_hours=8、power_consumption_watts=45】  【step3】:【执行数学运算：(使用时长×功耗)/(健康度百分比/100)得到实际容量，并建立公式：实际容量 = (usage_duration_hours×power_consumption_watts)/(battery_health_percent/100)】",
    "english_step": "【step1】: 【Perform a two-table JOIN via computer_id to associate data from computer_info and battery_usage】  【step2】: 【Apply filters: battery_health_percent=85%, usage_duration_hours=8, power_consumption_watts=45】  【step3】: 【Calculate actual capacity using: (usage_duration_hours × power_consumption_watts) / (battery_health_percent/100), establishing the formula: actual_capacity = (usage_duration_hours×power_consumption_watts)/(battery_health_percent/100)】"
  },
  {
    "db_id": "computer",
    "question": "在'battery_usage'表中，某台电脑的电池使用记录显示其电池健康度为75%，使用时长6小时，功耗为40瓦特。结合'computer_info'表中的电池信息，判断该电池是否需要更换，并解释电池健康度的实际意义。",
    "query": "SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, computer_info.battery_capacity_wh, CASE WHEN battery_usage.battery_health_percent < 80 THEN '需要更换' ELSE '无需更换' END AS battery_replacement_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 75 AND battery_usage.usage_duration_hours = 6 AND battery_usage.power_consumption_watts = 40;",
    "type": "3",
    "idx": 208,
    "englishquestion": "In the 'battery_usage' table, the battery usage record of a certain computer shows its battery health at 75%, usage duration of 6 hours, and power consumption of 40 watts. Based on the battery information from the 'computer_info' table, determine whether the battery needs to be replaced, and explain the practical significance of battery health.",
    "equation_analysis": "equation_analysis：更换判定公式：CASE WHEN battery_health_percent < 80 THEN '需要更换'；健康度实际意义：电池当前可用容量占原始标称容量的百分比，当健康度<80%时电池循环寿命显著下降，实际容量不足标称值的80%，影响正常续航能力。",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh 【table】：【battery_usage】 【columns】：battery_health_percent, usage_duration_hours, power_consumption_watts, computer_id 【foreign_keys】：computer_info.computer_id → battery_usage.computer_id 【equation_analysis】：更换判定公式：CASE WHEN battery_health_percent < 80 THEN '需要更换'；健康度实际意义：电池当前可用容量占原始标称容量的百分比，当健康度<80%时电池循环寿命显著下降，实际容量不足标称值的80%，影响正常续航能力。",
    "evidence": "【step1】:【从battery_usage表筛选出符合条件的数据】根据battery_health_percent=75、usage_duration_hours=6、power_consumption_watts=40过滤原始电池使用记录  【step2】:【关联computer_info表获取补充信息】通过computer_id字段将过滤后的电池数据与computer_info表的主机信息进行JOIN，提取对应的电池容量等参数  【step3】:【应用条件逻辑判断更换状态】使用CASE表达式判断电池健康度是否低于80%，生成battery_replacement_status字段并组合最终输出列",
    "english_step": "【step1】: 【Filter data from the battery_usage table based on specified conditions】Filter original battery usage records where battery_health_percent=75, usage_duration_hours=6, and power_consumption_watts=40  【step2】: 【Join computer_info table to obtain supplementary information】Perform JOIN operation via computer_id field to combine filtered battery data with host information from computer_info table, extracting corresponding parameters such as battery capacity  【step3】: 【Apply conditional logic to determine replacement status】Use CASE expression to evaluate whether battery health percentage falls below 80%, generate battery_replacement_status field and assemble final output columns"
  },
  {
    "db_id": "computer",
    "question": "假设在'battery_usage'表中，某台电脑的电池使用记录显示其电池健康度为200%，使用时长24小时，功耗为200瓦特，且该电脑的电池容量为100 Wh。结合'computer_info'表中的电池信息，计算该电池的当前实际容量，并推测其可能的物理状态（如是否发生膨胀或过热）。",
    "query": "SELECT computer_info.computer_id, battery_usage.battery_health_percent, battery_usage.usage_duration_hours, battery_usage.power_consumption_watts, computer_info.battery_capacity_wh, (battery_usage.usage_duration_hours * battery_usage.power_consumption_watts) / (battery_usage.battery_health_percent / 100) AS actual_battery_capacity_wh, CASE WHEN battery_usage.battery_health_percent > 100 THEN '电池可能膨胀或过热' ELSE '电池状态正常' END AS battery_physical_status FROM computer_info JOIN battery_usage ON computer_info.computer_id = battery_usage.computer_id WHERE battery_usage.battery_health_percent = 200 AND battery_usage.usage_duration_hours = 24 AND battery_usage.power_consumption_watts = 200 AND computer_info.battery_capacity_wh = 100;",
    "type": "4",
    "idx": 209,
    "englishquestion": "Assuming in the 'battery_usage' table, a computer's battery usage record shows a battery health of 200%, usage duration of 24 hours, power consumption of 200 watts, and the computer's battery capacity is 100 Wh. Combining the battery information from the 'computer_info' table, calculate the current actual capacity of the battery and infer its possible physical state (e.g., whether it has expanded or overheated).",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, battery_capacity_wh  \n【table】：【battery_usage】 【columns】：computer_id, battery_health_percent, usage_duration_hours, power_consumption_watts  \n【foreign_keys】: battery_usage.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【执行表连接并筛选符合条件的记录】通过JOIN关联computer_info和battery_usage表，使用WHERE筛选健康度200%、使用24小时、功耗200W且电池容量100Wh的记录  【step2】:【计算实际电池容量】使用公式（24小时*200瓦特）/(200%/100)得到实际容量24*200/2=2400 Wh  【step3】:【判定物理状态】通过CASE表达式对健康度超过100%的情况返回\"电池可能膨胀或过热\"的状态警示",
    "english_step": "【step1】:【Perform table join and filter eligible records】JOIN the computer_info and battery_usage tables via JOIN, using WHERE to filter records with 200% health percentage, 24-hour usage, 200W power consumption, and 100Wh battery capacity  【step2】:【Calculate actual battery capacity】Use formula (24 hours*200 watts)/(200%/100) to obtain actual capacity: 24*200/2=2400 Wh  【step3】:【Determine physical status】Return status alert \"Battery may be swollen or overheated\" via CASE expression when health percentage exceeds 100%"
  },
  {
    "db_id": "computer",
    "question": "在'performance_tests'表中，某台电脑的性能测试记录显示其CPU得分为1200，GPU得分为1500，功耗为200瓦特，温度为75°C。结合'computer_info'表中的CPU和GPU信息，计算该电脑的综合能效比（Performance per Watt），并分析温度对能效比的影响。",
    "query": "SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.power_consumption_watts, performance_tests.temperature_celsius, (performance_tests.cpu_score + performance_tests.gpu_score) / performance_tests.power_consumption_watts AS performance_per_watt, (performance_tests.cpu_score + performance_tests.gpu_score) / (performance_tests.power_consumption_watts * (1 + 0.02 * (performance_tests.temperature_celsius - 25))) AS performance_per_watt_with_temperature FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 1200 AND performance_tests.gpu_score = 1500 AND performance_tests.power_consumption_watts = 200 AND performance_tests.temperature_celsius = 75;",
    "type": "1",
    "idx": 210,
    "englishquestion": "In the 'performance_tests' table, the performance test records of a certain computer show a CPU score of 1200, a GPU score of 1500, a power consumption of 200 watts, and a temperature of 75°C. Combining the CPU and GPU information from the 'computer_info' table, calculate the computer's comprehensive performance per watt and analyze the impact of temperature on performance per watt.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id  \n【table】：【performance_tests】 【columns】：computer_id, cpu_score, gpu_score, power_consumption_watts, temperature_celsius  \n【foreign_keys】: computer_info.computer_id = performance_tests.computer_id",
    "evidence": "【step1】:【关联computer_info与performance_tests表，通过computer_id进行JOIN，筛选cpu_score=1200、gpu_score=1500、power_consumption_watts=200、temperature_celsius=75的特定测试记录】  【step2】:【计算基础能效比：将CPU与GPU得分之和(1200+1500)除以功耗200瓦特，得到2700/200=13.5性能/瓦特性】  【step3】:【计算温度修正能效比：在分母加入温度补偿因子200*(1+0.02*(75-25))=200*2=400，得到2700/400=6.75性能/瓦（温度每超过25度1°C降低2%效率）】",
    "english_step": "【step1】: [Join computer_info with performance_tests table via computer_id, filter specific test records where cpu_score=1200, gpu_score=1500, power_consumption_watts=200, temperature_celsius=75]  【step2】: [Calculate baseline performance per watt: Divide the sum of CPU and GPU scores (1200+1500) by power consumption 200W, obtaining 2700/200=13.5 performance/watt characteristic]  【step3】: [Calculate temperature-adjusted performance per watt: Add temperature compensation factor to denominator 200*(1+0.02*(75-25))=200*2=400, yielding 2700/400=6.75 performance/watt (2% efficiency reduction per 1°C above 25°C)]"
  },
  {
    "db_id": "computer",
    "question": "在'performance_tests'表中，某台电脑的性能测试记录显示其CPU得分为1000，GPU得分为1200，内存得分为800，存储得分为600，综合得分为3600。结合'computer_info'表中的硬件配置信息，计算各硬件组件对综合得分的贡献比例，并推导综合得分与各组件得分的数学关系。",
    "query": "SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.ram_score, performance_tests.storage_score, performance_tests.overall_score, (performance_tests.cpu_score / performance_tests.overall_score) * 100 AS cpu_contribution_percent, (performance_tests.gpu_score / performance_tests.overall_score) * 100 AS gpu_contribution_percent, (performance_tests.ram_score / performance_tests.overall_score) * 100 AS ram_contribution_percent, (performance_tests.storage_score / performance_tests.overall_score) * 100 AS storage_contribution_percent FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 1000 AND performance_tests.gpu_score = 1200 AND performance_tests.ram_score = 800 AND performance_tests.storage_score = 600 AND performance_tests.overall_score = 3600;",
    "type": "2",
    "idx": 211,
    "englishquestion": "In the 'performance_tests' table, a computer's performance test record shows a CPU score of 1000, GPU score of 1200, memory score of 800, storage score of 600, and an overall score of 3600. Incorporating the hardware configuration information from the 'computer_info' table, calculate the contribution ratio of each hardware component to the overall score and deduce the mathematical relationship between the overall score and the individual component scores.",
    "equation_analysis": "equation_analysis：各组件贡献比例公式为**单组件得分 / 总分 × 100%**，总分为各组件得分之和（3600 = 1000+1200+800+600）。数学关系为：  overall_score = cpu_score + gpu_score + ram_score + storage_score",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id  \n【table】：【performance_tests】 【columns】：computer_id, cpu_score, gpu_score, ram_score, storage_score, overall_score  \n【foreign_keys】：performance_tests.computer_id → computer_info.computer_id  \n【equation_analysis】：各组件贡献比例公式为**单组件得分 / 总分 × 100%**，总分为各组件得分之和（3600 = 1000+1200+800+600）。数学关系为：  \noverall_score = cpu_score + gpu_score + ram_score + storage_score",
    "evidence": "【step1】:【通过JOIN关联computer_info和performance_tests表，使用computer_id作为关联条件】  【step2】:【使用WHERE子句过滤出特定得分组合（cpu=1000/gpu=1200/ram=800/storage=600/overall=3600）的记录】  【step3】:【计算各组件得分占比：(单项得分/综合得分)*100，并通过SELECT子句返回硬件配置信息与贡献比例】",
    "english_step": "【step1】: [Join the computer_info and performance_tests tables using computer_id as the join condition]  【step2】: [Filter records with specific score combinations (cpu=1000/gpu=1200/ram=800/storage=600/overall=3600) using the WHERE clause]  【step3】: [Calculate component score ratios: (individual_score / overall_score) * 100, and return hardware configuration details with contribution percentages via the SELECT clause]"
  },
  {
    "db_id": "computer",
    "question": "在'performance_tests'表中，某台电脑的性能测试记录显示其综合得分为3000，温度为80°C，功耗为180瓦特。结合'computer_info'表中的硬件配置信息，判断该电脑的散热系统是否足够高效，并解释温度对性能测试结果的影响。",
    "query": "SELECT computer_info.computer_id, performance_tests.overall_score, performance_tests.temperature_celsius, performance_tests.power_consumption_watts, (performance_tests.power_consumption_watts / performance_tests.temperature_celsius) * 100 AS cooling_efficiency, performance_tests.overall_score * (1 - 0.01 * (performance_tests.temperature_celsius - 25)) AS adjusted_performance_score FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.overall_score = 3000 AND performance_tests.temperature_celsius = 80 AND performance_tests.power_consumption_watts = 180;",
    "type": "3",
    "idx": 212,
    "englishquestion": "In the 'performance_tests' table, a computer's performance test record shows it has an overall score of 3000, a temperature of 80°C, and a power consumption of 180 watts. Based on the hardware configuration information from the 'computer_info' table, assess whether this computer's cooling system is sufficiently efficient and explain the impact of temperature on the performance test results.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id  \n【table】：【performance_tests】 【columns】：computer_id, overall_score, temperature_celsius, power_consumption_watts  \n【foreign_keys】: computer_info.computer_id = performance_tests.computer_id",
    "evidence": "【step1】: JOIN两表获取硬件配置与性能关联数据，通过computer_id进行表连接  【step2】: WHERE条件过滤指定性能参数：overall_score=3000, temperature_celsius=80, power_consumption_watts=180  【step3】: 计算散热效率(cooling_efficiency=(功耗/温度)*100)和温度修正后的性能指标(adjusted_performance_score=原始得分×(1-0.01×(温度-25)))，量化评估散热性能与温度影响",
    "english_step": "【step1】: JOIN two tables to obtain hardware configurations and performance-related data, linking tables via computer_id  【stepstep2】: WHERE clause filters specified performance parameters: overall_score=3000, temperature_celsius=80, power_consumption_watts=180  【step3】: Calculate cooling efficiency (cooling_efficiency=(power_consumption/temperature)*100) and temperature-adjusted performance metric (adjusted_performance_score=original_score×(1-0.01×(temperature-25))), quantitatively evaluating cooling performance and temperature impact"
  },
  {
    "db_id": "computer",
    "question": "假设在'performance_tests'表中，某台电脑的性能测试记录显示其CPU得分为10000，GPU得分为15000，综合得分为25000，功耗为5000瓦特，温度为200°C。结合'computer_info'表中的硬件配置信息，计算该电脑的综合能效比，并推测其硬件在如此极端条件下的可能状态（如是否会发生熔毁或爆炸）。",
    "query": "SELECT computer_info.computer_id, performance_tests.cpu_score, performance_tests.gpu_score, performance_tests.overall_score, performance_tests.power_consumption_watts, performance_tests.temperature_celsius, (performance_tests.cpu_score + performance_tests.gpu_score) / performance_tests.power_consumption_watts AS performance_per_watt, CASE WHEN performance_tests.temperature_celsius > 150 THEN '硬件可能熔毁或爆炸' ELSE '硬件状态正常' END AS hardware_status FROM computer_info JOIN performance_tests ON computer_info.computer_id = performance_tests.computer_id WHERE performance_tests.cpu_score = 10000 AND performance_tests.gpu_score = 15000 AND performance_tests.overall_score = 25000 AND performance_tests.power_consumption_watts = 5000 AND performance_tests.temperature_celsius = 200;",
    "type": "4",
    "idx": 213,
    "englishquestion": "Assuming that in the 'performance_tests' table, the performance test records of a certain computer show a CPU score of 10,000, a GPU score of 15,000, a combined score of 25,000, a power consumption of 5,000 watts, and a temperature of 200°C. Combining the hardware configuration information from the 'computer_info' table, calculate the computer’s overall energy efficiency ratio and speculate on the possible state of its hardware under such extreme conditions (such as whether it could melt down or explode).",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id  \n【table】：【performance_tests】 【columns】：cpu_score, gpu_score, overall_score, power_consumption_watts, temperature_celsius  \n【foeign_keys】: performance_tests.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【通过 computer_id 连接 computer_info 表与 performance_tests 表，建立硬件配置与性能测试结果的关联关系】  【step2】:【使用 WHERE 子句精准筛选出 CPU=10000、GPU=15000、综合=25000、功耗=5000且温度=200℃的极端测试记录】  【step3】:【计算(CPU+GPU)/功耗数值作为能效比，并通过 CASE WHEN 判断高温条件给出硬件熔毁风险状态】",
    "english_step": "【step1】:【Join computer_info table with performance_tests table via computer_id to establish the relationship between hardware configurations and performance test results】  【step2】:【Use WHERE clause to precisely filter extreme test records with CPU=10000, GPU=15000, composite_score=25000, power_consumption=5000, and temperature=200°C】  【step3】:【Calculate (CPU+GPU)/power_consumption as energy efficiency ratio, and use CASE WHEN to determine hardware meltdown risk status by evaluating high-temperature conditions】"
  },
  {
    "db_id": "computer",
    "question": "计算某台电脑在满负荷运行时的总功耗（包括CPU、GPU、内存、存储等），并找出功耗最高的前5台电脑。",
    "query": "WITH TotalPowerConsumption AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts) AS total_power_consumption FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100 GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_power_consumption FROM TotalPowerConsumption ORDER BY total_power_consumption DESC LIMIT 5;",
    "type": "1",
    "idx": 214,
    "englishquestion": "Calculate the total power consumption (including CPU, GPU, memory, storage, etc.) of a computer under full load, and identify the top 5 computers with the highest power consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, cpu_usage_percent, gpu_usage_percent, ram_usage_percent, storage_usage_percent  \n【foreign_keys】: usage_records.computer_id -> computer_info.computer_id",
    "evidence": "【step1】:【关联computer_info与usage_records表，筛选cpu/gpu/ram/storage四项使用率均为100%的满负荷记录】  【step2】:【对每台计算机(computer_id+manufacturer+model)的功率字段power_consumption_watts进行分组求和】  【step3】:【按总功耗降序排序后，通过LIMIT 5取出功耗最高的五条记录】",
    "english_step": "[Step 1]: [Join the computer_info and usage_records tables, filter records where CPU/GPU/RAM/storage usage rates are all 100% (full load records)]  [Step 2]: [Group by computer identity (computer_id + manufacturer + model) and sum the power_consumption_watts field for each group]  [Step 3]: [Sort by total power consumption in descending order and retrieve the top 5 highest consumption records using LIMIT 5]"
  },
  {
    "db_id": "computer",
    "question": "计算某台电脑在一年内的总能耗（以千瓦时为单位），并按能耗从低到高排序，找出能耗最高的前10台电脑。",
    "query": "WITH YearlyEnergyConsumption AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours / 1000) AS total_energy_kwh FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_energy_kwh FROM YearlyEnergyConsumption ORDER BY total_energy_kwh DESC LIMIT 10;",
    "type": "2",
    "idx": 215,
    "englishquestion": "Calculate the total energy consumption (in kilowatt-hours) of each computer over a year, sort them by energy consumption from low to high, and identify the top 10 computers with the highest energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours, usage_date  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【创建CTE临时表YearlyEnergyEnergyConsumption，通过JOIN连接computer_info和usage_records表，筛选1年内数据，按computer_id分组计算每台电脑的总能耗】  【step2】:【从临时表中筛选computer_id/制造商/型号/总能耗字段，按total_energy_kwh降序排列】  【step3】:【用LIMIT 10获取总能耗最高的前10条记录】",
    "english_step": "【step1】: 【Create a CTE temporary table YearlyEnergyConsumption by JOINing computer_info and usage_records tables, filtering data from the past year, grouping by computer_id to calculate total energy consumption per computer】  【step2】: 【Select computer_id/manufacturer/model/total_energy_kwh fields from the temporary table, sorted in descending order by total_energy_kwh】  【step3】: 【Use LIMIT 10 to retrieve the top 10 records with the highest total energy consumption】"
  },
  {
    "db_id": "computer",
    "question": "找出电池健康度低于80%的电脑，并计算这些电脑的平均电池容量和平均使用时长，按电池健康度从低到高排序。",
    "query": "WITH LowBatteryHealthComputers AS (SELECT bu.computer_id, ci.manufacturer, ci.model, bu.battery_health_percent, ci.battery_capacity_wh, bu.usage_duration_hours FROM battery_usage bu JOIN computer_info ci ON bu.computer_id = ci.computer_id WHERE bu.battery_health_percent < 80), AggregatedData AS (SELECT computer_id, manufacturer, model, battery_health_percent, AVG(battery_capacity_wh) OVER () AS avg_battery_capacity, AVG(usage_duration_hours) OVER () AS avg_usage_duration FROM LowBatteryHealthComputers) SELECT DISTINCT computer_id, manufacturer, model, battery_health_percent, avg_battery_capacity, avg_usage_duration FROM AggregatedData ORDER BY battery_health_percent ASC;",
    "type": "3",
    "idx": 216,
    "englishquestion": "Find computers with a battery health below 80%, calculate their average battery capacity and average usage time, and sort them by battery health from lowest to highest.",
    "equation_analysis": "equation_analysis：  1. AVG(battery_capacity_wh) OVER()：对LowBatteryHealthComputers结果集所有记录的battery_capacity_wh求全局平均  2. AVG(usage_duration_hours) OVER()：对LowBatteryHealthComputers结果集所有记录的usage_duration_hours求全局平均  3. DISTINCT：消除窗口函数产生的重复记录  4. 窗口函数采用OVER()空帧说明，表示使用满足条件的全量数据计算平均值",
    "used_table_info": "【table】：【battery_usage】 【columns】：computer_id, usage_duration_hours, battery_health_percent  \n【table】：【computer_info】 【columns】：computer_id, manufacturer, model, battery_capacity_wh  \n【foreign_keys】：battery_usage.computer_id → computer_info.computer_id  \n【equation_analysis】：  \n1. AVG(battery_capacity_wh) OVER()：对LowBatteryHealthComputers结果集所有记录的battery_capacity_wh求全局平均  \n2. AVG(usage_duration_hours) OVER()：对LowBatteryHealthComputers结果集所有记录的usage_duration_hours求全局平均  \n3. DISTINCT：消除窗口函数产生的重复记录  \n4. 窗口函数采用OVER()空帧说明，表示使用满足条件的全量数据计算平均值",
    "evidence": "【step1】:【筛选并关联电池健康度低于80%的电脑基础数据】通过JOIN连接battery_usage和computer_info表，过滤battery_health_percent < 80的纪录，获取电脑ID、制造商、型号、健康度、电池容量、使用时长  【step2】:【计算全局平均值并保留明细】使用窗口函数AVG() OVER()在所有符合条件的记录上计算平均电池容量和平均使用时长的全局值，同时保留每台电脑的明细数据  【step3】:【去重排序输出】对包含重复计算结果的中间结果使用DISTINCT去重，并按电池健康度升序排列最终输出结果",
    "english_step": "【step1】: 【Filter and join computer base data with battery health below 80%】 Use JOIN to connect battery_usage and computer_info tables, filter records where battery_health_percent < 80, retrieve computer ID, manufacturer, model, health percentage, battery capacity, and usage duration.  【step2】: 【Calculate global averages while retaining detailed data】 Use window function AVG() OVER() to compute global average battery capacity and average usage duration across all qualified records, while retaining detailed data for each computer.  【step3】: 【Deduplicate and sort the output】 Apply DISTINCT to remove duplicates from intermediate results containing repeated calculations, and sort the final output by battery health percentage in ascending order."
  },
  {
    "db_id": "computer",
    "question": "假设某台电脑的CPU使用率达到1000%，GPU使用率达到500%，内存使用率达到200%，存储使用率达到150%，计算这台电脑的总功耗，并找出所有电脑中功耗超过10000瓦的电脑。",
    "query": "WITH ExtremeUsagePower AS (SELECT ci.computer_id, ci.manufacturer, ci.model, (1000 * ci.cpu_base_frequency_ghz / 100) AS cpu_power, (500 * ci.gpu_vram_gb / 100) AS gpu_power, (200 * ci.ram_size_gb / 100) AS ram_power, (150 * ci.storage_size_gb / 100) AS storage_power, (1000 * ci.cpu_base_frequency_ghz / 100 + 500 * ci.gpu_vram_gb / 100 + 200 * ci.ram_size_gb / 100 + 150 * ci.storage_size_gb / 100) AS total_power FROM computer_info ci) SELECT computer_id, manufacturer, model, total_power FROM ExtremeUsagePower WHERE total_power > 10000 ORDER BY total_power DESC;",
    "type": "4",
    "idx": 217,
    "englishquestion": "Assuming a computer's CPU usage reaches 1000%, GPU usage reaches 500%, memory usage reaches 200%, and storage usage reaches 150%, calculate the total power consumption of this computer and identify all computers with power consumption exceeding 10,000 watts.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, cpu_base_frequency_ghz, gpu_vram_gb, ram_size_gb, storage_size_gb  \n【foreign_keys】: 无",
    "evidence": "【step1】:【创建CTE计算极端使用情况下的组件功耗：基于预设的CPU 1000%/GPU 500%/内存 200%/存储 150%使用率，通过计算公式(cpu_base_frequency_ghz*10)+(gpu_vram_gb*5)+(ram_size_gb*2)+(storage_size_gb*1.5)生成总功耗字段】  【step2】:【筛选并获取高功耗主机：从CTE结果中提取computer_id、制造商、型号及总功耗值，应用WHERE total_power > 10000条件过滤】  【step3】:【按功耗降序排列结果：使用ORDER BY将满足条件的记录按总功耗从高到低排序输出】",
    "english_step": "【step1】:【Create CTE to calculate component power consumption under extreme usage scenarios: Based on preset CPU 1000%/GPU 500%/RAM 200%/Storage 150% utilization rates, generate total_power field using formula (cpu_base_frequency_ghz*10) + (gpu_vram_gb*5) + (ram_size_gb*2) + (storage_size_gb*1.5)】  【step2】:【Filter and retrieve high-power hosts: Extract computer_id, manufacturer, model, and total_power from CTE results, apply WHERE total_power > 10000 filter】  【step3】:【Sort results by descending power consumption: Use ORDER BY to output qualified records sorted from highest to lowest total_power】"
  },
  {
    "db_id": "computer",
    "question": "计算某台电脑在满负荷运行时产生的热量（以焦耳为单位），并找出产生热量最多的前5台电脑。",
    "query": "WITH HeatGeneration AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours * 3600) AS total_heat_joules FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100 GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_heat_joules FROM HeatGeneration ORDER BY total_heat_joules DESC LIMIT 5;",
    "type": "1",
    "idx": 218,
    "englishquestion": "Calculate the amount of heat (in joules) generated by a computer when running at full load, and identify the top 5 computers that produce the most heat.",
    "equation_analysis": "equation_analysis：total_heat_joules = ∑(power_consumption_watts * usage_duration_hours * 3600)  （將功率消耗（瓦）乘以滿載運行時長（小時）並轉換為秒數：1瓦特×秒=1焦耳，計算公式以\"瓦特×小時×3600秒/小時=焦耳\"實現）",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours, cpu_usage_percent, gpu_usage_percent, ram_usage_percent, storage_usage_percent  \n【foreign_keys】：usage_records.computer_id → computer_info.computer_id  \n【equation_analysis】：total_heat_joules = ∑(power_consumption_watts * usage_duration_hours * 3600)  \n（將功率消耗（瓦）乘以滿載運行時長（小時）並轉換為秒數：1瓦特×秒=1焦耳，計算公式以\"瓦特×小時×3600秒/小時=焦耳\"實現）",
    "evidence": "【step1】:【创建HeatGeneration CTE，通过JOIN关联computer_info和usage_records表，筛选CPU/GPU/RAM/存储使用率均为100%的记录，按computer_id分组计算(power_consumption_watts * 使用时长小时数 * 3600)的总和作为热量值】  【step2】:【从CTE结果集中提取computer_id、manufacturer、model、total_heat_joules四个字段，按total_heat_joules降序排序】  【step3】:【通过LIMIT 5限制最终输出结果仅为热量值最高的前5条记录】",
    "english_step": "【step1】: 【Create the HeatGeneration CTE by JOINing computer_info and usage_records tables, filter records where CPU/GPU/RAM/storage usage are all 100%, group by computer_id and calculate total heat value as SUM(power_consumption_watts * usage_hours * 3600)】  【step2】: 【Extract computer_id, manufacturer, model, total_heat_joules fields from the CTE results, order by total_heat_joules descending】  【step3】: 【Use LIMIT 5 to restrict final output to the top 5 records with the highest heat values】"
  },
  {
    "db_id": "computer",
    "question": "计算某台电脑在一年内的平均每日能耗（以千瓦时为单位），并按平均每日能耗从高到低排序，找出能耗最高的前10台电脑。",
    "query": "WITH YearlyEnergyConsumption AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours / 1000) AS total_energy_kwh FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_energy_kwh / 365 AS avg_daily_energy_kwh FROM YearlyEnergyConsumption ORDER BY avg_daily_energy_kwh DESC LIMIT 10;",
    "type": "2",
    "idx": 219,
    "englishquestion": "Calculate the average daily energy consumption (in kilowatt-hours) of each computer over a year, sort them from highest to lowest average daily consumption, and identify the top 10 computers with the highest energy consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours, usage_date  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【生成年度能耗CTE：通过关联computer_info和usage_records表，计算过去一年每台电脑的总能耗（(功率×时长)/1000），按computer_id分组聚合】  【step2】:【计算日均能耗：从CTE中取出总能耗，除以365获得平均每日能耗，包含原始设备信息字段】  【step3】:【排序输出结果：按日均能耗降序排列，取前10条记录】",
    "english_step": "【step1】: Generate Annual Energy Consumption CTE: Join computer_info and usage_records tables to calculate total energy consumption ((power × duration)/1000) per computer over the past year, grouped by computer_id.  【step2】: Calculate Daily Average Energy Consumption: Divide total energy consumption from CTE by 365 to obtain average daily consumption, retaining original device information fields.  【step3】: Sort and Output Results: Order records by daily average energy consumption in descending order, returning the top 10 entries."
  },
  {
    "db_id": "computer",
    "question": "找出生产年份在2018年之前且电池健康度低于70%的电脑，并计算这些电脑的平均电池容量和平均使用时长，按生产年份从早到晚排序。",
    "query": "WITH OldLowBatteryComputers AS (SELECT ci.computer_id, ci.manufacturer, ci.model, ci.production_year, ci.battery_capacity_wh, bu.usage_duration_hours FROM computer_info ci JOIN battery_usage bu ON ci.computer_id = bu.computer_id WHERE ci.production_year < 2018 AND bu.battery_health_percent < 70), AggregatedData AS (SELECT computer_id, manufacturer, model, production_year, AVG(battery_capacity_wh) OVER () AS avg_battery_capacity, AVG(usage_duration_hours) OVER () AS avg_usage_duration FROM OldLowBatteryComputers) SELECT DISTINCT computer_id, manufacturer, model, production_year, avg_battery_capacity, avg_usage_duration FROM AggregatedData ORDER BY production_year ASC;",
    "type": "3",
    "idx": 220,
    "englishquestion": "Identify computers manufactured before 2018 with battery health below 70%, and calculate the average battery capacity and average usage duration of these computers, sorted by manufacturing year from earliest to latest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, production_year, battery_capacity_wh  \n【table】：【battery_usage】 【columns】：computer_id, battery_health_percent, usage_duration_hours  \n【foreign_keys】: battery_usage.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【创建CTE OldLowBatteryComputers：通过JOIN连接computer_info和battery_usage表，筛选production_year<2018且battery_health_percent<70的记录，并提取所需字段】  【step2】:【创建CTE AggregatedData：使用窗口函数AVG OVER()对battery_capacity_wh和usage_duration_hours进行全量平均计算，保留每台电脑明细】  【step3】:【最终查询：通过DISTINCT消除重复记录，按production_year升序输出每台电脑信息及全局平均值】",
    "english_step": "【step1】:【Create CTE OldLowBatteryComputers: JOIN computer_info and battery_usage tables, filter records with production_year < 2018 AND battery_health_percent < 70, and extract required fields】  【step2】:【Create CTE AggregatedData: Use window function AVG OVER() to compute full-range averages for battery_capacity_wh and usage_duration_hours while retaining detailed records per computer】  【step3】:【Final query: Eliminate duplicate records with DISTINCT, output computer information sorted by production_year ascendingly along with global average values】"
  },
  {
    "db_id": "computer",
    "question": "假设某台电脑的CPU基础频率为100 GHz，最大频率为200 GHz，计算这台电脑在满负荷运行时的理论最大功耗，并找出所有电脑中理论最大功耗超过50000瓦的电脑。",
    "query": "WITH TheoreticalMaxPower AS (SELECT ci.computer_id, ci.manufacturer, ci.model, (200 * ci.cpu_base_frequency_ghz) AS cpu_max_power, (ci.gpu_vram_gb * 10) AS gpu_power, (ci.ram_size_gb * 5) AS ram_power, (ci.storage_size_gb * 2) AS storage_power, (200 * ci.cpu_base_frequency_ghz + ci.gpu_vram_gb * 10 + ci.ram_size_gb * 5 + ci.storage_size_gb * 2) AS total_max_power FROM computer_info ci) SELECT computer_id, manufacturer, model, total_max_power FROM TheoreticalMaxPower WHERE total_max_power > 50000 ORDER BY total_max_power DESC;",
    "type": "4",
    "idx": 221,
    "englishquestion": "Assuming a computer's base CPU frequency is 100 GHz, with a maximum frequency of 200 GHz, calculate the theoretical maximum power consumption when the computer is running at full load, and find all computers whose theoretical maximum power consumption exceeds 50,000 watts.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, cpu_base_frequency_ghz, gpu_vram_gb, ram_size_gb, storage_size_gb  \n【foreign_keys】:无",
    "evidence": "【step1】:【创建公共表达式TheoreticalMaxPower，计算各组件功耗及总和：以（200*cpu基础频率）作为CPU最大功耗，GPU为（显存GB*10），RAM为（内存GB*5），存储为（存储GB*2），求四个部分的总和】  【step2】:【从TheoreticalMaxPower中筛选total_max_power超过50000瓦的记录】  【step3】:【按总功耗降序排列结果，输出电脑ID、制造商、型号及总功耗】",
    "english_step": "【step1】:【Create a CTE TheoreticalMaxPower to calculate component power consumption and total: Use (200 * cpu_base_frequency) as CPU max power, GPU as (vram_gb * 10), RAM as (ram_gb * 5), storage as (storage_gb * 2), then sum all four parts】  【step2】:【Filter records from TheoreticalMaxPower where total_max_power exceeds 50,000 watts】  【step3】:【Sort results in descending order by total power consumption, output computer_id, manufacturer, model, and total_max_power】"
  },
  {
    "db_id": "computer",
    "question": "计算某台电脑在满负荷运行时电池的放电速率（以瓦时为单位），并找出放电速率最快的前5台电脑。",
    "query": "WITH DischargeRate AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.power_consumption_watts * ur.usage_duration_hours) AS discharge_rate_wh FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100 GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, discharge_rate_wh FROM DischargeRate ORDER BY discharge_rate_wh DESC LIMIT 5;",
    "type": "1",
    "idx": 222,
    "englishquestion": "Calculate the battery discharge rate (in watt-hours) of a computer when it is fully loaded and identify the top 5 computers with the fastest discharge rates.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, usage_duration_hours, cpu_usage_percent, gpu_usage_percent, ram_usage_percent, storage_usage_percent  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【筛选全负载记录】从usage_records表过滤cpu_usage_percent、gpu_usage_percent、ram_usage_percent、storage_usage_percent同时等于100%的满负荷运行记录  【step2】:【计算放电速率】通过JOIN关联computer_info表，对每台计算机按<computer_id, manufacturer, model>分组，计算SUM(power_consumption_watts * usage_duration_hours)作为总放电速率  【step3】:【取前五结果】按放电速率降序排序后，使用LIMIT 5获取放电速率最快的5条记录",
    "english_step": "【step1】:【Filter full load records】 From the usage_records table, filter records where cpu_usage_percent, gpu_usage_percent, ram_usage_percent, and storage_usage_percent all equal 100% (full-load operation records).  【step2】:【Calculate discharge rate】 JOIN with computer_info table, group by <computer_id, manufacturer, model> for each computer, calculate SUM(power_consumption_watts * usage_duration_hours) as total discharge rate.  【step3】:【Fetch top 5 results】 Sort by discharge rate in descending order and use LIMIT 5 to retrieve the 5 records with the fastest discharge rates."
  },
  {
    "db_id": "computer",
    "question": "计算某台电脑在一年内的总使用时长（以小时为单位），并按总使用时长从高到低排序，找出使用时长最长的前10台电脑。",
    "query": "WITH YearlyUsage AS (SELECT ci.computer_id, ci.manufacturer, ci.model, SUM(ur.usage_duration_hours) AS total_usage_hours FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ci.computer_id, ci.manufacturer, ci.model) SELECT computer_id, manufacturer, model, total_usage_hours FROM YearlyUsage ORDER BY total_usage_hours DESC LIMIT 10;",
    "type": "2",
    "idx": 223,
    "englishquestion": "Calculate the total usage duration (in hours) of each computer during a year, sort them in descending order of total usage duration, and identify the top 10 computers with the longest usage time.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model  \n【table】：【usage_records】 【columns】：computer_id, usage_date, usage_duration_hours  \n【foreign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【联接computer_info与usage_records表，过滤最近一年的使用记录】  【step2】:【按computer_id分组聚合计算总使用时长】  【step3】:【按总时长降序排序并取前10条结果】",
    "english_step": "【step1】:【Join the computer_info and usage_records tables, filtering usage records from the past year】  【step2】:【Group by computer_id and aggregate to calculate total usage duration】  【step3】:【Order by total duration in descending order and take the top 10 results】"
  },
  {
    "db_id": "computer",
    "question": "找出生产年份在2018年之前且电池健康度低于70%的电脑，并计算这些电脑的平均电池容量和平均使用时长，按生产年份从早到晚排序。",
    "query": "WITH OldLowBatteryComputers AS (SELECT ci.computer_id, ci.manufacturer, ci.model, ci.production_year, ci.battery_capacity_wh, bu.usage_duration_hours FROM computer_info ci JOIN battery_usage bu ON ci.computer_id = bu.computer_id WHERE ci.production_year < 2018 AND bu.battery_health_percent < 70), AggregatedData AS (SELECT computer_id, manufacturer, model, production_year, AVG(battery_capacity_wh) OVER () AS avg_battery_capacity, AVG(usage_duration_hours) OVER () AS avg_usage_duration FROM OldLowBatteryComputers) SELECT DISTINCT computer_id, manufacturer, model, production_year, avg_battery_capacity, avg_usage_duration FROM AggregatedData ORDER BY production_year ASC;",
    "type": "3",
    "idx": 224,
    "englishquestion": "Find computers manufactured before 2018 with battery health below 70%, calculate their average battery capacity and average usage time, and sort them by manufacture year from earliest to latest.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, production_year, battery_capacity_wh  \n【table】：【battery_usage】 【columns】：computer_id, usage_duration_hours, battery_health_percent  \n【foreign_keys】: battery_usage.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【筛选基础数据】通过JOIN连接computer_info和battery_usage表，过滤2018年前生产且电池健康度低于70%的电脑，选出电脑ID、制造商、型号、生产年份、电池容量、使用时长等基础字段构成临时视图OldLowBatteryComputers。  【step2】:【计算全局平均值】在OldLowBatteryComputers基础上，使用窗口函数AVG(...) OVER()针对所有记录计算全局电池容量平均值(avg_battery_capacity)和使用时长平均值(avg_usage_duration)，同时保留原始字段构成AggregatedData视图。  【step3】:【结果去重排序】从AggregatedData中提取DISTINCT的电脑详细信息，并携带全局平均值，最后按production_year升序输出最终结果。",
    "english_step": "【Step 1】: 【Filter Base Data】JOIN the computer_info and battery_usage tables to filter computers produced before 2018 with battery health below 70%, selecting fields including computer ID, manufacturer, model, production year, battery capacity, usage duration, etc. to form a temporary view OldLowBatteryComputers.  【Step 2】: 【Calculate Global Averages】On OldLowBatteryComputers, use window function AVG(...) OVER() to compute global average battery capacity (avg_battery_capacity) and average usage duration (avg_usage_duration) across all records, retaining original fields to form the AggregatedData view.  【Step 3】: 【Deduplicate and Sort Results】Extract DISTINCT computer details with global averages from AggregatedData, and output final results ordered by production_year in ascending order."
  },
  {
    "db_id": "computer",
    "question": "假设某台电脑的电池容量为100000 Wh，功耗为5000瓦，计算这台电脑在满负荷运行时的理论续航时间，并找出所有电脑中理论续航时间超过1000小时的电脑。",
    "query": "WITH TheoreticalRuntime AS (SELECT ci.computer_id, ci.manufacturer, ci.model, ci.battery_capacity_wh, ur.power_consumption_watts, (ci.battery_capacity_wh / ur.power_consumption_watts) AS theoretical_runtime_hours FROM computer_info ci JOIN usage_records ur ON ci.computer_id = ur.computer_id WHERE ur.cpu_usage_percent = 100 AND ur.gpu_usage_percent = 100 AND ur.ram_usage_percent = 100 AND ur.storage_usage_percent = 100) SELECT computer_id, manufacturer, model, theoretical_runtime_hours FROM TheoreticalRuntime WHERE theoretical_runtime_hours > 1000 ORDER BY theoretical_runtime_hours DESC;",
    "type": "4",
    "idx": 225,
    "englishquestion": "Assuming a computer has a battery capacity of 100,000 Wh and a power consumption of 5,000 watts, calculate the theoretical battery life of this computer under full load and find all computers with a theoretical battery life exceeding 1,000 hours.",
    "equation_analysis": "",
    "used_table_info": "【table】：【computer_info】 【columns】：computer_id, manufacturer, model, battery_capacity_wh  \n【table】：【usage_records】 【columns】：computer_id, power_consumption_watts, cpu_usage_percent, gpu_usage_percent, ram_usage_percent, storage_usage_percent  \n【foeign_keys】: usage_records.computer_id → computer_info.computer_id",
    "evidence": "【step1】:【创建CTE临时表TheoreticalRuntime，关联computer_info和usage_records表，过滤满负荷记录并计算续航时间】  【step2】:【从CTE结果中筛选理论续航时间超过1000小时的记录】  【step3】:【对最终结果按照理论续航时间降序排列】",
    "english_step": "【step1】: 【Create a CTE temporary table TheoreticalRuntime by joining computer_info and usage_records tables, filter full load records, and calculate theoretical runtime】  【step2】: 【Select records from the CTE result where theoretical runtime exceeds 1000 hours】  【step3】: 【Sort final results by theoretical runtime in descending order】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在海拔高度为5000米的位置，采集到的气压数据值为500 hPa，假设海平面气压为1013 hPa，请计算该位置的气压相对于海平面的变化百分比。",
    "query": "SELECT ((1013 - DataValue) / 1013) * 100 AS PressureChangePercentage FROM DataCollectionRecord WHERE DataType = '压力' AND CollectorId IN (SELECT Id FROM DataCollector WHERE ElevationMeters = 5000);",
    "type": "1",
    "idx": 226,
    "englishquestion": "If a data collector is installed at an altitude of 5000 meters and records a measured air pressure value of 500 hPa, assuming the sea-level pressure is 1013 hPa, please calculate the percentage change in air pressure at this location relative to sea level.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectorId  \n【table】：【DataCollector】 【columns】：Id, ElevationMeters  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】: 执行子查询(SELECT Id FROM DataCollector WHERE ElevationMeters = 5000)获取海拔5000米数据采集器的ID集合  【step2】: 通过CollectorId IN匹配DataCollectionRecord中的\"压力\"类型数据记录  【step3】: 对符合条件的数据计算(1013-DataValue)/1013*100的百分比公式，输出PressureChangePercentage字段",
    "english_step": "【step1】: Perform a subquery (SELECT Id FROM DataCollector WHERE ElevationMeters = 5000) to obtain the ID set of data collectors at 5000 meters elevation  【step2】: Match \"Pressure\" type data records in DataCollectionRecord via CollectorId IN  【step3】: For qualifying data, compute the percentage formula (1013 - DataValue)/1013*100 and output the PressureChangePercentage field"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器每分钟采集一次温度数据，采集到的温度数据在一天内的平均值为25°C，标准差为5°C。请计算在一天内，温度数据值在20°C到30°C之间的概率。",
    "query": "SELECT (COUNT(CASE WHEN DataValue BETWEEN 20 AND 30 THEN 1 END) * 100.0 / COUNT(*)) AS Probability FROM DataCollectionRecord WHERE DataType = '温度' AND DATE(CollectionTime) = CURDATE();",
    "type": "2",
    "idx": 227,
    "englishquestion": "Suppose a data collector records temperature data every minute, with an average temperature of 25°C and a standard deviation of 5°C over the course of a day. Please calculate the probability that the temperature data values will fall between 20°C and 30°C within that day.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType, CollectionTime, DataValue  \n【foreign_keys】:【CollectorId -> DataCollector.Id】",
    "evidence": "【step1】:【筛选当日温度数据】使用WHERE子句过滤出数据类型为'温度'且采集日期为当天（CURDATE()）的记录  【step2】:【计算区间命中率】通过COUNT配合CASE WHEN表达式，分别统计总数据量和20-30℃之间的有效数据量  【step3】:【计算概率百分比】将有效数除以总数并乘以100.0进行类型转换，得到百分比形式的概率值",
    "english_step": "【Step1】:【Filter daily temperature data】Use WHERE clause to filter records where data type is 'temperature' and collection date is the current day (CURDATE())  【Step2】:【Calculate interval hit rate】Use COUNT with CASE WHEN expressions to separately count total data volume and valid data volume within 20-30°C range  【Step3】:【Calculate probability percentage】Divide valid count by total count and multiply by 100.0 for type conversion, obtaining probability value in percentage format"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器的状态显示为‘维修’，且其安装位置在‘工厂A’，请推断该采集器可能遇到的问题，并说明为什么需要维修。",
    "query": "SELECT Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes FROM DataCollector WHERE Status = '维修' AND InstallationLocation = '工厂A';",
    "type": "3",
    "idx": 228,
    "englishquestion": "If a data collector's status shows as 'Under Maintenance', and its installation location is at 'Factory A', please infer the potential issues the collector might be facing and explain why maintenance is required.",
    "equation_analysis": "equation_analysis：Status = '维修' ∧ InstallationLocation = '工厂A'",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n【equation_analysis】：【Status = '维修' ∧ InstallationLocation = '工厂A'】",
    "evidence": "【step1】:【通过WHERE子句筛选出Status字段为'维修'且InstallationLocation字段等于'工厂A'的数据行】  【step2】:【投影操作选取指定字段Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes】  【step3】:【关联DataCollectionRecord表检查异常数据值，结合DataCollectionRule表分析是否因阈值超标触发维修机制】",
    "english_step": "Step1: Use the WHERE clause to filter rows where the Status field is 'Maintenance' and the InstallationLocation field equals 'Factory A'.  Step2: Perform a projection to select the specified fields: Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes.  Step3: Join the DataCollectionRecord table to check for abnormal data values and analyze with the DataCollectionRule table whether exceeding thresholds triggered the maintenance mechanism."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器的采集频率设置为每秒1000次，且每次采集的数据量为1KB，请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT CollectorId, COUNT(*) AS TotalCollections, SUM(LENGTH(DataValue)) / 1024 AS TotalDataSizeKB, (SUM(LENGTH(DataValue)) / 1024 / 1024 / 1024) AS TotalDataSizeGB, CASE WHEN COUNT(*) > 1000000 THEN '不可行：数据量过大' ELSE '可行：数据量在可接受范围内' END AS Feasibility FROM DataCollectionRecord WHERE DATE(CollectionTime) BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() AND CollectorId IN (SELECT Id FROM DataCollector WHERE CollectorModel = '高频采集器') GROUP BY CollectorId;",
    "type": "4",
    "idx": 229,
    "englishquestion": "Assume a data collector has a sampling frequency set to 1000 times per second, with each data sample being 1KB in size. Calculate the total amount of data generated by this collector in one year, and discuss the feasibility of such a configuration in practical applications.",
    "equation_analysis": "equation_analysis：总数据量 = 采集频率 (1000次/秒) × 单次数据量 (1KB) × 年秒数 (31536000秒) = 31536000000 KB ≈ 29362.25 GB。SQL通过统计LENGTH(DataValue)实际存储的总字节数进行验证，公式匹配性与数据存储的实际内容（是否严格按1KB/次）有关。",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：CollectorId, DataValue, CollectionTime  \n【table】：【DataCollector】 【columns】：Id, CollectorModel  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n【equation_analysis】：【总数据量 = 采集频率 (1000次/秒) × 单次数据量 (1KB) × 年秒数 (31536000秒) = 31536000000 KB ≈ 29362.25 GB。SQL通过统计LENGTH(DataValue)实际存储的总字节数进行验证，公式匹配性与数据存储的实际内容（是否严格按1KB/次）有关。】",
    "evidence": "【step1】:【子查询获取高频采集器ID】执行子查询(SELECT Id FROM DataCollector WHERE CollectorModel = '高频采集器')，获取所有符合条件的数据采集器唯一标识  【step2】:【关联表筛选时间范围与设备】主查询通过CollectorId IN子句关联两张表，用DATE_SUB()函数过滤出近一年的CollectionTime记录  【step3】:【分组计算与可行性判断】按CollectorId分组后，通过COUNT统计总采集次数、SUM(LENGTH())计算存储需求，并使用CASE表达式基于COUNT(*)阈值进行可行性评估",
    "english_step": "【step1】: 【Subquery to Retrieve High-Frequency Collector IDs】 Execute a subquery (SELECT Id FROM DataCollector WHERE CollectorModel = 'High-Frequency Collector') to obtain the unique identifiers of all qualifying data collectors.  【step2】: 【Join Tables and Filter Time Range & Devices】 The main query links the tables via the CollectorId IN clause, using the DATE_SUB() function to filter records with CollectionTime within the past year.  【step3】: 【Group Calculations and Feasibility Evaluation】 After grouping by CollectorId, use COUNT to tally total collection attempts, SUM(LENGTH()) to compute storage requirements, and apply a CASE expression for feasibility assessment based on a COUNT(*) threshold."
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器的状态为‘停机’，且其安装位置的海拔高度为3000米，假设该采集器在停机前的最后一个数据采集记录显示温度为-10°C，请计算该位置的气压值，并分析停机可能的原因。",
    "query": "SELECT DataCollector.Id, DataCollector.InstallationLocation, DataCollector.ElevationMeters, DataCollectionRecord.DataValue AS Temperature, 1013 * POWER(1 - (0.0065 * DataCollector.ElevationMeters) / 288.15, (9.80665 * 0.0289644) / (8.3144598 * 0.0065)) AS Pressure_hPa FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Status = '停机' AND DataCollector.ElevationMeters = 3000 AND DataCollectionRecord.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DataCollector.Id);",
    "type": "1",
    "idx": 230,
    "englishquestion": "If the status of a data collector shows 'shutdown' and its installation altitude is 3000 meters, assuming the last data collection record before shutdown indicates a temperature of -10°C, please calculate the atmospheric pressure value at that location and analyze possible reasons for the shutdown.",
    "equation_analysis": "equation_analysis：气压公式基于国际标准大气模型：  `1013 * (1 - 0.0065*Elevation/288.15)^((g*M)/(R*L))`，其中  - Elevation = 3000米  - g=9.80665 (重力加速度)，M=0.0289644 (干空气摩尔质量),  - R=8.3144598 (通用气体常数), L=0.0065 (温度垂直递减率)  幂指数推导自流体静力学方程和理想气体定律的组合应用。",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, InstallationLocation, ElevationMeters, Status  \n【table】：【DataCollectionRecord】 【columns】：DataValue, CollectionTime, CollectorId  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：气压公式基于国际标准大气模型：  \n`1013 * (1 - 0.0065*Elevation/288.15)^((g*M)/(R*L))`，其中  \n- Elevation = 3000米  \n- g=9.80665 (重力加速度)，M=0.0289644 (干空气摩尔质量),  \n- R=8.3144598 (通用气体常数), L=0.0065 (温度垂直递减率)  \n幂指数推导自流体静力学方程和理想气体定律的组合应用。",
    "evidence": "【step1】:【筛选状态为停机的海拔3000米采集器】  【step2】:【关联最后一次温度采集记录】  【step3】:【使用标准大气公式计算气压值】",
    "english_step": "【step1】: 【Filter collectors at 3000 meters altitude with shutdown status】  【step2】: 【Join with the latest temperature collection record】  【step3】: 【Calculate atmospheric pressure value using the standard atmospheric formula】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器的状态为‘运行’，且其采集频率为每分钟10次，每次采集的数据量为0.5KB。请计算该采集器在一个月（30天）内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE Status = '运行';",
    "type": "2",
    "idx": 231,
    "englishquestion": "Assuming a data collector's status is 'running', with a collection frequency of 10 times per minute and a data volume of 0.5KB per collection. Calculate the total data volume generated by this collector in one month (30 days) and analyze the disk space required to store this data.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status 【foreign_keys】: 【None used in this query】",
    "evidence": "【step1】:【筛选状态为'运行'的数据采集器】使用WHERE子句Status='运行'过滤有效目标  【step2】:【执行数据量计算公式计算】计算式为每分钟次数(10) * 0.5KB/次 * 60分钟 * 24小时 * 30天  【step3】:【数据单位转换与结果输出】将总数据量分别以KB和MB为单位输出，使用/1024进行单位换算",
    "english_step": "【step1】:【Filter data collectors with status 'Running'】Use WHERE clause Status='Running' to filter valid targets  【step2】:【Execute data volume calculation formula】Formula: times per minute (10) * 0.5KB/time * 60 minutes * 24 hours * 30 days  【step3】:【Data unit conversion and result output】Convert total data volume to KB and MB respectively using /1024 for unit conversion, then output results"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器的状态为‘维修’，且其安装位置在‘化工厂’，请推断该采集器可能遇到的问题，并说明为什么需要维修。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.ManufactureDate, DataCollector.InstallationDate, DataCollector.Manufacturer, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE Status = '维修' AND InstallationLocation = '化工厂';",
    "type": "3",
    "idx": 232,
    "englishquestion": "If a data collector's status is 'under maintenance' and its installation location is at a 'chemical plant', please deduce the potential issues the collector might be facing and explain why maintenance is required.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, ManufactureDate, InstallationDate, Manufacturer, Status, Notes 【foreign_keys】: 【无直接外键调用】",
    "evidence": "【step1】: 定位DataCollector表：执行FROM DataCollector操作，确定基础数据来源  【step2】: 双条件过滤：应用WHERE Status = '维修' AND InstallationLocation = '化工厂'，筛选出同时满足状态和位置条件的记录  【step3】: 选择特定字段：执行SELECT操作提取Id/CollectorModel等8个指定字段",
    "english_step": "【step1】: Locate DataCollector table: Execute FROM DataCollector operation to establish the base data source  【step2】: Dual-condition filtering: Apply WHERE Status = 'Maintenance' AND InstallationLocation = 'Chemical Plant' to filter records that meet both status and location criteria  【step3】: Select specific fields: Execute SELECT operation to extract 8 specified fields including Id, CollectorModel, etc."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器的状态为‘运行’，且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE Status = '运行';",
    "type": "4",
    "idx": 233,
    "englishquestion": "Assuming a data collector's status is 'running', and its collection frequency is set to 100 times per second, with each collection producing 10KB of data. Please calculate the total amount of data generated by this collector in one year and discuss the feasibility of such a configuration in practical applications.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从DataCollector表筛选状态为'运行'的记录】  【step2】:【计算每秒100次 * 10KB的数据量，扩展为全年数据量（KB单位）】  【step3】:【将全年总量转换为TB单位并关联设备基础信息输出】",
    "english_step": "【step1】:【Filter records from the DataCollector table where the status is 'Running'】  【step2】:【Calculate the annual data volume in KB by expanding 100 times/s * 10KB】  【step3】:【Convert the total annual volume to TB and output with associated basic device information】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在纬度为60°的位置，且采集到的温度数据值为-20°C，请计算该位置的地球自转线速度，并分析温度对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.Latitude, DataCollectionRecord.DataValue AS Temperature, (7.2921 * POWER(10, -5)) * 6371000 * COS(RADIANS(DataCollector.Latitude)) AS LinearVelocity_mps FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Latitude = 60 AND DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DataCollector.Id);",
    "type": "1",
    "idx": 234,
    "englishquestion": "If a data collector is installed at a latitude of 60°, and the collected temperature data value is -20°C, calculate the Earth's rotational linear velocity at that location, and analyze the impact of temperature on the equipment's operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, Latitude  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataValue, DataType, CollectionTime  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【筛选纬度60度且数据类型为温度的最新采集记录】通过子查询(SELECT MAX(CollectionTime)...)确保获取每个采集器最新时间点记录  【step2】:【关联DataCollector与DataCollectionRecord表】通过JOIN操作将采集器基本信息和其对应的温度值(-20℃)进行匹配  【step3】:【计算地球自转线速度】基于纬度余弦值6371000米地球半径，7.2921e-5弧度/秒角速度的公式进行实时物理量计算】",
    "english_step": "【step1】: 【Filter latest collection records at latitude 60° with temperature data type】Use subquery (SELECT MAX(CollectionTime)...) to ensure obtaining the latest timestamp records for each collector  【step2】: 【Join DataCollector and DataCollectionRecord tables】Match collector basic information with corresponding temperature values (-20°C) through JOIN operation  【step3】: 【Calculate Earth's rotational linear velocity】Perform real-time physical quantity calculation using formula based on latitude cosine value (Earth radius 6,371,000 meters, angular velocity 7.2921e-5 radians/second)"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器安装在纬度为45°的位置，且其采集频率为每分钟5次，每次采集的数据量为0.2KB。请计算该采集器在一年内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Latitude = 45;",
    "type": "2",
    "idx": 235,
    "englishquestion": "Assuming a data collector is installed at a latitude of 45° with a collection frequency of 5 times per minute, and each collection generates a data volume of 0.2KB. Please calculate the total data volume generated by this collector in one year and analyze the disk space required to store this data.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Latitude  \n【foreign_keys】:【None】",
    "evidence": "【step1】:【筛选纬度45度的采集器】通过WHERE条件过滤DataCollector表中纬度=45的记录  【step2】:【计算年数据量】按照(5次/分钟 × 0.2KB/次 × 60分钟 × 24小时 × 365天)逐级运算，得出KB并转换为MB  【step3】:【返回带数据量的结果集】关联计算字段TotalDataSizeKB和TotalDataSizeMB，显示型号/位置等字段",
    "english_step": "【step1】: 【Filter collectors at latitude 45°】 Use WHERE clause to filter records with latitude=45 in DataCollector table  【step2】: 【Calculate annual data volume】 Progressively calculate KB using (5 times/min × 0.2KB/time × 60 mins × 24 hours × 365 days), then convert to MB  【step3】: 【Return result set with data volume】 Return computed fields TotalDataSizeKB and TotalDataSizeMB, displaying model/location fields"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在纬度为30°的位置，且其状态为‘运行’，请推断该采集器可能遇到的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.Latitude = 30 AND DataCollector.Status = '运行';",
    "type": "3",
    "idx": 236,
    "englishquestion": "If a data collector is installed at a latitude of 30° and its status is 'operational', please infer the environmental conditions the collector might encounter and explain how these conditions affect the device's operation.",
    "equation_analysis": "equation_analysis：`Latitude = 30`为纬度条件，`Status = '运行'`为状态筛选条件，两者使用逻辑AND组合",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Latitude, Status, Notes  \n【foreign_keys】：【无】  \n【equation_analysis】：【`Latitude = 30`为纬度条件，`Status = '运行'`为状态筛选条件，两者使用逻辑AND组合】",
    "evidence": "【step1】: 从DataCollector表抽取Id/ColletorModel/InstallationLocation/Latitude/Status/Notes字段集  【step2】: 对纬度做精确数值过滤（Latitude = 30）并合并状态条件筛选（Status = '运行'）",
    "english_step": "【step1】: Select the fields Id, CollectorModel, InstallationLocation, Latitude, Status, Notes from the DataCollector table  【step2】: Apply an exact numerical filter on Latitude (Latitude = 30) and combine with the status condition filter (Status = 'Running')"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器安装在纬度为90°的位置（北极），且其采集频率设置为每秒100次，每次采集的数据量为1KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 1 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 1 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Latitude = 90;",
    "type": "4",
    "idx": 237,
    "englishquestion": "Assuming a data collector is installed at a latitude of 90° (the North Pole), with a sampling frequency set to 100 times per second and each sample's data size being 1KB. Please calculate the total data volume generated by this collector over one year, and discuss the feasibility of such a setup in practical applications.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id,CollectorModel,InstallationLocation,Latitude  \n【foreign_keys】: []",
    "evidence": "【step1】:【WHERE子句过滤纬度=90的采集器】 【step2】:【计算年数据量：100次/秒 ×1KB/次 ×31536000秒/年=3153600000KB】 【step3】:【转换存储单位：3153600000/1024³≈2932.23TB，筛选包含纬度信息的同时返回原始数据和TB计算结果】",
    "english_step": "【step1】: 【WHERE clause filters collectors with latitude = 90】  【step2】: 【Calculate annual data volume: 100 times/second × 1KB/time × 31,536,000 seconds/year = 3,153,600,000KB】  【step3】: 【Convert storage units: 3,153,600,000 / 1024³ ≈ 2932.23TB, filter to include latitude information while returning raw data and TB calculation results】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在经度为0°的位置（格林尼治子午线），且采集到的温度数据值为15°C，请计算该位置的太阳高度角在正午时的值，并分析温度对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.Latitude, DataCollectionRecord.DataValue AS Temperature, DEGREES(ASIN(SIN(RADIANS(DataCollector.Latitude)) * SIN(RADIANS(23.44)) + COS(RADIANS(DataCollector.Latitude)) * COS(RADIANS(23.44)) * COS(RADIANS(0)))) AS SolarElevationAngle FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.Longitude = 0 AND DataCollectionRecord.DataType = '温度' AND DATE(DataCollectionRecord.CollectionTime) = CURDATE() ORDER BY DataCollectionRecord.CollectionTime DESC LIMIT 1;",
    "type": "1",
    "idx": 238,
    "englishquestion": "If a data collector is installed at a longitude of 0° (Greenwich Meridian), and the collected temperature data value is 15°C, calculate the solar altitude angle at this location at noon and analyze the impact of temperature on equipment operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, Latitude, Longitude  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataValue, DataType, CollectionTime  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【连接DataCollector和DataCollectionRecord表，筛选经度0°、温度类型、当日数据】通过INNER JOIN关联采集器与记录表，使用WHERE条件过滤经度=0、DataType='温度'、时间字段用DATE()函数匹配CURDATE()【step2】:【应用太阳高度角数学公式计算】使用SIN(RADIANS())/COS(RADIANS())组合计算球面三角公式，其中23.44是太阳赤纬角常数，DEGREES(ASIN())最终将结果转换为角度值【step3】:【按时间倒序排列并限制结果】ORDER BY CollectionTime DESC LIMIT 1确保获取最新的温度记录，同时匹配问题中\"正午时\"的时间特征要求",
    "english_step": "【Step1】: 【Join DataCollector and DataCollectionRecord tables, filter longitude 0°, temperature type, current day data】INNER JOIN collector and record tables, use WHERE clause to filter longitude=0, DataType='Temperature', use DATE() function on time field to match CURDATE().  【Step2】: 【Apply solar elevation angle mathematical formula】Use SIN(RADIANS())/COS(RADIANS()) combination for spherical trigonometry formula, where 23.44 is the solar declination angle constant, DEGREES(ASIN()) ultimately converts the result to angular values.  【Step3】: 【Sort by time descending and limit results】ORDER BY CollectionTime DESC LIMIT 1 ensures retrieving the latest temperature record while aligning with the \"noon time\" temporal characteristic in the question."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器安装在经度为120°的位置，且其采集频率为每分钟10次，每次采集的数据量为0.5KB。请计算该采集器在一个月（30天）内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Longitude = 120;",
    "type": "2",
    "idx": 239,
    "englishquestion": "Assuming a data collector is installed at a longitude of 120°, with a collection frequency of 10 times per minute and each collection's data size being 0.5KB. Please calculate the total data volume generated by this collector in one month (30 days) and analyze the disk space required to store this data.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Longitude  \n【foreign_keys】: 无",
    "evidence": "【step1】:【从DataCollector表选取经度120的采集器】通过WHERE子句过滤Longitude=120的记录，定位指定设备  【step2】:【执行数据量计算】用公式(10次/分钟 * 0.5KB)得到每分钟6KB -> 60分钟*24小时*30天扩展为总KB量，再/1024转MB  【step3】:【关联基础信息并输出结果】联合显示设备ID/型号/位置等元数据与计算结果TotalDataSizeKB/TotalDataSizeMB字段",
    "english_step": "【step1】: [Select collectors with longitude 120 from DataCollector table] Use WHERE clause to filter records with Longitude=120, locating specified devices  【step2】: [Perform data volume calculation] Apply formula (10 times/min * 0.5KB) to get 6KB per minute -> Expand to total KB via 60min*24h*30d, then convert to MB by /1024  【step3】: [Associate basic info and output results] Jointly display metadata (DeviceID/Model/Location) with calculated fields TotalDataSizeKB/TotalDataSizeMB"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在经度为-90°的位置，且其状态为‘运行’，请推断该采集器可能遇到的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Longitude, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.Longitude = -90 AND DataCollector.Status = '运行';",
    "type": "3",
    "idx": 240,
    "englishquestion": "If a data collector is installed at a longitude of -90° and its status is 'operational', please infer the possible environmental conditions the collector may encounter and explain how these conditions could affect the equipment's operation.",
    "equation_analysis": "equation_analysis：  1. `Longitude = -90`:   - 经度为西半球地理坐标（负值），可能对应特定地理位置（如北美洲或南美洲部分区域），需结合其他字段（如纬度、海拔）进一步分析环境条件。   - 设备需适应可能的极端气候（如高湿度、温差大）或地形（如高地/低地）。  2. `Status = '运行'`:   - 设备当前处于活动状态，表明其硬件和软件功能正常。   - 若环境条件超出设备工作范围（如极端温度未在型号参数中定义），可能导致后续停机或故障。",
    "used_table_info": "【table】：【DataCollector】  \n【columns】：Id, CollectorModel, InstallationLocation, Longitude, Status, Notes  \n【foreign_keys】：【无】  \n【equation_analysis】：  \n1. `Longitude = -90`:\n   - 经度为西半球地理坐标（负值），可能对应特定地理位置（如北美洲或南美洲部分区域），需结合其他字段（如纬度、海拔）进一步分析环境条件。\n   - 设备需适应可能的极端气候（如高湿度、温差大）或地形（如高地/低地）。  \n\n2. `Status = '运行'`:\n   - 设备当前处于活动状态，表明其硬件和软件功能正常。\n   - 若环境条件超出设备工作范围（如极端温度未在型号参数中定义），可能导致后续停机或故障。",
    "evidence": "【step1】:【选择数据采集器表的特定列】查询从DataCollector表中选取Id、CollectorModel、InstallationLocation、Longitude、Status、Notes字段  【step2】:【应用经纬度和状态过滤条件】筛选位于-90°经度且状态为'运行'的采集器数据  (该查询无关联/嵌套/排序逻辑，采用基础两步即可完成数据提取目标)",
    "english_step": "【step1】: 【Select specific columns from DataCollector table】 Query selects Id, CollectorModel, InstallationLocation, Longitude, Status, Notes fields from DataCollector table  【step2】: 【Apply longitude and status filter conditions】 Filter collector data located at -90° longitude with status 'Running'  (This query contains no joins/nesting/sorting logic, achieving data extraction objectives through two basic steps)"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器安装在经度为180°的位置（国际日期变更线），且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Longitude = 180;",
    "type": "4",
    "idx": 241,
    "englishquestion": "Assuming a data collector is installed at a longitude of 180° (the International Date Line), with a sampling frequency set to 100 times per second and each sample generating 10KB of data. Calculate the total data volume produced by this collector in one year and discuss the feasibility of such a setup in practical applications.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Longitude  \n【foreign_keys】: CollectorId<DataCollectionRecord>=Id<DataCollector>",
    "evidence": "【step1】:【筛选经度=180度的采集器】  【step2】:【对符合条件的采集器计算年数据量：100次/秒 ×10KB/次 ×年秒数(31536000) = 31536000000KB】  【step3】:【将总数据量转换为TB：31536000000KB ÷1024³ ≈28.75TB】",
    "english_step": "【step1】:【Filter collectors with longitude = 180 degrees】  【step2】:【Calculate annual data volume for qualified collectors: 100 times/sec × 10KB/time × annual seconds (31536000) = 31,536,000,000 KB】  【step3】:【Convert total data volume to TB: 31,536,000,000 KB ÷ 1024³ ≈ 28.75 TB】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在海平面以上5000米的位置，采集到的气压数据值为500 hPa，假设海平面气压为1013 hPa，请计算该位置的气压相对于海平面的变化百分比。",
    "query": "SELECT DataCollector.Id, DataCollector.ElevationMeters, DataCollectionRecord.DataValue AS Pressure_hPa, ((1013 - DataCollectionRecord.DataValue) / 1013) * 100 AS PressureChangePercentage FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollector.ElevationMeters = 5000 AND DataCollectionRecord.DataType = '压力' ORDER BY DataCollectionRecord.CollectionTime DESC LIMIT 1;",
    "type": "1",
    "idx": 242,
    "englishquestion": "If a data collector is installed at a location 5000 meters above sea level, and the collected air pressure data value is 500 hPa, assuming the sea level pressure is 1013 hPa, calculate the percentage change in air pressure at this location relative to sea level.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, ElevationMeters  \n【table】：【DataCollectionRecord】 【columns】：DataValue, CollectorId, DataType, CollectionTime  \n【foreign_keys】:【DataCollectionRecord.CollectorId → DataCollector.Id】",
    "evidence": "【step1】:【JOIN数据采集器表与采集记录表，筛选海拔5000米且数据类型为'压力'的记录】  【step2】:【计算绝对气压差（1013 - DataValue）并转换为百分比变化 ((差值/1013)*100)】  【step3】:【按采集时间倒序取最新记录，确保获取对应海拔高度的实时压力数据】",
    "english_step": "[step1]: [JOIN the data collector table with the collection records table, filtering records with altitude 5000 meters and data type 'pressure']  [step2]: [Calculate absolute atmospheric pressure difference (1013 - DataValue) and convert to percentage change ((difference/1013)*100)]  [step3]: [Sort by collection time in descending order to retrieve the latest records, ensuring real-time pressure data at the corresponding altitude is obtained]"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器安装在海平面以上3000米的位置，且其采集频率为每分钟5次，每次采集的数据量为0.2KB。请计算该采集器在一年内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.ElevationMeters = 3000;",
    "type": "2",
    "idx": 243,
    "englishquestion": "Assuming a data collector is installed at a position 3,000 meters above sea level, with a collection frequency of 5 times per minute and each collection's data size being 0.2KB. Please calculate the total data volume generated by the collector in one year and analyze the disk space required to store this data.",
    "equation_analysis": "equation_analysis：(5次/min * 0.2KB/次) * 60分钟 * 24小时 * 365天 → KB计算；KB→MB除以1024",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id、CollectorModel、InstallationLocation、ElevationMeters  \n【foreign_keys】：【CollectorId in DataCollectionRecord references DataCollector.Id】（虽然查询未使用但表间存在该关联）  \n【equation_analysis】：【(5次/min * 0.2KB/次) * 60分钟 * 24小时 * 365天 → KB计算；KB→MB除以1024】",
    "evidence": "【step1】:【筛选海拔3000米的采集器】通过WHERE DataCollector.ElevationMeters = 3000过滤符合条件的采集器  【step2】:【计算年数据尺寸基础值】基于5次/分钟×0.2KB/次单位计算：5 * 0.2 * 60(分钟)×24(小时)×365(天)=年总KB数  【step3】:【维度扩展与空间转换】将总数据量进行维度扩展（显示所有采集器字段），并通过/1024计算MB级存储需求",
    "english_step": "【step1】:【Filter data collectors at 3000m elevation】Filter qualified collectors via WHERE DataCollector.ElevationMeters = 3000  【step2】:【Calculate annual data size base value】Based on 5 times/minute × 0.2KB/unit calculation: 5 * 0.2 * 60(minutes) × 24(hours) × 365(days) = annual total KB  【step3】:【Dimension expansion and space conversion】Expand dimensions for total data volume (display all collector fields), and calculate MB-level storage requirements via /1024"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在海平面以上1000米的位置，且其状态为‘运行’，请推断该采集器可能遇到的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector WHERE DataCollector.ElevationMeters = 1000 AND DataCollector.Status = '运行';",
    "type": "3",
    "idx": 244,
    "englishquestion": "If a data collector is installed at a location 1,000 meters above sea level and its status is 'operational,' please infer the environmental conditions the collector might encounter and explain how these conditions could affect the operation of the equipment.",
    "equation_analysis": "equation_analysis：  - ElevationMeters = 1000（通过海拔高度筛选特定采集器）  - Status = '运行'（限定状态为运行中的设备）",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, ElevationMeters, Status, Notes  \n【foreign_keys】：【无关联】  \n【equation_analysis】：  \n- ElevationMeters = 1000（通过海拔高度筛选特定采集器）  \n- Status = '运行'（限定状态为运行中的设备）",
    "evidence": "【step1】:【筛选DataCollector表中海拔为1000米的记录】  【step2】:【在上述结果基础上过滤status为'运行'的记录】  【step3】:【提取目标字段Id/CollectorModel/InstallationLocation/ElevationMeters/Status/Notes作为结果集】",
    "english_step": "【step1】:【Filter records in the DataCollector table where ElevationMeters is 1000】  【step2】:【Filter the above results to include only records where Status is 'Running'】  【step3】:【Select the target fields Id, CollectorModel, InstallationLocation, ElevationMeters, Status, Notes as the result set】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器安装在海平面以上8848米的位置（珠穆朗玛峰峰顶），且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.ElevationMeters = 8848;",
    "type": "4",
    "idx": 245,
    "englishquestion": "Assuming a data collector is installed at a height of 8,848 meters above sea level (the summit of Mount Everest), with a sampling frequency set to 100 times per second, and each collected data volume is 10 KB. Please calculate the total data volume generated by this collector in one year and discuss the feasibility of such a setup in practical applications.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, ElevationMeters  \n【foreign_keys】: 无",
    "evidence": "【step1】:【WHERE子句过滤ElevationMeters=8848的采集器】  【step2】:【SELECT子句计算总数据量：100次/s×10KB×31536000秒（1年）=31536000000KB】  【step3】:【将结果单位转换为TB：31536000000KB ÷ 1073741824 ≈29.33TB，并输出采集器基本参数】",
    "english_step": "【step1】:【WHERE clause to filter collectors with ElevationMeters=8848】  【step2】:【SELECT clause calculates total data volume: 100 times/s × 10KB × 31,536,000 seconds (1 year) = 31,536,000,000KB】  【step3】:【Convert result to TB: 31,536,000,000KB ÷ 1,073,741,824 ≈29.33TB, and output collector's basic parameters】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的温度数据值为25°C，且数据单位为摄氏度，请计算该温度对应的华氏温度，并分析温度对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollectionRecord.DataValue AS Temperature_Celsius, (DataCollectionRecord.DataValue * 9 / 5 + 32) AS Temperature_Fahrenheit FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.DataUnit = '摄氏度' AND DataCollectionRecord.DataValue = 25;",
    "type": "1",
    "idx": 246,
    "englishquestion": "If a data collector records a temperature value of 25°C, with the data unit in Celsius, please calculate the corresponding Fahrenheit temperature and analyze the impact of temperature on equipment operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataUnit, DataValue  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【JOIN数据采集器表与采集记录表，通过CollectorId建立关联关系形成完整数据集】  【step2】:【筛选温度数据类型、单位为摄氏度且数值为25的记录，确保数据准确性】  【step3】:【执行华氏温度转换公式（℃×9/5+32），输出设备ID/摄氏温度/华氏温度的三元组】",
    "english_step": "【step1】: 【JOIN the Data Collector Table with the Collection Records Table via CollectorId to form a complete dataset】  【step2】: 【Filter records where the data type is temperature, unit is Celsius, and value equals 25 to ensure data accuracy】  【step3】: 【Apply the Fahrenheit conversion formula (°C × 9/5 + 32) and output a triple of Device ID, Celsius temperature, and Fahrenheit temperature】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的温度数据值为30°C，且其采集频率为每分钟5次，每次采集的数据量为0.2KB。请计算该采集器在一年内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 5 * 0.2 * 60 * 24 * 365 AS TotalDataSizeKB, (5 * 0.2 * 60 * 24 * 365) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '温度' AND DataValue = 30);",
    "type": "2",
    "idx": 247,
    "englishquestion": "Assuming a data collector captures a temperature reading of 30°C, with a sampling frequency of 5 times per minute, and each captured data point occupies 0.2 KB. Please calculate the total data volume generated by this collector in one year and analyze the required disk space for storing this data.",
    "equation_analysis": "equation_analysis：  总数据量计算公式：  1. **每分钟数据量**: 5次/分钟 * 0.2KB/次 = 1KB/分钟  2. **每日数据量**: 1KB/分钟 * 60分钟/小时 * 24小时 = 1440KB/日  3. **年数据量(KB)**: 1440KB/日 * 365日 ≈ 525,600KB  4. **年数据量(MB)**: 525,600KB / 1024 ≈ 513.28MB  （公式基于每分钟5次固定频率，1年按365天计算，未含闰年/时区/存储冗余因素）",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n【equation_analysis】：  \n总数据量计算公式：  \n1. **每分钟数据量**: 5次/分钟 * 0.2KB/次 = 1KB/分钟  \n2. **每日数据量**: 1KB/分钟 * 60分钟/小时 * 24小时 = 1440KB/日  \n3. **年数据量(KB)**: 1440KB/日 * 365日 ≈ 525,600KB  \n4. **年数据量(MB)**: 525,600KB / 1024 ≈ 513.28MB  \n（公式基于每分钟5次固定频率，1年按365天计算，未含闰年/时区/存储冗余因素）",
    "evidence": "【step1】:执行子查询获取温度30°C的采集器ID  【step2】:主查询获取对应采集器的基础信息  【step3】:进行数据量计算并转换存储单位  （计算公式：5次/分钟 * 0.2KB * 60分钟 * 24小时 * 365天）",
    "english_step": "【step1】: Execute a subquery to retrieve collector IDs with a temperature of 30°C  【step2】: Perform the main query to obtain basic details of the corresponding collectors  【step3】: Calculate data volume and convert storage units  (Formula: 5 times/minute * 0.2KB * 60 minutes * 24 hours * 365 days)"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的温度数据值为-10°C，且其状态为‘运行’，请推断该采集器可能安装的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Longitude, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '温度' AND DataCollectionRecord.DataValue = -10 AND DataCollector.Status = '运行';",
    "type": "3",
    "idx": 248,
    "englishquestion": "If a data collector records a temperature value of -10°C and its status is 'operational', infer the possible environmental conditions where the collector is installed, and explain how these conditions may affect the equipment's operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Latitude, Longitude, ElevationMeters, Status, Notes  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue  \n【foreign_keys】:【DataCollectionRecord.CollectorId → DataCollector.Id】",
    "evidence": "【step1】:【通过JOIN连接DataCollector与DataCollectionRecord表，过滤温度类型数据和运行状态的采集器】  【step2】:【筛选出温度值等于-10的具体数据记录】  【step3】:【提取采集器ID、型号、安装位置、地理坐标、海拔状态等核心字段进行环境分析】",
    "english_step": "【step1】: 【Join the DataCollector and DataCollectionRecord tables, filtering for temperature-type data and collectors in operational status】  【step2】: 【Filter specific data records where temperature value equals -10】  【step3】: 【Extract core fields including collector ID, model, installation location, geographic coordinates, altitude status for environmental analysis】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的温度数据值为1000°C，且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '温度' AND DataValue = 1000);",
    "type": "4",
    "idx": 249,
    "englishquestion": "Assuming a data collector records a temperature value of 1000°C with a sampling frequency set to 100 times per second, and each collected data point occupies 10KB. Please calculate the total data volume generated by this collector over one year, and discuss the feasibility of such settings in practical applications.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue  \n【foreign_keys】: DataCollectionRecord.CollectorId ➔ DataCollector.Id",
    "evidence": "【step1】: 执行子查询从DataCollectionRecord表中筛选出所有DataType为'温度'且DataValue=1000的CollectorId  【step2】: 主查询根据子查询结果获取对应DataCollector的Id、型号、安装位置  【step3】: 计算总数据量：每秒100次×10KB×全年秒数（100*10*60*60*24*365），并通过单位换算得到TB级数据量",
    "english_step": "【step1】: Execute a subquery to filter CollectorIds from DataCollectionRecord table where DataType is 'Temperature' and DataValue=1000  【step2】: Retrieve the corresponding DataCollector's Id, Model, and InstallationLocation in the main query based on subquery results  【step3】: Calculate total data volume: 100 times/sec × 10KB × annual seconds (100*10*60*60*24*365), then convert to TB-level data volume through unit conversion"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的湿度数据值为80%，且数据单位为百分比，请计算该湿度对应的绝对湿度（g/m³），假设环境温度为25°C。",
    "query": "SELECT DataCollector.Id, DataCollectionRecord.DataValue AS RelativeHumidity, (DataCollectionRecord.DataValue / 100 * 3.169 * 1000) / (461.5 * 298.15) AS AbsoluteHumidity_gpm3 FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '湿度' AND DataCollectionRecord.DataUnit = '百分比' AND DataCollectionRecord.DataValue = 80;",
    "type": "1",
    "idx": 250,
    "englishquestion": "If a data collector records a humidity value of 80% with the unit as a percentage, calculate the corresponding absolute humidity (g/m³), assuming the environmental temperature is 25°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id  \n【table】：【DataCollectionRecord】 【columns】：CollectorId,DataValue,DataType,DataUnit  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【JOIN DataCollector与DataCollectionRecord表，通过DataCollector.Id=DataCollectionRecord.CollectorId关联采集器与原始数据记录】  【step2】:【筛选湿度类型(DataType='湿度')、单位为百分比(DataUnit='百分比')、数据值=80的记录】  【step3】:【基于公式计算绝对湿度：(相对湿度值/100 × 3.169 × 1000) ÷ (461.5 × 温度开尔文值)，其中25°C对应298.15K温度值】",
    "english_step": "[step1]: [JOIN DataCollector and DataCollectionRecord tables via DataCollector.Id = DataCollectionRecord.CollectorId to associate collectors with raw data records]  [step2]: [Filter records with humidity type (DataType='Humidity'), unit as percentage (DataUnit='Percentage'), and data value=80]  [step3]: [Calculate absolute humidity using the formula: (Relative Humidity Value/100 × 3.169 × 1000) ÷ (461.5 × Temperature in Kelvin), where 25°C corresponds to 298.15K temperature value]"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的湿度数据值为60%，且其采集频率为每分钟10次，每次采集的数据量为0.5KB。请计算该采集器在一个月（30天）内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 10 * 0.5 * 60 * 24 * 30 AS TotalDataSizeKB, (10 * 0.5 * 60 * 24 * 30) / 1024 AS TotalDataSizeMB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 60);",
    "type": "2",
    "idx": 251,
    "englishquestion": "Assume a data collector records a humidity value of 60%, with a sampling frequency of 10 times per minute, and each sampled data volume is 0.5KB. Calculate the total data volume generated by this collector in one month (30 days) and analyze the required disk space for storing this data.",
    "equation_analysis": "equation_analysis：  1. **公式逻辑**:     - 每分钟10次 × 每次0.5KB = 每分钟5KB     - 每分钟5KB × 60分钟 = 每小时300KB     - 每小时300KB × 24小时 = 每天7200KB     - 每天7200KB × 30天 = 总数据量216,000KB     - 转换为MB: 216,000/1024 ≈ 210.94MB  2. **对应SQL表达式**:     - `10*0.5` (每分钟数据量) → `60*24*30` (月时间换算为分钟)     - `TotalDataSizeKB=10*0.5*60*24*30`     - `TotalDataSizeMB=(10*0.5*60*24*30)/1024`",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n【equation_analysis】：  \n1. **公式逻辑**:  \n   - 每分钟10次 × 每次0.5KB = 每分钟5KB  \n   - 每分钟5KB × 60分钟 = 每小时300KB  \n   - 每小时300KB × 24小时 = 每天7200KB  \n   - 每天7200KB × 30天 = 总数据量216,000KB  \n   - 转换为MB: 216,000/1024 ≈ 210.94MB  \n\n2. **对应SQL表达式**:  \n   - `10*0.5` (每分钟数据量) → `60*24*30` (月时间换算为分钟)  \n   - `TotalDataSizeKB=10*0.5*60*24*30`  \n   - `TotalDataSizeMB=(10*0.5*60*24*30)/1024`",
    "evidence": "【step1】:【执行子查询从DataCollectionRecord筛选数据类型为湿度且值为60的记录】(SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 60)  【step2】:【主查询关联DataCollector表获取设备信息】(SELECT Id, CollectorModel, InstallationLocation FROM DataCollector WHERE Id IN (子查询结果))  【step3】:【进行数据量计算】(计算字段10*0.5*60*24*30生成总KB数，除以1024转换为MB)",
    "english_step": "【step1】: 【Execute a subquery to select CollectorId from DataCollectionRecord where DataType is 'Humidity' and DataValue equals 60】(SELECT CollectorId FROM DataCollectionRecord WHERE DataType = 'Humidity' AND DataValue = 60)  【step2】: 【Main query joins DataCollector table to retrieve device information】(SELECT Id, CollectorModel, InstallationLocation FROM DataCollector WHERE Id IN (subquery result))  【step3】: 【Perform data volume calculation】(Calculate 10*0.5*60*24*30 to generate total KB, then divide by 1024 to convert to MB)"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的湿度数据值为95%，且其状态为‘运行’，请推断该采集器可能安装的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, DataCollector.Latitude, DataCollector.Longitude, DataCollector.ElevationMeters, DataCollector.Status, DataCollector.Notes FROM DataCollector JOIN DataCollectionRecord ON DataCollector.Id = DataCollectionRecord.CollectorId WHERE DataCollectionRecord.DataType = '湿度' AND DataCollectionRecord.DataValue = 95 AND DataCollector.Status = '运行';",
    "type": "3",
    "idx": 252,
    "englishquestion": "If a data collector records a humidity value of 95% and its status is 'running', please deduce the possible environmental conditions where the collector might be installed, and explain the impact of these conditions on the device's operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Latitude, Longitude, ElevationMeters, Status, Notes  \n【table】：【DataCollectionRecord】 【columns】：DataType, DataValue  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【关联DataCollector与DataCollectionRecord表，通过CollectorId筛选出湿度=95%的采集器】  【step2】:【叠加状态条件过滤，仅保留Status='运行'的有效设备】  【step3】:【返回安装位置/经纬度/海拔等地理特征，关联DataCollectionRule阈值规则推断高湿度环境（如水库/热带雨林）对设备造成湿热腐蚀风险】",
    "english_step": "【Step1】: 【Associate DataCollector and DataCollectionRecord tables, filter collectors with humidity=95% through CollectorId】  【Step2】: 【Apply status condition filtering to retain only valid devices with Status='Running'】  【Step3】: 【Return geographic features (installation location/longitude & latitude/altitude), associate DataCollectionRule threshold rules to infer humidity and heat corrosion risks on devices in high humidity environments (e.g., reservoirs/tropical rainforests)】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的湿度数据值为200%，且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT DataCollector.Id, DataCollector.CollectorModel, DataCollector.InstallationLocation, 100 * 10 * 60 * 60 * 24 * 365 AS TotalDataSizeKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataSizeTB FROM DataCollector WHERE DataCollector.Id IN (SELECT CollectorId FROM DataCollectionRecord WHERE DataType = '湿度' AND DataValue = 200);",
    "type": "4",
    "idx": 253,
    "englishquestion": "Assuming a data collector records a humidity value of 200%, with a sampling frequency set to 100 times per second and each sample generating 10KB of data. Calculate the total data volume produced by this collector over one year, and discuss the practicality of such a setup in real-world applications.",
    "equation_analysis": "equation_analysis：  1. **单次采集数据量**（次/秒 × KB/次）: `100次/秒 × 10KB/次 = 1000KB/s`  2. **年总数据量（KB）**: `1000KB/s × 60秒/min × 60分/小时 × 24小时/天 × 365天/年 = 100×10×31536000 = 31536000000KB`  3. **单位转换（KB→TB）**: `31536000000KB ÷ 1024（→MB） ÷ 1024（→GB） ÷ 1024（→TB） ≈ 29.31TB`  （计算过程符合存储单位进制规范，公式逻辑正确）",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：  \n1. **单次采集数据量**（次/秒 × KB/次）: `100次/秒 × 10KB/次 = 1000KB/s`  \n2. **年总数据量（KB）**: `1000KB/s × 60秒/min × 60分/小时 × 24小时/天 × 365天/年 = 100×10×31536000 = 31536000000KB`  \n3. **单位转换（KB→TB）**: `31536000000KB ÷ 1024（→MB） ÷ 1024（→GB） ÷ 1024（→TB） ≈ 29.31TB`  \n\n（计算过程符合存储单位进制规范，公式逻辑正确）",
    "evidence": "【step1】:【执行子查询从DataCollectionRecord中筛选出数据值=200且数据类型为'湿度'的CollectorId】  【step2】:【关联DataCollector主表，根据子查询结果提取对应采集器的Id/CollectorModel/InstallationLocation字段】  【step3】:【使用每秒100次×10KB的计算规则，对每个有效采集器执行时间维度扩算(秒→年)并分别输出KB/TB两个单位的存储量计算结果】",
    "english_step": "【step1】: 【Execute a subquery to filter CollectorIds from DataCollectionRecord where data value = 200 and data type is 'Humidity'】  【step2】: 【Join with the main DataCollector table to extract Id/CollectorModel/InstallationLocation fields corresponding to the subquery results】  【step3】: 【For each valid collector, perform temporal dimension expansion (seconds → years) using the calculation rule of 100 times/sec × 10KB, and output storage volume results in both KB and TB units】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的压力数据值为1013 hPa，且数据单位为百帕，请计算该压力对应的标准大气压（atm），并分析压力对设备运行的影响。",
    "query": "SELECT dcr.Id AS RecordId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (dcr.DataValue / 1013.25) AS PressureInAtm, CASE WHEN (dcr.DataValue / 1013.25) > 1 THEN '高压环境，可能影响设备密封性和结构强度' WHEN (dcr.DataValue / 1013.25) < 1 THEN '低压环境，可能影响设备性能' ELSE '标准大气压，设备运行正常' END AS PressureImpact FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa';",
    "type": "1",
    "idx": 254,
    "englishquestion": "If a data collector records a pressure value of 1013 hPa, and the unit of the data is hectopascal, please calculate the corresponding standard atmospheric pressure (atm) for this pressure and analyze the impact of the pressure on equipment operation.",
    "equation_analysis": "equation_analysis：DataValue(hPa) / 1013.25 = PressureInAtm(atm), 应用标准大气压换算公式，1 atm标准值=1013.25 hPa",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：Id, CollectorId, DataType, DataValue, DataUnit  \n【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【foreign_keys】：【CollectorId (DataCollectionRecord) → Id (DataCollector)】  \n【equation_analysis】：【DataValue(hPa) / 1013.25 = PressureInAtm(atm), 应用标准大气压换算公式，1 atm标准值=1013.25 hPa】",
    "evidence": "【step1】:【JOIN关联数据采集器和采集记录表】在DataCollectionRecord表通过CollectorId外键关联DataCollector表，筛选DataType='压力'且DataValue=1013、DataUnit='hPa'的记录  【step2】:【计算标准大气压值】对筛选结果进行单位转换计算，通过(dcr.DataValue / 1013.25)表达式将百帕转换为标准大气压单位atm  【step3】:【压力影响分析判读】使用CASE WHEN条件语句根据计算后的压力值进行工况判定：大于1为高压警告，小于1为低压风险，等于1为正常运行",
    "english_step": "【step1】: 【JOIN data collector and collection record tables】 In the DataCollectionRecord table, join with the DataCollector table via the foreign key CollectorId, filtering records where DataType='Pressure' AND DataValue=1013 AND DataUnit='hPa'  【step2】: 【Calculate standard atmospheric pressure value】 Perform unit conversion on filtered results using (dcr.DataValue / 1013.25) to convert hPa to standard atmospheric pressure unit (atm)  【step3】: 【Pressure impact analysis interpretation】 Use CASE WHEN conditional statement to determine operational conditions based on calculated pressure values: >1 indicates high-pressure warning, <1 indicates low-pressure risk, =1 indicates normal operation"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的压力数据值为500 hPa，且其采集频率为每分钟5次，每次采集的数据量为0.2KB。请计算该采集器在一年内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.2 AS TotalDataKB, COUNT(dcr.Id) * 0.2 / 1024 AS TotalDataMB, COUNT(dcr.Id) * 0.2 / 1024 / 1024 AS TotalDataGB, CASE WHEN COUNT(dcr.Id) * 0.2 / 1024 / 1024 > 1000 THEN '需要大容量存储设备（如TB级硬盘）' WHEN COUNT(dcr.Id) * 0.2 / 1024 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 500 AND dcr.DataUnit = 'hPa' AND dcr.CollectionTime BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;",
    "type": "2",
    "idx": 255,
    "englishquestion": "Assuming a data collector captures pressure data with a value of 500 hPa, and its sampling frequency is 5 times per minute, with each captured data amounting to 0.2 KB. Calculate the total data volume generated by the collector within one year and analyze the required disk space for storing this data.",
    "equation_analysis": "equation_analysis：  1. **TotalCollections**: `COUNT(dcr.Id)` 统计全年所有满足条件的采集记录总数  2. **TotalDataKB**: `COUNT × 0.2 KB` 单次数据量（0.2KB）×采集次数  3. **TotalDataMB/GB**: 逐次转换为 MB（/1024）、GB（/1024/1024）  4. **StorageRecommendation**:     - `当总数据量 >1000GB → 需要TB级存储`     - `100GB < 总数据量 ≤1000GB → 数百GB硬盘`     - `≤100GB → 常规存储`",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：Id, CollectorId, DataType, DataValue, DataUnit, CollectionTime  \n【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n\n【equation_analysis】：  \n1. **TotalCollections**: `COUNT(dcr.Id)` 统计全年所有满足条件的采集记录总数  \n2. **TotalDataKB**: `COUNT × 0.2 KB` 单次数据量（0.2KB）×采集次数  \n3. **TotalDataMB/GB**: 逐次转换为 MB（/1024）、GB（/1024/1024）  \n4. **StorageRecommendation**:  \n   - `当总数据量 >1000GB → 需要TB级存储`  \n   - `100GB < 总数据量 ≤1000GB → 数百GB硬盘`  \n   - `≤100GB → 常规存储`",
    "evidence": "【step1】:【联表筛选有效记录】JOIN关联DataCollector和DataCollectionRecord，过滤符合条件的压力数据(DataType='压力'、DataValue=500、DataUnit='hPa'、采集时间在2022全年)  【step2】:【聚合计算基础指标】按采集器分组统计总采集次数，通过COUNT(dcr.Id)*5次/分钟*计算公式(365天/年×24小时×60分钟×5次/分钟)等比例换算，结合0.2KB/次计算数据量单位转换  【step3】:【分级存储建议】根据总GB计算结果，用CASE WHEN条件判断输出三种存储设备建议，阈值分别为>1000GB、>100GB及更低量级",
    "english_step": "【step1】: 【Join Tables to Filter Valid Records】 JOIN the DataCollector and DataCollectionRecord tables, filtering qualified pressure data (DataType='Pressure', DataValue=500, DataUnit='hPa', collection time within full year 2022).  【step2】: 【Aggregate Calculation of Base Metrics】 Group by collector to calculate total collection count. Convert via COUNT(dcr.Id)*5 times/minute × proportional formula (365 days/year × 24 hours × 60 minutes × 5 times/minute), combined with 0.2KB/time for data volume unit conversion.  【step3】: 【Tiered Storage Recommendations】 Use CASE WHEN conditions to output three storage device recommendations based on total GB results, with thresholds: >1000GB, >100GB, and lower tiers."
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的压力数据值为2000 hPa，且其状态为‘运行’，请推断该采集器可能安装的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dc.ElevationMeters, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 2000 AND dc.Status = '运行' THEN '高压环境（如深海或高压工业设备），可能导致设备密封失效或结构变形' ELSE '环境条件正常' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 2000 AND dc.Status = '运行' THEN '建议定期检查设备密封性和结构强度，确保设备正常运行' ELSE '无需特殊维护' END AS MaintenanceRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 2000 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';",
    "type": "3",
    "idx": 256,
    "englishquestion": "If a data collector records a pressure value of 2000 hPa and its status is 'operational', please infer the possible environmental conditions where the collector might be installed, and explain how these conditions affect the equipment's operation.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status, ElevationMeters  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue, DataUnit  \n【foeign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【关联DataCollector与DataCollectionRecord表，筛选压力类型=2000hPa且状态为'运行'的记录】  【step2】:【应用CASE条件判断生成环境评估结论：当满足压力阈值和运行状态时输出高压环境警告及维护建议】  【step3】:【输出目标字段包含设备ID、型号、安装位置、海拔高度、诊断结论和维护措施等完整结果集】",
    "english_step": "【step1】: 【Join the DataCollector and DataCollectionRecord tables, filter records where pressure type = 2000hPa and status is 'Running'】  【step2】: 【Apply CASE conditional logic to generate environmental assessment conclusions: Output high-pressure environment warnings and maintenance recommendations when pressure threshold and operational status are met】  【step3】: 【Output target fields including complete result set with device ID, model, installation location, altitude, diagnostic conclusion, and maintenance measures】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的压力数据值为100,000 hPa，且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 100000 AND dcr.DataUnit = 'hPa';",
    "type": "4",
    "idx": 257,
    "englishquestion": "Assuming a data collector records a pressure value of 100,000 hPa with a sampling frequency set to 100 times per second, and each collected data sample is 10KB in size. Calculate the total data volume generated by this collector over one year, and discuss the practicality of such a configuration in real-world applications.",
    "equation_analysis": "equation_analysis：总数据量 = 采集频率(100次/s) × 单次数据量(10KB) × 年秒数(60s×60m×24h×365d)。公式层数递进为KB→MB(÷1024)→GB(÷1024²)→TB(÷1024³)→PB(÷1024⁴)",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：Id, CollectorId, DataValue, DataUnit  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n【equation_analysis】：【总数据量 = 采集频率(100次/s) × 单次数据量(10KB) × 年秒数(60s×60m×24h×365d)。公式层数递进为KB→MB(÷1024)→GB(÷1024²)→TB(÷1024³)→PB(÷1024⁴)】",
    "evidence": "【step1】:【关联DataCollector与DataCollectionRecord表，过滤'压力'类型/数值100000hPa/单位hPa的记录】  【step2】:【按100次/sec * 10KB/次 * 年时间系数计算数据总量，换算KB/MB/GB/TB/PB单位】  【step3】:【通过CASE表达式对PB级存储进行可行性判断，超过1PB标记为不可行】",
    "english_step": "【step1】:【Join DataCollector and DataCollectionRecord tables, filter records with type 'Pressure', value 100000hPa, and unit hPa】  【step2】:【Calculate total data volume using 100 times/sec * 10KB/time * annual time coefficient, convert units to KB/MB/GB/TB/PB】  【step3】:【Use CASE expression to determine PB-level storage feasibility, marking 'Infeasible' if exceeding 1PB】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的温度最小值为-273.15°C，且数据单位为摄氏度，请解释该值的物理意义，并分析其对设备运行的影响。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = -273.15 AND dcr.DataUnit = '°C' THEN '绝对零度，分子和原子热运动停止' ELSE '非绝对零度' END AS PhysicalMeaning, CASE WHEN dcr.DataValue = -273.15 AND dcr.DataUnit = '°C' THEN '极端低温可能导致设备材料脆化或电子元件失效' ELSE '温度在正常范围内，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = -273.15 AND dcr.DataUnit = '°C';",
    "type": "1",
    "idx": 258,
    "englishquestion": "If a data collector records a minimum temperature of -273.15°C, and the data unit is Celsius, explain the physical meaning of this value and analyze its impact on equipment operation.",
    "equation_analysis": "equation_analysis：  1. CASE表达式：当DataValue=-273.15且DataUnit='°C'时，返回'绝对零度'的物理意义（温度理论下限，分子运动停止）与设备影响（材料脆化/元件失效）；反之返回正常状态  2. 查询逻辑：通过JOIN关联采集器基础信息与温度记录，筛选特定温度阈值(-273.15°C)的异常数据，并附加热力学解释和工程影响说明",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataValue, DataUnit, DataType  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：  \n1. CASE表达式：当DataValue=-273.15且DataUnit='°C'时，返回'绝对零度'的物理意义（温度理论下限，分子运动停止）与设备影响（材料脆化/元件失效）；反之返回正常状态  \n2. 查询逻辑：通过JOIN关联采集器基础信息与温度记录，筛选特定温度阈值(-273.15°C)的异常数据，并附加热力学解释和工程影响说明",
    "evidence": "【step1】:【连接DataCollector和DataCollectionRecord表】通过CollectorId与Id进行JOIN操作，建立采集器基本信息与温度记录的关联关系  【step2】:【应用三个条件筛选】限定数据类型为'温度'且DataValue=-273.15、DataUnit='°C'，精确过滤出极端温度记录  【step3】:【构造语义解释字段】通过双CASE语句生成PhysicalMeaning(绝对零度的物理意义)和ImpactOnDevice(设备运行影响)字段，完成数据增强标注",
    "english_step": "[step1]: [Join DataCollector and DataCollectionRecord tables] Perform JOIN operation via CollectorId and Id to establish the relationship between collector basic information and temperature records  [step2]: [Apply three condition filters] Restrict data type to 'Temperature' with DataValue=-273.15 and DataUnit='°C' to precisely filter extreme temperature records  [step3]: [Construct semantic interpretation fields] Generate PhysicalMeaning (physical significance of absolute zero) and ImpactOnDevice (device operation impact) fields through dual CASE statements for data enhancement annotation"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的湿度最小值为0%，且其采集频率为每分钟10次，每次采集的数据量为0.5KB。请计算该采集器在一个月（30天）内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.5 AS TotalDataKB, COUNT(dcr.Id) * 0.5 / 1024 AS TotalDataMB, CASE WHEN COUNT(dcr.Id) * 0.5 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '湿度' AND dcr.DataValue = 0 AND dcr.DataUnit = '%' AND dcr.CollectionTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;",
    "type": "2",
    "idx": 259,
    "englishquestion": "Assuming a data collector has a minimum humidity reading of 0%, a sampling rate of 10 times per minute, and each sampling produces 0.5KB of data. Please calculate the total data volume generated by this collector in one month (30 days) and analyze the disk space required to store this data.",
    "equation_analysis": "equation_analysis：  1. **单条记录数据量**：0.5KB/次  2. **总采集次数**：COUNT(dcr.Id) (按月统计符合条件的湿度=0%的记录数)  3. **总数据量计算**：     - 未转换：`COUNT(dcr.Id) * 0.5` (转为KB)     - KB→MB：`TotalDataKB / 1024`  4. **存储建议逻辑**：`IF TotalDataMB > 100 → 中等容量存储设备 ELSE 常规设备`  （公式隐含假设：月内所有采集记录的湿度值均=0%）",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：Id, CollectorId, DataType, DataValue, DataUnit, CollectionTime  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：  \n1. **单条记录数据量**：0.5KB/次  \n2. **总采集次数**：COUNT(dcr.Id) (按月统计符合条件的湿度=0%的记录数)  \n3. **总数据量计算**：  \n   - 未转换：`COUNT(dcr.Id) * 0.5` (转为KB)  \n   - KB→MB：`TotalDataKB / 1024`  \n4. **存储建议逻辑**：`IF TotalDataMB > 100 → 中等容量存储设备 ELSE 常规设备`  \n（公式隐含假设：月内所有采集记录的湿度值均=0%）",
    "evidence": "【step1】:【执行数据过滤与表连接】通过JOIN连接DataCollector和DataCollectionRecord表，按湿度=0%、单位=%、2023年1月的时间范围进行条件过滤  【step2】:【分维度统计与数据转换】按采集器维度(Id/型号/位置/状态)聚合计录条数，通过COUNT(dcr.Id)*0.5公式计算总KB数，并转换为MB单位  【step3】:【存储建议生成】使用CASE WHEN条件判断总MB是否超过100MB阈值，动态生成存储设备类型建议",
    "english_step": "【step1】: 【Perform data filtering and table joins】JOIN DataCollector and DataCollectionRecord tables, filter by conditions: humidity=0%, unit=%, time range of January 2023  【step2】: 【Dimension-based statistics and data conversion】Aggregate by collector dimensions (Id/Model/Location/Status), calculate total KB using COUNT(dcr.Id)*0.5 formula, then convert to MB  【step3】: 【Storage recommendation generation】Use CASE WHEN to determine if total MB exceeds 100MB threshold, dynamically generate storage device type recommendations"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的压力最小值为0 hPa，且其状态为‘运行’，请推断该采集器可能安装的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' THEN '真空环境（如太空或实验室真空室）' ELSE '非真空环境' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' THEN '真空环境可能导致设备散热不良或材料挥发' ELSE '环境条件正常，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 0 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';",
    "type": "3",
    "idx": 260,
    "englishquestion": "If a data collector records a minimum pressure of 0 hPa and its status is 'operating', infer the possible environmental conditions where the collector is installed, and explain how these conditions affect the operation of the equipment.",
    "equation_analysis": "equation_analysis：EnvironmentCondition公式(DataValue=0 AND DataUnit='hPa')⇒'真空环境'；Impact公式(DataValue=0 AND Unit='hPa')⇒'散热不良/材料挥发')",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：DataValue, DataUnit, DataType, CollectorId  \n【foreign_keys】：【DataCollectionRecord.CollectorId】→【DataCollector.Id】  \n【equation_analysis】：【EnvironmentCondition公式】(DataValue=0 AND DataUnit='hPa')⇒'真空环境'；【Impact公式】(DataValue=0 AND Unit='hPa')⇒'散热不良/材料挥发')",
    "evidence": "【step1】:【执行两表联接获取基础数据】  通过`JOIN DataCollector dc`连接DataCollector和DataCollectionRecord表，关联字段为`dc.Id = dcr.CollectorId`，获取采集器的基本信息（Id、型号、位置、状态）和采集记录中的压力数据（值、单位）。  【step2】:【应用多重过滤条件】  根据`WHERE`子句筛选：  1. `dcr.DataType='压力'` 过滤出压力类型数据  2. `dcr.DataValue=0` AND `dcr.DataUnit='hPa'` 检测压力最小值是否符合真空特征  3. `dc.Status='运行'` 确保采集器处于运行状态  【step3】:【动态生成环境判断逻辑】  通过`CASE WHEN`语句生成两列逻辑推断：  1. `EnvironmentCondition`列：基于0 hPa压力值判断是否为真空环境  2. `ImpactOnDevice`列：根据环境类型给出真空环境对设备的负面影响说明（非真空环境则显示正常状态）",
    "english_step": "【step1】:【Perform two-table join to obtain base data】  Join `DataCollector dc` with `DataCollectionRecord` via `JOIN` using join fields `dc.Id = dcr.CollectorId`, retrieving collector basic information (Id, model, location, status) and pressure data entries (value, unit) from collection records.  【step2】:【Apply multiple filtering conditions】  Filter using `WHERE` clause:  1. `dcr.DataType='Pressure'` to filter pressure-type data  2. `dcr.DataValue=0` AND `dcr.DataUnit='hPa'` to check if minimum pressure value conforms to vacuum characteristics  3. `dc.Status='Running'` to ensure collectors are operational  【step3】:【Dynamically generate environment judgment logic】  Create two logical inference columns using `CASE WHEN`:  1. `EnvironmentCondition` column: Determine vacuum environment based on 0 hPa pressure value  2. `ImpactOnDevice` column: Describe vacuum environment's negative effects on devices (indicate normal status for non-vacuum environments)"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的温度最小值为-1000°C，且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = -1000 AND dcr.DataUnit = '°C';",
    "type": "4",
    "idx": 261,
    "englishquestion": "Assume a data collector records a minimum temperature of -1000°C, with a sampling frequency set to 100 times per second, and each data sample occupies 10KB. Calculate the total data volume generated by this collector in one year and discuss the practicality of such settings in real-world applications.",
    "equation_analysis": "equation_analysis：(采集频率100次/秒)*单次数据10KB*时间(秒->年) = 100*10*60*60*24*365 = 年度数据量基数 (KB)；分步换算为MB/GB/TB/PB",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：DataValue, DataUnit, DataType, CollectorId  \n【foreign_keys】：【DataCollectionRecord.CollectorId → DataCollector.Id】  \n【equation_analysis】：【(采集频率100次/秒)*单次数据10KB*时间(秒->年) = 100*10*60*60*24*365 = 年度数据量基数 (KB)；分步换算为MB/GB/TB/PB】",
    "evidence": "【step1】:【JOIN两张表获取监控记录】使用内连接关联DataCollector和DataCollectionRecord表，通过CollectorId=Id的关联条件，过滤DataType为温度且DataValue=-1000°C的异常数据记录  【step2】:【计算存储容量维度】在SELECT子句中通过数学运算计算各存储单位：(100次/秒 × 10KB × 60秒 × 60分 × 24小时 × 365天) 计算年总数据量，逐步转换KB→MB→GB→TB→PB单位进行展示  【step3】:【生成可行性分析】通过CASE表达式判断当PB级数据量超过1时返回'数据量过大，存储和处理不可行'，否则返回'数据量在可接受范围内'，同时通过FeasibilityAnalysis字段输出评估结论",
    "english_step": "[Step 1]: [JOIN tables to obtain monitoring records] Perform an INNER JOIN between DataCollector and DataCollectionRecord tables using the association condition CollectorId = Id, filtering abnormal data records where DataType is Temperature and DataValue is -1000°C  [Step 2]: [Calculate storage capacity dimensions] In the SELECT clause, compute storage units through mathematical operations: Calculate annual total data volume using (100 times/second × 10KB × 60 seconds × 60 minutes × 24 hours × 365 days), then progressively convert units from KB→MB→GB→TB→PB for display  [Step 3]: [Generate feasibility analysis] Use CASE expression to determine: If PB-level data volume exceeds 1, return \"Data volume too large, storage and processing infeasible\"; otherwise return \"Data volume within acceptable range\". Output evaluation conclusion through FeasibilityAnalysis field"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的温度最大值为1000°C，且数据单位为摄氏度，请计算该温度对应的开尔文温度，并分析高温对设备运行的影响。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (dcr.DataValue + 273.15) AS TemperatureInKelvin, CASE WHEN dcr.DataValue = 1000 THEN '高温可能导致设备内部材料膨胀、电子元件失效或散热系统超负荷运行' ELSE '温度在正常范围内，设备运行正常' END AS ImpactOnDevice FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = 1000 AND dcr.DataUnit = '°C';",
    "type": "1",
    "idx": 262,
    "englishquestion": "If a data collector records a maximum temperature of 1000°C, and the unit is in Celsius, please calculate the corresponding temperature in Kelvin and analyze the impact of high temperature on equipment operation.",
    "equation_analysis": "equation_analysis：温度转换公式为`K=°C+273.15`，通过对DataValue字段增加273.15实现摄氏转开尔文；CASE语句根据DataValue是否等于1000°C判断高温影响设备运行状态",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：Id, CollectorId, DataValue, DataUnit, DataType  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：温度转换公式为`K=°C+273.15`，通过对DataValue字段增加273.15实现摄氏转开尔文；CASE语句根据DataValue是否等于1000°C判断高温影响设备运行状态",
    "evidence": "【step1】:【从DataCollectionRecord表筛选温度=1000°C的记录】通过WHERE子句过滤数据类型为温度、数值1000、单位°C的原始数据记录  【step2】:【通过JOIN关联DataCollector表获取采集器信息】使用CollectorId外键联表获取采集器的ID、型号、位置、状态等元数据  【step3】:【计算开尔文温度并生成设备影响分析】在SELECT子句进行温度单位换算和条件判断：(1)添加TemperatureInKelvin字段执行+273.15计算；(2)使用CASE语句对1000°C高温情况生成设备影响描述",
    "english_step": "【step1】:【Filter records with temperature=1000°C from DataCollectionRecord table】Use WHERE clause to filter raw data records where data type is temperature, value is 1000, and unit is °C  【step2】:【JOIN with DataCollector table to obtain collector information】Use CollectorId foreign key to join tables and retrieve collector metadata including ID, model, location, status  【step3】:【Calculate Kelvin temperature and generate equipment impact analysis】In SELECT clause:  (1) Add TemperatureInKelvin field with +273.15 conversion  (2) Use CASE statement to generate equipment impact description for 1000°C high temperature condition"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的湿度最大值为100%，且其采集频率为每分钟10次，每次采集的数据量为0.5KB。请计算该采集器在一个月（30天）内产生的总数据量，并分析存储这些数据所需的磁盘空间。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, COUNT(dcr.Id) AS TotalCollections, COUNT(dcr.Id) * 0.5 AS TotalDataKB, COUNT(dcr.Id) * 0.5 / 1024 AS TotalDataMB, CASE WHEN COUNT(dcr.Id) * 0.5 / 1024 > 100 THEN '需要中等容量存储设备（如数百GB硬盘）' ELSE '常规存储设备即可满足需求' END AS StorageRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '湿度' AND dcr.DataValue = 100 AND dcr.DataUnit = '%' AND dcr.CollectionTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY dc.Id, dc.CollectorModel, dc.InstallationLocation, dc.Status;",
    "type": "2",
    "idx": 263,
    "englishquestion": "Assuming the maximum humidity value collected by a data collector is 100%, with a collection frequency of 10 times per minute and a data volume of 0.5KB per collection. Please calculate the total data volume generated by the collector in one month (30 days), and analyze the disk space required to store this data.",
    "equation_analysis": "equation_analysis：TotalDataKB = COUNT(dcr.Id) * 0.5，TotalDataMB = TotalDataKB / 1024；STORAGE判断逻辑：IF(TotalDataMB >100 THEN 需要中等存储 ELSE 常规存储)  （注：公式参数取自Query中明确的`COUNT(dcr.Id) * 0.5`逻辑，未包含问题描述的采集频率计算部分。实际用户问题的计算需包含频率公式：总数据量 = (10次/分钟 * 1440分钟/天 * 30天) *0.5KB=4320000KB≈4218.75MB。该结果与Query结果可能冲突，因Query未按实际频率统计湿度记录，仅统计DataValue=100的记录数量）",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：Id, CollectorId, DataType, DataValue, DataUnit, CollectionTime  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：TotalDataKB = COUNT(dcr.Id) * 0.5，TotalDataMB = TotalDataKB / 1024；STORAGE判断逻辑：IF(TotalDataMB >100 THEN 需要中等存储 ELSE 常规存储)  \n\n（注：公式参数取自Query中明确的`COUNT(dcr.Id) * 0.5`逻辑，未包含问题描述的采集频率计算部分。实际用户问题的计算需包含频率公式：总数据量 = (10次/分钟 * 1440分钟/天 * 30天) *0.5KB=4320000KB≈4218.75MB。该结果与Query结果可能冲突，因Query未按实际频率统计湿度记录，仅统计DataValue=100的记录数量）",
    "evidence": "【step1】:【关联DataCollector和DataCollectionRecord表，通过CollectorId进行JOIN操作，筛选2023年1月期间'湿度'类型且值为100%（最大值）的采集记录】  【step2】:【按采集器维度分组统计总采集次数，结合每次0.5KB的数据量计算总存储需求（KB/MB转换）】  【step3】:【应用CASE条件判断逻辑，根据总数据量(MB)决定存储设备类型建议：超过100MB需要中等容量设备，否则常规即可】",
    "english_step": "【step1】: 【Join DataCollector and DataCollectionRecord tables via CollectorId, filter collection records of \"humidity\" type with value 100% (maximum) during January 2023】  【step2】: 【Group by collector dimension to count total collections, calculate total storage requirements (KB/MB conversion) using 0.5KB data per collection】  【step3】: 【Apply CASE conditional logic to recommend storage device type based on total data volume (MB): >100MB requires medium-capacity device, otherwise regular】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的压力最大值为1013 hPa，且其状态为‘运行’，请推断该采集器可能安装的环境条件，并说明这些条件对设备运行的影响。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, CASE WHEN dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' THEN '海平面环境，可能受到季节性气候变化的影响' ELSE '非海平面环境' END AS EnvironmentCondition, CASE WHEN dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' THEN '建议定期检查设备防护措施，确保设备在极端天气下正常运行' ELSE '环境条件稳定，无需特殊维护' END AS MaintenanceRecommendation FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '压力' AND dcr.DataValue = 1013 AND dcr.DataUnit = 'hPa' AND dc.Status = '运行';",
    "type": "3",
    "idx": 264,
    "englishquestion": "If a data collector records a maximum pressure of 1013 hPa and its status is 'operating', infer the possible environmental conditions where the collector is installed, and explain the impact of these conditions on the equipment's operation.",
    "equation_analysis": "equation_analysis：  1. **数据筛选逻辑**：压力值 = 1013 hPa AND 设备状态 = '运行'  2. **物理推断公式**：海平面标准大气压为1013.25 hPa，近似取整后判定环境类型(`DataValue = 1013 AND DataUnit = 'hPa'`)  3. **关联映射公式**：通过CASE语句将数值匹配转化为环境描述(`海平面环境|非海平面环境`)和维护建议(`极端天气防护|稳定维护`)",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue, DataUnit  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：  \n1. **数据筛选逻辑**：压力值 = 1013 hPa AND 设备状态 = '运行'  \n2. **物理推断公式**：海平面标准大气压为1013.25 hPa，近似取整后判定环境类型(`DataValue = 1013 AND DataUnit = 'hPa'`)  \n3. **关联映射公式**：通过CASE语句将数值匹配转化为环境描述(`海平面环境|非海平面环境`)和维护建议(`极端天气防护|稳定维护`)",
    "evidence": "【step1】:【执行JOIN操作关联数据采集器和采集记录】通过CollectorId外键将DataCollector表与DataCollectionRecord表进行内连接，建立设备基础信息与采集数据的对应关系  【step2】:【应用多条件过滤】按WHERE子句限定条件筛选：压力类型、数值=1013hPa、状态为'运行'的设备记录，满足大气压力等于海平面标准值的特性  【step3】:【生成环境判断字段】通过CASE表达式构建两种派生字段：基于标准大气压值判断海拔环境类型，并输出相应的维护建议到结果集中",
    "english_step": "【step1】:【Perform JOIN operation to associate data collectors with collection records】Inner join DataCollector table with DataCollectionRecord table via CollectorId foreign key, establishing correspondence between device basic information and collected data  【step2】:【Apply multi-condition filtering】Filter records by WHERE clause criteria: pressure type, value=1013hPa, device status='Running', meeting characteristics of atmospheric pressure equal to standard sea-level value  【step3】:【Generate environmental judgment fields】Construct two derived fields using CASE expression: determine altitude environment type based on standard atmospheric pressure value, and output corresponding maintenance recommendations to result set"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的温度最大值为1,000,000°C，且其采集频率设置为每秒100次，每次采集的数据量为10KB。请计算该采集器在一年内产生的总数据量，并讨论这种设置在实际应用中的可行性。",
    "query": "SELECT dc.Id AS CollectorId, dc.CollectorModel, dc.InstallationLocation, dc.Status, dcr.DataValue, dcr.DataUnit, (100 * 10 * 60 * 60 * 24 * 365) AS TotalDataKB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 AS TotalDataMB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 AS TotalDataGB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 AS TotalDataTB, (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 AS TotalDataPB, CASE WHEN (100 * 10 * 60 * 60 * 24 * 365) / 1024 / 1024 / 1024 / 1024 > 1 THEN '数据量过大，存储和处理不可行' ELSE '数据量在可接受范围内' END AS FeasibilityAnalysis FROM DataCollectionRecord dcr JOIN DataCollector dc ON dcr.CollectorId = dc.Id WHERE dcr.DataType = '温度' AND dcr.DataValue = 1000000 AND dcr.DataUnit = '°C';",
    "type": "4",
    "idx": 265,
    "englishquestion": "Assuming a data collector has a maximum temperature reading of 1,000,000°C, with a sampling frequency set to 100 times per second, and each collected data point is 10KB in size. Calculate the total data volume generated by this collector in one year and discuss the feasibility of such a setup in practical applications.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, CollectorModel, InstallationLocation, Status  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, DataValue, DataUnit  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【通过JOIN关联DataCollector和DataCollectionRecord表，筛选数据值=1,000,000的温度记录】  【step2】:【计算总数据量转换单位层级（KB → MB → GB → TB → PB）】  【step3】:【使用CASE表达式进行可行性判断，当总数据量超过1PB时标记为不可行】",
    "english_step": "【step1】: 【JOIN the DataCollector and DataCollectionRecord tables to filter temperature records with data value = 1,000,000】  【step2】: 【Convert total data volume through unit hierarchy (KB → MB → GB → TB → PB)】  【step3】: 【Use CASE expression for feasibility check - mark as infeasible when total data volume exceeds 1PB】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器安装在海拔高度为3000米的位置，采集到的温度数据平均值为15°C，假设该位置的大气压力为70kPa，请计算该位置的气压高度公式中的温度递减率。",
    "query": "SELECT ((T1.AverageValue - T2.AverageValue) / (DC1.ElevationMeters - DC2.ElevationMeters)) AS TemperatureLapseRate FROM DataCollector DC1 JOIN DataCollectionRecord T1 ON DC1.Id = T1.CollectorId JOIN DataCollector DC2 ON DC2.ElevationMeters = DC1.ElevationMeters - 100 JOIN DataCollectionRecord T2 ON DC2.Id = T2.CollectorId WHERE DC1.ElevationMeters = 3000 AND T1.DataType = '温度' AND T2.DataType = '温度' AND T1.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DC1.Id AND DataType = '温度') AND T2.CollectionTime = (SELECT MAX(CollectionTime) FROM DataCollectionRecord WHERE CollectorId = DC2.Id AND DataType = '温度');",
    "type": "1",
    "idx": 266,
    "englishquestion": "If a data collector is installed at an altitude of 3000 meters and the average temperature data collected is 15°C, assuming the atmospheric pressure at that location is 70kPa, please calculate the temperature lapse rate in the barometric altitude formula for that location.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, ElevationMeters  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, AverageValue, CollectionTime  \n【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【获取3000米高度采集器(DC1)的温度数据】通过WHERE条件定位海拔3000米的数据采集器，使用子查询获取该采集器最新的温度平均值（T1.AverageValue=15°C）  【step2】:【获取2900米高度采集器(DC2)的温度数据】通过DC2.ElevationMeters=DC1.ElevationMeters-100关联相邻海拔采集器，并使用子查询获取对应的最新温度平均值（T2.AverageValue）  【step3】:【计算温度垂直递减率】通过公式(T1温度-T2温度)/(DC1海拔-DC2海拔)计算温度梯度，其中DC1-DC2海拔差固定为100米保证数值稳定性】",
    "english_step": "【step1】:【Retrieve temperature data from the collector at 3000m elevation (DC1)】Use WHERE conditions to locate the data collector at 3000m elevation, and employ a subquery to obtain its latest temperature average value (T1.AverageValue=15°C).  【step2】:【Retrieve temperature data from the collector at 2900m elevation (DC2)】Associate adjacent elevation collectors via DC2.ElevationMeters=DC1.ElevationMeters-100, and use a subquery to obtain the corresponding latest temperature average value (T2.AverageValue).  【step3】:【Calculate temperature vertical lapse rate】Compute the temperature gradient using the formula (T1_temperature - T2_temperature)/(DC1_elevation - DC2_elevation), where the fixed 100m elevation difference (DC1-DC2) ensures numerical stability."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器每分钟采集一次温度数据，采集到的温度数据平均值为20°C，标准差为2°C。如果采集器连续工作24小时，请计算在这24小时内采集到的温度数据的总和，并计算这些数据的方差。",
    "query": "SELECT SUM(DataValue) AS TotalSum, AVG(POWER(DataValue - (SELECT AVG(DataValue) FROM DataCollectionRecord WHERE DataType = '温度' AND CollectorId = DC.Id AND CollectionTime >= DATE_SUB(NOW(), INTERVAL 24 HOUR)), 2)) AS Variance FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '温度' AND DCR.CollectionTime >= DATE_SUB(NOW(), INTERVAL 24 HOUR) GROUP BY DC.Id;",
    "type": "2",
    "idx": 267,
    "englishquestion": "Suppose a data collector records temperature data every minute, with an average value of 20°C and a standard deviation of 2°C. If the collector operates continuously for 24 hours, calculate the total sum of the temperature data collected during this 24-hour period, and determine the variance of these data.",
    "equation_analysis": "equation_analysis：  1. 总和：对DataValue求和（SUM(DataValue)）  2. 方差：   - 子查询计算均值μ = AVG(DataValue)   - 主查询计算每个数据项与均值的平方差（POWER(DataValue - μ, 2)）   - 最后计算这些平方差的平均值（AVG()）即得方差σ²",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectionTime, CollectorId  \n【table】：【DataCollector】 【columns】：Id  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：  \n1. 总和：对DataValue求和（SUM(DataValue)）  \n2. 方差：  \n - 子查询计算均值μ = AVG(DataValue)  \n - 主查询计算每个数据项与均值的平方差（POWER(DataValue - μ, 2)）  \n - 最后计算这些平方差的平均值（AVG()）即得方差σ²",
    "evidence": "【step1】:【连接DataCollectionRecord和DataCollector表，过滤近24小时温度数据】  【step2】:【外层查询计算总值SUM(DataValue)，同时通过嵌套子查询获取数据平均值】  【step3】:【使用POWER函数计算每个数据值与平均值的平方差，最终用AVG得到方差（包含GROUP BY分组计算多个采集器的情况）】",
    "english_step": "[Step1]: [Join DataCollectionRecord and DataCollector tables, filter temperature data from the past 24 hours]  [Step2]: [Outer query calculates total value SUM(DataValue), while using nested subquery to retrieve data average]  [Step3]: [Use POWER function to compute squared difference between each data value and the average, finally use AVG to obtain variance (includes GROUP BY for grouping calculations across multiple collectors)]"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集器安装在城市的市中心，采集到的温度数据平均值为25°C。假设该城市的年平均气温为20°C，请解释为什么市中心的温度会高于城市的年平均气温。",
    "query": "SELECT DC.InstallationLocation, AVG(DCR.DataValue) AS AverageTemperature, (SELECT AVG(DCR2.DataValue) FROM DataCollectionRecord DCR2 JOIN DataCollector DC2 ON DCR2.CollectorId = DC2.Id WHERE DC2.InstallationLocation LIKE '%郊区%' AND DCR2.DataType = '温度') AS SuburbAverageTemperature FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DC.InstallationLocation LIKE '%市中心%' AND DCR.DataType = '温度' GROUP BY DC.InstallationLocation;",
    "type": "3",
    "idx": 268,
    "englishquestion": "A data collector is installed in the city center, recording an average temperature of 25°C. Assuming the city's annual average temperature is 20°C, please explain why the temperature in the city center is higher than the city's annual average temperature.",
    "equation_analysis": "equation_analysis：AVG(DCR.DataValue)计算市中心温度平均值，(SELECT AVG(...))计算郊区温度平均值，通过对比两者的差值说明城市热岛效应（市中心人工热源密集/绿化较少导致温度高于郊区）。",
    "used_table_info": "【table】：【DataCollector】 【columns】：Id, InstallationLocation  \n【table】：【DataCollectionRecord】 【columns】：CollectorId, DataValue, DataType  \n【foreign_keys】：DataCollectionRecord.CollectorId → DataCollector.Id  \n【equation_analysis】：AVG(DCR.DataValue)计算市中心温度平均值，(SELECT AVG(...))计算郊区温度平均值，通过对比两者的差值说明城市热岛效应（市中心人工热源密集/绿化较少导致温度高于郊区）。",
    "evidence": "【step1】:【主查询连接DataCollector和DataCollectionRecord表，筛选安装位置包含\"市中心\"的温度数据，按安装位置分组计算平均温度】  【step2】:【子查询独立执行，通过相同的表结构连接但筛选安装位置包含\"郊区\"的温度数据，计算全量郊区的平均温度】  【step3】:【将子查询计算出的郊区平均温度作为附加列，与市中心平均温度合并展示在最终结果集中】",
    "english_step": "【step1】:【The main query joins the DataCollector and DataCollectionRecord tables, filters temperature data where the installation location contains \"city center\", groups by installation location to calculate average temperature】  【step2】:【The subquery executes independently, connecting through the same table structure but filtering temperature data where the installation location contains \"suburban\", calculating the overall average temperature for all suburban areas】  【step3】:【Merge the suburban average temperature calculated by the subquery as an additional column with the city center average temperature, displaying them in the final result set】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的温度数据平均值为1000°C，且该采集器的最大承受温度为1500°C。如果采集器连续工作一年，每分钟采集一次数据，请计算这一年中采集器采集到的温度数据的总和，并判断采集器是否会因为温度过高而损坏。",
    "query": "SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN MAX(DCR.DataValue) >= 1500 THEN '采集器可能损坏' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '温度' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY DC.Id;",
    "type": "4",
    "idx": 269,
    "englishquestion": "Assuming the average temperature data collected by a data collector is 1000°C, and the maximum tolerable temperature of the collector is 1500°C. If the collector operates continuously for one year, collecting data every minute, please calculate the total sum of the temperature data collected by the device in that year and determine whether the collector will be damaged due to excessively high temperatures.",
    "equation_analysis": "equation_analysis：1. 总温度数据值 = ΣDataCollectionRecord.DataValue (由SUM(DCR.DataValue))                    2. 安全状态判断 = 最大温度值是否≥1500 (由CASE WHEN MAX(DCR.DataValue) >= 1500)                    3. 时间范围约束 = 使用DATE_SUB计算1年内的时间区间（每分钟采集一次的条件隐含在频率参数中，但未在表结构定义中显式存储）",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：CollectorId(外键), DataValue, DataType, CollectionTime \n【table】：【DataCollector】 【columns】：Id \n【foreign_keys】：DataCollectionRecord.CollectorId -> DataCollector.Id \n【equation_analysis】：1. 总温度数据值 = ΣDataCollectionRecord.DataValue (由SUM(DCR.DataValue))\n                    2. 安全状态判断 = 最大温度值是否≥1500 (由CASE WHEN MAX(DCR.DataValue) >= 1500)\n                    3. 时间范围约束 = 使用DATE_SUB计算1年内的时间区间（每分钟采集一次的条件隐含在频率参数中，但未在表结构定义中显式存储）",
    "evidence": "【step1】:【连接DataCollectionRecord与DataCollector表，建立采集器与数据记录的关联关系】  【step2】:【过滤温度类型数据及最近一年的采集记录，设定时间范围和数据有效性】  【step3】:【计算总和与最大值，通过CASE表达式判断最大温度是否超过阈值生成状态标记(包含聚合函数和条件逻辑)】",
    "english_step": "【step1】:【Join the DataCollectionRecord table with the DataCollector table to establish the association relationship between collectors and data records】  【step2】:【Filter temperature-type data and collection records from the past year, setting time range and data validity】  【step3】:【Calculate total sum and maximum value, using CASE expressions to determine if the maximum temperature exceeds a threshold and generate status flags (includes aggregate functions and conditional logic)】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集器采集到的温度数据准确度为95%，且采集到的温度平均值为25°C，请计算该采集器在95%置信区间内的温度数据范围。假设温度数据的标准差为1°C。",
    "query": "SELECT AVG(DCR.DataValue) AS AverageValue, AVG(DCR.DataValue) - (1.96 * (1 / SQRT(COUNT(DCR.DataValue)))) AS LowerBound, AVG(DCR.DataValue) + (1.96 * (1 / SQRT(COUNT(DCR.DataValue)))) AS UpperBound FROM DataCollectionRecord DCR WHERE DCR.DataType = '温度' AND DCR.DataAccuracy = 95 GROUP BY DCR.CollectorId;",
    "type": "1",
    "idx": 270,
    "englishquestion": "If a data collector has an accuracy of 95% for the temperature data it collects, and the average temperature collected is 25°C, please calculate the range of temperature data for this collector within a 95% confidence interval. Assume the standard deviation of the temperature data is 1°C.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, DataAccuracy, CollectorId  \n【foreign_keys】:【CollectorId 外键关联 DataCollector.Id】",
    "evidence": "【step1】:【筛选数据】从DataCollectionRecord表中过滤出数据类型为'温度'且准确度为95%的记录  【step2】:【计算置信区间】基于标准差1°C和1.96的Z值，通过公式 `AVG±1.96*(1/SQRT(样本数量))` 计算上下边界  【step3】:【分组聚合】按采集器CollectorId分组，计算每个采集器的平均温度及置信区间范围",
    "english_step": "【step1】: 【Filter data】From the DataCollectionRecord table, filter records where DataType is 'Temperature' and Accuracy is 95%  【step2】: 【Calculate confidence interval】Based on a standard deviation of 1°C and Z-value of 1.96, compute upper/lower boundaries using the formula `AVG±1.96*(1/SQRT(sample_count))`  【step3】: 【Group and aggregate】Group by CollectorId, calculate each collector's average temperature and confidence interval range"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器每分钟采集一次湿度数据，采集到的湿度数据平均值为60%，数据准确度为98%。如果采集器连续工作24小时，请计算在这24小时内采集到的湿度数据的总和，并计算这些数据的标准误差。",
    "query": "SELECT SUM(DCR.DataValue) AS TotalSum, STDDEV(DCR.DataValue) / SQRT(COUNT(DCR.DataValue)) AS StandardError FROM DataCollectionRecord DCR WHERE DCR.DataType = '湿度' AND DCR.DataAccuracy = 98 AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCR.CollectorId;",
    "type": "2",
    "idx": 271,
    "englishquestion": "Assume a data collector samples humidity data every minute, with an average collected humidity value of 60% and a data accuracy of 98%. If the collector operates continuously for 24 hours, calculate the total sum of the humidity data collected during these 24 hours and determine the standard error of this data.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, DataAccuracy, CollectionTime, CollectorId  \n【foreign_keys】: CollectorId → DataCollector(Id)",
    "evidence": "【step1】:【筛选湿度记录】在DataCollectionRecord表中过滤DataType为'湿度'、DataAccuracy=98且CollectionTime在过去24小时内的记录  【step2】:【按设备分组】通过GROUP BY CollectorId将结果按数据采集器进行分组  【step3】:【计算统计数据】对每组数据使用SUM计算总湿度值，通过STDDEV/SQRT(COUNT)公式计算标准误差",
    "english_step": "【Step 1】: 【Filter humidity records】Filter records in the DataCollectionRecord table where DataType is 'Humidity', DataAccuracy=98, and CollectionTime is within the past 24 hours  【Step 2】: 【Group by device】Group the results by data collector using GROUP BY CollectorId  【Step 3】: 【Calculate statistics】For each group, calculate the total humidity value using SUM, and compute the standard error using the formula STDDEV/SQRT(COUNT)"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集器采集到的压力数据准确度为99%，且采集到的压力平均值为101.3kPa。假设该采集器安装在海拔高度为0米的位置，请解释为什么压力数据准确度如此高，并且接近标准大气压。",
    "query": "SELECT DCR.AverageValue, DC.ElevationMeters, DCR.DataAccuracy FROM DataCollectionRecord DCR JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCR.DataAccuracy = 99 AND DC.ElevationMeters = 0;",
    "type": "3",
    "idx": 272,
    "englishquestion": "A data collector's measured pressure data has an accuracy of 99%, and the average pressure collected is 101.3 kPa. Assuming the collector is installed at an altitude of 0 meters, please explain why the pressure data accuracy is so high and close to standard atmospheric pressure.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：AverageValue, DataAccuracy, CollectorId, DataType  \n【table】：【DataCollector】 【columns】：ElevationMeters, Id  \n【foreign_keys】:【DataCollectionRecord.CollectorId ➔ DataCollector.Id】",
    "evidence": "【step1】:【执行JOIN操作】通过CollectorId关联DataCollectionRecord和DataCollector表，建立数据采集记录与采集器位置关系  【step2】:【应用过滤条件】筛选DataType为'压力'、DataAccuracy=99、且ElevationMeters=0的条目，符合海平面标准气压场景  【step3】:【提取关键参数】最终返回AverageValue(101.3kPa)、海拔高度(0m)与准确度(99%)三个关键参数，验证传感器在标准大气压环境下校准状态完好、采集数据符合理论值  （问题涉及的解释要点：①海拔0米对应标准大气压101.325kPa；② 99%准确度表明传感器校准精度高/环境条件稳定；③通过关联表验证采集器安装位置是否支持该物理现象）",
    "english_step": "【step1】:【Perform JOIN operation】Link DataCollectionRecord and DataCollector tables via CollectorId to establish the relationship between data collection records and collector locations  【step2】:【Apply filtering conditions】Filter entries where DataType='Pressure', DataAccuracy=99, and ElevationMeters=0, aligned with sea-level standard atmospheric pressure conditions  【step3】:【Extract key parameters】Return three core parameters: AverageValue (101.3kPa), elevation (0m), and accuracy (99%) to verify:  1. Sensor calibration integrity under standard atmospheric conditions  2. Collected data consistency with theoretical values  (Technical annotations:  ① Elevation 0m corresponds to standard atmospheric pressure 101.325kPa  ② 99% accuracy indicates high sensor calibration precision/stable environmental conditions  ③ Validate through table joins whether collector installation supports corresponding physical phenomena)"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集器采集到的湿度数据准确度为200%，且采集到的湿度平均值为80%。如果采集器连续工作一年，每分钟采集一次数据，请计算这一年中采集器采集到的湿度数据的总和，并判断采集器是否会因为数据准确度过高而失效。",
    "query": "SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN MAX(DCR.DataAccuracy) > 100 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR WHERE DCR.DataType = '湿度' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY DCR.CollectorId;",
    "type": "4",
    "idx": 273,
    "englishquestion": "Assuming a data collector has a humidity measurement accuracy of 200% and the average humidity value collected is 80%. If the collector operates continuously for one year, collecting data every minute, calculate the total sum of humidity data collected during this year, and determine whether the collector will fail due to excessively high data accuracy.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType, DataValue, DataAccuracy, CollectionTime, CollectorId  \n【foreign_keys】:【CollectorId -> DataCollector(Id)】",
    "evidence": "【step1】:【筛选湿度数据并限定时间范围】WHERE子句过滤DataType='湿度'且CollectionTime在最近一年的数据，确保基础数据集的时间相关性和属性过滤  【step2】:【数值聚合与准确度判断】通过SUM(DCR.DataValue)计算湿度总和，使用CASE WHEN MAX(DCR.DataAccuracy) > 100对采集器准确度失效状态进行逻辑判断  【step3】:【按采集器分组输出】使用GROUP BY DCR.CollectorId对结果按采集器ID进行分组，输出每个采集器的总湿度和状态信息",
    "english_step": "【step1】:【Filter humidity data and restrict time range】The WHERE clause filters data where DataType='humidity' and CollectionTime falls within the past year, ensuring temporal relevance and attribute filtering of the base dataset  【step2】:【Numerical aggregation and accuracy judgment】Calculate total humidity using SUM(DCR.DataValue), apply logical judgment on collector accuracy failure status with CASE WHEN MAX(DCR.DataAccuracy) > 100  【step3】:【Group output by collector】Group results by collector ID using GROUP BY DCR.CollectorId, output each collector's total humidity and status information"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集规则中，温度数据的阈值数值为100°C，且采集到的温度数据平均值为95°C，标准差为5°C，请计算该温度数据超出阈值的概率。",
    "query": "SELECT (1 - (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataValue <= 100 AND DataType = '温度') / (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataType = '温度')) AS ExceedProbability FROM DataCollectionRule DCR WHERE DCR.DataType = '温度' AND DCR.ThresholdValue = 100;",
    "type": "1",
    "idx": 274,
    "englishquestion": "In a data collection rule, if the threshold value for temperature data is set at 100°C, and the average temperature collected is 95°C with a standard deviation of 5°C, please calculate the probability that the temperature data exceeds the threshold.",
    "equation_analysis": "equation_analysis：超出阈值概率公式 = 1 - (满足阈值的记录数 / 总记录数)，其中：满足阈值的记录数为 DataValue ≤ 100 且 DataType = '温度' 的数量；总记录数为 DataType = '温度' 的总数",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType  \n【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue  \n【foreign_keys】：【无（查询中未显式关联外键）】  \n【equation_analysis】：【超出阈值概率公式 = 1 - (满足阈值的记录数 / 总记录数)，其中：满足阈值的记录数为 DataValue ≤ 100 且 DataType = '温度' 的数量；总记录数为 DataType = '温度' 的总数】",
    "evidence": "【step1】:【计算总温度记录数】从DataCollectionRecord表中获取DataType='温度'的总数据量  【step2】:【统计未超标记录数】在相同温度数据范围内，筛选DataValue<=100的记录数量  【step3】:【概率计算与规则匹配】用(1-未超阈值比例)得出概率，并通过关联DataCollectionRule表验证规则阈值和类型的匹配条件】",
    "english_step": "【step1】: Calculate the total number of temperature records by retrieving the total count from the DataCollectionRecord table where DataType = 'Temperature'.  【step2】: Count the number of records not exceeding the threshold by filtering records where DataValue <= 100 within the same temperature data range (DataType = 'Temperature').  【step3】: Perform probability calculation and rule matching: use (1 - proportion of records not exceeding the threshold) to derive the probability, and validate the matching conditions for rule thresholds and types through association with the DataCollectionRule table."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，湿度数据的阈值数值为80%，且采集到的湿度数据平均值为75%，标准差为3%。如果采集器连续工作24小时，每分钟采集一次数据，请计算在这24小时内采集到的湿度数据超出阈值的次数，并计算这些数据的Z分数。",
    "query": "SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, (DCRec.DataValue - 75) / 3 AS ZScore FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '湿度' AND DCR.ThresholdValue = 80 AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCRec.DataValue;",
    "type": "2",
    "idx": 275,
    "englishquestion": "Assuming a data collection rule where the threshold value for humidity data is 80%, and the average of the collected humidity data is 75% with a standard deviation of 3%. If the collector operates continuously for 24 hours, collecting data once per minute, calculate the number of times the collected humidity data exceeds the threshold within these 24 hours, and calculate the Z-scores for these data.",
    "equation_analysis": "equation_analysis：  1. **超阈值次数计算式**：`SUM(CASE WHEN DataValue > ThresholdValue THEN 1 ELSE 0)`  2. **Z分数公式**：`(DataValue - 75)/3`，其中：     - `75`：问题给定的湿度平均值（未从数据库直接关联AverageValue字段）     - `3`：问题给定的标准差（未从数据库关联标准差字段）",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType,DataValue,CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType,ThresholdValue  \n【foreign_keys】：【DCRec.DataType → DCR.DataType (逻辑关联，非物理外键)】  \n【equation_analysis】：  \n1. **超阈值次数计算式**：`SUM(CASE WHEN DataValue > ThresholdValue THEN 1 ELSE 0)`  \n2. **Z分数公式**：`(DataValue - 75)/3`，其中：  \n   - `75`：问题给定的湿度平均值（未从数据库直接关联AverageValue字段）  \n   - `3`：问题给定的标准差（未从数据库关联标准差字段）",
    "evidence": "【step1】:【执行JOIN操作和时间过滤】通过JOIN连接DataCollectionRecord和DataCollectionRule表，关联条件为DataType，筛选数据类型为'湿度'且阈值=80%的规则，同时限定CollectionTime在最近24小时内的湿度采集记录  【step2】:【计算统计指标】对符合条件的数据进行条件判断：用CASE语句统计DataValue超过ThresholdValue的次数，并计算每个数据点的Z分数（(数据值-平均75)/标准差3）  【step3】:【分组输出结果】由于GROUP BY DataValue的组合操作，导致最终以每个唯一DataValue值分组输出对应的超标计数和该数据值的Z分数（但原GROUP BY存在逻辑错误，正确应为整体统计而非按值分组）",
    "english_step": "【step1】: 【Perform JOIN operation and time filtering】Join the DataCollectionRecord and DataCollectionRule tables via JOIN, linked by DataType, filtering rules with data type as 'humidity' and threshold=80%, while limiting humidity collection records where CollectionTime is within the last 24 hours.  【step2】: 【Calculate statistical metrics】Apply conditional judgment to qualified data: Use CASE statement to count occurrences where DataValue exceeds ThresholdValue, and calculate Z-score ((data value - mean 75)/standard deviation 3) for each data point.  【step3】: 【Group and output results】Due to the GROUP BY DataValue combination, the final output groups by each unique DataValue value, displaying corresponding over-limit counts and Z-scores (though the original GROUP BY contains logical errors, correct approach should involve aggregate statistics rather than grouping by value)."
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集规则中，压力数据的阈值数值为110kPa，且采集到的压力数据平均值为105kPa，标准差为2kPa。假设该采集器安装在海拔高度为500米的位置，请解释为什么压力数据接近但未达到阈值。",
    "query": "SELECT DCRec.AverageValue, DC.ElevationMeters FROM DataCollectionRecord DCRec JOIN DataCollector DC ON DCRec.CollectorId = DC.Id JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '压力' AND DCR.ThresholdValue = 110 AND DC.ElevationMeters = 500;",
    "type": "3",
    "idx": 276,
    "englishquestion": "In a data collection rule, the threshold value for pressure data is 110 kPa, with the average collected pressure data being 105 kPa and a standard deviation of 2 kPa. Assuming the collector is installed at an altitude of 500 meters, please explain why the pressure data is close to but has not reached the threshold.",
    "equation_analysis": "equation_analysis：海拔高度(500米)可能导致实际环境影响，如大气压下降，使采集值(均值105±2kPa)在阈值(110kPa)下方波劢，标准差表明数据稳定性未持续触发阈值。",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, AverageValue  \n【table】：【DataCollector】 【columns】：Id, ElevationMeters  \n【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue  \n【foreign_keys】：DCRec.CollectorId → DC.Id  \n【equation_analysis】：海拔高度(500米)可能导致实际环境影响，如大气压下降，使采集值(均值105±2kPa)在阈值(110kPa)下方波劢，标准差表明数据稳定性未持续触发阈值。",
    "evidence": "【step1】:【关联三表筛选基准】通过JOIN连接DataCollector表获取海拔500米位置信息，同时连接DataCollectionRule表锁定『压力』数据类型的110kPa阈值规则  【step2】:【多条件联合过滤】使用WHERE组合条件：(a)数据类型为压力 (b)阈值精准匹配110 (c)海拔严格限定500米  【step3】:【环境补偿验证】基于海拔高度物理特性解释：查询结果中105kPa的平均值在500m海拔处（标准大气压下理论值约95kPa），由于采集数据经过海拔补偿计算后接近但未突破设定阈值，且2kPa标准差表明数据稳定性较高未触达触发条件",
    "english_step": "【step1】: 【Associate Three Tables for Baseline Filtering】 Use JOIN to connect the DataCollector table for 500-meter altitude location information, while linking the DataCollectionRule table to lock the 110kPa threshold rule for the \"Pressure\" data type  【step2】: 【Multi-condition Joint Filtering】 Apply WHERE combined conditions: (a) Data type is Pressure (b) Threshold exactly matches 110 (c) Altitude strictly limited to 500 meters  【step3】: 【Environmental Compensation Verification】 Physical characteristics-based interpretation: The 105kPa average value in query results at 500m altitude (theoretical value ≈95kPa under standard atmospheric pressure) indicates that collected data - after altitude compensation calculation - approaches but does not exceed the set threshold, with a 2kPa standard deviation demonstrating sufficient data stability to avoid triggering conditions"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，温度数据的阈值数值为1000°C，且采集到的温度数据平均值为950°C，标准差为50°C。如果采集器连续工作一年，每分钟采集一次数据，请计算这一年中采集器采集到的温度数据超出阈值的次数，并判断采集器是否会因为温度过高而失效。",
    "query": "SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '温度' AND DCR.ThresholdValue = 1000 AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();",
    "type": "4",
    "idx": 277,
    "englishquestion": "Assuming a data collection rule where the threshold value for temperature data is 1000°C, the average temperature collected is 950°C, with a standard deviation of 50°C. If the collector operates continuously for one year, collecting data every minute, please calculate the number of times the collected temperature data exceeds the threshold during this year, and determine whether the collector will fail due to excessive temperature.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue  \n【foreign_keys】: 无",
    "evidence": "【step1】:【连接DataCollectionRecord和DataCollectionRule表，筛选数据类型为温度、阈值=1000且采集时间在近1年的数据】  【step2】:【使用CASE WHEN计算每条记录是否超过阈值，并通过SUM聚合统计总超限次数】  【step3】:【根据超限次数结果输出状态：若总数>0返回'采集器可能失效'，否则返回'采集器正常工作'】",
    "english_step": "【step1】: 【Join DataCollectionRecord and DataCollectionRule tables, filter data where type is temperature, threshold=1000, and collection time is within the last year】  【step2】: 【Use CASE WHEN to determine if each record exceeds the threshold, then aggregate with SUM to count total exceedances】  【step3】: 【Output status based on total exceedances: return 'Collector may be faulty' if count>0, otherwise return 'Collector operating normally'】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集规则中，温度数据的条件运算符为'>'，阈值数值为30°C，且采集到的温度数据平均值为25°C，标准差为2°C，请计算该温度数据超过阈值的概率。",
    "query": "SELECT (1 - (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataValue <= 30 AND DataType = '温度') / (SELECT COUNT(*) FROM DataCollectionRecord WHERE DataType = '温度')) AS ExceedProbability FROM DataCollectionRule DCR WHERE DCR.DataType = '温度' AND DCR.ThresholdValue = 30 AND DCR.ConditionOperator = '>';",
    "type": "1",
    "idx": 278,
    "englishquestion": "In a data collection rule, if the conditional operator for temperature data is '>', the threshold value is 30°C, and the collected temperature data has an average of 25°C with a standard deviation of 2°C, please calculate the probability that the temperature data exceeds the threshold.",
    "equation_analysis": "equation_analysis：SQL通过统计\"温度\"类型数据中`DataValue > 30`的比例计算概率。公式为：  **ExceedProbability = 1 - (COUNT(DataValue≤30) / COUNT(*))**  此公式基于历史实际数据的直接概率统计，而非正态分布模型的理论计算（与问题中提到的均值/标准差无关）。",
    "used_table_info": "【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue, ConditionOperator  \n【table】：【DataCollectionRecord】 【columns】：DataValue, DataType  \n【foreign_keys】：无显式关联  \n【equation_analysis】：SQL通过统计\"温度\"类型数据中`DataValue > 30`的比例计算概率。公式为：  \n**ExceedProbability = 1 - (COUNT(DataValue≤30) / COUNT(*))**  \n此公式基于历史实际数据的直接概率统计，而非正态分布模型的理论计算（与问题中提到的均值/标准差无关）。",
    "evidence": "【step1】:【计算温度数据总记录数：从DataCollectionRecord表筛选DataType='温度'的记录数量作为分母】  【step2】:【计算触发条件的记录数：从DataCollectionRecord表筛选DataType='温度'且DataValue<=30的记录数量作为分子】  【step3】:【概率计算与规则匹配：用1减去（分子/分母）得到超标概率，并通过关联DataCollectionRule表验证规则参数（DataType='温度', ConditionOperator='>', ThresholdValue=30）】",
    "english_step": "【step1】:【Calculate the total number of temperature data records: Filter records with DataType='Temperature' from the DataCollectionRecord table as the denominator】  【step2】:【Calculate the number of records triggering the condition: Filter records with DataType='Temperature' AND DataValue<=30 from the DataCollectionRecord table as the numerator】  【step3】:【Probability calculation and rule matching: Subtract (numerator/denominator) from 1 to obtain the exceedance probability, and validate rule parameters (DataType='Temperature', ConditionOperator='>', ThresholdValue=30) by joining the DataCollectionRule table】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，湿度数据的条件运算符为'<'，阈值数值为60%，且采集到的湿度数据平均值为65%，标准差为3%。如果采集器连续工作24小时，每分钟采集一次数据，请计算在这24小时内采集到的湿度数据低于阈值的次数，并计算这些数据的Z分数。",
    "query": "SELECT SUM(CASE WHEN DCRec.DataValue < 60 THEN 1 ELSE 0 END) AS BelowCount, (DCRec.DataValue - 65) / 3 AS ZScore FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '湿度' AND DCR.ThresholdValue = 60 AND DCR.ConditionOperator = '<' AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCRec.DataValue;",
    "type": "2",
    "idx": 279,
    "englishquestion": "Assuming in a data collection rule, the conditional operator for humidity data is '<', the threshold value is 60%, and the average of the collected humidity data is 65% with a standard deviation of 3%. If the collector operates continuously for 24 hours, sampling data every minute, please calculate the number of times the collected humidity data falls below the threshold within these 24 hours, and compute the Z-scores for these data points.",
    "equation_analysis": "equation_analysis：BelowCount计算规则为湿度数值<60时的计数累加；ZScore计算公式为(DataValue -65)/3，其中65为问题给定的湿度平均值，3为标准差",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType, DataValue, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue, ConditionOperator  \n【foreign_keys】：无  \n【equation_analysis】：BelowCount计算规则为湿度数值<60时的计数累加；ZScore计算公式为(DataValue -65)/3，其中65为问题给定的湿度平均值，3为标准差",
    "evidence": "",
    "english_step": "The user has requested a translation of a Chinese SQL query into English while preserving the original meaning and providing only the translated output. However, the specific Chinese content to be translated is missing or improperly formatted in the input. Since the user emphasized strict adherence to outputting only the translated text without additional information, no further action can be taken until the exact Chinese query is provided."
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集规则中，压力数据的条件运算符为'='，阈值数值为101.3kPa，且采集到的压力数据平均值为101.3kPa，标准差为0.5kPa。假设该采集器安装在海拔高度为0米的位置，请解释为什么压力数据等于阈值。",
    "query": "SELECT DCRec.AverageValue, DC.ElevationMeters FROM DataCollectionRecord DCRec JOIN DataCollector DC ON DCRec.CollectorId = DC.Id JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '压力' AND DCR.ThresholdValue = 101.3 AND DCR.ConditionOperator = '=' AND DC.ElevationMeters = 0;",
    "type": "3",
    "idx": 280,
    "englishquestion": "In a data acquisition rule, the conditional operator for pressure data is '=', the threshold value is 101.3 kPa, and the average of the collected pressure data is 101.3 kPa with a standard deviation of 0.5 kPa. Assuming this collector is installed at an altitude of 0 meters, explain why the pressure data equals the threshold value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：CollectorId, DataType, AverageValue 【table】：【DataCollector】 【columns】：Id, ElevationMeters 【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue, ConditionOperator 【foreign_keys】: DataCollectionRecord.CollectorId → DataCollector.Id",
    "evidence": "【step1】:【通过JOIN连接三张表】基于CollectorId关联DataCollectionRecord和DataCollector，通过DataType字段关联DataCollectionRecord和DataCollectionRule  【step2】:【过滤海拔与规则条件】应用WHERE中DC.ElevationMeters=0找出海平面采集器，同时筛选DCR.ThresholdValue=101.3kPa且条件运算符为等号的压力数据规则  【step3】:【建立物理环境关联】海平面标准大气压为101.3kPa，当采集器位于0海拔时，测量平均值精确等于阈值属于正常物理现象，符合标准大气压力特性",
    "english_step": "【step1】: 【Join three tables via JOIN】 Link DataCollectionRecord and DataCollector via CollectorId, and associate DataCollectionRecord with DataCollectionRule through the DataType field.  【step2】: 【Filter elevation and rule conditions】 Use WHERE DC.ElevationMeters=0 to identify sea-level collectors, while filtering pressure data rules where DCR.ThresholdValue=101.3kPa and the condition operator is an equals sign.  【step3】: 【Establish physical environment correlation】 The standard atmospheric pressure at sea level is 101.3kPa. When a collector is at 0 elevation, measurement averages precisely equaling the threshold represent normal physical phenomena, aligning with standard atmospheric pressure characteristics."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，温度数据的条件运算符为'>'，阈值数值为1000°C，且采集到的温度数据平均值为950°C，标准差为50°C。如果采集器连续工作一年，每分钟采集一次数据，请计算这一年中采集器采集到的温度数据超过阈值的次数，并判断采集器是否会因为温度过高而失效。",
    "query": "SELECT SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCRec.DataValue > DCR.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCRec JOIN DataCollectionRule DCR ON DCRec.DataType = DCR.DataType WHERE DCRec.DataType = '温度' AND DCR.ThresholdValue = 1000 AND DCR.ConditionOperator = '>' AND DCRec.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();",
    "type": "4",
    "idx": 281,
    "englishquestion": "Assume that in a data collection rule, the conditional operator for temperature data is '>', the threshold value is 1000°C, and the collected temperature data has an average of 950°C and a standard deviation of 50°C. If the collector operates continuously for one year, collecting data every minute, please calculate the number of times the collected temperature data exceeds the threshold within that year and determine whether the collector will fail due to excessively high temperature.",
    "equation_analysis": "equation_analysis：假设温度数据服从正态分布N(μ=950,σ=50)，超过阈值1000的概率为1-Φ((1000-950)/50)=1-Φ(1)=0.1587。总采集次数=365×24×60=525,600次，预期超阈值次数≈0.1587×525,600≈83,389次。查询通过条件筛选计算实际超阈值次数的真实值（条件运算符和阈值判断）",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：ThresholdValue, ConditionOperator, DataType  \n【foreign_keys】：【DataCollectionRecord(DataType)关联DataCollectionRule(DataType)的非外键连接（基于WHERE DCRec.DataType = DCR.DataType的逻辑关联，非数据库定义的外键）】  \n【equation_analysis】：【假设温度数据服从正态分布N(μ=950,σ=50)，超过阈值1000的概率为1-Φ((1000-950)/50)=1-Φ(1)=0.1587。总采集次数=365×24×60=525,600次，预期超阈值次数≈0.1587×525,600≈83,389次。查询通过条件筛选计算实际超阈值次数的真实值（条件运算符和阈值判断）】",
    "evidence": "【step1】:【JOIN DataCollectionRecord与DataCollectionRule表，过滤过去一年温度规则为>1000°C的记录】  【step2】:【对符合条件的数据点进行条件累加计算，使用SUM+CASE判断每次采集是否超过阈值】  【step3】:【根据超限总次数判断设备状态：若超限次数>0则\"可能失效\"，否则\"正常工作\"】",
    "english_step": "【step1】: 【JOIN the DataCollectionRecord and DataCollectionRule tables, filtering records from the past year where the temperature rule is >1000°C】  【step2】: 【Perform conditional summation on qualified data points using SUM + CASE statements to determine if each collection exceeds the threshold】  【step3】: 【Determine device status based on total exceedance count: mark as \"potential failure\" if exceedances > 0, otherwise \"normal operation\"】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集规则中，温度数据的采集频率为每分钟一次，且采集到的温度数据平均值为25°C，标准差为2°C，请计算该温度数据在一天内的总采集次数，并计算这些数据的标准误差。",
    "query": "SELECT COUNT(*) AS TotalCount, 2 / SQRT(COUNT(*)) AS StandardError FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.CollectionFrequency = '每分钟' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
    "type": "1",
    "idx": 282,
    "englishquestion": "If the data collection rule specifies a temperature data collection frequency of once per minute, with the collected temperature data having an average of 25°C and a standard deviation of 2°C, please calculate the total number of collections in one day and the standard error of these data.",
    "equation_analysis": "equation_analysis：  1. **总采集次数**：COUNT(*)统计满足 `DCR.DataType='温度'`+`DCRule.CollectionFrequency='每分钟'`+时间范围为近一日的记录总数  2. **标准误差公式**：2/SQRT(COUNT(*))推导路径如下：     - 定义标准误差(SE)=σ/√n（σ为总体标准差，已知σ=2°C，n为采样次数COUNT(*)）     - 当无法直接获取总体参数时，此场景假设样本标准差=总体标准差(2°C)     - 故表达式直接采用 2/SQRT(COUNT(*))",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType,CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType,CollectionFrequency  \n【foreign_keys】：【无显式外键关联(DCR.DataType与DCRule.DataType为逻辑匹配域)】  \n【equation_analysis】：  \n1. **总采集次数**：COUNT(*)统计满足 `DCR.DataType='温度'`+`DCRule.CollectionFrequency='每分钟'`+时间范围为近一日的记录总数  \n2. **标准误差公式**：2/SQRT(COUNT(*))推导路径如下：  \n   - 定义标准误差(SE)=σ/√n（σ为总体标准差，已知σ=2°C，n为采样次数COUNT(*)）  \n   - 当无法直接获取总体参数时，此场景假设样本标准差=总体标准差(2°C)  \n   - 故表达式直接采用 2/SQRT(COUNT(*))",
    "evidence": "【step1】JOIN数据采集规则表(DCRule)和采集记录表(DCR)，通过DataType字段关联，获取温度相关数据  【step2】利用WHERE筛选条件：数据类型为温度、频率为每分钟、时间在最近24小时内的记录  【step3】聚合计算总样本数量(COUNT(*))，并将标准差2代入标准误差公式(2/SQRT(n))得出结果",
    "english_step": "[Step1] JOIN the Data Collection Rule table (DCRule) and Data Collection Record table (DCR) via the DataType field to obtain temperature-related data  [Step2] Apply WHERE filters: records where data type is temperature, frequency is per minute, and time falls within the last 24 hours  [Step3] Aggregate to calculate total sample count (COUNT(*)), then substitute standard deviation 2 into the standard error formula (2/SQRT(n)) to derive the result"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，湿度数据的采集频率为每小时一次，且采集到的湿度数据平均值为60%，标准差为3%。如果采集器连续工作30天，请计算在这30天内采集到的湿度数据的总和，并计算这些数据的方差。",
    "query": "SELECT SUM(DCR.DataValue) AS TotalSum, AVG(POWER(DCR.DataValue - 60, 2)) AS Variance FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '湿度' AND DCRule.CollectionFrequency = '每小时' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW();",
    "type": "2",
    "idx": 283,
    "englishquestion": "Assuming a data collection rule where humidity data is collected once per hour, with an average collected humidity value of 60% and a standard deviation of 3%. If the collector operates continuously for 30 days, calculate the total sum of the humidity data collected during these 30 days and determine the variance of these data.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType, DataValue, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType, CollectionFrequency  \n【foreign_keys】: None",
    "evidence": "【step1】:【通过JOIN关联数据采集记录表和采集规则表，筛选湿度类型、每小时采集频率，且时间在最近30天内的记录】  【step2】:【使用SUM函数对筛选出的DataValue字段进行求和计算获取总湿度值】  【step3】:【用POWER函数计算(实际值-平均值60)^2，再通过AVG函数求平均得到方差】",
    "english_step": "【step1】:【JOIN the data collection records table with the collection rules table, filter records of humidity type with hourly collection frequency and time within the last 30 days】  【step2】:【Use the SUM function to calculate the total humidity value by summing the filtered DataValue fields】  【step3】:【Calculate (actual value - average value 60)^2 using the POWER function, then obtain the variance by averaging the results with the AVG function】"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集规则中，压力数据的采集频率为每分钟一次，且采集到的压力数据平均值为101.3kPa，标准差为0.5kPa。假设该采集器安装在海拔高度为0米的位置，请解释为什么采集频率设置为每分钟一次是合理的。",
    "query": "SELECT DCRule.CollectionFrequency, AVG(DCR.DataValue) AS AveragePressure, STDDEV(DCR.DataValue) AS StandardDeviation FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCRule.CollectionFrequency = '每分钟' AND DC.ElevationMeters = 0;",
    "type": "3",
    "idx": 284,
    "englishquestion": "In a data acquisition rule, the pressure data is collected at a frequency of once per minute, with an average value of 101.3 kPa and a standard deviation of 0.5 kPa for the collected pressure data. Assuming the collector is installed at an altitude of 0 meters, explain why setting the collection frequency to once per minute is reasonable.",
    "equation_analysis": "equation_analysis：AVG(DCR.DataValue)计算压力平均值的可信度（101.3kPa），标准差STDDEV(DCR.DataValue)=0.5kPa显示数据波动极小，结合每分钟采集频率可支撑两点：1. 高频采集可降低因仪器误差或环境瞬变产生的统计偏差，2. 0.5kPa标准差表明系统稳定性高，无需更高频率浪费资源，符合能耗与数据精度的平衡需求。",
    "used_table_info": "【table】：【DataCollectionRule】 【columns】：CollectionFrequency, DataType  \n【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectorId  \n【table】：【DataCollector】 【columns】：Id, ElevationMeters  \n【foreign_keys】：DCR.CollectorId → DataCollector.Id / DCRule.DataType → DCR.DataType  \n【equation_analysis】：AVG(DCR.DataValue)计算压力平均值的可信度（101.3kPa），标准差STDDEV(DCR.DataValue)=0.5kPa显示数据波动极小，结合每分钟采集频率可支撑两点：1. 高频采集可降低因仪器误差或环境瞬变产生的统计偏差，2. 0.5kPa标准差表明系统稳定性高，无需更高频率浪费资源，符合能耗与数据精度的平衡需求。",
    "evidence": "【step1】:【JOIN三表关联】通过DataCollectionRecord.DataType关联DataCollectionRule表获取采集规则，同时通过CollectorId关联DataCollector表获取设备基础信息  【step2】:【应用三重过滤】筛选压力类型(WHERE DCR.DataType='压力')，采用每分钟频次规则(AND DCRule.CollectionFrequency='每分钟')，且仅在海拔0米设备(AND DC.ElevationMeters=0)  【step3】:【执行统计计算】对筛选后的数据集同时计算平均值(AVG)和标准差(STDDEV)，验证该频率下的数据波动是否符合0.5kPa标准差特性",
    "english_step": "[Step 1]: [JOIN three tables] Associate the DataCollectionRule table through DataCollectionRecord.DataType to obtain collection rules, while associating the DataCollector table through CollectorId to retrieve device basic information  [Step 2]: [Apply triple filtering] Filter pressure type (WHERE DCR.DataType='Pressure'), adopt per-minute frequency rule (AND DCRule.CollectionFrequency='Every Minute'), and only for devices at 0-meter elevation (AND DC.ElevationMeters=0)  [Step 3]: [Perform statistical calculations] Simultaneously calculate average (AVG) and standard deviation (STDDEV) for the filtered dataset to validate whether data fluctuation at this frequency meets the 0.5kPa standard deviation characteristic"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，温度数据的采集频率为每秒一次，且采集到的温度数据平均值为25°C，标准差为2°C。如果采集器连续工作一年，请计算这一年中采集器采集到的温度数据的总和，并判断采集器是否会因为采集频率过高而失效。",
    "query": "SELECT SUM(DCR.DataValue) AS TotalSum, CASE WHEN DCRule.CollectionFrequency = '每秒' AND COUNT(*) > 31536000 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY DCRule.CollectionFrequency;",
    "type": "4",
    "idx": 285,
    "englishquestion": "Assuming a data collection rule where temperature data is collected once per second, with an average temperature reading of 25°C and a standard deviation of 2°C, calculate the total sum of temperature data collected by the device over one year of continuous operation. Also, determine whether the device will fail due to the high collection frequency.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：CollectionFrequency, DataType  \n【foreign_keys】: 【无】",
    "evidence": "【step1】:【JOIN两个表并筛选时间范围】连接DataCollectionRecord和DataCollectionRule表进行数据类型匹配，筛选出过去一年内的温度数据记录  【step2】:【计算统计值并进行失效判断】通过SUM聚合函数计算总数据值，使用CASE WHEN结合采集频率和记录数量(与31536000次/年对比)评估设备状态  【step3】:【按采集频率分组输出】根据CollectionFrequency对结果进行分组处理，保证不同采集频率规则的数据可独立分析",
    "english_step": "【step1】:【JOIN tables and filter time range】Join DataCollectionRecord and DataCollectionRule tables for data type matching, filter temperature data records from the past year  【step2】:【Calculate statistical values and perform failure determination】Calculate total data value using SUM aggregate function, evaluate device status with CASE WHEN by comparing collection frequency and record count (versus 31,536,000 times/year)  【step3】:【Group output by collection frequency】Group results by CollectionFrequency to ensure independent analysis of data under different collection frequency rules"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集规则中，温度数据的触发行动类型为'通知'，且采集到的温度数据平均值为30°C，标准差为2°C，请计算该温度数据在95%置信区间内的范围，并确定是否需要发送通知。",
    "query": "SELECT AVG(DCR.DataValue) AS AverageValue, AVG(DCR.DataValue) - (1.96 * (2 / SQRT(COUNT(*)))) AS LowerBound, AVG(DCR.DataValue) + (1.96 * (2 / SQRT(COUNT(*)))) AS UpperBound, CASE WHEN MAX(DCR.DataValue) > DCRule.ThresholdValue THEN '需要发送通知' ELSE '无需发送通知' END AS NotificationStatus FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.ActionType = '通知' GROUP BY DCRule.ThresholdValue;",
    "type": "1",
    "idx": 286,
    "englishquestion": "If the trigger action type for temperature data in a data collection rule is 'notification', and the average temperature data collected is 30°C with a standard deviation of 2°C, please calculate the range of the temperature data within a 95% confidence interval and determine whether a notification needs to be sent.",
    "equation_analysis": "equation_analysis：LowerBound = AverageValue - 1.96*(2/√n), UpperBound = AverageValue + 1.96*(2/√n)，其中n为样本数量；  NotificationStatus基于MAX(DataValue)是否超过ThresholdValue判定通知状态。",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType, DataValue  \n【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue, ActionType  \n【foreign_keys】：CollectorId (DataCollectionRecord → DataCollector.Id)  \n【equation_analysis】：LowerBound = AverageValue - 1.96*(2/√n), UpperBound = AverageValue + 1.96*(2/√n)，其中n为样本数量；  \nNotificationStatus基于MAX(DataValue)是否超过ThresholdValue判定通知状态。",
    "evidence": "【step1】:【通过JOIN连接数据采集记录表(DCR)和规则表(DCRule)，筛选数据类型为'温度'且行动类型为'通知'的记录】  【step2】:【按规则阈值分组后计算：1.平均数据值 2.基于标准差2和Z值1.96的置信区间范围 3.提取当前数据最大值】  【step3】:【通过CASE语句对比数据最大值与规则阈值，当数据超过阈值时返回'需要发送通知'的判断结果】",
    "english_step": "【step1】: 【Join the Data Collection Record table (DCR) with the Rule table (DCRule) to filter records where the data type is 'Temperature' and the action type is 'Notification'】  【step2】: 【After grouping by rule threshold, calculate: 1. Average data value 2. Confidence interval range based on a standard deviation of 2 and Z-value of 1.96 3. Extract the current maximum data value】  【step3】: 【Use a CASE statement to compare the maximum data value with the rule threshold, returning 'Notification needs to be sent' when data exceeds the threshold】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，湿度数据的触发行动类型为'处理'，且采集到的湿度数据平均值为70%，标准差为3%。如果采集器连续工作24小时，每分钟采集一次数据，请计算在这24小时内采集到的湿度数据超出阈值的次数，并计算这些数据的Z分数。",
    "query": "SELECT SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, (DCR.DataValue - 70) / 3 AS ZScore FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '湿度' AND DCRule.ActionType = '处理' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 24 HOUR) AND NOW() GROUP BY DCR.DataValue;",
    "type": "2",
    "idx": 287,
    "englishquestion": "Assuming in a data collection rule, the trigger action type for humidity data is 'process', and the average humidity data collected is 70% with a standard deviation of 3%. If the collector operates continuously for 24 hours, collecting data once per minute, please calculate the number of times the collected humidity data exceeds the threshold within these 24 hours, and also calculate the Z-scores for these data points.",
    "equation_analysis": "equation_analysis：  1. **ExceedCount公式**：`SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END)`，当湿度数据值超过规则阈值时计数+1，最终累加所有超出次数。  2. **ZScore公式**：`(DCR.DataValue - 70) / 3`，基于问题给出的均值70%和标准差3%，计算数据值与均值的标准差偏移量。",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataType, DataValue, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType, ThresholdValue, ActionType  \n【foreign_keys】：【无】  \n【equation_analysis】：  \n1. **ExceedCount公式**：`SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END)`，当湿度数据值超过规则阈值时计数+1，最终累加所有超出次数。  \n2. **ZScore公式**：`(DCR.DataValue - 70) / 3`，基于问题给出的均值70%和标准差3%，计算数据值与均值的标准差偏移量。",
    "evidence": "【step1】:【连接DataCollectionRecord和DataCollectionRule表，筛选出'湿度'数据类型且ActionType为'处理'，时间在24小时内的基本数据集】  【step2】:【逐条计算数据是否超过阈值（基于ThresholdValue），同时计算ZScore=(DataValue-70)/3】  【step3】:【按DataValue分组聚合，累加超出阈值的次数（使用SUM(CASE...)实现）并附加对应的ZScore计算结果】",
    "english_step": "【step1】: 【Join the DataCollectionRecord and DataCollectionRule tables, filter for data of type 'Humidity' with ActionType 'Process' and time within the last 24 hours to form the base dataset】  【step2】: 【Perform row-by-row calculation to determine if data exceeds the threshold (based on ThresholdValue), while calculating ZScore = (DataValue - 70) / 3】  【step3】: 【Group and aggregate by DataValue, accumulate the count of threshold exceedances (using SUM(CASE...)) and append the corresponding ZScore calculation results】"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集规则中，压力数据的触发行动类型为'通知'，且采集到的压力数据平均值为101.3kPa，标准差为0.5kPa。假设该采集器安装在海拔高度为0米的位置，请解释为什么压力数据接近标准大气压时不需要发送通知。",
    "query": "SELECT AVG(DCR.DataValue) AS AveragePressure, DCRule.ThresholdValue, CASE WHEN AVG(DCR.DataValue) BETWEEN 101.3 - 0.5 AND 101.3 + 0.5 THEN '无需发送通知' ELSE '需要发送通知' END AS NotificationStatus FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType JOIN DataCollector DC ON DCR.CollectorId = DC.Id WHERE DCR.DataType = '压力' AND DCRule.ActionType = '通知' AND DC.ElevationMeters = 0 GROUP BY DCRule.ThresholdValue;",
    "type": "3",
    "idx": 288,
    "englishquestion": "In a data collection rule, the trigger action type for pressure data is 'Notification', with an average collected pressure value of 101.3 kPa and a standard deviation of 0.5 kPa. Assuming the collector is installed at sea level (0 meters altitude), explain why no notification needs to be sent when the pressure data is close to the standard atmospheric pressure.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectorId  \n【table】：【DataCollectionRule】 【columns】：ThresholdValue, DataType, ActionType  \n【table】：【DataCollector】 【columns】：Id, ElevationMeters  \n【foreign_keys】:  \n- DataCollectionRecord.CollectorId → DataCollector.Id  \n- DataCollectionRule.DataType = DataCollectionRecord.DataType (隐式逻辑关联)",
    "evidence": "【step1】:【连接三表并筛选基础数据】通过JOIN关联采集记录、规则表和采集器表，筛选压力类型数据，触发动作类型为通知，且海拔为0米的设备【step2】:【建立统计逻辑】使用GROUP BY根据规则阈值分组，计算压力数据平均值，通过CASE表达式判断当平均值处于(101.3±0.5)kPa区间时设置'无需发送通知'状态【step3】:【应用大气压判定标准】标准大气压（101.325kPa）在计算区间(100.8,101.8)kPa范围内，当采集值接近该参考值时视为正常波动，故按业务规则无需触发通知",
    "english_step": "【step1】: 【Join three tables and filter base data】JOIN collection records, rules table, and collectors table to filter pressure type data where trigger action type is notification and devices with altitude of 0 meters  【step2】: 【Establish statistical logic】Use GROUP BY on rule thresholds to calculate average pressure data. Apply CASE expression to set 'No notification needed' status when average values fall within (101.3±0.5)kPa range  【step3】: 【Apply atmospheric pressure criteria】The standard atmospheric pressure (101.325kPa) lies within the calculated range (100.8,101.8)kPa. Collection values near this reference are considered normal fluctuations per business rules, thus no notification triggering required"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集规则中，温度数据的触发行动类型为'处理'，且采集到的温度数据平均值为1000°C，标准差为50°C。如果采集器连续工作一年，每分钟采集一次数据，请计算这一年中采集器采集到的温度数据超出阈值的次数，并判断采集器是否会因为处理任务过重而失效。",
    "query": "SELECT SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) AS ExceedCount, CASE WHEN SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) > 0 THEN '采集器可能失效' ELSE '采集器正常工作' END AS Status FROM DataCollectionRecord DCR JOIN DataCollectionRule DCRule ON DCR.DataType = DCRule.DataType WHERE DCR.DataType = '温度' AND DCRule.ActionType = '处理' AND DCR.CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();",
    "type": "4",
    "idx": 289,
    "englishquestion": "Assuming a data collection rule specifies the trigger action type for temperature data as 'processing,' with an average collected temperature of 1000°C and a standard deviation of 50°C. If the collector operates continuously for a year, collecting data every minute, please calculate the number of times the collected temperature data exceeds the threshold within that year and determine whether the collector is likely to fail due to excessive processing tasks.",
    "equation_analysis": "equation_analysis：`SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END)` 对每条记录的`DataValue`与`ThresholdValue`比对，统计超标次数。`CollectionTime`限制时间范围为最近1年，`ActionType`筛选触发类型为'处理'。最终`ExceedCount > 0`则判定采集器可能失效。",
    "used_table_info": "【table】：【DataCollectionRecord】 【columns】：DataValue, DataType, CollectionTime  \n【table】：【DataCollectionRule】 【columns】：DataType, ActionType, ThresholdValue  \n【foreign_keys】：None (JOIN条件为 DCR.DataType = DCRule.DataType，非主外键关系)  \n【equation_analysis】：`SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END)` 对每条记录的`DataValue`与`ThresholdValue`比对，统计超标次数。`CollectionTime`限制时间范围为最近1年，`ActionType`筛选触发类型为'处理'。最终`ExceedCount > 0`则判定采集器可能失效。",
    "evidence": "【step1】:【通过JOIN关联采集记录和规则表，过滤温度类型且触发行动为'处理'的数据】通过WHERE子句限定条件：DCR.DataType='温度' AND DCRule.ActionType='处理'，并使用BETWEEN过滤近一年的数据【step2】:【逐行判断数据值是否超过阈值】使用SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END)进行条件统计，建立临时计算结果ExceedCount【step3】:【根据超限次数进行状态判定】使用外层CASE表达式判断ExceedCount是否大于0，生成最终状态字段Status，完成结果集构建",
    "english_step": "[Step1]: [Associate data collection records with rule tables via JOIN, filter data of temperature type with triggered action as 'Processing'] Apply WHERE clause constraints: DCR.DataType='Temperature' AND DCRule.ActionType='Processing', and use BETWEEN to filter data from the past year  [Step2]: [Row-by-row evaluation of data values exceeding thresholds] Use SUM(CASE WHEN DCR.DataValue > DCRule.ThresholdValue THEN 1 ELSE 0 END) for conditional counting, creating temporary calculation result ExceedCount  [Step3]: [Determine status based on exceedance count] Use outer CASE expression to evaluate whether ExceedCount is greater than 0, generate final status field Status, and complete result set construction"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集通知记录的接收者类型为'公众'，且通知内容为温度数据超出阈值30°C，请计算在标准大气压下，温度从25°C上升到30°C所需的热量。假设空气的比热容为1.005 kJ/(kg·K)，空气密度为1.225 kg/m³，房间体积为50m³。",
    "query": "SELECT 1.225 * 50 AS Mass, 1.225 * 50 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '公众' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';",
    "type": "1",
    "idx": 290,
    "englishquestion": "If the recipient type of a data collection notice record is 'public,' and the notification content is that the temperature data exceeds the threshold of 30°C, please calculate the heat required for the temperature to rise from 25°C to 30°C under standard atmospheric pressure. Assume the specific heat capacity of air is 1.005 kJ/(kg·K), the air density is 1.225 kg/m³, and the room volume is 50m³.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientType, NotificationContent",
    "evidence": "【step1】:【筛选接收者类型为'公众'且通知内容包含温度阈值的通知记录】  【step2】:【计算空气质量：空气密度(1.225kg/m³) × 房间体积(50m³) = 61.25kg】  【step3】:【计算热量需求：质量(61.25kg) × 比热容(1.005kJ/kg·K) × 温度差(5K) = 307.78125kJ】",
    "english_step": "【step1】:【Filter notification records where recipient type is 'public' and notification content includes temperature threshold】  【step2】:【Calculate air quality: Air density (1.225 kg/m³) × room volume (50 m³) = 61.25 kg】  【step3】:【Calculate heat requirement: Mass (61.25 kg) × specific heat capacity (1.005 kJ/kg·K) × temperature difference (5 K) = 307.78125 kJ】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的接收者类型为'政府'，且通知内容为湿度数据超出阈值80%，接收者数量为1000人。如果通知方式为短信，每条短信的费用为0.01元，请计算发送这些短信的总费用，并计算如果通知成功率为95%，实际成功发送的短信数量。",
    "query": "SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '政府' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%' AND DCNR.NotificationMethod = '短信';",
    "type": "2",
    "idx": 291,
    "englishquestion": "Assuming a data collection notification record has a recipient type of 'Government', the notification content being that humidity data exceeds the threshold of 80%, and the number of recipients is 1,000. If the notification method is SMS, with a cost of 0.01 yuan per SMS, please calculate the total cost of sending these SMS and determine the actual number of successfully sent messages if the notification success rate is 95%.",
    "equation_analysis": "equation_analysis：总费用=RecipientCount*0.01元；成功数=RecipientCount*95%",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, RecipientType, NotificationContent, NotificationMethod 【foreign_keys】：TriggerId关联DataCollectionTriggerRecord.Id 【equation_analysis】：总费用=RecipientCount*0.01元；成功数=RecipientCount*95%",
    "evidence": "【step1】: 在DataCollectionNotificationRecord表中筛选出符合RecipientType='政府'、NotificationMethod='短信'且NotificationContent包含'湿度数据超出阈值80%'条件的记录  【step2】: 对筛选出的记录计算总费用：用RecipientCount接收者数量乘以每条短信成本0.01元得到TotalCost  【step3】: 用同一批数据计算实际发送量：取RecipientCount接收者数量的95%（RecipientCount*0.95）得到SuccessCount",
    "english_step": "【Step1】: In the DataCollectionNotificationRecord table, filter records where RecipientType='Government', NotificationMethod='SMS', and NotificationContent contains 'humidity data exceeds the threshold of 80%'.  【Step2】: For the filtered records, calculate the total cost: multiply RecipientCount (number of recipients) by the per-SMS cost of 0.01 yuan to get TotalCost.  【Step3】: Using the same dataset, calculate the actual sent count: take 95% of RecipientCount (RecipientCount * 0.95) to obtain SuccessCount."
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集通知记录的接收者类型为'企业'，且通知内容为压力数据超出阈值110kPa。假设该企业是一家化工厂，请解释为什么压力数据超出阈值时需要及时通知企业。",
    "query": "SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '企业' AND DCNR.NotificationContent LIKE '%压力数据超出阈值110kPa%';",
    "type": "3",
    "idx": 292,
    "englishquestion": "A data collection notification record has a recipient type of 'Enterprise', with the notification content indicating that the pressure data exceeds the threshold of 110 kPa. Assuming this enterprise is a chemical plant, please explain why it is necessary to promptly notify the enterprise when pressure data exceeds the threshold.",
    "equation_analysis": "equation_analysis：RecipientType = '企业' 通过基础字符串匹配过滤接收者类型；NotificationContent LIKE '%压力数据超出阈值110kPa%' 使用模糊匹配检测通知内容中含有关键字的记录",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationContent, RecipientType  \n【foreign_keys】：TriggerId → DataCollectionTriggerRecord.Id  \n【equation_analysis】：【RecipientType = '企业' 通过基础字符串匹配过滤接收者类型；NotificationContent LIKE '%压力数据超出阈值110kPa%' 使用模糊匹配检测通知内容中含有关键字的记录】",
    "evidence": "【step1】:【从DataCollectionNotificationRecord表获取所有通知记录】  【step2】:【筛选接收者类型为'企业'的记录】  【step3】:【二次筛选通知内容包含'压力数据超出阈值110kPa'的记录，最终提取NotificationContent和RecipientType字段】  ---对于化工厂场景的解释：  压力超阈可能导致管道破裂、化学反应失控或爆炸。化工厂涉及易燃易爆物质，压力异常会直接威胁员工安全、引发环境污染及重大财产损失。及时通知可促使企业紧急停机、检修设备、疏散人员，避免灾难性后果。",
    "english_step": "[Step 1]: [Retrieve all notification records from the DataCollectionNotificationRecord table]  [Step 2]: [Filter records where the recipient type is 'Enterprise']  [Step 3]: [Perform a secondary filter for records where the notification content contains 'Pressure data exceeded threshold of 110kPa' and finally extract the NotificationContent and RecipientType fields]  Explanation for the chemical plant scenario:  Exceeding pressure thresholds may lead to pipeline rupture, uncontrolled chemical reactions, or explosions. Chemical plants handle flammable and explosive substances, where abnormal pressure directly threatens employee safety, triggers environmental pollution, and causes significant property damage. Timely notifications enable enterprises to initiate emergency shutdowns, inspect equipment, evacuate personnel, and prevent catastrophic consequences."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的接收者类型为'公众'，且通知内容为温度数据超出阈值1000°C，接收者数量为1亿人。如果通知方式为广播，每次广播的费用为10000元，请计算发送这些广播的总费用，并判断系统是否会因为费用过高而无法运行。",
    "query": "SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '公众' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%' AND DCNR.NotificationMethod = '广播';",
    "type": "4",
    "idx": 293,
    "englishquestion": "Assuming a data collection notification record has a recipient type of 'public', the notification content indicates that temperature data exceeds the threshold of 1000°C, and the number of recipients is 100 million. If the notification method is broadcasting, with each broadcast costing 10,000 yuan, please calculate the total cost of sending these broadcasts and determine whether the system would fail to operate due to excessively high costs.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientType, NotificationContent, NotificationMethod, RecipientCount  \n【foreign_keys】:【TriggerId关联到DataCollectionTriggerRecord表Id字段（该表未明确结构）】",
    "evidence": "【step1】:在DataCollectionNotificationRecord表中筛选符合'公众'接收者类型、'广播'通知方式，且通知内容包含'温度数据超出阈值1000°C'的记录  【step2】:通过对筛选结果进行计算，将接收者数量乘以10000得出TotalCost字段  【step3】:使用CASE表达式根据计算结果判断系统状态：当总费用超过1,000,000元时返回'系统可能无法运行'，否则显示'系统正常工作'",
    "english_step": "【step1】: Filter records in the DataCollectionNotificationRecord table where the recipient type is 'Public', notification method is 'Broadcast', and notification content contains 'Temperature data exceeds threshold 1000°C'  【step2】: Calculate the TotalCost field by multiplying the number of recipients by 10,000 from the filtered results  【step3】: Use a CASE expression to determine system status based on the calculation: return 'System may be inoperable' when total cost exceeds 1,000,000 yuan, otherwise display 'System operating normally'"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集通知记录的接收者数量为1000人，且通知内容为温度数据超出阈值30°C，请计算在标准大气压下，温度从25°C上升到30°C所需的总热量。假设空气的比热容为1.005 kJ/(kg·K)，空气密度为1.225 kg/m³，每人所在房间体积为50m³。",
    "query": "SELECT DCNR.RecipientCount * (1.225 * 50 * 1.005 * (30 - 25)) AS TotalHeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';",
    "type": "1",
    "idx": 294,
    "englishquestion": "If a data collection notification record has a recipient count of 1,000 people, and the content of the notification is that the temperature data has exceeded the threshold of 30°C, please calculate the total heat required for the temperature to rise from 25°C to 30°C under standard atmospheric pressure. Assume the specific heat capacity of air is 1.005 kJ/(kg·K), the air density is 1.225 kg/m³, and the room volume per person is 50m³.",
    "equation_analysis": "equation_analysis：TotalHeatRequired = 人数 × (空气密度 × 房间体积 × 比热容 × 温升ΔT) = N × (1.225kg/m³ × 50m³ × 1.005kJ/(kg·K) × 5K)，其中5K由阈温差(30°C-25°C)得出，计算结果单位为千焦(kJ)",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationContent 【foreign_keys】：【TriggerId 关联到 DataCollectionTriggerRecord 的 Id（但未在本次查询中使用）】 【equation_analysis】：【TotalHeatRequired = 人数 × (空气密度 × 房间体积 × 比热容 × 温升ΔT) = N × (1.225kg/m³ × 50m³ × 1.005kJ/(kg·K) × 5K)，其中5K由阈温差(30°C-25°C)得出，计算结果单位为千焦(kJ)】",
    "evidence": "【step1】:【过滤NotificationContent包含'温度数据超出阈值30°C'的通知记录】  【step2】:【计算单个房间热量：空气密度(1.225kg/m³)*体积(50m³)*比热容(1.005kJ/kg·K)*温度差(5°C)】  【step3】:【将单房间热量乘以接收者数量(DCNR.RecipientCount)生成总热量字段TotalHeatRequired】",
    "english_step": "【step1】:【Filter notification records where NotificationContent contains 'Temperature data exceeded threshold 30°C'】  【step2】:【Calculate single room heat: Air density (1.225 kg/m³) * volume (50 m³) * specific heat capacity (1.005 kJ/kg·K) * temperature difference (5°C)】  【step3】:【Multiply single room heat by RecipientCount (DCNR.RecipientCount) to generate the TotalHeatRequired field】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的接收者数量为10000人，且通知方式为短信，每条短信的费用为0.01元。如果通知成功率为95%，请计算发送这些短信的总费用，并计算实际成功发送的短信数量。",
    "query": "SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '短信';",
    "type": "2",
    "idx": 295,
    "englishquestion": "Assuming the number of recipients for a data collection notification record is 10,000 people, and the notification method is SMS, with each SMS costing 0.01 yuan. If the notification success rate is 95%, calculate the total cost of sending these SMS messages and the actual number of SMS messages successfully sent.",
    "equation_analysis": "equation_analysis：  TotalCost = RecipientCount × 0.01 （单价0.01元/条 × 总通知人数10000）；  SuccessCount = RecipientCount × 0.95 （通知成功率95% × 总通知人数10000）",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationMethod  \n【foreign_keys】:  \n【equation_analysis】：  \nTotalCost = RecipientCount × 0.01 （单价0.01元/条 × 总通知人数10000）；  \nSuccessCount = RecipientCount × 0.95 （通知成功率95% × 总通知人数10000）",
    "evidence": "【step1】:【条件筛选：通过WHERE子句过滤出NotificationMethod为'短信'的通知记录】  【step2】:【费用计算：使用RecipientCount乘以单价0.01元计算总费用】  【step3】:【成功率计算：通过RecipientCount乘以0.95计算实际成功发送数量】",
    "english_step": "[Step1]: [Condition Filtering: Use WHERE clause to filter notification records where NotificationMethod is \\'SMS\\']  [Step2]: [Cost Calculation: Calculate total cost by multiplying RecipientCount by unit price 0.01 yuan]  [Step3]: [Success Rate Calculation: Compute actual successful sends by multiplying RecipientCount by 0.95]"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集通知记录的接收者数量为500人，且通知内容为湿度数据超出阈值80%。假设这些接收者均为农业生产者，请解释为什么湿度数据超出阈值时需要及时通知他们。",
    "query": "SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.RecipientType = '农业生产者' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';",
    "type": "3",
    "idx": 296,
    "englishquestion": "The number of recipients for a data collection notification record is 500, and the notification content indicates that humidity data has exceeded the threshold by 80%. Assuming all these recipients are agricultural producers, please explain why it is necessary to promptly notify them when humidity data exceeds the threshold.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationContent, RecipientType  \n【foreign_keys】: TriggerId 关联 DataCollectionTriggerRecord.Id",
    "evidence": "【step1】:【选择数据采集通知记录的NotificationContent和RecipientType字段】  【step2】:【筛选RecipientType为'农业生产者'的记录】  【step3】:【进一步过滤NotificationContent包含'湿度数据超出阈值80%'的记录】  【step1】:【作物健康保护】湿度异常可能引发霉菌滋生、根系腐烂，直接影响农作物生长和产量  【step2】:【调控生产决策】合理湿度是灌溉/通风的关键参数，超阈值需及时调整农事操作避免损失  【step3】:【预防质量损失】湿度过高会导致谷物霉变、果蔬变质，预警可降低存储和运输环节损耗】",
    "english_step": "【step1】:【Select NotificationContent and RecipientType fields from data collection notification records】  【step2】:【Filter records where RecipientType is 'Agricultural Producer'】  【step3】:【Further filter records where NotificationContent contains 'humidity data exceeds threshold 80%'】  【step1】:【Crop Health Protection】Abnormal humidity may trigger mold growth and root rot, directly affecting crop development and yield  【step2】:【Regulating Production Decisions】Proper humidity is a key parameter for irrigation/ventilation; threshold exceedance requires timely adjustment of farming operations to mitigate losses  【step3】:【Preventing Quality Losses】Excessive humidity causes grain mold and produce deterioration; early warnings reduce losses in storage and transportation】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的接收者数量为10亿人，且通知内容为温度数据超出阈值1000°C。如果通知方式为广播，每次广播的费用为10000元，请计算发送这些广播的总费用，并判断系统是否会因为费用过高而无法运行。",
    "query": "SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';",
    "type": "4",
    "idx": 297,
    "englishquestion": "Assuming the number of recipients for a data collection notification record is 1 billion people, and the notification content is that the temperature data exceeds the threshold of 1000°C. If the notification method is broadcasting, with each broadcast costing 10,000 yuan, please calculate the total cost of sending these broadcasts and determine whether the system will fail to operate due to excessively high costs.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationMethod, NotificationContent  \n【foreign_keys】:【TriggerId→DataCollectionTriggerRecord.Id】",
    "evidence": "【step1】:【筛选符合条件的通知记录】使用WHERE子句过滤通知方式为'广播'且通知内容包含'温度数据超出阈值1000°C'的通知记录  【step2】:【费用计算】通过RecipientCount字段乘以固定值10000计算总费用  【step3】:【状态判断】使用CASE表达式判断费用是否超过10亿边界值：  - *DCNR.RecipientCount * 10000 > 1000000000* 时返回'系统可能无法运行'  - 否则返回'系统正常工作'",
    "english_step": "【step1】: 【Filter eligible notification records】 Use the WHERE clause to filter notification records where the notification method is 'broadcast' and the notification content includes 'temperature data exceeds threshold 1000°C'  【step2】: 【Cost calculation】 Calculate total cost by multiplying the RecipientCount field with a fixed value of 10000  【step3】: 【Status determination】 Use CASE expression to determine if cost exceeds 1 billion threshold:  - Return 'System may be unable to operate' when *DCNR.RecipientCount * 10000 > 1000000000*  - Otherwise return 'System functioning normally'"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集通知记录的通知方式为'广播'，且通知内容为温度数据超出阈值30°C，请计算在标准大气压下，温度从25°C上升到30°C所需的热量。假设空气的比热容为1.005 kJ/(kg·K)，空气密度为1.225 kg/m³，广播覆盖区域的体积为10000m³。",
    "query": "SELECT 1.225 * 10000 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';",
    "type": "1",
    "idx": 298,
    "englishquestion": "If a data collection notification record has a notification method of 'broadcast', and the notification content is that temperature data exceeds the threshold of 30°C, please calculate the heat required for the temperature to rise from 25°C to 30°C under standard atmospheric pressure. Assume the specific heat capacity of air is 1.005 kJ/(kg·K), the air density is 1.225 kg/m³, and the volume of the broadcast coverage area is 10000m³.",
    "equation_analysis": "equation_analysis：Q = ρ×V×c×ΔT = 1.225kg/m³×10000m³×1.005kJ/(kg·K)×5K",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationMethod,NotificationContent 【foreign_keys】：【TriggerId→DataCollectionTriggerRecord(Id)】  \n【equation_analysis】：【Q = ρ×V×c×ΔT = 1.225kg/m³×10000m³×1.005kJ/(kg·K)×5K】",
    "evidence": "【step1】:【筛选通知方式为'广播'且内容包含温度阈值超限的记录】  【step2】:【根据热力学公式Q=ρVcΔT计算热量，代入固定参数（ρ=1.225kg/m³、V=10000m³、c=1.005kJ/(kg·K)、ΔT=5°C）】",
    "english_step": "【step1】:【Filter records where the notification method is 'broadcast' and the content includes temperature threshold exceedance】  【step2】:【Calculate heat quantity using the thermodynamic formula Q=ρVcΔT, substituting fixed parameters (ρ=1.225 kg/m³, V=10000 m³, c=1.005 kJ/(kg·K), ΔT=5°C)】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的通知方式为'短信'，且接收者数量为1000人，每条短信的费用为0.01元。如果通知成功率为95%，请计算发送这些短信的总费用，并计算实际成功发送的短信数量。",
    "query": "SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '短信';",
    "type": "2",
    "idx": 299,
    "englishquestion": "Assuming a data collection notification record has a notification method of 'SMS', with 1000 recipients, and each SMS costs 0.01 yuan. If the notification success rate is 95%, calculate the total cost of sending these SMS messages and the actual number of SMS messages successfully sent.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationMethod 【foreign_keys】:【TriggerId关联数据采集触发记录表】",
    "evidence": "【step1】: 筛选出NotificationMethod为'短信'的通知记录  【step2】: 计算选中记录的RecipientCount *0.01得出总费用  【step3】: 对相同记录的RecipientCount *0.95计算实际成功发送数量",
    "english_step": "【step1】: Filter out notification records where NotificationMethod is 'SMS'  【step2】: Calculate total cost by multiplying RecipientCount by 0.01 for selected records  【step3】: Compute actual successful sends by multiplying RecipientCount by 0.95 for identical records"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集通知记录的通知方式为'邮件'，且通知内容为湿度数据超出阈值80%。假设这些接收者均为仓库管理员，请解释为什么湿度数据超出阈值时需要及时通知他们。",
    "query": "SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '邮件' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';",
    "type": "3",
    "idx": 300,
    "englishquestion": "A data collection notification record has the notification method as 'email', and the notification content indicates that the humidity data has exceeded the threshold of 80%. Assuming all the recipients are warehouse managers, please explain why it is necessary to promptly notify them when the humidity data exceeds the threshold.",
    "equation_analysis": "equation_analysis：`DCNR.NotificationMethod = '邮件'`筛选通知方式为邮件；`DCNR.NotificationContent LIKE '%湿度数据超出阈值80%'`通过模糊匹配过滤包含湿度阈值的通知内容。两条件通过逻辑与（AND）连接",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationContent, RecipientType, NotificationMethod  \n【foreign_keys】：【TriggerId外键关联DataCollectionTriggerRecord.Id（未提供表结构）】  \n【equation_analysis】：【`DCNR.NotificationMethod = '邮件'`筛选通知方式为邮件；`DCNR.NotificationContent LIKE '%湿度数据超出阈值80%'`通过模糊匹配过滤包含湿度阈值的通知内容。两条件通过逻辑与（AND）连接】",
    "evidence": "【step1】: 定位数据来源为DataCollectionNotificationRecord表，准备查询通知记录  【step2】: 应用双层过滤条件WHERE NotificationMethod='邮件' AND NotificationContent LIKE模糊匹配条件  【step3】: 投射指定字段输出NotificationContent和RecipientType数据列  湿度数据超出阈值会引发货物霉变、设备腐蚀、电气线路短路等风险。仓库管理员直接负责仓储环境管控，及时通知可促使其采取通风除湿、设备检修等措施，保障仓储物资安全和设备正常运转。",
    "english_step": "【step1】: Locate the data source as the DataCollectionNotificationRecord table and prepare to query notification records  【step2】: Apply dual filtering conditions WHERE NotificationMethod='Email' AND NotificationContent LIKE fuzzy matching criteria  【step3】: Project specified fields to output NotificationContent and RecipientType data columns  Exceeding humidity threshold data may trigger risks such as goods mold, equipment corrosion, and electrical circuit short circuits. Warehouse administrators are directly responsible for storage environment control. Timely notification can prompt them to implement ventilation/dehumidification, equipment maintenance and other measures to ensure warehouse material safety and proper equipment operation."
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的通知方式为'广播'，且接收者数量为10亿人，通知内容为温度数据超出阈值1000°C。如果每次广播的费用为10000元，请计算发送这些广播的总费用，并判断系统是否会因为费用过高而无法运行。",
    "query": "SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';",
    "type": "4",
    "idx": 301,
    "englishquestion": "Assuming a data collection notification record has a notification method of 'broadcast', with 10 billion recipients, and the notification content is that the temperature data has exceeded the threshold of 1000°C. If each broadcast costs 10,000 yuan, please calculate the total cost of sending these broadcasts and determine whether the system will be unable to operate due to excessively high costs.",
    "equation_analysis": "equation_analysis：TotalCost = RecipientCount×10000；SystemStatus判定逻辑：当TotalCost > 1,000,000,000时输出'系统可能无法运行'（注意参数单位与条件判断的数值可能存在量级匹配问题需验证）",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationMethod, NotificationContent  \n【foreign_keys】：TriggerId→DataCollectionTriggerRecord(Id)（但触发记录表未在schema中描述）  \n【equation_analysis】：TotalCost = RecipientCount×10000；SystemStatus判定逻辑：当TotalCost > 1,000,000,000时输出'系统可能无法运行'（注意参数单位与条件判断的数值可能存在量级匹配问题需验证）",
    "evidence": "【step1】:【从DataCollectionNotificationRecord表中筛选通知方式为'广播'且内容含阈值条件的记录】  【step2】:【计算总费用（接收者数量*10000）并创建条件判断：超过10亿为\"可能无法运行\"，否则\"正常工作\"】  【step3】:【输出总费用和系统状态判断结果】",
    "english_step": "【step1】:【Filter records from the DataCollectionNotificationRecord table where the notification method is 'Broadcast' and the content contains threshold conditions】  【step2】:【Calculate total cost (number_of_recipients * 10000) and create a conditional judgment: mark as \"may not operate\" if exceeding 1 billion, otherwise \"operating normally\"】  【step3】:【Output total cost and system status evaluation result】"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集通知记录的通知状态为'成功'，且通知内容为温度数据超出阈值30°C，请计算在标准大气压下，温度从25°C上升到30°C所需的热量。假设空气的比热容为1.005 kJ/(kg·K)，空气密度为1.225 kg/m³，通知覆盖区域的体积为10000m³。",
    "query": "SELECT 1.225 * 10000 * 1.005 * (30 - 25) AS HeatRequired FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '成功' AND DCNR.NotificationContent LIKE '%温度数据超出阈值30°C%';",
    "type": "1",
    "idx": 302,
    "englishquestion": "If a data collection notification record has a notification status of 'Success' and the notification content indicates that the temperature data has exceeded the threshold of 30°C, please calculate the heat required for the temperature to rise from 25°C to 30°C under standard atmospheric pressure. Assume the specific heat capacity of air is 1.005 kJ/(kg·K), the air density is 1.225 kg/m³, and the volume of the area covered by the notification is 10,000m³.",
    "equation_analysis": "equation_analysis：Q = ρVcΔT = 1.225kg/m³(空气密度) * 10000m³(体积) * 1.005kJ/(kg·K)(比热容) * (30-25)ΔT foreign_keys：无显式外键调用",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationStatus, NotificationContent 【equation_analysis】：【Q = ρVcΔT = 1.225kg/m³(空气密度) * 10000m³(体积) * 1.005kJ/(kg·K)(比热容) * (30-25)ΔT】 【foreign_keys】：【无显式外键调用】",
    "evidence": "【step1】:【获取所有通知状态为'成功'的筛选记录】  【step2】:【进一步过滤通知内容含'温度数据超出阈值30°C'的记录】  【step3】:【基于温度差、空气密度、比热容及体积执行热量计算(公式:1.225kg/m³×10000m³×1.005kJ/(kg·K)×5K)】",
    "english_step": "【step1】: 【Retrieve all filtered records with notification status as 'Success'】  【step2】: 【Further filter records where notification content contains 'temperature data exceeds threshold of 30°C'】  【step3】: 【Perform heat calculation based on temperature difference, air density, specific heat capacity, and volume (formula: 1.225kg/m³×10000m³×1.005kJ/(kg·K)×5K)】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的通知状态为'失败'，且接收者数量为1000人，每条短信的费用为0.01元。如果通知成功率为95%，请计算发送这些短信的总费用，并计算实际成功发送的短信数量。",
    "query": "SELECT DCNR.RecipientCount * 0.01 AS TotalCost, DCNR.RecipientCount * 0.95 AS SuccessCount FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '失败' AND DCNR.NotificationMethod = '短信';",
    "type": "2",
    "idx": 303,
    "englishquestion": "Assuming a data collection notification record has a notification status of 'Failed', with 1,000 recipients and a cost of 0.01 yuan per SMS. If the notification success rate is 95%, calculate the total cost of sending these messages and determine the actual number of successfully sent SMS messages.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationStatus, NotificationMethod  \n【foreign_keys】:【无相关外键参与该查询】",
    "evidence": "【step1】:【筛选通知状态为'失败'且通知方式为'短信'的记录】  【step2】:【对筛选出的记录计算总费用=接收者数量*0.01】  【step3】:【对同一批数据同步计算成功数量=接收者数量*0.95】",
    "english_step": "【step1】:【Filter records where the notification status is 'failed' and the notification method is 'SMS'】  【step2】:【Calculate total cost for the filtered records as (number of recipients) * 0.01】  【step3】:【For the same dataset, calculate the number of successes as (number of recipients) * 0.95】"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集通知记录的通知状态为'成功'，且通知内容为湿度数据超出阈值80%。假设这些接收者均为仓库管理员，请解释为什么湿度数据超出阈值时需要及时通知他们。",
    "query": "SELECT DCNR.NotificationContent, DCNR.RecipientType FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '成功' AND DCNR.NotificationContent LIKE '%湿度数据超出阈值80%';",
    "type": "3",
    "idx": 304,
    "englishquestion": "The notification status of a data collection notification record is 'successful', and the notification content indicates that the humidity data has exceeded the threshold of 80%. Assuming all these recipients are warehouse managers, please explain why it is necessary to promptly notify them when humidity data exceeds the threshold.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationContent, RecipientType, NotificationStatus  \n【foreign_keys】:【TriggerId关联DataCollectionTriggerRecord.Id（未在查询中显式使用）】",
    "evidence": "【step1】:【通过NotificationStatus = '成功'筛选已经成功发送的通知记录】  【step2】:【通过NotificationContent模糊匹配'%湿度数据超出阈值80%'过滤出湿度告警事件】  【step3】:【关联DataCollectionRule表的阈值规则，结合RecipientType为仓库管理员的职责范围（如仓储货物防潮防霉），说明湿度超标会导致库存变质、设备锈蚀等经济损失，需管理员及时干预控制环境】",
    "english_step": "【step1】: 【Filter successfully sent notification records by NotificationStatus = 'Succeeded'】  【step2】: 【Filter humidity alarm events by fuzzy matching NotificationContent with '%humidity data exceeds threshold 80%'】  【step3】: 【Join with DataCollectionRule table’s threshold rules, combined with RecipientType being warehouse administrators’ duty scope (e.g., moisture-proof and mold prevention for stored goods), explaining that humidity exceeding thresholds may cause economic losses such as inventory deterioration and equipment corrosion, requiring timely intervention by administrators to control the environment】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的通知状态为'失败'，且接收者数量为10亿人，通知内容为温度数据超出阈值1000°C。如果每次广播的费用为10000元，请计算发送这些广播的总费用，并判断系统是否会因为费用过高而无法运行。",
    "query": "SELECT DCNR.RecipientCount * 10000 AS TotalCost, CASE WHEN DCNR.RecipientCount * 10000 > 1000000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord DCNR WHERE DCNR.NotificationStatus = '失败' AND DCNR.NotificationMethod = '广播' AND DCNR.NotificationContent LIKE '%温度数据超出阈值1000°C%';",
    "type": "4",
    "idx": 305,
    "englishquestion": "Assuming a data collection notification record has a notification status of 'failed', and the number of recipients is 1 billion people, with the notification content being that the temperature data exceeds the threshold of 1000°C. If the cost per broadcast is 10,000 yuan, calculate the total cost of sending these broadcasts and determine whether the system will be unable to operate due to excessively high costs.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationStatus, NotificationMethod, NotificationContent  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【筛选'失败'状态且广播方式、通知内容包含温度阈值条件的通知记录】从DataCollectionNotificationRecord表过滤WHERE NotificationStatus='失败' AND NotificationMethod='广播' AND NotificationContent LIKE '%温度数据超出阈值1000°C%'    【step2】:【计算广播总费用】对筛选结果计算RecipientCount * 10000表达式生成TotalCost字段    【step3】:【判断系统运行状态】通过CASE表达式判断TotalCost是否超过10亿元阈值，生成SystemStatus字段（1000000000为系统承载阈值，由命题条件隐含）",
    "english_step": "【step1】:【Filter notification records with 'Failure' status, broadcast method, and notification content containing temperature threshold condition】SELECT FROM DataCollectionNotificationRecord WHERE NotificationStatus='Failure' AND NotificationMethod='Broadcast' AND NotificationContent LIKE '%Temperature data exceeds threshold 1000°C%'  【step2】:【Calculate broadcast total cost】Calculate expression RecipientCount * 10000 for filtered results to generate TotalCost field  【step3】:【Determine system operation status】Use CASE expression to determine if TotalCost exceeds 1 billion threshold, generating SystemStatus field (1000000000 as system bearing threshold, implicitly defined by proposition conditions)"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集通知记录的确认时间为'2023-10-01 12:00:00'，且通知内容为温度数据超出阈值30°C，请计算从通知时间到确认时间的时间差，并计算在这段时间内温度从25°C上升到30°C所需的热量。假设空气的比热容为1.005 kJ/(kg·K)，空气密度为1.225 kg/m³，通知覆盖区域的体积为10000m³。",
    "query": "SELECT TIMESTAMPDIFF(SECOND, NotificationTime, AcknowledgedTime) AS TimeDifferenceInSeconds, (1.225 * 10000) * 1.005 * (30 - 25) AS HeatRequiredInKJ FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%温度数据超出阈值30°C%';",
    "type": "1",
    "idx": 306,
    "englishquestion": "If a data collection notification record has a confirmation time of '2023-10-01 12:00:00', and the notification content indicates that the temperature data exceeds the threshold of 30°C, calculate the time difference from the notification time to the confirmation time, and determine the heat required for the temperature to rise from 25°C to 30°C during this period. Assume the specific heat capacity of air is 1.005 kJ/(kg·K), the air density is 1.225 kg/m³, and the volume of the notification-covered area is 10,000 m³.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationTime, AcknowledgedTime, NotificationContent  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【筛选确认时间为'2023-10-01 12:00:00'且通知内容包含\"温度数据超出阈值30°C\"的记录】  【step2】:【计算通知时间与确认时间的秒级间隔(TIMESTAMPDIFF)】  【step3】:【根据密度*体积得到空气总质量，结合比热容和温度差(30-25=5°C)计算热量：(1.225*10000) * 1.005 * 5】",
    "english_step": "【step1】:【Filter records where the confirmation time is '2023-10-01 12:00:00' and the notification content contains \"Temperature data exceeds threshold 30°C\"】  【step2】:【Calculate the second-level interval between notification time and confirmation time using TIMESTAMPDIFF】  【step3】:【Calculate heat energy using air total mass (density * volume) combined with specific heat capacity and temperature difference (30°C - 25°C = 5°C): (1.225*10000) * 1.005 * 5】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的确认时间为'2023-10-01 12:00:00'，且通知内容为湿度数据超出阈值80%，接收者数量为1000人，每条短信的费用为0.01元。如果通知成功率为95%，请计算发送这些短信的总费用，并计算实际成功发送的短信数量。",
    "query": "SELECT RecipientCount * 0.01 AS TotalCost, RecipientCount * 0.95 AS SuccessfullySentCount FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%湿度数据超出阈值80%';",
    "type": "2",
    "idx": 307,
    "englishquestion": "Assuming a data collection notification record has a confirmation time of '2023-10-01 12:00:00', and the notification content indicates that humidity data has exceeded the threshold of 80%, with the recipient count being 1000 people and a cost of 0.01 RMB per text message. If the notification success rate is 95%, calculate the total cost of sending these text messages and determine the actual number of successfully sent messages.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, AcknowledgedTime, NotificationContent  \n【foreign_keys】:【TriggerId→DataCollectionTriggerRecord(Id) *】(*原表未明确定义关联表是否存在)",
    "evidence": "【step1】:【筛选条件过滤记录】通过WHERE条件定位到AcknowledgedTime为'2023-10-01 12:00:00'且NotificationContent包含'湿度数据超出阈值80%'的记录  【step2】:【执行字段计算】针对筛选出的记录，使用RecipientCount乘单价0.01计算总成本  【step3】:【计算成功数量】使用同一RecipientCount乘成功率0.95得出成功发送量",
    "english_step": "【step1】: 【Filter records with conditions】Locate records where AcknowledgedTime is '2023-10-01 12:00:00' and NotificationContent contains '湿度数据超出阈值80%' through WHERE clause  【step2】: 【Perform field calculation】For the filtered records, calculate total cost by multiplying RecipientCount with unit price 0.01  【step3】: 【Calculate successful quantity】Multiply the same RecipientCount by success rate 0.95 to derive successful send quantity"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集通知记录的确认时间为'2023-10-01 12:00:00'，且通知内容为压力数据超出阈值110kPa。假设这些接收者均为化工厂操作员，请解释为什么压力数据超出阈值时需要及时确认通知。",
    "query": "SELECT NotificationContent, AcknowledgedTime FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%压力数据超出阈值110kPa%';",
    "type": "3",
    "idx": 308,
    "englishquestion": "A data collection notification record has a confirmation time of '2023-10-01 12:00:00', and the notification content indicates that the pressure data exceeds the threshold of 110 kPa. Assuming all these recipients are chemical plant operators, please explain why it is necessary to promptly confirm the notification when the pressure data surpasses the threshold.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationContent, AcknowledgedTime  \n【foreign_keys】:【TriggerId 关联 DataCollectionTriggerRecord.Id】",
    "evidence": "【step1】:【定位DataCollectionNotificationRecord表作为数据源，识别需要检索通知内容和确认时间两个字段】  【step2】:【应用AcknowledgedTime条件筛选2023-10-01 12:00:00已确认的通知记录】  【step3】:【添加NotificationContent模糊匹配'%压力数据超出阈值110kPa%'条件，返回匹配结果】",
    "english_step": "【Step 1】: [Use DataCollectionNotificationRecord table as the data source, identify the NotificationContent and AcknowledgedTime fields to retrieve.]  【Step 2】: [Apply a filter condition on AcknowledgedTime to select confirmed notification records with timestamp 2023-10-01 12:00:00.]  【Step 3】: [Add a fuzzy match condition on NotificationContent for '%压力数据超出阈值110kPa%' and return the matching results.]"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的确认时间为'9999-12-31 23:59:59'，且接收者数量为10亿人，通知内容为温度数据超出阈值1000°C。如果每次广播的费用为10000元，请计算发送这些广播的总费用，并判断系统是否会因为费用过高而无法运行。",
    "query": "SELECT RecipientCount * 10000 AS TotalCost, CASE WHEN RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord WHERE AcknowledgedTime = '9999-12-31 23:59:59' AND NotificationContent LIKE '%温度数据超出阈值1000°C%';",
    "type": "4",
    "idx": 309,
    "englishquestion": "Assuming the confirmation time of a data collection notification record is '9999-12-31 23:59:59', the number of recipients is 1 billion, and the notification content is that the temperature data exceeds the threshold of 1000°C. If the cost per broadcast is 10,000 yuan, please calculate the total cost of sending these broadcasts and determine whether the system will be unable to operate due to excessive costs.",
    "equation_analysis": "equation_analysis：总费用公式=RecipientCount×10000；系统状态阈值=1000000（总费用>1百万判定无法运行）",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, AcknowledgedTime, NotificationContent 【foreign_keys】：TriggerId(FK关联不存在的数据采集触发记录表) 【equation_analysis】：总费用公式=RecipientCount×10000；系统状态阈值=1000000（总费用>1百万判定无法运行）",
    "evidence": "【step1】: 匹配AcknowledgedTime='9999-12-31 23:59:59' 且 NotificationContent含'温度数据超出阈值1000°C'条件的通知记录  【step2】: 计算每条匹配记录的RecipientCount * 10000得到TotalCost  【step3】: 通过CASE表达式判断TotalCost若超过1000000则标记为'系统可能无法运行'，否则标记为'系统正常工作'",
    "english_step": "【step1】: Match notification records where AcknowledgedTime='9999-12-31 23:59:59' and NotificationContent contains 'Temperature data exceeds threshold 1000°C'  【step2】: Calculate TotalCost for each matched record using RecipientCount * 10000  【step3】: Use CASE expression to label 'System may be inoperable' if TotalCost exceeds 1000000, otherwise label 'System operating normally'"
  },
  {
    "db_id": "DataCollector",
    "question": "如果一个数据采集通知记录的通知时间为'2023-10-01 12:00:00'，且通知内容为温度数据超出阈值30°C，请计算从数据采集时间到通知时间的时间差，并计算在这段时间内温度从25°C上升到30°C所需的热量。假设空气的比热容为1.005 kJ/(kg·K)，空气密度为1.225 kg/m³，通知覆盖区域的体积为10000m³。",
    "query": "SELECT TIMESTAMPDIFF(SECOND, dc.CollectionTime, dcn.NotificationTime) AS TimeDifferenceInSeconds, (1.225 * 10000) * 1.005 * (30 - 25) AS HeatRequiredInKJ FROM DataCollectionNotificationRecord dcn JOIN DataCollectionRecord dc ON dcn.TriggerId = dc.Id WHERE dcn.NotificationTime = '2023-10-01 12:00:00' AND dcn.NotificationContent LIKE '%温度数据超出阈值30°C%';",
    "type": "1",
    "idx": 310,
    "englishquestion": "If a data collection notification record has a notification time of '2023-10-01 12:00:00', and the notification content indicates that the temperature data has exceeded the threshold of 30°C, please calculate the time difference from the data collection time to the notification time, and compute the heat required for the temperature to rise from 25°C to 30°C within this period. Assume the specific heat capacity of air is 1.005 kJ/(kg·K), the air density is 1.225 kg/m³, and the volume of the area covered by the notification is 10000m³.",
    "equation_analysis": "equation_analysis：热量公式为 `密度(ρ)*体积(V)*比热容(Cp)*温差(ΔT)`，即 `1.225kg/m³ *10000m³ *1.005kJ/(kg·K) *(30-25)K =614062.5kJ`，单位换算中秒未参与公式仅用于时间差计算。",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：Id, TriggerId, NotificationTime, NotificationContent  \n【table】：【DataCollectionRecord】 【columns】：Id, CollectionTime  \n【foreign_keys】：DataCollectionNotificationRecord.TriggerId → DataCollectionRecord.Id  \n【equation_analysis】：热量公式为 `密度(ρ)*体积(V)*比热容(Cp)*温差(ΔT)`，即 `1.225kg/m³ *10000m³ *1.005kJ/(kg·K) *(30-25)K =614062.5kJ`，单位换算中秒未参与公式仅用于时间差计算。",
    "evidence": "【step1】:【通过JOIN操作关联DataCollectionNotificationRecord和DataCollectionRecord表，使用TriggerId与Id的关联关系筛选出符合条件的数据集】  【step2】:【使用TIMESTAMPDIFF函数计算特定条件下数据采集时间到通知时间的秒数差】  【step3】:【根据物理公式计算热量：(空气密度 × 体积 × 比热容 × 温度变化) 的乘积结果，并将温度差30-25=5°C作为输入参数】",
    "english_step": "【step1】: 【Associate the DataCollectionNotificationRecord and DataCollectionRecord tables via JOIN operation using the relationship between TriggerId and Id to filter the qualified dataset】  【step2】: 【Use the TIMESTAMPDIFF function to calculate the time difference in seconds between data collection time and notification time under specific conditions】  【step3】: 【Calculate heat value using the physical formula: (air density × volume × specific heat capacity × temperature change) as the product result, with the temperature difference 30-25=5°C serving as the input parameter】"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的通知时间为'2023-10-01 12:00:00'，且通知内容为湿度数据超出阈值80%，接收者数量为1000人，每条短信的费用为0.01元。如果通知成功率为95%，请计算发送这些短信的总费用，并计算实际成功发送的短信数量。",
    "query": "SELECT RecipientCount * 0.01 AS TotalCost, RecipientCount * 0.95 AS SuccessfullySentCount FROM DataCollectionNotificationRecord WHERE NotificationTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%湿度数据超出阈值80%';",
    "type": "2",
    "idx": 311,
    "englishquestion": "Assuming a data collection notification record has a notification time of '2023-10-01 12:00:00', the notification content indicates that the humidity data exceeds the threshold of 80%, the number of recipients is 1,000 people, and the cost per SMS is 0.01 yuan. If the notification success rate is 95%, calculate the total cost of sending these SMS messages and determine the actual number of successfully sent SMS messages.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationTime, NotificationContent  \n【foreign_keys】:TriggerId → DataCollectionTriggerRecord(Id) (假设存在该表但未提供结构)",
    "evidence": "【step1】:【筛选通知时间为'2023-10-01 12:00:00'且内容包含'湿度数据超出阈值80%'的记录】  【step2】:【从符合条件记录中提取RecipientCount字段（接收者数量=1000）作为基础值】  【step3】:【执行算术运算生成TotalCost（1000*0.01=10）和SuccessfullySentCount（1000*0.95=950）作为最终结果】",
    "english_step": "【step1】:【Filter records where Notification Time is '2023-10-01 12:00:00' and content contains 'humidity data exceeds threshold 80%'】  【step2】:【Extract the RecipientCount field (number of recipients = 1000) from qualified records as the base value】  【step3】:【Perform arithmetic operations to generate TotalCost (1000*0.01=10) and SuccessfullySentCount (1000*0.95=950) as final results】"
  },
  {
    "db_id": "DataCollector",
    "question": "一个数据采集通知记录的通知时间为'2023-10-01 12:00:00'，且通知内容为压力数据超出阈值110kPa。假设这些接收者均为化工厂操作员，请解释为什么压力数据超出阈值时需要及时发送通知。",
    "query": "SELECT NotificationContent, NotificationTime FROM DataCollectionNotificationRecord WHERE NotificationTime = '2023-10-01 12:00:00' AND NotificationContent LIKE '%压力数据超出阈值110kPa%';",
    "type": "3",
    "idx": 312,
    "englishquestion": "An data collection notification record has a notification timestamp of '2023-10-01 12:00:00', and the content states that the pressure data exceeds the threshold of 110 kPa. Assuming these recipients are all chemical plant operators, please explain why it is necessary to promptly send notifications when pressure data exceeds the threshold.",
    "equation_analysis": "",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：NotificationContent, NotificationTime  \n【foreign_keys】: 【无直接关联查询涉及的外键】",
    "evidence": "【step1】: 按时间过滤通知记录，定位NotificationTime='2023-10-01 12:00:00'的记录  【step2】: 在时间匹配的结果中筛选NotificationContent包含'%压力数据超出阈值110kPa%'的内容  【step3】: 投影输出需要的字段值（NotificationContent和NotificationTime）",
    "english_step": "【step1】: Filter notification records by time to locate records where NotificationTime='2023-10-01 12:00:00'  【step2】: Within the time-matched results, filter NotificationContent containing '%pressure data exceeded threshold 110kPa%'  【step3】: Project and output the required field values (NotificationContent and NotificationTime)"
  },
  {
    "db_id": "DataCollector",
    "question": "假设一个数据采集通知记录的通知时间为'9999-12-31 23:59:59'，且接收者数量为10亿人，通知内容为温度数据超出阈值1000°C。如果每次广播的费用为10000元，请计算发送这些广播的总费用，并判断系统是否会因为费用过高而无法运行。",
    "query": "SELECT RecipientCount * 10000 AS TotalCost, CASE WHEN RecipientCount * 10000 > 1000000 THEN '系统可能无法运行' ELSE '系统正常工作' END AS SystemStatus FROM DataCollectionNotificationRecord WHERE NotificationTime = '9999-12-31 23:59:59' AND NotificationContent LIKE '%温度数据超出阈值1000°C%';",
    "type": "4",
    "idx": 313,
    "englishquestion": "Assuming the notification time of a data collection notification record is '9999-12-31 23:59:59', with a recipient count of 1 billion people, and the notification content indicates that the temperature data exceeds the threshold of 1000°C. If the cost per broadcast is 10,000 yuan, calculate the total cost of sending these broadcasts and determine whether the system will be unable to operate due to the excessive cost.",
    "equation_analysis": "equation_analysis：TotalCost = RecipientCount × 10000 (元)，SystemStatus判定条件：总费用 > 1,000,000元时返回\"系统可能无法运行\"",
    "used_table_info": "【table】：【DataCollectionNotificationRecord】 【columns】：RecipientCount, NotificationTime, NotificationContent 【foreign_keys】：TriggerId -> DataCollectionTriggerRecord(Id) 【equation_analysis】：【TotalCost = RecipientCount × 10000 (元)，SystemStatus判定条件：总费用 > 1,000,000元时返回\"系统可能无法运行\"】",
    "evidence": "【step1】:【从DataCollectionNotificationRecord表中筛选特定通知记录】基于WHERE条件：NotificationTime精确匹配'9999-12-31 23:59:59'，且NotificationContent包含'温度数据超出阈值1000°C'字样  【step2】:【执行费用计算】将匹配记录的RecipientCount字段*10000元得出TotalCost  【step3】:【状态判断】通过CASE表达式：当TotalCost>1,000,000元时返回'系统可能无法运行'，否则返回'系统正常工作'，并将结果作为SystemStatus字段输出",
    "english_step": "【step1】:【Filter specific notification records from the DataCollectionNotificationRecord table】WHERE conditions: NotificationTime exactly matches '9999-12-31 23:59:59' AND NotificationContent contains the phrase 'temperature data exceeds threshold 1000°C'  【step2】:【Perform cost calculation】Calculate TotalCost by multiplying the RecipientCount field of matched records * 10000 RMB  【step3】:【Status determination】Use CASE expression: Return 'system may be inoperable' when TotalCost > 1,000,000 RMB, otherwise return 'system functioning normally', outputting the result as the SystemStatus field"
  },
  {
    "db_id": "earphone",
    "question": "请查询并计算所有耳机的声压级（Sound_Pressure_Level_Db）与灵敏度（Sensitivity_Db）的乘积，并按乘积值升序排列。",
    "query": "SELECT Headphone_Id, Sound_Pressure_Level_Db, Sensitivity_Db, (Sound_Pressure_Level_Db * Sensitivity_Db) AS Product FROM audio_data ORDER BY Product ASC;",
    "type": 1,
    "idx": 314,
    "englishquestion": "Please query and calculate the product of the sound pressure level (Sound_Pressure_Level_Db) and sensitivity (Sensitivity_Db) for all headphones, and sort the results in ascending order by the product value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_Id, Sound_Pressure_Level_Db, Sensitivity_Db  \n【foreign_keys】: Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:从audio_data表中选取Headphone_Id、Sound_Pressure_Level_Db、Sensitivity_Db三个基础字段  【step2】:对选中的字段进行声压级和灵敏度的乘积运算，生成计算字段Product  【step3】:按照Product计算值进行升序排列，完成最终结果排序",
    "english_step": "【step1】: Select the three base fields: Headphone_Id, Sound_Pressure_Level_Db, and Sensitivity_Db from the audio_data table  【step2】: Perform a multiplication operation on the selected fields for sound pressure level and sensitivity to generate the computed field Product  【step3】: Sort the final results in ascending order based on the computed Product value"
  },
  {
    "db_id": "earphone",
    "question": "请计算所有耳机的总谐波失真（Total_Harmonic_Distortion_Percent）与阻抗（Impedance_Ohms）的比值，并按比值降序排列，取前10名。",
    "query": "SELECT Headphone_Id, Total_Harmonic_Distortion_Percent, Impedance_Ohms, (Total_Harmonic_Distortion_Percent / Impedance_Ohms) AS Distortion_Impedance_Ratio FROM audio_data ORDER BY Distortion_Impedance_Ratio DESC LIMIT 10;",
    "type": 2,
    "idx": 315,
    "englishquestion": "Please calculate the ratio of Total Harmonic Distortion (Total_Harmonic_Distortion_Percent) to Impedance (Impedance_Ohms) for all earphones, sort the results in descending order by the ratio, and return the top 10 entries.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_id, Total_Harmonic_Distortion_Percent, Impedance_Ohms  \n【foreign_keys】: audio_data.Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:【从audio_data表中提取耳机ID、谐波失真百分比和阻抗字段】  【step2】:【计算谐波失真百分比与阻抗的比值并生成结果集】  【step3】:【对结果集按比值降序排序并限制返回前10条记录】",
    "english_step": "【step1】: [Extract the headphone ID, harmonic distortion percentage, and impedance fields from the audio_data table]  【step2】: [Calculate the ratio of harmonic distortion percentage to impedance and generate the result set]  【step3】: [Sort the result set in descending order based on the ratio and limit the return to the top 10 records]"
  },
  {
    "db_id": "earphone",
    "question": "请查询所有无线耳机（Is_Wireless为True）的电池续航时间（Battery_Life_Hours）与重量（Weight_Grams）的比值，并按比值升序排列。",
    "query": "SELECT Headphone_Id, Battery_Life_Hours, Weight_Grams, (Battery_Life_Hours / Weight_Grams) AS Battery_Weight_Ratio FROM headphones WHERE Is_Wireless = True ORDER BY Battery_Weight_Ratio ASC;",
    "type": 3,
    "idx": 316,
    "englishquestion": "Please query the ratio of battery life (Battery_Life_Hours) to weight (Weight_Grams) for all wireless earphones (where Is_Wireless is True) and sort the results in ascending order by the ratio.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Battery_Life_Hours, Weight_Grams, Is_Wireless  \n【foreign_keys】: 无显式关联",
    "evidence": "【step1】:【筛选无线耳机：使用WHERE条件过滤出Is_Wireless值为True的记录】  【step2】:【计算能效比：通过(Battery_Life_Hours / Weight_Grams)表达式计算续航重量比并赋予别名】  【step3】:【结果排序：按生成的Battery_Weight_Ratio字段进行升序排列】",
    "english_step": "【step1】:【Filter wireless headphones: Filter records where Is_Wireless is True using the WHERE clause】  【step2】:【Calculate efficiency ratio: Compute battery-to-weight ratio with expression (Battery_Life_Hours / Weight_Grams) and alias it as Battery_Weight_Ratio】  【step3】:【Sort results: Order by the generated Battery_Weight_Ratio field in ascending order】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机的最大输入功率（Max_Input_Power_Mw）都增加到100000毫瓦，请计算这些耳机的声压级（Sound_Pressure_Level_Db）与最大输入功率的比值，并按比值降序排列，取前5名。",
    "query": "SELECT Headphone_Id, Sound_Pressure_Level_Db, 100000 AS Max_Input_Power_Mw, (Sound_Pressure_Level_Db / 100000) AS Sound_Power_Ratio FROM audio_data ORDER BY Sound_Power_Ratio DESC LIMIT 5;",
    "type": 4,
    "idx": 317,
    "englishquestion": "Assuming the maximum input power (Max_Input_Power_Mw) of all headphones is increased to 100,000 milliwatts, calculate the ratio of the sound pressure level (Sound_Pressure_Level_Db) to the maximum input power for these headphones, sort them in descending order by this ratio, and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_Id, Sound_Pressure_Level_Db  \n【foreign_keys】: Headphone_id → headphones(Headphone_id)",
    "evidence": "【step1】:【从audio_data表选取耳机ID、声压级字段，将最大输入功率固定为100000毫瓦并计算声压级与固定功率的比值】  【step2】:【按计算得出的声压功率比值降序排列结果】  【step3】:【通过LIMIT 5限制仅返回前5条记录】",
    "english_step": "【step1】:【Select headphone_id and sound_pressure_level fields from the audio_data table, set the maximum input power to 100,000 milliwatts, and calculate the ratio of sound pressure level to the fixed power】  【step2】:【Order the results by the calculated sound pressure-to-power ratio in descending order】  【step3】:【Limit the returned records to the top 5 using LIMIT 5】"
  },
  {
    "db_id": "earphone",
    "question": "请查询并计算所有耳机的灵敏度（Sensitivity_Db）与阻抗（Impedance_Ohms）的比值，并按比值降序排列，取前10名。",
    "query": "SELECT Headphone_Id, Sensitivity_Db, Impedance_Ohms, (Sensitivity_Db / Impedance_Ohms) AS Sensitivity_Impedance_Ratio FROM audio_data ORDER BY Sensitivity_Impedance_Ratio DESC LIMIT 10;",
    "type": 1,
    "idx": 318,
    "englishquestion": "Please query and calculate the ratio of sensitivity (Sensitivity_Db) to impedance (Impedance_Ohms) for all headphones, then sort them in descending order by the ratio and retrieve the top 10.",
    "equation_analysis": "equation_analysis：Sensitivity_Impedance_Ratio = Sensitivity_Db / Impedance_Ohms",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_Id, Sensitivity_Db, Impedance_Ohms  \n【foreign_keys】：audio_data.Headphone_id → headphones.Headphone_id  \n【equation_analysis】：Sensitivity_Impedance_Ratio = Sensitivity_Db / Impedance_Ohms",
    "evidence": "【step1】:【从audio_data表中提取耳机的Headphone_Id、Sensitivity_Db和Impedance_Ohms字段，并用Sensitivity_Db除以Impedance_Ohms计算出灵敏度阻抗比】  【step2】:【按计算出的灵敏度阻抗比进行降序排序】  【step3】:【过滤排序结果，仅保留排名前10的记录】",
    "english_step": "【Step 1】: 【Extract the Headphone_Id, Sensitivity_Db, and Impedance_Ohms fields from the audio_data table, and calculate the sensitivity-to-impedance ratio by dividing Sensitivity_Db by Impedance_Ohms】  【Step 2】: 【Sort the results in descending order based on the calculated sensitivity-to-impedance ratio】  【Step 3】: 【Filter the sorted results to retain only the top 10 ranked records】"
  },
  {
    "db_id": "earphone",
    "question": "请计算所有耳机的重量（Weight_Grams）与电池续航时间（Battery_Life_Hours）的乘积，并按乘积值升序排列，取前5名。",
    "query": "SELECT Headphone_Id, Weight_Grams, Battery_Life_Hours, (Weight_Grams * Battery_Life_Hours) AS Weight_Battery_Product FROM headphones ORDER BY Weight_Battery_Product ASC LIMIT 5;",
    "type": 2,
    "idx": 319,
    "englishquestion": "Please calculate the product of weight (Weight_Grams) and battery life (Battery_Life_Hours) for all headphones, then sort them in ascending order by the product value and take the top 5.",
    "equation_analysis": "equation_analysis：weight_battery_product = weight_grams × battery_life_hours",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_id, Weight_Grams, Battery_Life_Hours  \n【foreign_keys】：【无（该查询未涉及JOIN操作）】  \n【equation_analysis】：【weight_battery_product = weight_grams × battery_life_hours】",
    "evidence": "【step1】:【选择耳机ID、重量、电池续航，并计算乘积字段】  【step2】:【按计算结果进行升序排序】  【step3】:【限制结果只返回前5条记录】",
    "english_step": "[Step1]: [Select earphone_id, weight, battery_life, and calculate the product field]  [Step2]: [Sort by the calculation result in ascending order]  [Step3]: [Limit the results to return only the top 5 records]"
  },
  {
    "db_id": "earphone",
    "question": "请查询所有支持主动降噪（Noise_Cancellation为True）且内置麦克风（Microphone为True）的耳机，并按价格（Price_Usd）升序排列，取前5名。",
    "query": "SELECT Headphone_Id, Model, Price_Usd FROM headphones WHERE Noise_Cancellation = True AND Microphone = True ORDER BY Price_Usd ASC LIMIT 5;",
    "type": 3,
    "idx": 320,
    "englishquestion": "Please query all headphones that support active noise cancellation (Noise_Cancellation is True) and have built-in microphones (Microphone is True), sort them by price (Price_Usd) in ascending order, and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Price_Usd, Noise_Cancellation, Microphone  \n【foreign_keys】: 无",
    "evidence": "【step1】:【筛选条件】从headphones表中使用WHERE子句过滤出同时满足Noise_Cancellation=True和Microphone=True的行  【step2】:【排序处理】使用ORDER BY对筛选结果按Price_Usd字段进行升序(ASC)排序  【step3】:【限制结果】通过LIMIT 5截取排序后价格最低的前5条记录",
    "english_step": "【step1】: 【Filter conditions】Use WHERE clause in headphones table to filter rows satisfying both Noise_Cancellation=True and Microphone=True  【step2】: 【Sorting】Apply ORDER BY to sort filtered results by Price_Usd field in ascending order (ASC)  【step3】: 【Limit results】Use LIMIT 5 to retrieve the top 5 lowest-priced records after sorting"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机的重量（Weight_Grams）都增加到10000克，请计算这些耳机的电池续航时间（Battery_Life_Hours）与重量的比值，并按比值降序排列，取前5名。",
    "query": "SELECT Headphone_Id, Battery_Life_Hours, 10000 AS Weight_Grams, (Battery_Life_Hours / 10000) AS Battery_Weight_Ratio FROM headphones ORDER BY Battery_Weight_Ratio DESC LIMIT 5;",
    "type": 4,
    "idx": 321,
    "englishquestion": "Assuming the weight (Weight_Grams) of all headphones increases to 10,000 grams, calculate the ratio of battery life (Battery_Life_Hours) to weight for these headphones, then sort in descending order by this ratio and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_id, Battery_Life_Hours  \n【foreign_keys】: 无关联到其他表的JOIN操作",
    "evidence": "【step1】:【选择耳机ID、电池续航时间，并固定重量为10000克】 【step2】:【计算每款耳机的电池与重量比值（续航时间/10000）】 【step3】:【按比值降序排序并限制返回前5条结果】",
    "english_step": "【step1】:【Select earphone_id, battery_life, and set the weight to 10000 grams】  【step2】:【Calculate the battery-to-weight ratio for each earphone (battery_life / 10000)】  【step3】:【Sort by the ratio in descending order and limit the results to the top 5 entries】"
  },
  {
    "db_id": "earphone",
    "question": "请计算每个制造商的人均营业额（Revenue_Usd / Employees），并按人均营业额降序排列，取前5名。",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, (Revenue_Usd / Employees) AS Revenue_Per_Employee FROM manufacturers ORDER BY Revenue_Per_Employee DESC LIMIT 5;",
    "type": 1,
    "idx": 322,
    "englishquestion": "Please calculate the per capita revenue (Revenue_Usd / Employees) for each manufacturer, sort them in descending order of per capita revenue, and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_id, Manufacturer_Name, Revenue_Usd, Employees  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【从manufacturers表中提取制造商ID、名称，并计算人均营业额Revenue_Usd/Employees】  【step2】:【按计算结果Revenue_Per_Employee进行降序排序】  【step3】:【使用LIMIT 5限制最终输出结果为前5名】",
    "english_step": "【Step1】: 【Extract manufacturer ID, name from the manufacturers table, and calculate revenue per employee (Revenue_Usd/Employees)】  【Step2】: 【Sort by the calculated Revenue_Per_Employee in descending order】  【Step3】: 【Limit the final output to top 5 entries using LIMIT 5】"
  },
  {
    "db_id": "earphone",
    "question": "请计算每个制造商的利润与市场份额的乘积（Profit_Usd * Market_Share_Percent），并按乘积值降序排列，取前10名。",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, (Profit_Usd * Market_Share_Percent) AS Profit_Market_Index FROM manufacturers ORDER BY Profit_Market_Index DESC LIMIT 10;",
    "type": 2,
    "idx": 323,
    "englishquestion": "Please calculate the product of profit and market share (Profit_Usd * Market_Share_Percent) for each manufacturer, sort in descending order by the product value, and take the top 10.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Profit_Usd, Market_Share_Percent  \n【foreign_keys】:【None】",
    "evidence": "【step1】:【从manufacturers表中提取制造商ID、名称，并计算(Profit_Usd * Market_Share_Percent)】  【step2】:【按计算结果Profit_Market_Index进行降序排序】  【step3】:【通过LIMIT 10筛选前10条记录】",
    "english_step": "【step1】:【Retrieve manufacturer ID and name from the manufacturers table, and calculate (Profit_Usd * Market_Share_Percent)】  【step2】:【Sort the results by the calculated value Profit_Market_Index in descending order】  【step3】:【Filter the top 10 records using LIMIT 10】"
  },
  {
    "db_id": "earphone",
    "question": "请查询成立年份（Founded_Year）最早的3家制造商，按成立年份升序排列。",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, Founded_Year FROM manufacturers ORDER BY Founded_Year ASC LIMIT 3;",
    "type": 3,
    "idx": 324,
    "englishquestion": "Please query the top 3 manufacturers with the earliest founded years (Founded_Year), sorted in ascending order by their founded year.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Founded_Year  \n【foreign_keys】: null",
    "evidence": "【step1】:【从 manufacturers 表中选择制造商ID、名称及成立年份字段】  【step2】:【按 Founded_Year 升序排列结果】  【step3】:【使用 LIMIT 3 限制仅输出最早的三个记录】",
    "english_step": "【step1】: 【Select manufacturer_id, name, and founded_year fields from the manufacturers table】  【step2】: 【Order the results by Founded_Year in ascending order】  【step3】: 【Use LIMIT 3 to restrict output to the earliest three records】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有制造商的员工数量（Employees）都增加到1000000人，请计算这些企业的营业额与员工数量的比值，并按比值降序排列，取前5名。",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, (Revenue_Usd / 1000000) AS Extreme_Revenue_Per_Employee FROM manufacturers ORDER BY Extreme_Revenue_Per_Employee DESC LIMIT 5;",
    "type": 4,
    "idx": 325,
    "englishquestion": "Assuming the number of employees (Employees) for all manufacturers increases to 1,000,000, calculate the ratio of turnover to the number of employees for these enterprises, then sort in descending order by the ratio and take the top 5.",
    "equation_analysis": "equation_analysis：(Revenue_Usd / 1000000) 通过将Revenue_Usd除以固定值1000000（模拟Employees强制设为1,000,000人后的比值计算，等价替换原公式 Revenue_Usd/Employees）来获得新定义的Extreme_Revenue_Per_Employee指标。公式直接映射为：企业营业额与假设调整后的员工数量比=Revenue_Usd ÷ 1,000,000。",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_id, Manufacturer_Name, Revenue_Usd 【equation_analysis】：(Revenue_Usd / 1000000) 通过将Revenue_Usd除以固定值1000000（模拟Employees强制设为1,000,000人后的比值计算，等价替换原公式 Revenue_Usd/Employees）来获得新定义的Extreme_Revenue_Per_Employee指标。公式直接映射为：企业营业额与假设调整后的员工数量比=Revenue_Usd ÷ 1,000,000。",
    "evidence": "【step1】:【计算每位制造商的营业额与模拟员工数的比值：SELECT Manufacturer_Id, Manufacturer_Name, Revenue_Usd/1000000 AS Extreme_Revenue_Per_Employee】  【step2】:【对计算出的比值进行降序排列：ORDER BY Extreme_Revenue_Per_Employee DESC】  【step3】:【提取全局前5名结果：LIMIT 5】",
    "english_step": "【step1】: 【Calculate the ratio of revenue to simulated number of employees for each manufacturer: SELECT Manufacturer_Id, Manufacturer_Name, Revenue_Usd/1000000 AS Extreme_Revenue_Per_Employee】  【step2】: 【Sort the calculated ratios in descending order: ORDER BY Extreme_Revenue_Per_Employee DESC】  【step3】: 【Extract the global top 5 results: LIMIT 5】"
  },
  {
    "db_id": "earphone",
    "question": "请计算每个使用记录的单位时间电池消耗率（Battery_Consumed_Percent / Usage_Duration_Minutes），并按消耗率降序排列，取前10名。",
    "query": "SELECT Record_Id, Headphone_Id, User_Id, (Battery_Consumed_Percent / Usage_Duration_Minutes) AS Battery_Consumption_Rate FROM usage_records ORDER BY Battery_Consumption_Rate DESC LIMIT 10;",
    "type": 1,
    "idx": 326,
    "englishquestion": "Please calculate the battery consumption rate per unit time (Battery_Consumed_Percent / Usage_Duration_Minutes) for each usage record, sort them in descending order by the consumption rate, and take the top 10.",
    "equation_analysis": "equation_analysis：Battery_Consumption_Rate = CAST(Battery_Consumed_Percent AS DECIMAL) / NULLIF(Usage_Duration_Minutes,0)",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_Id, Headphone_Id, User_Id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】：【Headphone_Id → headphones(Headphone_id)】  \n【equation_analysis】：【Battery_Consumption_Rate = CAST(Battery_Consumed_Percent AS DECIMAL) / NULLIF(Usage_Duration_Minutes,0)】",
    "evidence": "【step1】:【从usage_records中选取Record_Id/Headphone_Id/User_Id字段，并计算Battery_Consumed_Percent与Usage_Duration_Minutes的比值作为新列Battery_Consumption_Rate】 【step2】:【按新计算的Battery_Consumption_Rate从高到低排序】 【step3】:【使用LIMIT 10限定最终只返回前10条记录】",
    "english_step": "【step1】:【Select Record_Id, Headphone_Id, User_Id from usage_records, calculate the ratio of Battery_Consumed_Percent to Usage_Duration_Minutes as a new column Battery_Consumption_Rate】  【step2】:【Sort by the newly calculated Battery_Consumption_Rate in descending order】  【step3】:【Use LIMIT 10 to restrict the final output to the top 10 records】"
  },
  {
    "db_id": "earphone",
    "question": "请计算所有使用记录的音量能量指数（(Volume_Level_Percent^2) * Usage_Duration_Minutes），并按指数值降序排列，取前5名。",
    "query": "SELECT Record_Id, Headphone_Id, User_Id, (POWER(Volume_Level_Percent, 2) * Usage_Duration_Minutes) AS Volume_Energy_Index FROM usage_records ORDER BY Volume_Energy_Index DESC LIMIT 5;",
    "type": 2,
    "idx": 327,
    "englishquestion": "Please calculate the volume energy index ((Volume_Level_Percent^2) * Usage_Duration_Minutes) for all usage records, sort them in descending order by index value, and take the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_id, Headphone_id, User_id, Volume_Level_Percent, Usage_Duration_Minutes  \n【foreign_keys】:【Headphone_id → headphones.Headphone_id】",
    "evidence": "【step1】:【选择所需字段并计算能量指数值】  【step2】:【按计算结果降序排序】  【step3】:【限制结果仅显示前5条记录】",
    "english_step": "【step1】: 【Select required fields and calculate the energy index value】  【step2】: 【Sort in descending order based on the calculation result】  【step3】: 【Limit the results to the top 5 records】"
  },
  {
    "db_id": "earphone",
    "question": "请查询同时使用主动降噪（Noise_Cancellation_Used为True）且电池消耗超过50%的记录，按使用时长（Usage_Duration_Minutes）升序排列，取前3名。",
    "query": "SELECT Record_Id, Headphone_Id, User_Id, Usage_Duration_Minutes, Battery_Consumed_Percent, Noise_Cancellation_Used FROM usage_records WHERE Noise_Cancellation_Used = True AND Battery_Consumed_Percent > 50 ORDER BY Usage_Duration_Minutes ASC LIMIT 3;",
    "type": 3,
    "idx": 328,
    "englishquestion": "Please query records where both active noise cancellation (Noise_Cancellation_Used is True) is used and battery consumption exceeds 50%, sorted by usage duration (Usage_Duration_Minutes) in ascending order, and retrieve the top 3.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_id, Headphone_id, User_id, Usage_Duration_Minutes, Battery_Consumed_Percent, Noise_Cancellation_Used  \n【foreign_keys】: Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:【应用过滤条件获取主动降噪且高耗电记录】WHERE Noise_Cancellation_Used=True AND Battery_Consumed_Percent>50  【step2】:【按使用时长正序排列数据】ORDER BY Usage_Duration_Minutes ASC  【step3】:【限定返回前三行结果】LIMIT 3",
    "english_step": "【step1】:【Apply filter conditions to retrieve records with active noise cancellation and high battery consumption】WHERE Noise_Cancellation_Used=True AND Battery_Consumed_Percent>50  【step2】:【Sort data by usage duration in ascending order】ORDER BY Usage_Duration_Minutes ASC  【step3】:【Limit returned results to top 3 rows】LIMIT 3"
  },
  {
    "db_id": "earphone",
    "question": "假设所有使用记录的时长（Usage_Duration_Minutes）都增加到1000000分钟，请计算这些记录的总电池消耗量（SUM(Battery_Consumed_Percent) * 1000000 / Usage_Duration_Minutes），并按消耗量降序排列。",
    "query": "SELECT Record_Id, Headphone_Id, User_Id, (SUM(Battery_Consumed_Percent) * 1000000 / Usage_Duration_Minutes) AS Total_Battery_Consumption FROM usage_records GROUP BY Record_Id, Headphone_Id, User_Id ORDER BY Total_Battery_Consumption DESC;",
    "type": 4,
    "idx": 329,
    "englishquestion": "Assuming the duration of all usage records (Usage_Duration_Minutes) is increased to 1,000,000 minutes, calculate the total battery consumption of these records (SUM(Battery_Consumed_Percent) * 1000000 / Usage_Duration_Minutes) and sort them in descending order by consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_Id, Headphone_Id, User_Id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】: Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:【从usage_records表中选择Record_Id, Headphone_Id, User_Id字段，并按Record_Id, Headphone_Id, User_Id分组（主键分组实际等同于逐条处理）】  【step2】:【对每个分组计算电池总消耗量：(SUM(Battery_Consumed_Percent) * 1000000) / Usage_Duration_Minutes 并别名Total_Battery_Consumption】  【step3】:【将结果按Total_Battery_Consumption字段降序排序输出】",
    "english_step": "【step1】:【Select the fields Record_Id, Headphone_Id, User_Id from the usage_records table, and group by Record_Id, Headphone_Id, User_Id (primary key grouping is equivalent to row-by-row processing)】  【step2】:【For each group, calculate total battery consumption: (SUM(Battery_Consumed_Percent) * 1000000) / Usage_Duration_Minutes aliased as Total_Battery_Consumption】  【step3】:【Sort and output the results in descending order by the Total_Battery_Consumption field】"
  },
  {
    "db_id": "earphone",
    "question": "请按耳机ID（Headphone_Id）分组，计算每组耳机的平均功率消耗（Battery_Consumed_Percent / (Usage_Duration_Minutes/60)），并按功率降序排列。",
    "query": "SELECT Headphone_Id, AVG(Battery_Consumed_Percent / (Usage_Duration_Minutes / 60)) AS Average_Power_Consumption FROM usage_records GROUP BY Headphone_Id ORDER BY Average_Power_Consumption DESC;",
    "type": 1,
    "idx": 330,
    "englishquestion": "Please group by headphone ID (Headphone_Id), calculate the average power consumption (Battery_Consumed_Percent / (Usage_Duration_Minutes/60)) for each group of headphones, and sort by power in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Headphone_id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】: Headphone_id→headphones.Headphone_id",
    "evidence": "【step1】:【从usage_records表中计算每个耳机记录的功率消耗（Battery_Consumed_Percent/(Usage_Duration_Min/60)）】  【step2】:【按Headphone_Id分组计算平均功率消耗】  【step3】:【对计算结果按Average_Power_Consumption降序排序】",
    "english_step": "【step1】:【Calculate the power consumption (Battery_Consumed_Percent/(Usage_Duration_Min/60)) for each headphone record from the usage_records table】  【step2】:【Group by Headphone_Id to calculate the average power consumption】  【step3】:【Sort the results by Average_Power_Consumption in descending order】"
  },
  {
    "db_id": "earphone",
    "question": "请按用户ID（User_Id）分组，计算每个用户的音质舒适度调和平均数（2/(1/Audio_Quality_Rating + 1/Comfort_Rating)），并按结果降序排列取前5名。",
    "query": "SELECT User_Id, AVG(2 / (1 / Audio_Quality_Rating + 1 / Comfort_Rating)) AS Harmonic_Mean FROM usage_records WHERE Audio_Quality_Rating > 0 AND Comfort_Rating > 0 GROUP BY User_Id ORDER BY Harmonic_Mean DESC LIMIT 5;",
    "type": 2,
    "idx": 331,
    "englishquestion": "Group by user ID (User_Id), calculate the harmonic mean of each user's audio quality and comfort rating (2/(1/Audio_Quality_Rating + 1/Comfort_Rating)), and sort the results in descending order to get the top 5.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：User_Id, Audio_Quality_Rating, Comfort_Rating  \n【foreign_keys】: None",
    "evidence": "【step1】:【筛选有效评分数据，排除音质或舒适度评分为0的记录】  【step2】:【按User_Id分组，计算每组用户的调和平均数（公式：2/(1/Audio_Quality_Rating +1/Comfort_Rating)的均值）】  【step3】:【按调和平均数降序排序后截取前5名结果】",
    "english_step": "【Step1】: [Filter valid rating data, excluding records where Audio_Quality_Rating or Comfort_Rating is 0]  【Step2】: [Group by User_Id, calculate the harmonic mean for each user group using the formula: mean of 2 / (1/Audio_Quality_Rating + 1/Comfort_Rating)]  【Step3】: [Sort by harmonic mean in descending order and limit to the top 5 results]"
  },
  {
    "db_id": "earphone",
    "question": "请按耳机ID（Headphone_Id）和是否使用降噪（Noise_Cancellation_Used）分组，统计每组记录的平均电池消耗百分比（Battery_Consumed_Percent），并按消耗量升序排列。",
    "query": "SELECT Headphone_Id, Noise_Cancellation_Used, AVG(Battery_Consumed_Percent) AS Avg_Battery_Consumed_Percent FROM usage_records GROUP BY Headphone_Id, Noise_Cancellation_Used ORDER BY Avg_Battery_Consumed_Percent ASC;",
    "type": 3,
    "idx": 332,
    "englishquestion": "Please group by headphone ID (Headphone_Id) and whether noise cancellation was used (Noise_Cancellation_Used), then calculate the average battery consumption percentage (Battery_Consumed_Percent) for each group, and sort the results in ascending order by consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Headphone_Id, Noise_Cancellation_Used, Battery_Consumed_Percent  \n【foreign_keys】:【usage_records.Headphone_id → headphones.Headphone_id】",
    "evidence": "【step1】:【从usage_records表选取Headphone_Id和Noise_Cancellation_Used字段作为分组依据】  【step2】:【通过AVG函数对Battery_Consumed_Percent字段进行聚合计算并取别名】  【step3】:【按计算后的Avg_Battery_Consumed_Percent进行升序排列】",
    "english_step": "[Step1]: [Select Headphone_Id and Noise_Cancellation_Used from the usage_records table as grouping criteria]  [Step2]: [Compute the average of Battery_Consumed_Percent using the AVG function and alias it as Avg_Battery_Consumed_Percent]  [Step3]: [Sort the results by Avg_Battery_Consumed_Percent in ascending order]"
  },
  {
    "db_id": "earphone",
    "question": "假设所有记录的Volume_Level_Percent都提高到1000%，请按用户ID（User_Id）分组计算理论总耗电量（SUM(Battery_Consumed_Percent*(Volume_Level_Percent/100)^3)），并按耗电量降序排列。",
    "query": "SELECT User_Id, SUM(Battery_Consumed_Percent * POWER(Volume_Level_Percent / 100, 3)) AS Theoretical_Power_Consumption FROM usage_records GROUP BY User_Id ORDER BY Theoretical_Power_Consumption DESC;",
    "type": 4,
    "idx": 333,
    "englishquestion": "Assuming the Volume_Level_Percent for all records is increased to 1000%, calculate the theoretical total power consumption (SUM(Battery_Consumed_Percent*(Volume_Level_Percent/100)^3)) grouped by user ID (User_Id), and sort the results in descending order by power consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：User_id, Battery_Consumed_Percent, Volume_Level_Percent  \n【foreign_keys】:【Headphone_id (→ headphones.Headphone_id)】",
    "evidence": "【step1】:处理所有记录的Volume_Level_Percent参数：将每条记录的`Battery_Consumed_Percent * POW(Volume_Level_Percent/100, 3)`作为临时计算值  【step2】:按User_Id分组并对临时值求和，生成Theoretical_Power_Consumption字段  【step3】:根据Theoretical_Power_Consumption对结果集进行降序排序",
    "english_step": "【step1】: Process all records for the Volume_Level_Percent parameter: calculate `Battery_Consumed_Percent * POW(Volume_Level_Percent/100, 3)` for each record as a temporary calculated value.  【step2】: Group by User_Id and sum the temporary values to generate the Theoretical_Power_Consumption field.  【step3】: Sort the result set in descending order based on Theoretical_Power_Consumption."
  },
  {
    "db_id": "earphone",
    "question": "请按国家（Country）分组，计算每组制造商的人均利润密度（Profit_Usd / (Employees * 1000)），并按密度值降序排列。",
    "query": "SELECT Country, SUM(Profit_Usd) / (SUM(Employees) * 1000) AS Profit_Density FROM manufacturers GROUP BY Country ORDER BY Profit_Density DESC;",
    "type": 1,
    "idx": 334,
    "englishquestion": "Please group by country and calculate the profit density per capita (Profit_Usd / (Employees * 1000)) for each manufacturer group, then sort in descending order by density value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Country, Profit_Usd, Employees  \n【foreign_keys】: 无显式外键引用",
    "evidence": "【step1】:【按国家分组并计算每个国家的总利润和总员工数】  【step2】:【将总利润除以（总员工数*1000）得到人均利润密度】  【step3】:【按计算出的Profit_Density值进行降序排列】",
    "english_step": "【Step 1】: Group by country and calculate the total profit and total number of employees for each country  【Step 2】: Divide the total profit by (total number of employees multiplied by 1000) to obtain the Profit_Density per capita  【Step 3】: Sort in descending order based on the calculated Profit_Density value"
  },
  {
    "db_id": "earphone",
    "question": "请按成立年份（Founded_Year）分组，计算每组制造商的利润-市场综合指数（SQRT(Profit_Usd * Market_Share_Percent)），并按指数降序排列取前10名。",
    "query": "SELECT Founded_Year, SQRT(SUM(Profit_Usd * Market_Share_Percent)) AS Profit_Market_Index FROM manufacturers GROUP BY Founded_Year ORDER BY Profit_Market_Index DESC LIMIT 10;",
    "type": 2,
    "idx": 335,
    "englishquestion": "Please group by the founding year (Founded_Year), calculate the profit-market composite index (SQRT(Profit_Usd * Market_Share_Percent)) for each group of manufacturers, and select the top 10 sorted in descending order by the index.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Founded_Year, Profit_Usd, Market_Share_Percent  \n【foreign_keys】: 无",
    "evidence": "【step1】:【按成立年份分组计算所有制造商该年份利润与市场份额乘积的总和】  【step2】:【对每组乘积总和进行平方根运算生成综合指数】  【step3】:【根据综合指数降序筛选前10名结果】",
    "english_step": "【step1】: Group by the year of establishment and calculate the sum of the product of profit and market share for all manufacturers in each year.  【step2】: Compute the square root of the total product sum for each group to generate a composite index.  【step3】: Select the top 10 results ordered by the composite index in descending order."
  },
  {
    "db_id": "earphone",
    "question": "请按国家（Country）分组，统计每个组别成立超过50年的制造商数量，并按数量降序排列。",
    "query": "SELECT Country, COUNT(*) AS Manufacturer_Count FROM manufacturers WHERE (2023 - Founded_Year) > 50 GROUP BY Country ORDER BY Manufacturer_Count DESC;",
    "type": 3,
    "idx": 336,
    "englishquestion": "Please group by Country and count the number of manufacturers established for more than 50 years in each group, then sort the results in descending order by count.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Country, Founded_Year  \n【foreign_keys】:[]",
    "evidence": "【step1】:【筛选出成立年份早于1973年（2023-50）的制造商】  【step2】:【按Country分组并统计每个国家的制造商数量】  【step3】:【按统计结果Manufacturer_Count降序排序最终输出】",
    "english_step": "【Step 1】:【Filter manufacturers with founded year earlier than 1973 (2023-50)】  【Step 2】:【Group by Country and count the number of manufacturers per country】  【Step 3】:【Sort the final output by Manufacturer_Count in descending order】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有制造商的员工数量（Employees）都增加到1000000000人，请按国家（Country）分组计算理论人均产值（Revenue_Usd / 1000000000），并按产值升序排列。",
    "query": "SELECT Country, SUM(Revenue_Usd) / 1000000000 AS Theoretical_Per_Capita_Output FROM manufacturers GROUP BY Country ORDER BY Theoretical_Per_Capita_Output ASC;",
    "type": 4,
    "idx": 337,
    "englishquestion": "Assuming the number of employees (Employees) for all manufacturers increases to 1,000,000,000, calculate the theoretical per capita output (Revenue_Usd / 1,000,000,000) grouped by country (Country), and sort the results by output in ascending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Country, Revenue_Usd  \n【foreign_keys】: (无直接使用)",
    "evidence": "【step1】:【从manufacturers表中选取Country列并汇总Revenue_Usd】  【step2】:【将每组的SUM(Revenue_Usd)除以1000000000作为Theoretical_Per_Capita_Output】  【step3】:【按Theoretical_Per_Capita_Output计算结果升序排列】",
    "english_step": "【step1】: 【Select the Country column from the manufacturers table and aggregate Revenue_Usd】  【step2】: 【Divide the SUM(Revenue_Usd) per group by 1000000000 as Theoretical_Per_Capita_Output】  【step3】: 【Sort the results in ascending order by the calculated Theoretical_Per_Capita_Output】"
  },
  {
    "db_id": "earphone",
    "question": "请按驱动类型（Driver_Type）分组，计算每组耳机的平均阻抗灵敏度比（Ompedance_Ohms / Sensitivity_Db），并按比值升序排列。",
    "query": "SELECT Driver_Type, AVG(Ompedance_Ohms / Sensitivity_Db) AS Impedance_Sensitivity_Ratio FROM headphones GROUP BY Driver_Type ORDER BY Impedance_Sensitivity_Ratio ASC;",
    "type": 1,
    "idx": 338,
    "englishquestion": "Please group by driver type (Driver_Type), calculate the average impedance-to-sensitivity ratio (Impedance_Ohms / Sensitivity_Db) for each group of headphones, and sort them in ascending order by the ratio.",
    "equation_analysis": "equation_analysis：AVG(Impedance_Ohms / Sensitivity_Db) ——对每个驱动类型组的阻抗欧姆值（分子）除以灵敏度分贝值（分母）的平均结果。排序依据该平均比值升序排列。",
    "used_table_info": "【table】：【headphones】 【columns】：Driver_Type, Ompedance_Ohms, Sensitivity_Db  \n【foreign_keys】: (none involved in this query)  \n【equation_analysis】：AVG(Impedance_Ohms / Sensitivity_Db) ——对每个驱动类型组的阻抗欧姆值（分子）除以灵敏度分贝值（分母）的平均结果。排序依据该平均比值升序排列。",
    "evidence": "【step1】:从headphones表中提取Driver_Type字段，并计算每个产品单独的阻抗灵敏度比（Ompedance_Ohms/Sensitivity_Db）  【step2】:使用AVG函数按Driver_Type分组聚合，计算各组的平均阻抗灵敏度比  【step3】:通过ORDER BY对计算结果Impedance_Sensitivity_Ratio字段进行升序排列",
    "english_step": "【step1】: Extract the Driver_Type field from the headphones table and calculate the individual impedance-sensitivity ratio (Impedance_Ohms/Sensitivity_Db) for each product  【step2】: Use the AVG function to group and aggregate by Driver_Type, calculating the average impedance-sensitivity ratio for each group  【step3】: Sort the calculation results in ascending order through ORDER BY based on the Impedance_Sensitivity_Ratio field"
  },
  {
    "db_id": "earphone",
    "question": "请按价格区间（Price_Usd DIV 100）分组，计算每组耳机的声压级与总谐波失真的几何平均数（√(Sound_Pressure_Level_Db * Total_Harmonic_Distortion_Percent)），并按结果降序排列。",
    "query": "SELECT (h.Price_Usd DIV 100) AS price_range, SQRT(AVG(a.Sound_Pressure_Level_Db * a.Total_Harmonic_Distortion_Percent)) AS geometric_mean FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id GROUP BY price_range ORDER BY geometric_mean DESC;",
    "type": 2,
    "idx": 339,
    "englishquestion": "Please group by price range (Price_Usd DIV 100), calculate the geometric mean (√(Sound_Pressure_Level_Db * Total_Harmonic_Distortion_Percent)) of sound pressure level and total harmonic distortion for each group of earphones, and sort the results in descending order.",
    "equation_analysis": "equation_analysis：geometric_mean = √(AVG(Sound_Pressure_Level_Db × Total_Harmonic_Distortion_Percent)) 先对两列进行逐行乘积，再聚合计算算术平均值后取平方根，本质是乘积算术平均值的平方根而非严格数学定义的几何平均值（n项乘积的n次方根）。但此处使用方式符合具体查询实现逻辑",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_id, Price_Usd  \n【table】：【audio_data】 【columns】：Headphone_id, Sound_Pressure_Level_Db, Total_Harmonic_Distortion_Percent  \n【foreign_keys】：h.Headphone_Id = a.Headphone_Id  \n【equation_analysis】：geometric_mean = √(AVG(Sound_Pressure_Level_Db × Total_Harmonic_Distortion_Percent)) 先对两列进行逐行乘积，再聚合计算算术平均值后取平方根，本质是乘积算术平均值的平方根而非严格数学定义的几何平均值（n项乘积的n次方根）。但此处使用方式符合具体查询实现逻辑",
    "evidence": "【step1】:【连接耳机表与音频数据表】通过Headphone_Id字段进行JOIN操作，将headphones和audio_data表关联，确保每个耳机与其音频测量数据正确匹配  【step2】:【分组计算几何平均数】按照价格区间(Price_Usd DIV 100)分组后，使用AVG计算声压级与谐波失真百分比乘积的算数平均，并通过SQRT函数实现几何平均  【step3】:【排序输出结果】将第二步得到的几何平均数值命名为geometric_mean，通过ORDER BY按该字段降序排列最终结果",
    "english_step": "[Step 1]：【Join headphone table with audio data table】Perform a JOIN operation on the Headphone_Id field to associate the headphones and audio_data tables, ensuring each headphone is correctly matched with its audio measurement data.  [Step 2]：【Group and calculate geometric mean】Group by price intervals (Price_Usd DIV 100), compute the arithmetic average of the product of sound pressure level and harmonic distortion percentage using AVG, and achieve the geometric mean by applying the SQRT function.  [Step 3]：【Sort and output results】Name the calculated geometric mean value as geometric_mean, then sort the final results in descending order using ORDER BY based on this field."
  },
  {
    "db_id": "earphone",
    "question": "请按是否无线（Is_Wireless）分组，统计每组耳机的平均重量与电池续航的比值（Weight_Grams / Battery_Life_Hours），并按比值升序排列。",
    "query": "SELECT Is_Wireless, AVG(Weight_Grams / Battery_Life_Hours) AS weight_to_battery_ratio FROM headphones GROUP BY Is_Wireless ORDER BY weight_to_battery_ratio ASC;",
    "type": 3,
    "idx": 340,
    "englishquestion": "Please group the headphones by whether they are wireless (Is_Wireless), calculate the average ratio of weight to battery life (Weight_Grams / Battery_Life_Hours) for each group, and sort the results in ascending order by the ratio.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Is_Wireless, Weight_Grams, Battery_Life_Hours  \n【foreign_keys】: Manufacturer_id关联manufacturers表（未被当前查询实际使用）",
    "evidence": "【step1】:【按是否无线标记(Is_Wireless)进行数据分组】  【step2】:【计算每组耳机重量与电池续航时间的平均值比值(Weight_Grams/Battery_Life_Hours)】  【step3】:【按比值结果升序(ASC)排列最终输出】",
    "english_step": "【step1】:【Group the data by the wireless indicator (Is_Wireless)】  【step2】:【Calculate the average ratio of headphone weight to battery life time (Weight_Grams/Battery_Life_Hours) for each group】  【step3】:【Sort the final output by the ratio result in ascending order (ASC)】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机的价格（Price_Usd）都提高到1000000美元，请按防水等级（Water_Resistance）分组计算每克重量的理论单价（1000000 / Weight_Grams），并按单价降序排列。",
    "query": "SELECT Water_Resistance, AVG(1000000 / Weight_Grams) AS price_per_gram FROM headphones GROUP BY Water_Resistance ORDER BY price_per_gram DESC;",
    "type": 4,
    "idx": 341,
    "englishquestion": "Assuming the price (Price_Usd) of all headphones is increased to $1,000,000, group them by water resistance level (Water_Resistance) and calculate the theoretical price per gram (1,000,000 / Weight_Grams), then sort the results in descending order by this unit price.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Water_Resistance, Weight_Grams  \n【foreign_keys】:【Headphone_id关联audio_data.Headphone_id / Manufacturer_id关联manufacturers.Manufacturer_id】",
    "evidence": "【step1】:【计算所有耳机的每克理论单价（1000000/Weight_Grams）并获取防水等级字段】  【step2】:【按Water_Resistance分组聚合，计算组内单价的平均值（AVG）】  【step3】:【对最终结果按price_per_gram降序排序（ORDER BY DESC）】",
    "english_step": "【Step 1】:【Calculate the theoretical price per gram (1000000/Weight_Grams) for all earphones and retrieve the Water_Resistance field】  【Step 2】:【Group by Water_Resistance and calculate the average price per gram (AVG) within each group】  【Step 3】:【Sort the final results in descending order by price_per_gram (ORDER BY DESC)】"
  },
  {
    "db_id": "earphone",
    "question": "请按驱动类型（Driver_Type）分组，计算每组耳机的理论最大声压级（Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)），并按结果降序排列。",
    "query": "SELECT Driver_Type, AVG(Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)) AS max_sound_pressure_level FROM audio_data GROUP BY Driver_Type ORDER BY max_sound_pressure_level DESC;",
    "type": 1,
    "idx": 342,
    "englishquestion": "Please group by driver type (Driver_Type), calculate the theoretical maximum sound pressure level (Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)) for each group of headphones, and sort the results in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Driver_Type, Sensitivity_Db, Max_input_Power_Mw  \n【foreign_keys】: 无",
    "evidence": "【step1】:【从audio_data表提取驱动类型(Driver_Type)、灵敏度(Sensitivity_Db)、最大输入功率(Max_Input_Power_Mw)字段】  【step2】:【按驱动类型分组，使用公式Sensitivity_Db+10*LOG10(Max_Input_Power_Mw)计算理论最大声压级，并计算组内平均值作为max_sound_pressure_level】  【step3】:【根据计算结果字段max_sound_pressure_level进行降序排序】",
    "english_step": "【step1】:【Extract Driver_Type, Sensitivity_Db, and Max_Input_Power_Mw fields from the audio_data table】  【step2】:【Group by Driver_Type, calculate the theoretical maximum sound pressure level using the formula Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw), and compute the group average as max_sound_pressure_level】  【step3】:【Sort the results in descending order based on the calculated field max_sound_pressure_level】"
  },
  {
    "db_id": "earphone",
    "question": "请按蓝牙版本（Bluetooth_Version）分组，计算每组耳机的频率响应范围对数宽度（LOG10(上限频率/下限频率)）与总谐波失真的乘积，并按乘积值升序排列。",
    "query": "SELECT Bluetooth_Version, LOG10(AVG(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) / SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1))) * AVG(Total_Harmonic_Distortion_Percent) AS quality_metric FROM audio_data GROUP BY Bluetooth_Version ORDER BY quality_metric ASC;",
    "type": 2,
    "idx": 343,
    "englishquestion": "Please group by Bluetooth version (Bluetooth_Version), calculate for each group the product of the logarithmic width of the frequency response range (LOG10(upper frequency/lower frequency)) and total harmonic distortion, then sort the results in ascending order by the product value.",
    "equation_analysis": "equation_analysis：计算逻辑分两步：  1. 每组蓝牙版本中所有耳机的频率响应范围对数宽度：先通过SUBSTRING_INDEX分割Frequency_Response_Hz的上下限频率（单位Hz），计算上限/下限的比例并取LOG10后求平均值  2. 将上述结果与同组的Total_Harmonic_Distortion_Percent（总谐波失真百分比）的均值相乘，最终公式为：LOG10(AVG(<频率上限/下限比>)) * AVG(总谐波失真)",
    "used_table_info": "【table】：【audio_data】 【columns】：Bluetooth_Version, Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【foreign_keys】：N/A  \n【equation_analysis】：计算逻辑分两步：  \n1. 每组蓝牙版本中所有耳机的频率响应范围对数宽度：先通过SUBSTRING_INDEX分割Frequency_Response_Hz的上下限频率（单位Hz），计算上限/下限的比例并取LOG10后求平均值  \n2. 将上述结果与同组的Total_Harmonic_Distortion_Percent（总谐波失真百分比）的均值相乘，最终公式为：LOG10(AVG(<频率上限/下限比>)) * AVG(总谐波失真)",
    "evidence": "【step1】:【使用SUBSTRING_INDEX分割Frequency_Response_Hz字段，计算每条记录的频响比（上限频率/下限频率）并用AVG聚合】  【step2】:【计算频响比对数值LOG10并乘以各组总谐波失真均值，生成quality_metric指标】  【step3】:【按quality_metric值升序排序最终分组结果】",
    "english_step": "【step1】:【Use SUBSTRING_INDEX to split the Frequency_Response_Hz field, calculate the frequency response ratio (upper frequency / lower frequency) for each record, and aggregate with AVG】  【step2】:【Calculate the logarithm (LOG10) of the frequency response ratio and multiply it by the average Total Harmonic Distortion of each group to generate the quality_metric】  【step3】:【Sort the final grouped results in ascending order based on the quality_metric value】"
  },
  {
    "db_id": "earphone",
    "question": "请按音频编解码器（Audio_Codec）分组，统计每组耳机的平均音质评分（Audio_Quality_Rating），并按评分降序排列。",
    "query": "SELECT Audio_Codec, AVG(Audio_Quality_Rating) AS avg_audio_quality FROM usage_records JOIN audio_data ON usage_records.Headphone_Id = audio_data.Headphone_Id GROUP BY Audio_Codec ORDER BY avg_audio_quality DESC;",
    "type": 3,
    "idx": 344,
    "englishquestion": "Please group by audio codec (Audio_Codec), calculate the average audio quality rating (Audio_Quality_Rating) for each group of earphones, and sort them in descending order by their ratings.",
    "equation_analysis": "equation_analysis：AVG(Audio_Quality_Rating) → 计算音频质量评分的平均值，GROUP BY Audio_Codec → 按音频编解码器分组，ORDER BY avg_audio_quality DESC → 按评分降序排列",
    "used_table_info": "【table】：【audio_data】 【columns】：Audio_Codec, Headphone_Id  \n【table】：【usage_records】 【columns】：Audio_Quality_Rating, Headphone_Id  \n【foreign_keys】：usage_records.Headphone_Id → audio_data.Headphone_Id  \n【equation_analysis】：AVG(Audio_Quality_Rating) → 计算音频质量评分的平均值，GROUP BY Audio_Codec → 按音频编解码器分组，ORDER BY avg_audio_quality DESC → 按评分降序排列",
    "evidence": "【step1】: 【JOIN关联使用记录与音频数据】通过Headphone_Id连接usage_records和audio_data表，建立耳机使用记录与具体音频参数的关系  【step2】: 【按编解码器分组并计算平均值】使用GROUP BY Audio_Codec分组，通过AVG函数计算每组对应的Audio_Quality_Rating平均值  【step3】: 【排序结果集】通过ORDER BY avg_audio_quality DESC对计算结果进行降序排列以体现评分高低顺序",
    "english_step": "【step1】: 【JOIN to Associate Usage Records with Audio Data】 Use Headphone_Id to JOIN the usage_records and audio_data tables, establishing the relationship between headphone usage records and specific audio parameters  【step2】: 【Group by Audio Codec and Compute Averages】 Group by Audio_Codec and compute the average Audio_Quality_Rating for each group using the AVG function  【step3】: 【Sort the Result Set】 Sort the computed results in descending order via ORDER BY avg_audio_quality DESC to reflect the rating hierarchy"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机的总谐波失真（Total_Harmonic_Distortion_Percent）都降低到0.0000001%，请按驱动类型（Driver_Type）分组计算失真改善倍数（原THD/0.0000001），并按倍数降序排列。",
    "query": "SELECT Driver_Type, AVG(Total_Harmonic_Distortion_Percent / 0.0000001) AS improvement_factor FROM audio_data GROUP BY Driver_Type ORDER BY improvement_factor DESC;",
    "type": 4,
    "idx": 345,
    "englishquestion": "Assuming the total harmonic distortion (Total_Harmonic_Distortion_Percent) of all headphones is reduced to 0.0000001%, please group by the driver type (Driver_Type) to calculate the distortion improvement factor (original THD / 0.0000001), and sort in descending order by the improvement factor.",
    "equation_analysis": "equation_analysis：改善倍数=原THD值/0.0000001，实际公式为 Total_Harmonic_Distortion_Percent/1e-7。AVG聚集函数对同一驱动类型的THD改善倍数取平均值",
    "used_table_info": "【table】：【audio_data】 【columns】：Driver_Type, Total_Harmonic_Distortion_Percent  \n【foreign_keys】：【无】（仅单表查询未涉及表关联）  \n【equation_analysis】：【改善倍数=原THD值/0.0000001，实际公式为 Total_Harmonic_Distortion_Percent/1e-7。AVG聚集函数对同一驱动类型的THD改善倍数取平均值】",
    "evidence": "【step1】:【计算每个驱动类型的THD改善倍数：用原始THD值除以0.0000001，并通过AVG函数计算同类型下的平均值后别名improvement_factor】  【step2】:【按Driver_Type分组：将数据按驱动类型分类聚合计算结果】  【step3】:【按改善因子降序排序：对计算出的improvement_factor字段使用DESC降序排列】",
    "english_step": "【step1】: 【Calculate the THD improvement factor for each driver type: Divide the original THD value by 0.0000001, then compute the average value under the same type using the AVG function, aliased as improvement_factor】  【step2】: 【Group by Driver_Type: Aggregate results by categorizing data according to driver type】  【step3】: 【Sort by improvement factor in descending order: Use DESC to sort the calculated improvement_factor field in descending order】"
  },
  {
    "db_id": "earphone",
    "question": "找出理论最大声压级超过120dB但实际声压级未达标的耳机（差集：理论SPL计算值>120dB EXCEPT 实际SPL测量值>=120dB）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw) > 120) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Sound_Pressure_Level_Db >= 120);",
    "type": 1,
    "idx": 346,
    "englishquestion": "Find headphones with a theoretical maximum sound pressure level exceeding 120dB but failing to meet the actual sound pressure level standards (difference set: theoretical SPL calculated value > 120dB EXCEPT actual SPL measured value >= 120dB)",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Headphone_Id, Sensitivity_Db, Max_Input_Power_Mw, Sound_Pressure_Level_Db  \n【foreign_keys】: headphones.Headphone_Id → audio_data.Headphone_Id",
    "evidence": "【step1】:【从audio_data表中计算理论声压级超过120dB的耳机ID集合，计算公式为Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw) > 120】  【step2】:【从audio_data表中筛选实际测试声压级达标(Sound_Pressure_Level_Db >= 120)的耳机ID集合】  【step3】:【在headphones表中取属于step1集合且不属于step2集合的记录，关联获取最终的耳机型号信息】",
    "english_step": "【step1】:【From the audio_data table, calculate the set of headphone IDs where the theoretical sound pressure level exceeds 120dB using the formula: Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw) > 120】  【step2】:【Filter the set of headphone IDs from the audio_data table where the actual tested sound pressure level meets the standard (Sound_Pressure_Level_Db >= 120)】  【step3】:【In the headphones table, retrieve records that belong to the set from Step 1 but not from Step 2, then associate to obtain the final headphone model information】"
  },
  {
    "db_id": "earphone",
    "question": "找出频率响应对数宽度与THD乘积>5但音质评分<4的耳机（差集：复合指标>5 EXCEPT Audio_Quality_Rating>=4）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE LOG10(CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) AS DECIMAL) / CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1) AS DECIMAL)) * Total_Harmonic_Distortion_Percent > 5) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM usage_records WHERE Audio_Quality_Rating >= 4);",
    "type": 2,
    "idx": 347,
    "englishquestion": "Find headphones where the product of logarithmic bandwidth of frequency response and THD is greater than 5 but the audio quality rating is less than 4 (Difference set: composite indicator >5 EXCEPT Audio_Quality_Rating>=4)",
    "equation_analysis": "equation_analysis：LOG10(高频值/低频值)*THD >5，其中高频值=SUBSTRING_INDEX(Frequency_Response_Hz,'-',-1)，低频值=SUBSTRING_INDEX(Frequency_Response_Hz,'-',1)。要求此复合指标>5但音频评分不满足≥4的耳机。",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Headphone_Id, Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【table】：【usage_records】 【columns】：Headphone_Id, Audio_Quality_Rating  \n【foreign_keys】：audio_data.Headphone_Id → headphones.Headphone_Id；usage_records.Headphone_Id → headphones.Headphone_Id  \n【equation_analysis】：LOG10(高频值/低频值)*THD >5，其中高频值=SUBSTRING_INDEX(Frequency_Response_Hz,'-',-1)，低频值=SUBSTRING_INDEX(Frequency_Response_Hz,'-',1)。要求此复合指标>5但音频评分不满足≥4的耳机。",
    "evidence": "【step1】:【从audio_data计算频率响应对数宽度与THD的乘积】（使用SUBSTRING_INDEX拆分频率响应范围字符串，转换为十进制数后计算log10(上界/下界)*总谐波失真百分比，筛选结果>5的耳机ID）  【step2】:【从usage_records获取音质评分≥4的耳机】（构造排除集合，查询所有用户评分大于等于4分的耳机ID）  【step3】:【执行主查询进行复合过滤】（从headphones表提取同时满足：1.在step1结果集 2.不在step2结果集 的耳机ID及型号）",
    "english_step": "【step1】: 【Calculate the product of frequency response logarithmic bandwidth and THD from audio_data】 (Use SUBSTRING_INDEX to split the frequency response range string, convert to decimal values, compute log10(upper_bound/lower_bound) * total_harmonic_distortion_percentage, and filter headphone IDs with results >5)  【step2】: 【Obtain headphones with sound quality ratings ≥4 from usage_records】 (Construct an exclusion set by querying all headphone IDs with user ratings ≥4)  【step3】: 【Execute main query for compound filtering】 (Extract headphone IDs and models from the headphones table that simultaneously satisfy: 1. Exist in step1's result set 2. Are absent from step2's result set)"
  },
  {
    "db_id": "earphone",
    "question": "找出支持蓝牙5.0以上但未配备LDAC编码的耳机（差集：Bluetooth_Version>=5.0 EXCEPT Audio_Codec='LDAC'）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE CAST(SUBSTRING_INDEX(Bluetooth_Version, '.', 1) AS UNSIGNED) * 10 + CAST(SUBSTRING_INDEX(Bluetooth_Version, '.', -1) AS UNSIGNED) >= 50) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Audio_Codec = 'LDAC');",
    "type": 3,
    "idx": 348,
    "englishquestion": "Find headphones that support Bluetooth 5.0 or above but are not equipped with LDAC encoding (set difference: Bluetooth_Version>=5.0 EXCEPT Audio_Codec='LDAC')",
    "equation_analysis": "equation_analysis：  Bluetooth 版本比对公式 `CAST(SUBSTRING_INDEX(Bluetooth_Version, '.', 1) AS UNSIGNED)*10 + CAST(SUBSTRING_INDEX(Bluetooth_Version, '.', -1) AS UNSIGNED) >=50`  等价于 **Bluetooth_Version ≥ 5.0**（提取主次版本号数值化后比对，如5.0→50、5.2→52）。结果过滤支持蓝牙5.0及以上且不包含LDAC编解码的耳机。",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Bluetooth_Version, Audio_Codec, Headphone_Id  \n【foreign_keys】：audio_data.Headphone_Id → headphones.Headphone_Id  \n【equation_analysis】：  \nBluetooth 版本比对公式 `CAST(SUBSTRING_INDEX(Bluetooth_Version, '.', 1) AS UNSIGNED)*10 + CAST(SUBSTRING_INDEX(Bluetooth_Version, '.', -1) AS UNSIGNED) >=50`  \n等价于 **Bluetooth_Version ≥ 5.0**（提取主次版本号数值化后比对，如5.0→50、5.2→52）。结果过滤支持蓝牙5.0及以上且不包含LDAC编解码的耳机。",
    "evidence": "【step1】:【提取支持蓝牙5.0及以上的耳机ID】(通过转换蓝牙版本数值并过滤>=5.0的耳机。例如:5.0转为50，5.2转为52)  【step2】:【提取支持LDAC的耳机ID】(筛选audio_data中Audio_Codec=\"LDAC\"的记录)  【step3】:【通过差集运算获取最终结果】(用Headphones表关联步骤1结果集，并排除步骤2中存在的耳机ID)",
    "english_step": "【step1】:【Extract headphone IDs supporting Bluetooth 5.0 and above】(Convert Bluetooth version values and filter headphones with version >=5.0. Example: 5.0 → 50，5.2 →52)  【step2】:【Extract headphone IDs supporting LDAC】(Filter records where Audio_Codec=\"LDAC\" in audio_data)  【step3】:【Obtain final result through set difference operation】(Join Headphones table with step1 result set and exclude headphone IDs existing in step2)"
  },
  {
    "db_id": "earphone",
    "question": "假设THD改善倍数超过1亿倍的耳机中，找出价格低于100美元的产品（差集：THD/0.0000001 >100000000 EXCEPT Price_Usd>=100）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE Total_Harmonic_Distortion_Percent / 0.0000001 > 100000000) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM headphones WHERE Price_Usd >= 100);",
    "type": 4,
    "idx": 349,
    "englishquestion": "Assuming headphones with a THD improvement factor exceeding 100 million times, find products priced below $100 (set difference: THD/0.0000001 > 100000000 EXCEPT Price_Usd >= 100)",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_id, Total_Harmonic_Distortion_Percent  \n【table】：【headphones】 【columns】：Headphone_Id, Model, Price_Usd  \n【foreign_keys】: audio_data.Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】: 获取满足THD改善倍数条件的耳机ID (从audio_data表筛选Total_Harmonic_Distortion_Percent/0.0000001 > 100000000的头戴式耳机条目)  【step2】: 排除高价位耳机数据 (从headphones表筛选Price_Usd >= 100的耳机ID形成排除集)  【step3】: 通过ID双条件交集过滤 (将step1结果与headphones表主数据关联，去除step2的排除集，最终输出满足条件的Headphone_Id和Model)",
    "english_step": "【step1】: Retrieve headphone IDs that meet the THD improvement ratio condition (filter entries in audio_data table where Total_Harmonic_Distortion_Percent/0.0000001 > 100000000 for over-ear headphones)  【step2】: Exclude high-priced headphones data (create exclusion set by filtering headphone IDs with Price_Usd >= 100 from headphones table)  【step3】: Perform dual-condition ID intersection filtering (join step1 results with main data in headphones table, remove step2 exclusion set, and output final qualified Headphone_Id and Model)"
  },
  {
    "db_id": "earphone",
    "question": "找出理论最大输出功率达标但实际阻抗不匹配的耳机（差集：Max_Input_Power_Mw >= (Sensitivity_Db/10)^10 EXCEPT Impedance_Ohms BETWEEN 16 AND 64）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level_Db - Sensitivity_Db) / 10)) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Impedance_Ohms BETWEEN 16 AND 64);",
    "type": 1,
    "idx": 350,
    "englishquestion": "Find headphones that meet the theoretical maximum output power but have actual impedance mismatch (difference set: Max_Input_Power_Mw >= (Sensitivity_Db/10)^10 EXCEPT Impedance_Ohms BETWEEN 16 AND 64)",
    "equation_analysis": "equation_analysis：  1. `Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level_Db - Sensitivity_Db)/10)`：将灵敏度差值转换为对数标度的功率验证（分贝差值为10倍对数关系）。  2. `Impedance_Ohms BETWEEN 16 AND 64`：直接筛选阻抗匹配范围为16-64欧姆的耳机。",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Headphone_Id, Max_Input_Power_Mw, Sound_Pressure_Level_Db, Sensitivity_Db, Impedance_Ohms  \n【foreign_keys】：audio_data.Headphone_Id → headphones.Headphone_Id  \n【equation_analysis】：  \n1. `Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level_Db - Sensitivity_Db)/10)`：将灵敏度差值转换为对数标度的功率验证（分贝差值为10倍对数关系）。  \n2. `Impedance_Ohms BETWEEN 16 AND 64`：直接筛选阻抗匹配范围为16-64欧姆的耳机。",
    "evidence": "【step1】:【筛选满足理论功率条件的耳机ID】根据公式计算理论要求：从audio_data表中选出Max_Input_Power_Mw >= POWER(10, (声压级-灵敏度)/10)的记录，得到Headphone_Id集合A  【step2】:【筛选阻抗不达标耳机ID】从audio_data表中获取Impedance_Ohms在16-64欧姆范围内的耳机，得到需要排除的ID集合B  【step3】:【获取最终结果】在headphones表中，选择同时满足Headphone_Id属于集合A 且 不属于集合B 的耳机，输出其ID和型号",
    "english_step": "[Step1]: [Filter headphone IDs that meet the theoretical power criteria] Calculate theoretical requirements using the formula: Select records from audio_data table where Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level - Sensitivity)/10), obtaining headphone ID set A.  [Step2]: [Filter out headphone IDs with non-compliant impedance] Retrieve headphones from audio_data table with Impedance_Ohms in the 16-64 Ohm range, forming exclusion ID set B.  [Step3]: [Obtain final results] In the headphones table, select devices where Headphone_Id belongs to set A and does not belong to set B, then output their IDs and models."
  },
  {
    "db_id": "earphone",
    "question": "找出频率响应范围覆盖20-20000Hz但谐波失真率超过音质评分倒数的耳机（差集：Frequency_Response_Hz @> '20,20000' EXCEPT Total_Harmonic_Distortion_Percent < 1/Audio_Quality_Rating）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Headphone_Id IN (SELECT Headphone_Id FROM audio_data WHERE CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1) AS DECIMAL) <= 20 AND CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) AS DECIMAL) >= 20000) AND Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Total_Harmonic_Distortion_Percent >= 1 / (SELECT AVG(Audio_Quality_Rating) FROM usage_records WHERE usage_records.Headphone_Id = audio_data.Headphone_Id));",
    "type": 2,
    "idx": 351,
    "englishquestion": "Find headphones with a frequency response range covering 20-20000Hz but with harmonic distortion rates exceeding the reciprocal of the audio quality rating (difference set: Frequency_Response_Hz @> '20,20000' EXCEPT Total_Harmonic_Distortion_Percent < 1/Audio_Quality_Rating)",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Headphone_Id, Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【table】：【usage_records】 【columns】：Headphone_Id, Audio_Quality_Rating  \n【foreign_keys】: audio_data.Headphone_Id → headphones.Headphone_Id; usage_records.Headphone_Id → headphones.Headphone_Id",
    "evidence": "【step1】: 【提取频率响应20-20000Hz的耳机ID】通过解析audio_data表Frequency_Response_Hz字段的前后区间值（使用SUBSTRING_INDEX分割），筛选出下限值≤20且上限值≥20000的Headphone_Id集合  【step2】: 【计算谐波失真的过滤阈值】在子查询中针对每个Headphone_Id，计算usage_records表对应的平均音质评分（AVG(Audio_Quality_Rating)），取倒数作为谐波失真率的比较基准值  【step3】: 【执行差集运算】将步骤1的结果与audio_data表中Total_Harmonic_Distortion_Percent ≥ 基准值的耳机ID进行排除（NOT IN），最后联查headphones表获取最终型号数据",
    "english_step": "【step1】: 【Extract headphone IDs with frequency response 20-20000Hz】Parse the lower and upper bounds of the Frequency_Response_Hz field in the audio_data table using SUBSTRING_INDEX, filter Headphone_Id set where lower bound ≤20 and upper bound ≥20000  【step2】: 【Calculate harmonic distortion filter threshold】In subquery, calculate average audio quality rating (AVG(Audio_Quality_Rating)) per Headphone_Id from usage_records table, take reciprocal as comparative baseline for harmonic distortion rate  【step3】: 【Perform set difference operation】Exclude headphone IDs from step1 that have Total_Harmonic_Distortion_Percent ≥ baseline value in audio_data table (NOT IN), then join headphones table to obtain final model data"
  },
  {
    "db_id": "earphone",
    "question": "找出无线耳机中电池续航时间低于重量数值的异常产品（差集：Is_Wireless=True EXCEPT Battery_Life_Hours >= Weight_Grams/100）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Is_Wireless = TRUE AND Headphone_Id NOT IN (SELECT Headphone_Id FROM headphones WHERE Battery_Life_Hours >= Weight_Grams / 100);",
    "type": 3,
    "idx": 352,
    "englishquestion": "Identify abnormal products in wireless earphones where the battery life is lower than the weight value (difference set: Is_Wireless=True EXCEPT Battery_Life_Hours >= Weight_Grams/100).",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Battery_Life_Hours, Weight_Grams, Is_Wireless  \n【foreign_keys】: Headphone_Id (关联audio_data.Headphone_id/usage_records.Headphone_id), Manufacturer_id (关联manufacturers.Manufacturer_id)",
    "evidence": "【step1】: 筛选所有无线耳机（WHERE Is_Wireless=TRUE）  【step2】: 嵌套查询计算电池续航满足 Battery_Life_Hours ≥ Weight_Grams/100 的设备  【step3】: 使用NOT IN进行差集操作，排除step2结果获得异常记录",
    "english_step": "[Step1]: Filter all wireless earphones (WHERE Is_Wireless = TRUE)  [Step2]: Use nested query to select devices meeting Battery_Life_Hours ≥ Weight_Grams/100  [Step3]: Perform set difference using NOT IN to exclude Step2 results and obtain abnormal records"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机价格提高到$1,000,000后，找出IPX7防水等级但价格未达百万的产品（差集：Water_Resistance='IPX7' EXCEPT Price_Usd >= 1000000）",
    "query": "SELECT Headphone_Id, Model FROM headphones WHERE Water_Resistance = 'IPX7' AND Headphone_Id NOT IN (SELECT Headphone_Id FROM headphones WHERE Price_Usd >= 1000000);",
    "type": 4,
    "idx": 353,
    "englishquestion": "Assuming all headphone prices are increased to $1,000,000, find products with IPX7 waterproof rating but whose prices do not reach one million (difference set: Water_Resistance='IPX7' EXCEPT Price_Usd >= 1000000).",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Water_Resistance, Price_Usd  \n【foreign_keys】: Manufacturer_id (潜在关联但未具体使用)",
    "evidence": "【step1】:【筛选所有防水等级为IPX7的耳机】  【step2】:【查找当前价格已达100万美元的耳机ID列表】  【step3】:【在IPX7耳机集合中排除价格达标的ID，通过NOT IN实现差集】",
    "english_step": "【step1】: 【Filter all earphones with a waterproof rating of IPX7】  【step2】: 【Find the list of earphone IDs where the current price has reached $1 million】  【step3】: 【Exclude IDs meeting the price criteria from the IPX7 earphones collection using NOT IN to achieve the difference set】"
  },
  {
    "db_id": "earphone",
    "question": "找出理论人均利润达标但实际利润率低于行业基准的制造商（差集：Profit_Usd/Employees >= 50000 EXCEPT (Profit_Usd/Revenue_Usd)*100 >= 15）",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE (Profit_Usd / Employees) >= 50000 AND Manufacturer_Id NOT IN (SELECT Manufacturer_Id FROM manufacturers WHERE (Profit_Usd / Revenue_Usd) * 100 >= 15);",
    "type": 1,
    "idx": 354,
    "englishquestion": "Find manufacturers whose theoretical per capita profit meets the standard but whose actual profit margin is below the industry benchmark (difference set: Profit_Usd/Employees >= 50000 EXCEPT (Profit_Usd/Revenue_Usd)*100 >= 15)",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Profit_Usd, Employees, Revenue_Usd 【foreign_keys】: --无外键关联--",
    "evidence": "【step1】:【筛选理论人均利润≥50000的制造商】  【step2】:【筛选实际利润率≥15%的制造商】  【step3】:【通过NOT IN排除step2结果，得到理论达标但实际未达标的制造商】",
    "english_step": "【step1】:【Filter manufacturers with theoretical per capita profit ≥50,000】  【step2】:【Filter manufacturers with actual profit margin ≥15%】  【step3】:【Exclude results from Step 2 via NOT IN to obtain manufacturers meeting theoretical standards but failing actual ones】"
  },
  {
    "db_id": "earphone",
    "question": "找出成立年份平方与市场份额乘积超过1万亿但员工不足千人的制造商（差集：Founded_Year²*Market_Share_Percent >1000000 EXCEPT Employees >=1000）",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE (POWER(Founded_Year, 2) * Market_Share_Percent) > 1000000 AND Manufacturer_Id NOT IN (SELECT Manufacturer_Id FROM manufacturers WHERE Employees >= 1000);",
    "type": 2,
    "idx": 355,
    "englishquestion": "Identify manufacturers whose product of the square of their founding year and market share exceeds 1 trillion but have fewer than 1,000 employees (set difference: Founded_Year² * Market_Share_Percent > 1,000,000 EXCEPT Employees >= 1,000).",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Founded_Year, Market_Share_Percent, Employees  \n【foreign_keys】:【manufacturers.Manufacturer_id 被 headphones.Manufacturer_id 引用（未直接参与本次查询）】",
    "evidence": "【step1】:【筛选满足 (Founded_Year²*Market_Share_Percent) > 1,000,000 的制造商记录】  【step2】:【从step1结果排除 Employees >= 1000 的制造商（通过子查询实施差集运算）】  【step3】:【投影最终符合条件的 Manufacturer_Id 和 Manufacturer_Name 字段】",
    "english_step": "【step1】:【Filter manufacturer records where (Founded_Year² * Market_Share_Percent) > 1,000,000】  【step2】:【Exclude manufacturers with Employees >= 1000 from step1 results (via subquery implementing set difference)】  【step3】:【Project final qualified Manufacturer_Id and Manufacturer_Name fields】"
  },
  {
    "db_id": "earphone",
    "question": "找出成立超过30年但市场份额未达5%的制造商（差集：2023-Founded_Year>30 EXCEPT Market_Share_Percent>=5）",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE (2023 - Founded_Year) > 30 AND Manufacturer_Id NOT IN (SELECT Manufacturer_Id FROM manufacturers WHERE Market_Share_Percent >= 5);",
    "type": 3,
    "idx": 356,
    "englishquestion": "Find manufacturers established more than 30 years ago but with a market share of less than 5% (Difference set: 2023-Founded_Year>30 EXCEPT Market_Share_Percent>=5)",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Founded_Year, Market_Share_Percent  \n【foreign_keys】: 无外键依赖",
    "evidence": "【step1】:【筛选成立年份超过30年的制造商: WHERE (2023 - Founded_Year) > 30】  【step2】:【获取市场份额≥5%的制造商集合: subquery(SELECT Manufacturer_Id WHERE Market_Share_Percent >= 5)】  【step3】:【通过NOT IN进行差集运算，保留成立年符合但市占率不达标的数据: Manufacturer_Id NOT IN (subquery_result)】",
    "english_step": "【step1】: [Filter manufacturers established for over 30 years: WHERE (2023 - Founded_Year) > 30]  【step2】: [Obtain manufacturers with market share ≥5%: subquery(SELECT Manufacturer_Id WHERE Market_Share_Percent >= 5)]  【step3】: [Perform set difference operation via NOT IN, retaining data meeting founding year criteria but failing market share standards: Manufacturer_Id NOT IN (subquery_result)]"
  },
  {
    "db_id": "earphone",
    "question": "假设所有制造商营业额提升到$1万亿后，找出员工数超百万但理论人均产值不足$10的异常企业（差集：Employees>1000000 EXCEPT 1000000000000/Employees >=10）",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name FROM manufacturers WHERE Employees > 1000000 AND (1000000000000 / Employees) < 10;",
    "type": 4,
    "idx": 357,
    "englishquestion": "Assuming all manufacturers' revenues increase to $1 trillion, identify abnormal companies with employee counts exceeding one million but theoretical per capita output values below $10 (set difference: Employees > 1,000,000 EXCEPT 1,000,000,000,000 / Employees >= 10).",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Employees  \n【foreign_keys】: 【none used in query】",
    "evidence": "【step1】:【筛选制造商表中Employees>1,000,000的记录】  【step2】:【在step1结果集中应用公式1000000000000/Employees <10进行过滤】  【step3】:【从最终过滤结果中投影输出Manufacturer_Id和Manufacturer_Name字段】",
    "english_step": "【step1】:【Filter records in Manufacturer table where Employees > 1,000,000】  【step2】:【Apply formula 1000000000000/Employees < 10 to filter from step1 results】  【step3】:【Project and output Manufacturer_Id and Manufacturer_Name fields from final filtered results】"
  },
  {
    "db_id": "earphone",
    "question": "找出理论电池消耗达标但实际使用时长异常的记录（差集：Battery_Consumed_Percent=Usage_Duration_Minutes*0.8 EXCEPT Usage_Duration_Minutes BETWEEN 30 AND 600）",
    "query": "SELECT Record_Id, Headphone_Id FROM usage_records WHERE Battery_Consumed_Percent = Usage_Duration_Minutes * 0.8 AND Record_Id NOT IN (SELECT Record_Id FROM usage_records WHERE Usage_Duration_Minutes BETWEEN 30 AND 600);",
    "type": 1,
    "idx": 358,
    "englishquestion": "Find records where the theoretical battery consumption meets the standard but the actual usage duration is abnormal (difference set: Battery_Consumed_Percent = Usage_Duration_Minutes * 0.8 EXCEPT Usage_Duration_Minutes BETWEEN 30 AND 600)",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_id, Headphone_id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】: usage_records.Headphone_id -> headphones.Headphone_id",
    "evidence": "【step1】:【筛选满足理论电池消耗条件的记录（Battery_Consumed_Percent = Usage_Duration_Minutes * 0.8）】  【step2】:【通过子查询获取实际使用时长正常的记录ID（Usage_Duration_Minutes BETWEEN 30 AND 600）】  【step3】:【用 NOT IN 排除步骤2的结果集，最终返回理论达标但实际异常的记录（SELECT Record_Id, Headphone_Id FROM 步骤1结果集 WHERE Record_Id NOT IN 步骤2结果集）】",
    "english_step": "【step1】:【Filter records meeting the theoretical battery consumption condition (Battery_Consumed_Percent = Usage_Duration_Minutes * 0.8)】  【step2】:【Obtain record IDs with normal actual usage duration via subquery (Usage_Duration_Minutes BETWEEN 30 AND 600)】  【step3】:【Exclude results from step2 using NOT IN, returning records that meet theoretical criteria but exhibit practical anomalies (SELECT Record_Id, Headphone_Id FROM step1 result set WHERE Record_Id NOT IN step2 result set)】"
  },
  {
    "db_id": "earphone",
    "question": "找出音量能量指数超常但音质评分未达标的记录（差集：(Volume_Level_Percent² * Usage_Duration_Minutes) > 100000 EXCEPT Audio_Quality_Rating >= 3）",
    "query": "SELECT Record_Id, Headphone_Id, User_Id FROM usage_records WHERE POWER(Volume_Level_Percent, 2) * Usage_Duration_Minutes > 100000 AND Audio_Quality_Rating < 3;",
    "type": 2,
    "idx": 359,
    "englishquestion": "Find records where the volume energy index is abnormally high but the audio quality rating does not meet the standard (difference set: (Volume_Level_Percent² * Usage_Duration_Minutes) > 100000 EXCEPT Audio_Quality_Rating >= 3)",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_Id, Headphone_Id, User_Id, Volume_Level_Percent, Usage_Duration_Minutes, Audio_Quality_Rating  \n【foreign_keys】: Headphone_Id -> headphones.Headphone_id",
    "evidence": "【step1】:【计算每个记录的音量能量指数 (Volume_Level_Percent² * Usage_Duration_Minutes)】  【step2】:【筛选音量能量指数大于100000的记录 (POWER(Volume_Level_Percent, 2) * Usage_Duration_Minutes > 100000)】  【step3】:【在步骤2的结果集中排除音质评分达标的记录 (Audio_Quality_Rating < 3)】",
    "english_step": "【step1】:【Calculate the volume energy index for each record (Volume_Level_Percent² * Usage_Duration_Minutes)】  【step2】:【Filter records with volume energy index exceeding 100000 (POWER(Volume_Level_Percent, 2) * Usage_Duration_Minutes > 100000)】  【step3】:【Exclude records meeting audio quality standards from step2's results (Audio_Quality_Rating < 3)】"
  },
  {
    "db_id": "earphone",
    "question": "找出开启降噪但电池消耗异常的记录（差集：Noise_Cancellation_Used=True EXCEPT Battery_Consumed_Percent > Usage_Duration_Minutes * 0.5）",
    "query": "SELECT Record_Id, Headphone_Id, User_Id FROM usage_records WHERE Noise_Cancellation_Used = TRUE AND Battery_Consumed_Percent <= Usage_Duration_Minutes * 0.5;",
    "type": 3,
    "idx": 360,
    "englishquestion": "Find records where noise cancellation is enabled but battery consumption is abnormal (difference set: Noise_Cancellation_Used=True EXCEPT Battery_Consumed_Percent > Usage_Duration_Minutes * 0.5)",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_Id, Headphone_Id, User_Id, Noise_Cancellation_Used, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】:【Headphone_Id → headphones(Headphone_id)】",
    "evidence": "【step1】: 【筛选使用降噪的记录】在usage_records表中过滤出所有Noise_Cancellation_Used为TRUE的记录  【step2】: 【设置异常阈值】针对每个使用记录计算使用时长*0.5的消耗阈值：Usage_Duration_Minutes * 0.5  【step3】: 【排除不符合条件的记录】保留Battery_Consumed_Percent小于等于阈值的记录，组合得到差集结果",
    "english_step": "【step1】: 【Filter records where noise cancellation was used】 Filter out all records in the usage_records table where Noise_Cancellation_Used is TRUE  【step2】: 【Set anomaly threshold】 For each usage record, calculate the consumption threshold as Usage_Duration_Minutes * 0.5  【step3】: 【Exclude non-compliant records】 Keep records where Battery_Consumed_Percent is less than or equal to the threshold, then combine the results to obtain the difference set"
  },
  {
    "db_id": "earphone",
    "question": "假设所有使用记录音量提升到1000%，找出理论耗电量超1000%但实际未达标的记录（差集：Battery_Consumed_Percent * POWER(1000/NULLIF(Volume_Level_Percent,0),3) > 1000 EXCEPT Battery_Consumed_Percent >= 1000）",
    "query": "SELECT Record_Id, Headphone_Id, User_Id FROM usage_records WHERE Battery_Consumed_Percent * POWER(1000/NULLIF(Volume_Level_Percent,0), 3) > 1000 AND Battery_Consumed_Percent < 1000;",
    "type": 4,
    "idx": 361,
    "englishquestion": "Assuming all usage records have their volume increased to 1000%, find the records where the theoretical power consumption exceeds 1000% but the actual consumption does not meet the target (difference set: Battery_Consumed_Percent * POWER(1000/NULLIF(Volume_Level_Percent,0),3) > 1000 EXCEPT Battery_Consumed_Percent >= 1000).",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_id, Headphone_id, User_id, Battery_Consumed_Percent, Volume_Level_Percent  \n【foreign_keys】: Headphone_id -> headphones.Headphone_id",
    "evidence": "【step1】:【计算理论耗电系数并处理除零错误】使用POWER(1000/NULLIF(Volume_Level_Percent,0),3)构建理论耗电系数，避免出现除零错误  【step2】:【筛选理论超耗电记录】通过理论耗电系数与Battery_Consumed_Percent相乘，筛选乘积结果大于1000%的记录  【step3】:【过滤实际未达标数据】用Battery_Consumed_Percent < 1000条件排除实际已达标记录形成差集，最终输出符合条件的Record_Id, Headphone_Id, User_Id",
    "english_step": "【step1】:【Calculate theoretical power consumption coefficient and handle division by zero errors】Use POWER(1000/NULLIF(Volume_Level_Percent,0),3) to build theoretical power consumption coefficient, avoiding division by zero errors  【step2】:【Filter theoretically over-consuming records】Multiply the theoretical consumption coefficient by Battery_Consumed_Percent, filter records where the product result exceeds 1000%  【step3】:【Filter actual non-compliant data】Exclude actually compliant records using Battery_Consumed_Percent < 1000 to form a difference set, finally output qualified Record_Id, Headphone_Id, User_Id"
  },
  {
    "db_id": "earphone",
    "question": "请查询并计算所有耳机的理论最大声压级（Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)），按降序排列取前10名",
    "query": "SELECT a.Headphone_Id, h.Model, a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw) AS Max_SPL_Db FROM audio_data a JOIN headphones h ON a.Headphone_Id = h.Headphone_Id ORDER BY Max_SPL_Db DESC LIMIT 10;",
    "type": 1,
    "idx": 362,
    "englishquestion": "Please query and calculate the theoretical maximum sound pressure level (Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)) for all headphones, take the top 10 results sorted in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_Id, Sensitivity_Db, Max_Input_Power_Mw  \n【table】：【headphones】 【columns】：Headphone_Id, Model  \n【foreign_keys】: audio_data.Headphone_Id → headphones.Headphone_Id",
    "evidence": "【step1】:【执行表连接操作，关联audio_data和headphones表，通过Headphone_Id建立关系】  【step2】:【计算理论最大声压级（Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)）并生成Max_SPL_Db列】  【step3】:【对计算结果进行降序排序并选取前10条记录】",
    "english_step": "【step1】: 【Perform a table join operation between the audio_data and headphones tables using Headphone_Id to establish the relationship】  【step2】: 【Calculate the theoretical maximum sound pressure level (Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)) and generate the Max_SPL_Db column】  【step3】: 【Sort the results in descending order and select the top 10 records】"
  },
  {
    "db_id": "earphone",
    "question": "请计算频率响应对数宽度（LOG10(高频值/低频值)）与总谐波失真的乘积，按乘积值升序排列取后5名",
    "query": "SELECT Audio_Id, Headphone_Id, LOG10(CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) AS DECIMAL) / CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1) AS DECIMAL)) * Total_Harmonic_Distortion_Percent AS Metric FROM audio_data ORDER BY Metric ASC LIMIT 5;",
    "type": 2,
    "idx": 363,
    "englishquestion": "Please calculate the product of the frequency response logarithmic width (LOG10(high frequency value/low frequency value)) and total harmonic distortion, then sort the results in ascending order by the product value and take the last five entries.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Audio_Id, Headphone_Id, Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【foreign_keys】:【Headphone_Id → headphones.Headphone_id】",
    "evidence": "【step1】:【从audio_data表提取Audio_Id和Headphone_Id，使用SUBSTRING_INDEX拆分Frequency_Response_Hz获取高频/低频值并转为数值类型】  【step2】:【计算LOG10（高频/低频）与Total_Harmonic_Distortion_Percent的乘积生成Metric】  【step3】:【按Metric升序排序并用LIMIT 5获取最后5条（最小的5个乘积值，因升序后前5为最小）】",
    "english_step": "【step1】:【Extract Audio_Id and Headbone_Id from the audio_data table, use SUBSTRING_INDEX to split Frequency_Response_Hz and obtain high-frequency/low-frequency values, converting them to numeric types】  【step2】:【Calculate the product of LOG10(high-frequency/low-frequency) and Total_Harmonic_Distortion_Percent to generate the Metric】  【step3】:【Sort by Metric in ascending order and use LIMIT 5 to retrieve the last 5 records (smallest 5 product values, as the first 5 in ascending order are the smallest)】"
  },
  {
    "db_id": "earphone",
    "question": "请按蓝牙版本分组，统计各版本支持LDAC编码耳机的平均音质评分，按评分降序排列",
    "query": "SELECT Bluetooth_Version, AVG(Audio_Quality_Rating) AS Avg_Audio_Quality_Rating FROM audio_data JOIN usage_records ON audio_data.Headphone_Id = usage_records.Headphone_Id WHERE Audio_Codec = 'LDAC' GROUP BY Bluetooth_Version ORDER BY Avg_Audio_Quality_Rating DESC;",
    "type": 3,
    "idx": 364,
    "englishquestion": "Please group by Bluetooth version and calculate the average sound quality rating for headphones supporting LDAC encoding under each version, then sort the results in descending order by the rating.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_Id, Bluetooth_Version, Audio_Codec  \n【table】：【usage_records】 【columns】：Headphone_Id, Audio_Quality_Rating  \n【foreign_keys】: audio_data.Headphone_Id → headphones.Headphone_Id，usage_records.Headphone_Id → headphones.Headphone_Id",
    "evidence": "【step1】:【通过JOIN连接audio_data和usage_records表，根据Headphone_Id关联，并筛选出Audio_Codec为'LDAC'的耳机使用记录】  【step2】:【按Bluetooth_Version分组，计算每组的音频质量评分平均值(AVG(Audio_Quality_Rating))】  【step3】:【对计算结果按平均音质评分降序排列(ORDER BY Avg_Audio_Quality_Rating DESC)】",
    "english_step": "【step1】: 【Join the audio_data and usage_records tables via Headphone_Id, filtering usage records where Audio_Codec is 'LDAC'】  【step2】: 【Group by Bluetooth_Version and calculate the average audio quality rating (AVG(Audio_Quality_Rating)) for each group】  【step3】: 【Sort the results in descending order of average audio quality rating (ORDER BY Avg_Audio_Quality_Rating DESC)】"
  },
  {
    "db_id": "earphone",
    "question": "请查询并计算所有耳机的理论最大声压级（Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)），按降序排列取前10名",
    "query": "SELECT audio_data.Headphone_Id, headphones.Model, audio_data.Sensitivity_Db + 10 * LOG10(audio_data.Max_Input_Power_Mw) AS Max_SPL_Db FROM audio_data JOIN headphones ON audio_data.Headphone_Id = headphones.Headphone_Id ORDER BY Max_SPL_Db DESC LIMIT 10;",
    "type": 4,
    "idx": 365,
    "englishquestion": "Please query and calculate the theoretical maximum sound pressure level (Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)) for all headphones, then sort them in descending order and take the top 10.",
    "equation_analysis": "equation_analysis：Max_SPL_Db = Sensitivity_Db + 10×LOG10(Max_Input_Power_Mw)  （公式解释：使用audio_data表的灵敏度值与max输入功率对数放大后的线性叠加，构成声压级理论最大值计算）",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_id, Sensitivity_Db, Max_Input_Power_Mw  \n【table】：【headphones】 【columns】：Headphone_id, Model  \n【foreign_keys】：audio_data.Headphone_id -> headphones.Headphone_id  \n【equation_analysis】：Max_SPL_Db = Sensitivity_Db + 10×LOG10(Max_Input_Power_Mw)  \n（公式解释：使用audio_data表的灵敏度值与max输入功率对数放大后的线性叠加，构成声压级理论最大值计算）",
    "evidence": "【step1】:【关联audio_data与headphones表，通过Headphone_Id获取耳机完整信息】  【step2】:【计算理论最大声压级（Sensitivity_Db+10*LOG10(Max_Input_Power_Mw)）并命名为Max_SPL_Db】  【step3】:【按Max_SPL_Db降序排列，取前10条记录】",
    "english_step": "【step1】: 【JOIN audio_data with headphones table via Headphone_Id to retrieve complete headphone information】  【step2】: 【Calculate theoretical maximum sound pressure level (Sensitivity_Db + 10*LOG10(Max_Input_Power_Mw)) as Max_SPL_Db】  【step3】: 【Sort by Max_SPL_Db in descending order and select top 10 records】"
  },
  {
    "db_id": "earphone",
    "question": "请计算所有耳机的灵敏度与阻抗平方根的比值（Sensitivity_Db / SQRT(Ompedance_Ohms)），并按比值降序排列取前5名",
    "query": "SELECT Headphone_Id, Model, Sensitivity_Db / SQRT(Ompedance_Ohms) AS Efficiency_Ratio FROM headphones ORDER BY Efficiency_Ratio DESC LIMIT 5;",
    "type": 1,
    "idx": 366,
    "englishquestion": "Please calculate the ratio of the sensitivity to the square root of the impedance (Sensitivity_Db / SQRT(Impedance_Ohms)) for all headphones, and sort them in descending order by this ratio, taking the top 5.",
    "equation_analysis": "equation_analysis：Sensitivity_Db值除以Impedance_Ohms的平方根形成Efficiency_Ratio比值（Sensitivity_Db / SQRT(Impedance_Ohms)）",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Sensitivity_Db, Impedance_Ohms  \n【foreign_keys】：【无】  \n【equation_analysis】：【Sensitivity_Db值除以Impedance_Ohms的平方根形成Efficiency_Ratio比值（Sensitivity_Db / SQRT(Impedance_Ohms)）】",
    "evidence": "【step1】:【计算基础数据并创建效率比值字段】  【step2】:【按计算字段进行降序排序】  【step3】:【应用LIMIT截取前5名结果】",
    "english_step": "【step1】:【Compute base data and create efficiency ratio field】  【step2】:【Sort by calculated field in descending order】  【step3】:【Apply LIMIT to retrieve top 5 results】"
  },
  {
    "db_id": "earphone",
    "question": "请计算频率响应范围差值（高频-低频）与总谐波失真的乘积，按乘积值降序排列取前10名",
    "query": "SELECT Audio_Id, Headphone_Id, (CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) AS DECIMAL) - CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1) AS DECIMAL)) * Total_Harmonic_Distortion_Percent AS Metric FROM audio_data ORDER BY Metric DESC LIMIT 10;",
    "type": 2,
    "idx": 367,
    "englishquestion": "Please calculate the product of the frequency response range difference (high frequency - low frequency) and the total harmonic distortion, then list the top 10 results sorted by the product value in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Audio_Id, Headphone_Id, Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【foreign_keys】:【audio_data.Headphone_Id → headphones.Headphone_id】",
    "evidence": "【step1】:【提取高频和低频值并计算差值】使用SUBSTRING_INDEX分别截取Frequency_Response_Hz高频部分(第二个参数)和低频部分(第一个参数)，做数值减法运算  【step2】:【计算乘积指标】将频率差值结果与Total_Harmonic_Distortion_Percent进行乘法运算，生成别名Metric字段  【step3】:【筛选排序结果】根据Metric字段降序排列，使用LIMIT 10限制最终结果集",
    "english_step": "【step1】: 【Extract high and low frequency values and calculate difference】 Use SUBSTRING_INDEX to split Frequency_Response_Hz into high-frequency part (second parameter) and low-frequency part (first parameter), perform numerical subtraction  【step2】: 【Calculate product metric】 Multiply the frequency difference result by Total_Harmonic_Distortion_Percent to generate alias field Metric  【step3】: 【Filter and sort results】 Sort by Metric field descending, use LIMIT 10 to restrict final result set"
  },
  {
    "db_id": "earphone",
    "question": "请查询无线耳机中电池续航时间与重量的比值（Battery_Life_Hours/Weight_Grams），按比值升序排列取前5名",
    "query": "SELECT Headphone_Id, Model, Battery_Life_Hours / Weight_Grams AS Battery_Density FROM headphones WHERE Is_Wireless = TRUE ORDER BY Battery_Density ASC LIMIT 5;",
    "type": 3,
    "idx": 368,
    "englishquestion": "Please query the ratio of battery life to weight (Battery_Life_Hours/Weight_Grams) for wireless earbuds, sort by the ratio in ascending order and take the top 5 results.",
    "equation_analysis": "equation_analysis：Battery_Life_Hours / Weight_Grams表示每小时电池续航与每克重量的能量密度比率，数值越小代表单位重量提供的续航时间越短",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Battery_Life_Hours, Weight_Grams, Is_Wireless  \n【foreign_keys】：【无】  \n【equation_analysis】：【Battery_Life_Hours / Weight_Grams】表示每小时电池续航与每克重量的能量密度比率，数值越小代表单位重量提供的续航时间越短",
    "evidence": "【step1】:【筛选无线耳机并计算电池续航与重量比值】  【step2】:【按计算出的比值升序排序】  【step3】:【限制结果仅返回前5条记录】",
    "english_step": "【step1】:【Filter wireless earphones and calculate battery life to weight ratio】  【step2】:【Sort by calculated ratio in ascending order】  【step3】:【Limit results to return only the top 5 records】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机价格提高到$1,000,000，请计算每克重量的理论单价（1000000/Weight_Grams）并按单价降序排列取前3名",
    "query": "SELECT Headphone_Id, Model, 1000000 / NULLIF(Weight_Grams, 0) AS Price_Per_Gram FROM headphones ORDER BY Price_Per_Gram DESC LIMIT 3;",
    "type": 4,
    "idx": 369,
    "englishquestion": "Assuming the price of all headphones is increased to $1,000,000, calculate the theoretical price per gram (1000000/Weight_Grams) and sort them in descending order by unit price, then take the top 3.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Weight_Grams  \n【foreign_keys】:",
    "evidence": "【step1】:【计算理论单价时使用NULLIF函数处理Weight_Grams的零值，防止除零错误】  【step2】:【按Price_Per_Gram计算结果降序排序】  【step3】:【使用LIMIT 3限制结果集只保留前三名】",
    "english_step": "【step1】:【Use the NULLIF function on Weight_Grams to handle zero values when calculating theoretical unit price, preventing division by zero errors】  【step2】:【Sort results in descending order by Price_Per_Gram calculation】  【step3】:【Use LIMIT 3 to restrict the result set to the top three entries】"
  },
  {
    "db_id": "earphone",
    "question": "请计算各制造商的人均产值密度（Revenue_Usd/(Employees*1000)），并按密度值降序排列取前5名",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, Revenue_Usd / (Employees * 1000) AS Revenue_Density FROM manufacturers ORDER BY Revenue_Density DESC LIMIT 5;",
    "type": 1,
    "idx": 370,
    "englishquestion": "Please calculate the per capita revenue density (Revenue_Usd/(Employees*1000)) for each manufacturer, and select the top 5 ranked by density value in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Revenue_Usd, Employees  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【从manufacturers表中选择制造商ID、名称并计算人均产值密度字段（Revenue_Usd/(Employees*1000)）】  【step2】:【按照计算出的Revenue_Density字段进行降序排序】  【step3】:【使用LIMIT 5限制最终结果只返回前5条记录】",
    "english_step": "【step1】: 【Select manufacturer ID, name, and calculate the revenue density per capita field (Revenue_Usd/(Employees*1000)) from the manufacturers table】  【step2】: 【Sort in descending order based on the calculated Revenue_Density field】  【step3】: 【Use LIMIT 5 to restrict the final result to only return the top 5 records】"
  },
  {
    "db_id": "earphone",
    "question": "请计算利润与市场份额的几何平均数（SQRT(Profit_Usd*Market_Share_Percent)），按结果降序排列取前10名",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, SQRT(Profit_Usd * Market_Share_Percent) AS Geometric_Mean FROM manufacturers ORDER BY Geometric_Mean DESC LIMIT 10;",
    "type": 2,
    "idx": 371,
    "englishquestion": "Please calculate the geometric mean (SQRT(Profit_Usd*Market_Share_Percent)) of profit and market share, then sort the results in descending order and take the top 10.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Profit_Usd, Market_Share_Percent  \n【foreign_keys】: 【none】",
    "evidence": "【step1】:【从manufacturers表选择Manufacturer_Id、Manufacturer_Name并计算SQRT(Profit_Usd*Market_Share_Percent)的几何平均数】  【step2】:【按计算结果（Geometric_Mean）降序排列所有制造商】  【step3】:【限制最终结果为前10条记录】",
    "english_step": "【Step1】: [From the manufacturers table, select Manufacturer_Id, Manufacturer_Name, and calculate the geometric mean of SQRT(Profit_Usd * Market_Share_Percent)]  【Step2】: [Order all manufacturers by the calculated result (Geometric_Mean) in descending order]  【Step3】: [Limit the final output to the top 10 records]"
  },
  {
    "db_id": "earphone",
    "question": "请查询成立超过50年但市场份额不足5%的制造商，按成立年份升序排列",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, Founded_Year, Market_Share_Percent FROM manufacturers WHERE Founded_Year < 1973 AND Market_Share_Percent < 5 ORDER BY Founded_Year ASC;",
    "type": 3,
    "idx": 372,
    "englishquestion": "Please query manufacturers that have been established for more than 50 years but have a market share of less than 5%, sorted by year of establishment in ascending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_id, Manufacturer_Name, Founded_Year, Market_Share_Percent  \n【foreign_keys】: 无",
    "evidence": "【step1】:【应用WHERE条件过滤出成立年份早于1973年（2023-50）且市场份额小于5%的制造商记录】  【step2】:【按Founded_Year字段对中间结果进行升序排序】  【step3】:【最终根据SELECT子句选择指定字段并输出结构化结果】",
    "english_step": "【step1】:【Apply WHERE clause conditions to filter manufacturer records with a founded year earlier than 1973 (2023-50) and market share less than 5%】  【step2】:【Sort the intermediate results in ascending order by the Founded_Year field】  【step3】:【Finally select specified fields according to the SELECT clause and output structured results】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有制造商营业额提升到$1万亿，请计算员工超1亿人的企业理论人均产值（1000000000000/Employees）并按产值升序排列",
    "query": "SELECT Manufacturer_Id, Manufacturer_Name, 1000000000000 / NULLIF(Employees, 0) AS Per_Capita_Revenue FROM manufacturers WHERE Employees > 100000000 ORDER BY Per_Capita_Revenue ASC;",
    "type": 4,
    "idx": 373,
    "englishquestion": "Assuming all manufacturers' revenues increase to $1 trillion, calculate the theoretical per capita output of companies with over 100 million employees (1000000000000/Employees) and sort the results in ascending order by output value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_id, Manufacturer_Name, Employees  \n【foreign_keys】: 无",
    "evidence": "【step1】:【筛选员工超过1亿的制造商】根据WHERE子句过滤Employees > 100000000的制造商记录  【step2】:【计算理论人均产值】用1000000000000除以员工数，通过NULLIF函数处理除零错误并命名为Per_Capita_Revenue  【step3】:【按产值升序排列】使用ORDER BY Per_Capita_Revenue ASC对结果集进行升序排序",
    "english_step": "【step1】: 【Filter manufacturers with over 100 million employees】  Filter manufacturer records where Employees > 100,000,000 based on the WHERE clause.  【step2】: 【Calculate theoretical per capita revenue】  Divide 1,000,000,000,000 by the number of employees, handle division by zero errors using the NULLIF function, and name the result as Per_Capita_Revenue.  【step3】: 【Sort by revenue per capita in ascending order】  Order the result set using ORDER BY Per_Capita_Revenue ASC."
  },
  {
    "db_id": "earphone",
    "question": "请查询并计算所有耳机的声压级（Sound_Pressure_Level_Db）与灵敏度（Sensitivity_Db）的乘积，并按乘积值升序排列",
    "query": "SELECT Audio_Id, Headphone_Id, Sound_Pressure_Level_Db * Sensitivity_Db AS Product FROM audio_data ORDER BY Product ASC;",
    "type": 1,
    "idx": 374,
    "englishquestion": "Please query and calculate the product of the sound pressure level (Sound_Pressure_Level_Db) and sensitivity (Sensitivity_Db) for all headphones, and sort the results in ascending order by the product value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Audio_Id, Headphone_Id, Sound_Pressure_Level_Db, Sensitivity_Db  \n【foreign_keys】:【Headphone_id → headphones.Headphone_id】",
    "evidence": "【step1】:【从 audio_data 表中选取 Audio_Id 和 Headphone_Id 字段，并提取 Sound_Pressure_Level_Db 和 Sensitivity_Db 的原始值】  【step2】:【计算声压级与灵敏度的乘积，生成别名 Product】  【step3】:【按 Product 字段进行升序排列最终结果】",
    "english_step": "【step1】: 【Select the Audio_Id and Headbone_Id fields from the audio_data table, and extract the raw values of Sound_Pressure_Level_Db and Sensitivity_Db】  【step2】: 【Calculate the product of Sound Pressure Level and Sensitivity, aliased as Product】  【step3】: 【Sort the final results in ascending order based on the Product field】"
  },
  {
    "db_id": "earphone",
    "question": "请计算音质舒适度调和平均数与使用时长的乘积（2/(1/Audio_Quality_Rating + 1/Comfort_Rating)*Usage_Duration_Minutes），按乘积值降序排列",
    "query": "SELECT Record_Id, Headphone_Id, (2 / (1 / Audio_Quality_Rating + 1 / Comfort_Rating)) * Usage_Duration_Minutes AS Experience_Index FROM usage_records ORDER BY Experience_Index DESC;",
    "type": 2,
    "idx": 375,
    "englishquestion": "Please calculate the product of the harmonic mean of audio quality comfort and usage duration (2/(1/Audio_Quality_Rating + 1/Comfort_Rating)*Usage_Duration_Minutes), sorted in descending order by the product value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_Id, Headphone_Id, Audio_Quality_Rating, Comfort_Rating, Usage_Duration_Minutes  \n【foreign_keys】:【Headphone_id 关联 headphones 表的 Headphone_id】",
    "evidence": "【step1】:【计算调和平均数与使用时长的乘积，公式为(2/(1/Audio_Quality_Rating +1/Comfort_Rating))*Usage_Duration_Minutes】  【step2】:【使用别名Experience_Index展示计算结果】  【step3】:【通过ORDER BY Experience_Index DESC实现降序排列】",
    "english_step": "【step1】:【Calculate the product of the harmonic mean and usage duration using the formula (2/(1/Audio_Quality_Rating +1/Comfort_Rating))*Usage_Duration_Minutes】  【step2】:【Display the result with the alias Experience_Index】  【step3】:【Sort in descending order via ORDER BY Experience_Index DESC】"
  },
  {
    "db_id": "earphone",
    "question": "找出音量超过80%但电池消耗低于时长*1%的记录，按使用时长升序排列取前5名",
    "query": "SELECT Record_Id, Headphone_Id, Usage_Duration_Minutes, Volume_Level_Percent, Battery_Consumed_Percent FROM usage_records WHERE Volume_Level_Percent > 80 AND Battery_Consumed_Percent < Usage_Duration_Minutes * 1 ORDER BY Usage_Duration_Minutes ASC LIMIT 5;",
    "type": 3,
    "idx": 376,
    "englishquestion": "Find records where the volume exceeds 80% but battery consumption is below duration * 1%, sorted by usage duration in ascending order and taking the top 5",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_id, Headphone_id, Usage_Duration_Minutes, Volume_Level_Percent, Battery_Consumed_Percent  \n【foreign_keys】:【Headphone_id → headphones.Headphone_id】",
    "evidence": "【step1】:应用过滤条件筛选出音量超过80%且电池消耗率低于使用时长*1%的记录  【step2】:按使用时长进行升序排列  【step3】:通过限制结果数量，只保留前5个满足条件的记录",
    "english_step": "【step1】: Apply filtering conditions to select records where volume exceeds 80% and battery consumption rate is less than duration of usage * 1%  【step2】: Sort by duration of usage in ascending order  【step3】: Limit the number of results to retain only the top 5 records that meet the conditions"
  },
  {
    "db_id": "earphone",
    "question": "假设所有使用记录时长增加到1000000分钟，计算理论总耗电量（Battery_Consumed_Percent*1000000/Usage_Duration_Minutes）并按耗电量降序排列取前3名",
    "query": "SELECT Headphone_Id, (Battery_Consumed_Percent * 1000000 / NULLIF(Usage_Duration_Minutes, 0)) AS Theoretical_Power_Consumption FROM usage_records ORDER BY Theoretical_Power_Consumption DESC LIMIT 3;",
    "type": 4,
    "idx": 377,
    "englishquestion": "Assuming all usage records are increased to 1,000,000 minutes, calculate the theoretical total power consumption (Battery_Consumed_Percent * 1,000,000 / Usage_Duration_Minutes) and retrieve the top 3 entries ranked in descending order by power consumption.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Headphone_Id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】: Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:【从usage_records表计算每台耳机的理论耗电量】(Battery_Consumed_Percent*1000000/NULLIF(Usage_Duration_Minutes,0))  【step2】:【按照计算结果的降序进行全局排序】(ORDER BY Theoretical_Power_Consumption DESC)  【step3】:【筛选前三条记录作为最终结果】(LIMIT 3)",
    "english_step": "【step1】: 【Calculate the theoretical power consumption for each headset from the usage_records table】(Battery_Consumed_Percent*1000000/NULLIF(Usage_Duration_Minutes,0))  【step2】: 【Globally sort the results in descending order of calculated values】(ORDER BY Theoretical_Power_Consumption DESC)  【step3】: 【Select the top 3 records as the final result】(LIMIT 3)"
  },
  {
    "db_id": "earphone",
    "question": "按用户分组计算平均单位时间能耗（Battery_Consumed_Percent/Usage_Duration_Minutes），并按能耗值降序排列",
    "query": "SELECT User_Id, AVG(Battery_Consumed_Percent / NULLIF(Usage_Duration_Minutes, 0)) AS Energy_Consumption_Rate FROM usage_records GROUP BY User_Id ORDER BY Energy_Consumption_Rate DESC;",
    "type": 1,
    "idx": 378,
    "englishquestion": "Group by user to calculate the average energy consumption per unit time (Battery_Consumed_Percent/Usage_Duration_Minutes), and sort in descending order by energy consumption value",
    "equation_analysis": "equation_analysis：AVG(Battery_Consumed_Percent / NULLIF(Usage_Duration_Minutes,0)) 计算每组用户电池消耗百分比除以有效使用时长的均值，NULLIF避免除数为0错误",
    "used_table_info": "【table】：【usage_records】 【columns】：User_Id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】：【No other tables joined】  \n【equation_analysis】：【AVG(Battery_Consumed_Percent / NULLIF(Usage_Duration_Minutes,0)) 计算每组用户电池消耗百分比除以有效使用时长的均值，NULLIF避免除数为0错误】",
    "evidence": "【step1】:按User_Id分组并计算每个用户的电池消耗百分比/使用时长的比值（处理除零错误）  【step2】:对分组后的数据使用AVG()函数计算平均能耗率  【step3】:将计算结果按Energy_Consumption_Rate字段进行降序排序",
    "english_step": "【step1】: Group by User_Id and calculate the ratio of battery consumption percentage to usage duration for each user (handling division by zero errors)  【step2】: Compute the average energy consumption rate using AVG() function on the grouped data  【step3】: Sort the results in descending order by the Energy_Consumption_Rate field"
  },
  {
    "db_id": "earphone",
    "question": "按耳机分组计算音质舒适度调和平均数与使用频率的复合指标（2/(1/AVG(Audio_Quality_Rating)+1/AVG(Comfort_Rating)) * COUNT(*)），按指标降序排列",
    "query": "SELECT Headphone_Id, (2 / (1 / AVG(Audio_Quality_Rating) + 1 / AVG(Comfort_Rating))) * COUNT(*) AS Composite_Index FROM usage_records GROUP BY Headphone_Id ORDER BY Composite_Index DESC;",
    "type": 2,
    "idx": 379,
    "englishquestion": "Group by earphone to calculate the composite metric of the harmonic mean of sound quality and comfort scores multiplied by usage frequency (2/(1/AVG(Audio_Quality_Rating)+1/AVG(Comfort_Rating)) * COUNT(*)), sorted by the metric in descending order",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Headphone_Id, Audio_Quality_Rating, Comfort_Rating  \n【table】：【headphones】 【columns】：Headphone_id  \n【foreign_keys】: usage_records.Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:【按Headphone_Id分组，获取每个耳机的平均音质评分和平均舒适度评分】  【step2】:【计算调和平均数公式2/(1/AVG(Audio_Quality_Rating)+1/AVG(Comfort_Rating))，再乘以分组内记录总数COUNT(*)生成复合指标】  【step3】:【对最终生成的Composite_Index复合指标执行降序排列】",
    "english_step": "【step1】:【Group by Headphone_Id to get average audio quality rating and average comfort rating for each headphone】  【step2】:【Calculate harmonic mean using formula 2/(1/AVG(Audio_Quality_Rating) + 1/AVG(Comfort_Rating)), then multiply by total records in group COUNT(*) to generate composite index】  【step3】:【Sort the final Composite_Index in descending order】"
  },
  {
    "db_id": "earphone",
    "question": "按耳机分组统计高音量（>85%）使用中降噪开启比例，按比例升序排列",
    "query": "SELECT Headphone_Id, SUM(CASE WHEN Noise_Cancellation_Used = 1 AND Volume_Level_Percent > 85 THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS Noise_Cancellation_Ratio FROM usage_records GROUP BY Headphone_Id ORDER BY Noise_Cancellation_Ratio ASC;",
    "type": 3,
    "idx": 380,
    "englishquestion": "Group by headphone model to calculate the proportion of noise cancellation being turned on during high volume (>85%) usage, and sort the results in ascending order by this proportion.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Headphone_Id, Noise_Cancellation_Used, Volume_Level_Percent  \n【foreign_keys】:【Headphone_id关联headphones表】",
    "evidence": "【step1】:【按耳机ID分组，并计算每个组内满足高音量和降噪开启条件的次数】  【step2】:【将符合条件的次数除以总记录数，得到降噪开启比例】  【step3】:【按计算出的比例进行升序排序输出结果】",
    "english_step": "【step1】:【Group by earphone_id and calculate the number of times each group meets the conditions of high volume and noise cancellation being enabled】  【step2】:【Divide the qualified count by total number of records to get the noise cancellation enablement ratio】  【step3】:【Sort the results in ascending order based on the calculated ratio】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有使用记录时长变为100000000分钟，按用户分组计算理论终身耗电量（SUM(Battery_Consumed_Percent)*100000000/Usage_Duration_Minutes），按耗电量降序排列",
    "query": "SELECT User_Id, SUM(Battery_Consumed_Percent) * 100000000 / NULLIF(SUM(Usage_Duration_Minutes), 0) AS Lifetime_Power_Consumption FROM usage_records GROUP BY User_Id ORDER BY Lifetime_Power_Consumption DESC;",
    "type": 4,
    "idx": 381,
    "englishquestion": "Assuming all usage records are changed to 100,000,000 minutes, group by user to calculate the theoretical lifetime power consumption (SUM(Battery_Consumed_Percent)*100,000,000/Usage_Duration_Minutes), and sort by power consumption in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：User_id, Battery_Consumed_Percent, Usage_Duration_Minutes  \n【foreign_keys】:",
    "evidence": "【step1】:【按User_Id分组，计算每个用户的总Battery_Consumed_Percent和总Usage_Duration_Minutes累计值】  【step2】:【用总Battery_Consumed_Percent乘以1e8，再除以非零的使用总时长（通过NULLIF处理分母为0的情况），得到理论终身耗电量】  【step3】:【按计算结果Lifetime_Power_Consumption字段降序排列输出】",
    "english_step": "【step1】:【Group by User_Id to calculate the cumulative totals of Battery_Consumed_Percent and Usage_Duration_Minutes for each user】  【step2】:【Multiply total Battery_Consumed_Percent by 1e8, then divide by the non-zero total usage duration (using NULLIF to handle zero denominators) to derive the theoretical Lifetime_Power_Consumption】  【step3】:【Output results sorted in descending order by the calculated Lifetime_Power_Consumption field】"
  },
  {
    "db_id": "earphone",
    "question": "按国家分组计算人均产值能量密度（Revenue_Usd/(Employees*1000)），并按密度值降序排列",
    "query": "SELECT Country, SUM(Revenue_Usd) / (SUM(Employees) * 1000) AS Energy_Density FROM manufacturers GROUP BY Country ORDER BY Energy_Density DESC;",
    "type": 1,
    "idx": 382,
    "englishquestion": "Group the data by country to calculate the per capita output energy density (Revenue_Usd/(Employees*1000)), and sort the results in descending order of the density value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Country, Revenue_Usd, Employees  \n【foreign_keys】: 无",
    "evidence": "【step1】:【按Country分组聚合数据，计算每个国家的总Revenue_Usd收入和总Employees员工数】  【step2】:【用聚合结果对国家维度进行数学运算：(总营收)/(总员工数×1000) 公式生成Energy_Density字段】  【step3】:【将计算结果按Energy_Density字段降序排序，形成最终结果集】",
    "english_step": "【step1】:【Group and aggregate data by Country, calculating the total Revenue_Usd and total number of Employees for each country】  【step2】:【Perform mathematical operations on aggregated country dimensions: generate Energy_Density field using formula (Total Revenue)/(Total Employees × 1000)】  【step3】:【Sort calculation results by Energy_Density field in descending order to form final result set】"
  },
  {
    "db_id": "earphone",
    "question": "按成立年代分组（Founded_Year/10）计算利润与市场份额的几何平均数（√(Profit_Usd*Market_Share_Percent)），按结果降序排列",
    "query": "SELECT (Founded_Year / 10) * 10 AS Decade, AVG(SQRT(Profit_Usd * Market_Share_Percent)) AS Geometric_Mean FROM manufacturers WHERE Profit_Usd > 0 AND Market_Share_Percent > 0 GROUP BY Decade ORDER BY Geometric_Mean DESC;",
    "type": 2,
    "idx": 383,
    "englishquestion": "Group by the decade of establishment (Founded_Year/10) and calculate the geometric mean of profit and market share (√(Profit_Usd*Market_Share_Percent)), then sort the results in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Founded_Year, Profit_Usd, Market_Share_Percent  \n【foreign_keys】:【无跨表连接】",
    "evidence": "【step1】:【过滤有效数据】从manufacturers表筛选Profit_Usd和Market_Share_Percent均大于0的记录，排除无效计算项  【step2】:【计算年代分组与几何均值】用(Founded_Year/10)*10生成Decade字段对数据分组，并用AVG(SQRT(Profit_Usd*Market_Share_Percent))计算几何平均数  【step3】:【结果排序】按Geometric_Mean列降序排列输出结果",
    "english_step": "[Step1]: [Filter Valid Data] Filter records from the manufacturers table where both Profit_Usd and Market_Share_Percent are greater than 0, excluding invalid entries for calculation  [Step2]: [Calculate Decade Grouping and Geometric Mean] Generate the Decade field using (Founded_Year/10)*10 to group data by decades, and compute the geometric mean with AVG(SQRT(Profit_Usd * Market_Share_Percent))  [Step3]: [Sort Results] Output the results sorted by the Geometric_Mean column in descending order"
  },
  {
    "db_id": "earphone",
    "question": "按国家分组统计成立超30年且利润率<10%的制造商数量，按数量升序排列",
    "query": "SELECT Country, COUNT(*) AS Manufacturer_Count FROM manufacturers WHERE (2023 - Founded_Year) > 30 AND (Profit_Usd / Revenue_Usd) < 0.1 GROUP BY Country ORDER BY Manufacturer_Count ASC;",
    "type": 3,
    "idx": 384,
    "englishquestion": "Group the statistics by country to count the number of manufacturers established for more than 30 years with a profit margin of less than 10%, and sort the results in ascending order by quantity.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Country,Founded_Year,Profit_Usd,Revenue_Usd  \n【foreign_keys】: 无",
    "evidence": "【step1】: 过滤条件筛选制造商。使用WHERE计算成立年限(2023-Founded_Year)需>30，同时计算利润率需满足(Profit_Usd/Revenue_Usd)<0.1  【step2】: 按Country分组聚合。使用GROUP BY对过滤后的制造商数据进行国家维度分组，并通过COUNT(*)统计每个国家的制造商数量  【step3】: 结果排序输出。对分组后的Manufacturer_Count字段使用ORDER BY升序排列(ASC)",
    "english_step": "【step1】: Filter manufacturers based on criteria. Use WHERE to calculate years of establishment (2023 - Founded_Year) > 30, and ensure profit margin satisfies (Profit_Usd / Revenue_Usd) < 0.1  【step2】: Group and aggregate by country. Use GROUP BY to partition filtered manufacturer data by Country dimension, then use COUNT(*) to calculate manufacturer count per country  【step3】: Sort and output results. Apply ORDER BY in ascending order (ASC) to the Manufacturer_Count field after grouping"
  },
  {
    "db_id": "earphone",
    "question": "假设所有制造商营业额提升到$1万亿，按国家分组计算员工超1亿人的企业理论人均产值（1000000000000/Employees），并按产值升序排列",
    "query": "SELECT Country, (1000000000000 / NULLIF(SUM(Employees), 0)) AS Theoretical_Per_Capita_Output FROM manufacturers WHERE Employees > 100000000 GROUP BY Country ORDER BY Theoretical_Per_Capita_Output ASC;",
    "type": 4,
    "idx": 385,
    "englishquestion": "Assuming all manufacturers' revenue increases to \\$1 trillion, calculate the theoretical per capita output (\\$1,000,000,000,000 / Employees) for companies with over 100 million employees, grouped by country, and sort the results in ascending order by output value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Country, Employees  \n【foreign_keys】:【None】",
    "evidence": "【step1】:【过滤员工超1亿的国家分组】使用WHERE条件筛选Employees > 100000000的记录，并按Country分组聚合计算总员工数  【step2】:【计算理论人均产值】使用(1000000000000 / NULLIF(SUM(Employees), 0))公式避免除零错误  【step3】:【按计算结果升序排列】通过ORDER BY对Theoretical_Per_Capita_Output字段进行ASC排序",
    "english_step": "【step1】: 【Filter country groups with employees over 100 million】Use WHERE clause to filter records where Employees > 100000000, then group by Country and aggregate to calculate total employees  【step2】: 【Calculate theoretical per capita output】Use formula (1000000000000 / NULLIF(SUM(Employees), 0)) to avoid division-by-zero errors  【step3】: 【Sort by calculation result in ascending order】Order results via ORDER BY clause using ASC sorting on Theoretical_Per_Capita_Output field"
  },
  {
    "db_id": "earphone",
    "question": "按驱动类型（Driver_Type）分组，计算每组耳机的灵敏度与阻抗平方根的比值（Sensitivity_Db / SQRT(Ompedance_Ohms)），并按比值降序排列",
    "query": "SELECT Driver_Type, AVG(Sensitivity_Db / SQRT(Ompedance_Ohms)) AS Efficiency_Indicator FROM headphones WHERE Ompedance_Ohms > 0 GROUP BY Driver_Type ORDER BY Efficiency_Indicator DESC;",
    "type": 1,
    "idx": 386,
    "englishquestion": "Group by driver type (Driver_Type), calculate the ratio of sensitivity to the square root of impedance (Sensitivity_Db / SQRT(Impedance_Ohms)) for each group of headphones, and sort in descending order by this ratio.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Driver_Type, Sensitivity_Db, Impedance_Ohms  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【过滤有效阻抗数据】通过WHERE Ompedance_Ohms > 0排除阻抗为0或负值的无效记录，确保SQRT函数有效性  【step2】:【分组计算效率指标】按Driver_Type分组，用AVG(Sensitivity_Db/SQRT(Ompedance_Ohms))计算每组的平均灵敏度-阻抗平方根比  【step3】:【结果排序】将计算结果命名Efficiency_Indicator，通过ORDER BY Efficiency_Indicator DESC对分组结果进行降序排列",
    "english_step": "【step1】: 【Filter valid impedance data】Exclude invalid records with impedance values of 0 or negative using WHERE Ompedance_Ohms > 0 to ensure the validity of the SQRT function  【step2】: 【Group and compute efficiency metrics】Group by Driver_Type, calculate the average sensitivity-to-impedance square root ratio per group using AVG(Sensitivity_Db/SQRT(Ompedance_Ohms))  【step3】: 【Order results】Name the computed result as Efficiency_Indicator and sort the grouped results in descending order via ORDER BY Efficiency_Indicator DESC"
  },
  {
    "db_id": "earphone",
    "question": "按制造商（Manufacturer_Id）分组，计算每组耳机的平均价格与平均频率响应范围差值的乘积（AVG(Price_Usd) * (高频值 - 低频值)），按乘积值降序排列",
    "query": "SELECT Manufacturer_Id, AVG(Price_Usd) * (AVG(CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) AS UNSIGNED)) - AVG(CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1) AS UNSIGNED))) AS Composite_Indicator FROM headphones GROUP BY Manufacturer_Id ORDER BY Composite_Indicator DESC;",
    "type": 2,
    "idx": 387,
    "englishquestion": "Group by manufacturer (Manufacturer_Id), calculate the product of the average price and the average frequency response range difference for each group of headphones (AVG(Price_Usd) * (high frequency value - low frequency value)), and sort in descending order by the product value",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Manufacturer_Id, Price_Usd, Frequency_Response_Hz  \n【foreign_keys】:【headphones.Manufacturer_id → manufacturers.Manufacturer_id】",
    "evidence": "【step1】:【提取每个耳机的低频和高频值，并将其转换为数值类型，同时获取对应的价格】  【step2】:【按制造商分组，计算平均价格和（平均高频值 - 平均低频值）的差值】  【step3】:【将平均价格与差值相乘，按结果降序排列输出制造商及复合指标】",
    "english_step": "【step1】: Extract the low-frequency and high-frequency values of each headphone, convert them to numeric types, and obtain the corresponding prices  【step2】: Group by manufacturer, calculate the average price and the difference (average high-frequency value minus average low-frequency value)  【step3】: Multiply the average price by the difference, then output manufacturers and composite metrics sorted by the result in descending order"
  },
  {
    "db_id": "earphone",
    "question": "按是否无线（Is_Wireless）分组，统计每组耳机的平均电池续航时间与重量的比值（AVG(Battery_Life_Hours) / AVG(Weight_Grams)），并按比值升序排列",
    "query": "SELECT Is_Wireless, AVG(Battery_Life_Hours) / AVG(Weight_Grams) AS Battery_Efficiency FROM headphones GROUP BY Is_Wireless ORDER BY Battery_Efficiency ASC;",
    "type": 3,
    "idx": 388,
    "englishquestion": "Group by whether it is wireless (Is_Wireless), calculate the average battery life to weight ratio (AVG(Battery_Life_Hours) / AVG(Weight_Grams)) for each group of headphones, and sort in ascending order by this ratio.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Is_Wireless, Battery_Life_Hours, Weight_Grams  \n【foreign_keys】:",
    "evidence": "【step1】:【按是否有线(Is_Wireless)分组】 【step2】:【计算每组电池续航时间与重量的平均比值】 【step3】:【对计算结果的效率值进行升序排列】",
    "english_step": "【step1】:【Group by whether it is wireless (Is_Wireless)】【step2】:【Calculate the average ratio of battery life to weight for each group】【step3】:【Sort the efficiency value of the calculation results in ascending order】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机价格提高到$1,000,000，按防水等级（Water_Resistance）分组计算每克重量的理论单价（1000000/Weight_Grams），并按单价降序排列",
    "query": "SELECT Water_Resistance, 1000000 / NULLIF(AVG(Weight_Grams), 0) AS Price_Per_Gram FROM headphones GROUP BY Water_Resistance ORDER BY Price_Per_Gram DESC;",
    "type": 4,
    "idx": 389,
    "englishquestion": "Assuming the price of all headphones is increased to $1,000,000, calculate the theoretical unit price per gram (1000000/Weight_Grams) grouped by water resistance level (Water_Resistance), and sort the results in descending order by unit price.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Water_Resistance, Weight_Grams  \n【foreign_keys】:",
    "evidence": "【STEP1】:【按Water_Resistance分组计算平均重量】  【STEP2】:【用1000000除以平均重量并做空值保护（防止除零）】  【STEP3】:【将计算结果按每克单价降序排列】",
    "english_step": "【STEP1】:【Group by Water_Resistance and calculate the average weight】  【STEP2】:【Divide 1,000,000 by the average weight with null protection (prevent division by zero)】  【STEP3】:【Sort the calculation result by price per gram in descending order】"
  },
  {
    "db_id": "earphone",
    "question": "按驱动类型（Driver_Type）分组，计算每组耳机的理论最大声功率（Power = (10^(Sensitivity_Db/10))^2 / Impedance_Ohms），并按功率降序排列",
    "query": "SELECT Driver_Type, POWER(10, AVG(Sensitivity_Db) / 10) * POWER(10, AVG(Sensitivity_Db) / 10) / AVG(Impedance_Ohms) AS Power FROM headphones WHERE Impedance_Ohms > 0 GROUP BY Driver_Type ORDER BY Power DESC;",
    "type": 1,
    "idx": 390,
    "englishquestion": "Group the data by driver type (Driver_Type), calculate the theoretical maximum sound power for each group (Power = (10^(Sensitivity_Db/10))^2 / Impedance_Ohms), and sort the results in descending order by power.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Driver_Type, Sensitivity_Db, Impedance_Ohms  \n【foreign_keys】: 无",
    "evidence": "【step1】:【筛选阻抗大于零的数据】通过WHERE子句过滤出Impedance_Ohms > 0的有效数据，避免除零错误  【step2】:【分组计算理论声功率】按Driver_Type分组，计算每组POWER(10,平均灵敏度/10)的平方除以平均阻抗（即表达式展开后的公式）  【step3】:【按功率降序排序】使用ORDER BY Power DESC对分组结果进行排序，输出功率从高到低的驱动类型",
    "english_step": "【step1】: 【Filter data with impedance greater than zero】 Use WHERE clause to filter valid data where Impedance_Ohms > 0, avoiding division by zero errors  【step2】: 【Group and calculate theoretical sound power】 Group by Driver_Type, compute (POWER(10, average_sensitivity/10)) squared divided by average_impedance for each group (i.e., formula after expanding the expression)  【step3】: 【Sort by power descending】 Sort grouped results using ORDER BY Power DESC to output driver types from highest to lowest power"
  },
  {
    "db_id": "earphone",
    "question": "按蓝牙版本（Bluetooth_Version）分组，计算每组耳机的频率范围对数宽度（LOG10(高频/低频)）与总谐波失真的几何平均数（√(LOG10(高频/低频)*THD)），按结果降序排列",
    "query": "SELECT Bluetooth_Version, SQRT(AVG(LOG10(CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', -1) AS DECIMAL) / CAST(SUBSTRING_INDEX(Frequency_Response_Hz, '-', 1) AS DECIMAL))) * AVG(Total_Harmonic_Distortion_Percent)) AS Metric FROM audio_data WHERE Frequency_Response_Hz LIKE '%-%' AND Total_Harmonic_Distortion_Percent > 0 GROUP BY Bluetooth_Version ORDER BY Metric DESC;",
    "type": 2,
    "idx": 391,
    "englishquestion": "Group by Bluetooth version (Bluetooth_Version), calculate the logarithmic width of frequency range (LOG10(high frequency/low frequency)) and the geometric mean of total harmonic distortion (√(LOG10(high frequency/low frequency)*THD)) for each group of headphones, then sort the results in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Bluetooth_Version, Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【foreign_keys】: 无",
    "evidence": "【step1】:【提取并预处理数据：处理Frequency_Response_Hz字段，拆分高低频并计算LOG10(高频/低频)，过滤不含'-'格式的频响数据和正数的总谐波失真】  【step2】:【按蓝牙版本分组，计算对数频率宽度均值和总谐波失真均值，执行几何平均数公式SQRT(均值1*均值2)】  【step3】:【对计算结果命名Metric列，按Metric降序排列最终结果】",
    "english_step": "【step1】: 【Extract and preprocess data: Process the Frequency_Response_Hz field by splitting into high/low frequencies and calculate LOG10(high_freq/low_freq), filter out frequency response data without '-' format and positive Total Harmonic Distortion values】  【step2】: 【Group by Bluetooth version, calculate the mean of logarithmic frequency width and mean Total Harmonic Distortion, apply geometric mean formula SQRT(mean1 * mean2)】  【step3】: 【Name the calculated result as Metric column, sort final results by Metric in descending order】"
  },
  {
    "db_id": "earphone",
    "question": "按音频接口类型（Audio_Jack_Type）分组，统计每组支持LDAC/AAC编码的耳机比例，按比例降序排列",
    "query": "SELECT Audio_Jack_Type, SUM(CASE WHEN Audio_Codec IN ('LDAC', 'AAC') THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS High_Quality_Codec_Ratio FROM audio_data GROUP BY Audio_Jack_Type ORDER BY High_Quality_Codec_Ratio DESC;",
    "type": 3,
    "idx": 392,
    "englishquestion": "Group by audio interface type (Audio_Jack_Type), calculate the proportion of headphones supporting LDAC/AAC encoding in each group, and sort in descending order by proportion.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Audio_Jack_Type, Audio_Codec  \n【foreign_keys】: 【audio_data.Headphone_id → headphones.Headphone_id】",
    "evidence": "【step1】:【按Audio_Jack_Type分组聚合数据】  【step2】:【使用条件聚合计算每组中LDAC/AAC编码的支持率（分子用SUM+条件判断，分母用COUNT统计总数）】  【step3】:【按照计算出的比率降序排列结果】",
    "english_step": "【step1】: 【Group and aggregate data by Audio_Jack_Type】  【step2】: 【Use conditional aggregation to calculate the support rate of LDAC/AAC encoding in each group (numerator with SUM + conditional logic, denominator using COUNT for total)】  【step3】: 【Sort results in descending order based on the calculated rate】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机的总谐波失真降低到0.0000000001%，按制造商分组计算改善倍数（原THD/0.0000000001），并按倍数降序排列取前5名",
    "query": "SELECT h.Manufacturer_Id, AVG(a.Total_Harmonic_Distortion_Percent) / 0.0000000001 AS Improvement_Factor FROM audio_data a JOIN headphones h ON a.Headphone_Id = h.Headphone_Id GROUP BY h.Manufacturer_Id ORDER BY Improvement_Factor DESC LIMIT 5;",
    "type": 4,
    "idx": 393,
    "englishquestion": "Assuming the total harmonic distortion of all headphones is reduced to 0.0000000001%, calculate the improvement multiple (original THD / 0.0000000001%) grouped by manufacturer, and sort the top 5 in descending order by the multiple.",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Total_Harmonic_Distortion_Percent, Headphone_Id  \n【table】：【headphones】 【columns】：Manufacturer_Id, Headphone_Id  \n【foreign_keys】: audio_data.Headphone_Id → headphones.Headphone_Id",
    "evidence": "【step1】:【连接audio_data和headphones表获取制造商与失真数据】  【step2】:【按制造商分组计算原始谐波失真均值并计算改进倍数】  【step3】:【筛选改进倍数最高的前5组并排序输出】",
    "english_step": "【Step 1】: 【Join `audio_data` and `headphones` tables to retrieve manufacturer and distortion data】  【Step 2】: 【Group by manufacturer, calculate the average original harmonic distortion, and compute improvement multiplier】  【Step 3】: 【Filter top 5 groups with highest improvement multipliers, sort and output results】"
  },
  {
    "db_id": "earphone",
    "question": "找出理论最大声压级超过120dB但实际声压级未达标的耳机（差集：理论SPL计算值>120dB EXCEPT 实际SPL测量值>=120dB）",
    "query": "SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw) > 120 AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Sound_Pressure_Level_Db >= 120);",
    "type": 1,
    "idx": 394,
    "englishquestion": "Find headphones with a theoretical maximum sound pressure level exceeding 120dB but failing to meet the actual sound pressure level (difference set: theoretical SPL calculated value >120dB EXCEPT actual SPL measured value >=120dB).",
    "equation_analysis": "equation_analysis：理论SPL计算 = Sensitivity_Db + 10*LOG₁₀(Max_Input_Power_Mw), 比较值=120dB；实际SPL达标条件为Sound_Pressure_Level_Db ≥120dB",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_id, Model  \n【table】：【audio_data】 【columns】：Headphone_id, Sensitivity_Db, Max_Input_Power_Mw, Sound_Pressure_Level_Db  \n【foreign_keys】：audio_data.Headphone_id → headphones.Headphone_id  \n【equation_analysis】：理论SPL计算 = Sensitivity_Db + 10*LOG₁₀(Max_Input_Power_Mw), 比较值=120dB；实际SPL达标条件为Sound_Pressure_Level_Db ≥120dB",
    "evidence": "【step1】:【计算理论SPL并筛选超120dB的耳机】通过JOIN关联两表，用公式Sensitivity_Db+10*LOG10(Max_Input_Power_Mw)计算理论声压级，获取所有理论值>120dB的耳机  【step2】:【筛选实际SPL达标的耳机】子查询返回audio_data表中Sound_Pressure_Level_Db≥120的所有Headphone_ID列表  【step3】:【执行差集操作】用NOT IN排除理论达标但实际未达到120dB的耳机，最终输出符合条件的Headphone_Id和Model",
    "english_step": "【step1】: 【Calculate Theoretical SPL and Filter Headphones Exceeding 120dB】 JOIN the two tables, use the formula Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw) to calculate the theoretical sound pressure level, and retrieve all headphones with a theoretical value > 120dB.  【step2】: 【Filter Headphones Meeting Actual SPL Standards】 Subquery returns a list of Headphone_IDs from the audio_data table where Sound_Pressure_Level_Db ≥ 120.  【step3】: 【Perform Difference Set Operation】 Use NOT IN to exclude headphones that theoretically meet the standard but fail to reach 120dB in actual measurements. Finally, output qualified Headphone_Id and Model."
  },
  {
    "db_id": "earphone",
    "question": "找出频率响应对数宽度与THD乘积>5但音质评分<4的耳机（差集：LOG10(高频/低频)*THD >5 EXCEPT Audio_Quality_Rating>=4）",
    "query": "SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE LOG10(CAST(SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', -1) AS DECIMAL) / CAST(SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', 1) AS DECIMAL)) * a.Total_Harmonic_Distortion_Percent > 5 AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM usage_records WHERE Audio_Quality_Rating >= 4);",
    "type": 2,
    "idx": 395,
    "englishquestion": "Find headphones with a logarithmic frequency response width multiplied by THD >5 but an audio quality rating <4 (difference set: LOG10(high frequency/low frequency)*THD >5 EXCEPT Audio_Quality_Rating>=4)",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【table】：【usage_records】 【columns】：Headphone_Id, Audio_Quality_Rating  \n【foreign_keys】: audio_data.Headphone_Id → headphones.Headphone_Id | usage_records.Headphone_Id → headphones.Headphone_Id",
    "evidence": "【step1】:【从audio_data表提取耳机频率响应高低频值，计算LOG10(高频/低频)*THD的乘积】  【step2】:【在usage_records子查询中筛选出音质评分≥4的耳机ID作为排除条件】  【step3】:【主查询通过JOIN关联耳机表和音频数据表，应用计算条件过滤乘积>5的耳机，并用NOT IN排除step2的结果】",
    "english_step": "【step1】:【Extract high and low frequency response values of headphones from the audio_data table, calculate the product of LOG10(high_frequency/low_frequency) * THD】  【step2】:【Filter headphone IDs with sound quality score ≥4 in the usage_records subquery as exclusion criteria】  【step3】:【The main query joins the headphones table with audio_data table, applies the calculation condition to filter products >5, and excludes step2 results using NOT IN】"
  },
  {
    "db_id": "earphone",
    "question": "找出支持蓝牙5.0以上但未配备LDAC/AAC编码的耳机（差集：Bluetooth_Version>=5.0 EXCEPT Audio_Codec IN ('LDAC','AAC')）",
    "query": "SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE CAST(SUBSTRING_INDEX(a.Bluetooth_Version, '.', 1) AS UNSIGNED) * 10 + CAST(SUBSTRING_INDEX(a.Bluetooth_Version, '.', -1) AS UNSIGNED) >= 50 AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM audio_data WHERE Audio_Codec IN ('LDAC', 'AAC'));",
    "type": 3,
    "idx": 396,
    "englishquestion": "Find headphones that support Bluetooth 5.0 or higher but are not equipped with LDAC/AAC encoding (difference set: Bluetooth_Version>=5.0 EXCEPT Audio_Codec IN ('LDAC','AAC'))",
    "equation_analysis": "equation_analysis：`CAST(SUBSTRING_INDEX(a.Bluetooth_Version, '.', 1) AS UNSIGNED)*10 + CAST(SUBSTRING_INDEX(a.Bluetooth_Version, '.', -1) AS UNSIGNED) >=50` 将蓝牙版本数值化。例如：\"5.0\" 转为 `5*10 + 0=50`、\"5.2\" 转为 `5*10 +2=52`，实现版本>=5.0的判断。",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Headphone_Id, Bluetooth_Version, Audio_Codec  \n【foreign_keys】：headphones.Headphone_Id ⟺ audio_data.Headphone_Id  \n【equation_analysis】：`CAST(SUBSTRING_INDEX(a.Bluetooth_Version, '.', 1) AS UNSIGNED)*10 + CAST(SUBSTRING_INDEX(a.Bluetooth_Version, '.', -1) AS UNSIGNED) >=50` 将蓝牙版本数值化。例如：\"5.0\" 转为 `5*10 + 0=50`、\"5.2\" 转为 `5*10 +2=52`，实现版本>=5.0的判断。",
    "evidence": "【step1】:【蓝牙版本解析和比较：从audio_data截取蓝牙版本数值并计算（如\"5.0\"转为50），筛选CAST(SUBSTRING_INDEX(Bluetooth_Version,'.',1)*10 + SUBSTRING_INDEX(Bluetooth_Version,'.',-1)) >=50的记录】  【step2】:【音频编码过滤：创建排斥子查询，SELECT所有包含'LDAC'或'AAC'编解码器的Headphone_Id集合】  【step3】:【差集计算：通过主查询JOIN关联两表并在NOT IN子句中应用排斥集合，最终获取满足蓝牙条件且不在编码黑名单中的设备ID和型号】",
    "english_step": "[step1]: [Bluetooth Version Parsing and Comparison: Extract Bluetooth version values from audio_data, convert to numerical format (e.g. \"5.0\" becomes 50) via CAST(SUBSTRING_INDEX(Bluetooth_Version,'.',1)*10 + SUBSTRING_INDEX(Bluetooth_Version,'.',-1)), filter records with converted value >=50]  [step2]: [Audio Codec Filtering: Create exclusion subquery by SELECTing all Headphone_Id containing 'LDAC' or 'AAC' codecs]  [step3]: [Set Difference Calculation: Use main query with JOIN between tables and apply exclusion set via NOT IN clause to retrieve device IDs/models meeting Bluetooth criteria while excluded from codec blacklist]"
  },
  {
    "db_id": "earphone",
    "question": "假设THD改善倍数超过100亿倍的耳机中，找出价格低于1000美元的产品（差集：THD/0.0000000001 >10000000000 EXCEPT Price_Usd>=1000）",
    "query": "SELECT h.Headphone_Id, h.Model FROM audio_data a JOIN headphones h ON a.Headphone_Id = h.Headphone_Id WHERE a.Total_Harmonic_Distortion_Percent / 0.0000000001 > 10000000000 AND h.Price_Usd < 1000;",
    "type": 4,
    "idx": 397,
    "englishquestion": "Assuming headphones with a THD improvement factor exceeding 10 billion times, find products priced below $1,000 (difference set: THD/0.0000000001 >10000000000 EXCEPT Price_Usd>=1000).",
    "equation_analysis": "",
    "used_table_info": "【table】：【audio_data】 【columns】：Headphone_id, Total_Harmonic_Distortion_Percent  \n【table】：【headphones】 【columns】：Headphone_id, Model, Price_Usd  \n【foreign_keys】: audio_data.Headphone_id → headphones.Headphone_id",
    "evidence": "【step1】:【连接audio_data和headphones表，建立耳机技术参数与产品信息的关联关系】  【step2】:【筛选满足THD改善倍数的数据（Total_Harmonic_Distortion_Percent/0.0000000001 > 10000000000）】  【step3】:【进一步排除高价位耳机，筛选价格条件（Price_Usd < 1000美元）】",
    "english_step": "【step1】:【Join the audio_data and headphones tables to establish the relationship between headphone technical specifications and product information】  【step2】:【Filter data meeting THD improvement multiples (Total_Harmonic_Distortion_Percent/0.0000000001 > 10000000000)】  【step3】:【Further exclude high-priced headphones by applying price filter (Price_USD < 1000)】"
  },
  {
    "db_id": "earphone",
    "question": "找出理论最大输入功率达标但实际阻抗不匹配的耳机（差集：Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level_Db - Sensitivity_Db)/10) EXCEPT Ompedance_Ohms BETWEEN 16 AND 64）",
    "query": "SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE a.Max_Input_Power_Mw >= POWER(10, (a.Sound_Pressure_Level_Db - a.Sensitivity_Db) / 10) AND h.Headphone_Id NOT IN (SELECT h2.Headphone_Id FROM headphones h2 WHERE h2.Impedance_Ohms BETWEEN 16 AND 64);",
    "type": 1,
    "idx": 398,
    "englishquestion": "Find headphones that meet the theoretical maximum input power but have an actual impedance mismatch (difference set: Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level_Db - Sensitivity_Db)/10) EXCEPT Impedance_Ohms BETWEEN 16 AND 64)",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Impedance_Ohms  \n【table】：【audio_data】 【columns】：Headphone_Id, Max_Input_Power_Mw, Sound_Pressure_Level_Db, Sensitivity_Db  \n【foreign_keys】: audio_data.Headphone_Id → headphones.Headphone_Id",
    "evidence": "【step1】:【查找达到最大输入功率条件的耳机】通过JOIN音频数据表和耳机表，筛选出满足Max_Input_Power_Mw >= POWER(10, (声压级-灵敏度)/10)条件的耳机  【step2】:【提取阻抗不匹配的耳机】从第一步结果中排除Impedance_Ohms在16-64欧姆范围内的耳机（通过NOT IN子查询实现差集操作）  【step3】:【最终字段投影】输出筛选后的Headphone_Id和Model字段作为最终结果",
    "english_step": "【step1】:【Identify headphones meeting maximum input power criteria】JOIN the audio data table and headphones table, filtering headphones that satisfy Max_Input_Power_Mw >= POWER(10, (Sound_Pressure_Level - Sensitivity)/10)  【step2】:【Extract impedance-mismatched headphones】Exclude headphones with Impedance_Ohms in 16-64Ω range from step1 results (via NOT IN subquery for set difference operation)  【step3】:【Final field projection】Output filtered Headphone_Id and Model fields as final result"
  },
  {
    "db_id": "earphone",
    "question": "找出频率响应范围覆盖20-20000Hz但谐波失真率超过音质评分倒数的耳机（差集：Frequency_Response_Hz @> '20,20000' EXCEPT Total_Harmonic_Distortion_Percent < 1/Audio_Quality_Rating）",
    "query": "SELECT h.Headphone_Id, h.Model FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE CAST(SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', 1) AS DECIMAL) <= 20 AND CAST(SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', -1) AS DECIMAL) >= 20000 AND h.Headphone_Id NOT IN (SELECT Headphone_Id FROM usage_records WHERE Total_Harmonic_Distortion_Percent < 1 / Audio_Quality_Rating);",
    "type": 2,
    "idx": 399,
    "englishquestion": "Find headphones with frequency response covering 20-20000Hz but with harmonic distortion rate exceeding the reciprocal of audio quality rating (difference set: Frequency_Response_Hz @> '20,20000' EXCEPT Total_Harmonic_Distortion_Percent < 1/Audio_Quality_Rating)",
    "equation_analysis": "equation_analysis：  1. `SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', 1) <= 20` 和 `SUBSTRING_INDEX(... -1) >= 20000` 联合判定频率范围完全包含20-20000Hz  2. `h.Headphone_Id NOT IN (...) WHERE Total_Harmonic_Distortion_Percent < 1 / Audio_Quality_Rating` 通过差集逻辑确保选取的耳机谐波失真率不小于音质评分倒数",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Headphone_Id, Frequency_Response_Hz  \n【table】：【usage_records】 【columns】：Headphone_Id, Total_Harmonic_Distortion_Percent, Audio_Quality_Rating  \n【foreign_keys】：headphones.Headphone_Id -> audio_data.Headphone_Id, headphones.Headphone_Id -> usage_records.Headphone_Id  \n【equation_analysis】：  \n1. `SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', 1) <= 20` 和 `SUBSTRING_INDEX(... -1) >= 20000` 联合判定频率范围完全包含20-20000Hz  \n2. `h.Headphone_Id NOT IN (...) WHERE Total_Harmonic_Distortion_Percent < 1 / Audio_Quality_Rating` 通过差集逻辑确保选取的耳机谐波失真率不小于音质评分倒数",
    "evidence": "【step1】:【筛选audio_data表中频率响应最低≤20Hz且最高≥20000Hz的耳机数据，通过分割Frequency_Response_Hz字符串转化为数值进行双边界检测】  【step2】:【识别usage_records表中存在总谐波失真率<（1/音频质量评分）的异常耳机ID，构建NOT IN排除列表】  【step3】:【将步骤1耳机列表与排除列表联动，通过headphones表JOIN audio_data表获取最终满足频率覆盖且未出现异常失真的耳机型号】",
    "english_step": "【step1】: [Filter headphone data in audio_data table with minimum frequency response ≤20Hz and maximum ≥20000Hz by splitting Frequency_Response_Hz string into numerical values for dual-boundary detection]  【step2】: [Identify abnormal headphone IDs in usage_records table where Total Harmonic Distortion Rate < (1/Audio_Quality_Score), then construct a NOT IN exclusion list]  【step3】: [Link the headphone list from step1 with the exclusion list, JOIN headphones table and audio_data table to obtain final headphone models meeting frequency coverage without abnormal distortion]"
  },
  {
    "db_id": "earphone",
    "question": "找出IPX7防水等级但价格低于$100的耳机",
    "query": "SELECT Headphone_Id, Model, Price_Usd FROM headphones WHERE Water_Resistance = 'IPX7' AND Price_Usd < 100;",
    "type": 3,
    "idx": 400,
    "englishquestion": "Find headphones with an IPX7 waterproof rating but priced under $100.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Price_Usd, Water_Resistance  \n【foeign_keys】: None",
    "evidence": "【step1】:【筛选防水等级】从headphones表过滤Water_Resistance字段等于'IPX7'的初始数据集  【step2】:【价格筛选】在step1结果的基础上添加Price_Usd < 100的过滤条件  【step3】:【字段投影】从最终过滤结果中提取Headphone_Id, Model, Price_Usd三列作为输出",
    "english_step": "【step1】: 【Filter by Water Resistance Level】 From the headphones table, filter the initial dataset where the Water_Resistance field equals 'IPX7'  【step2】: 【Price Filtering】 Apply additional filter condition Price_Usd < 100 based on the results from step1  【step3】: 【Field Projection】 Select Headphone_Id, Model, and Price_Usd columns from the final filtered results as output"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机重量增加到100000克，计算电池续航时间与重量的比值（Battery_Life_Hours/100000）并按比值降序排列，找出比值>0.1的异常记录",
    "query": "SELECT Headphone_Id, Model, Battery_Life_Hours, (Battery_Life_Hours / 100000) AS extreme_ratio FROM headphones WHERE (Battery_Life_Hours / 100000) > 0.1 ORDER BY extreme_ratio DESC;",
    "type": 4,
    "idx": 401,
    "englishquestion": "Assuming the weight of all headphones increases to 100,000 grams, calculate the ratio of battery life to weight (Battery_Life_Hours/100000) and sort it in descending order by the ratio, then identify abnormal records with a ratio >0.1.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Battery_Life_Hours  \n【foreign_keys】: 无",
    "evidence": "【step1】:【计算每款耳机的电池续航时间与假设重量100000克的比值，并通过Battery_Life_Hours/100000计算出extreme_ratio字段】  【step2】:【过滤掉extreme_ratio不大于0.1的记录，仅保留异常比值数据】  【step3】:【将符合条件的结果按extreme_ratio值从高到低进行降序排列】",
    "english_step": "【step1】:【Calculate the ratio of battery life hours to a hypothetical weight of 100,000 grams for each headphone model, and derive the `extreme_ratio` field using Battery_Life_Hours / 100000】  【step2】:【Filter out records where `extreme_ratio` is not greater than 0.1, retaining only data with abnormal ratios】  【step3】:【Sort the qualifying results in descending order based on the `extreme_ratio` value】"
  },
  {
    "db_id": "earphone",
    "question": "找出理论最大声压级与实际声压级差异超过10dB的耳机",
    "query": "SELECT h.Headphone_Id, h.Model, a.Sound_Pressure_Level_Db AS actual_spl, (a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw)) AS theoretical_spl FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE ABS((a.Sensitivity_Db + 10 * LOG10(a.Max_Input_Power_Mw)) - a.Sound_Pressure_Level_Db) > 10;",
    "type": 1,
    "idx": 402,
    "englishquestion": "Find headphones where the difference between the theoretical maximum sound pressure level and the actual sound pressure level exceeds 10dB.",
    "equation_analysis": "equation_analysis：理论声压级公式为 *Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)*，筛选条件为理论值与实际声压级差值的绝对值 *ABS(theoretical_spl - actual_spl) > 10*",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model  \n【table】：【audio_data】 【columns】：Sound_Pressure_Level_Db, Sensitivity_Db, Max_Input_Power_Mw  \n【foreign_keys】：audio_data.Headphone_Id → headphones.Headphone_Id  \n【equation_analysis】：理论声压级公式为 *Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)*，筛选条件为理论值与实际声压级差值的绝对值 *ABS(theoretical_spl - actual_spl) > 10*",
    "evidence": "【step1】:【联合headphones和audio_data表，通过Headphone_Id建立关联，选择耳机基本参数和声压信息】  【step2】:【计算理论最大声压级（灵敏度+10倍输入功率对数），公式：Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)】  【step3】:【筛选理论值与实际声压级（Sound_Pressure_Level_Db）的绝对差异超过10dB的记录】",
    "english_step": "【step1】:【Join the headphones and audio_data tables via Headphone_Id, selecting basic headphone parameters and sound pressure information】  【step2】:【Calculate theoretical maximum sound pressure level (sensitivity + 10 times the logarithm of input power), formula: Sensitivity_Db + 10 * LOG10(Max_Input_Power_Mw)】  【step3】:【Filter records where the absolute difference between the theoretical value and the actual sound pressure level (Sound_Pressure_Level_Db) exceeds 10dB】"
  },
  {
    "db_id": "earphone",
    "question": "计算每个耳机的频率响应对数宽度（LOG10(高频/低频)）与总谐波失真的几何平均数，按降序排列取前5名",
    "query": "SELECT h.Headphone_Id, h.Model, SQRT(LOG10(CAST(SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', -1) AS DECIMAL) / CAST(SUBSTRING_INDEX(a.Frequency_Response_Hz, '-', 1) AS DECIMAL)) * a.Total_Harmonic_Distortion_Percent) AS G_mean FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id ORDER BY G_mean DESC LIMIT 5;",
    "type": 2,
    "idx": 403,
    "englishquestion": "Calculate the logarithmic width of the frequency response (LOG10(high frequency/low frequency)) and the geometric mean of the total harmonic distortion for each headphone, then rank the top 5 in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_id, Model  \n【table】：【audio_data】 【columns】：Frequency_Response_Hz, Total_Harmonic_Distortion_Percent  \n【foreign_keys】: headphones.Headphone_id → audio_data.Headphone_id",
    "evidence": "【step1】:【提取并计算频率响应对数宽度】使用SUBSTRING_INDEX分割Frequency_Response_Hz字段，将高频(HZ)转为decimal后除以低频(HZ)计算LOG10，得到频响对数宽度  【step2】:【计算几何平均数并关联数据】将频响对数宽度与总谐波失真百分比相乘后取平方根(SQRT)作为G_mean，通过Headphone_Id关联headphones表与audio_data表  【step3】:【结果排序筛选】按G_mean降序排列结果，使用LIMIT 5获取前5名最佳性能耳机",
    "english_step": "【step1】: 【Extract and Calculate Logarithmic Width of Frequency Response】 Split the Frequency_Response_Hz field using SUBSTRING_INDEX, convert the high frequency (Hz) to decimal and divide by the low frequency (Hz), then calculate LOG10 to obtain the logarithmic width of frequency response.  【step2】: 【Calculate Geometric Mean and Join Data】 Multiply the logarithmic width of frequency response by Total_Harmonic_Distortion_Percent, take the square root (SQRT) as G_mean, and join the headphones table with the audio_data table via Headphone_Id.  【step3】: 【Sort and Filter Results】 Order results by G_mean in descending order and use LIMIT 5 to retrieve the top 5 best-performing headphones."
  },
  {
    "db_id": "earphone",
    "question": "找出支持主动降噪的无线耳机中使用SBC编码且电池续航/重量比低于行业标准的产品",
    "query": "SELECT h.Headphone_Id, h.Model, h.Battery_Life_Hours, h.Weight_Grams, (h.Battery_Life_Hours / h.Weight_Grams) AS battery_weight_ratio FROM headphones h JOIN audio_data a ON h.Headphone_Id = a.Headphone_Id WHERE h.Noise_Cancellation = TRUE AND h.Is_Wireless = TRUE AND a.Audio_Codec = 'SBC' AND (h.Battery_Life_Hours / h.Weight_Grams) < 0.5;",
    "type": 3,
    "idx": 404,
    "englishquestion": "Find wireless earbuds that support active noise cancellation, use SBC encoding, and have a battery life/weight ratio below industry standards.",
    "equation_analysis": "equation_analysis：(Battery_Life_Hours / Weight_Grams) 的比值与行业标准值0.5比较，筛选比值低于0.5的记录",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Battery_Life_Hours, Weight_Grams, Noise_Cancellation, Is_Wireless  \n【table】：【audio_data】 【columns】：Headphone_Id, Audio_Codec  \n【foreign_keys】：【audio_data.Headphone_Id -> headphones.Headphone_Id】  \n【equation_analysis】：【(Battery_Life_Hours / Weight_Grams) 的比值与行业标准值0.5比较，筛选比值低于0.5的记录】",
    "evidence": "【step1】:【对headphones表与audio_data表进行INNER JOIN，通过Headphone_Id关联，将耳机基本信息与音频编码信息合并】  【step2】:【筛选Noise_Cancellation为TRUE（支持主动降噪）、Is_Wireless为TRUE（无线）且Audio_Codec为'SBC'的耳机数据】  【step3】:【计算Battery_Life_Hours/Weight_Grams的比值，过滤该比值小于0.5（行业标准）的记录，并输出所需字段】",
    "english_step": "[step1]: [Perform an INNER JOIN on the headphones and audio_data tables via Headphone_Id to combine basic headphone information with audio encoding data]  [step2]: [Filter headphone data where Noise_Cancellation = TRUE (active noise cancellation supported), Is_Wireless = TRUE (wireless), and Audio_Codec = 'SBC']  [step3]: [Calculate the Battery_Life_Hours/Weight_Grams ratio, filter records where this ratio is below 0.5 (industry standard), and output required fields]"
  },
  {
    "db_id": "earphone",
    "question": "假设所有耳机的最大输入功率增加到100000000mW（1亿毫瓦），计算理论声压级并按降序排列取前3名",
    "query": "SELECT h.Headphone_Id, h.Model, (h.Sensitivity_Db + 10 * LOG10(100000000)) AS theoretical_spl FROM headphones h ORDER BY theoretical_spl DESC LIMIT 3;",
    "type": 4,
    "idx": 405,
    "englishquestion": "Assuming the maximum input power of all headphones is increased to 100,000,000 mW (100 million milliwatts), calculate the theoretical sound pressure level and rank the top 3 in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Sensitivity_Db  \n【foreign_keys】: 无直接关联",
    "evidence": "【step1】:【从headphones表提取型号并计算理论声压级，使用固定值1亿毫瓦进行功率换算（公式：灵敏度+10*LOG10(输入功率)）】  【step2】:【将计算结果列theoretical_spl按照降序排列】  【step3】:【使用LIMIT限制只返回前三名结果】",
    "english_step": "【step1】: 【Extract model from the headphones table and calculate theoretical sound pressure level using fixed value of 100 million milliwatts for power conversion (formula: sensitivity + 10*LOG10(input_power))】  【step2】: 【Sort the calculated column theoretical_spl in descending order】  【step3】: 【Use LIMIT to return only the top three results】"
  },
  {
    "db_id": "earphone",
    "question": "按制造商分组计算高端产品比例（价格>500美元）与人均利润的关系",
    "query": "SELECT m.Manufacturer_Id, m.Manufacturer_Name, SUM(CASE WHEN h.Price_Usd > 500 THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS high_end_ratio, m.Profit_Usd / m.Employees AS profit_per_employee FROM manufacturers m JOIN headphones h ON m.Manufacturer_Id = h.Manufacturer_Id GROUP BY m.Manufacturer_Id, m.Manufacturer_Name, m.Profit_Usd, m.Employees;",
    "type": 1,
    "idx": 406,
    "englishquestion": "Group by manufacturer to calculate the relationship between the proportion of high-end products (price > $500) and per capita profit.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Profit_Usd, Employees  \n【table】：【headphones】 【columns】：Price_Usd  \n【foreign_keys】: headphones.Manufacturer_id → manufacturers.Manufacturer_Id",
    "evidence": "【step1】:【关联manufacturers表和headphones表，建立完整的制造商-产品数据集】  【step2】:【通过CASE表达式统计每组制造商中价位>500美元的耳机数量，占总产品的比例形成high_end_ratio】  【step3】:【在分组聚合基础上，使用Profit_Usd和Employees字段完成人均利润计算，建立与high_end_ratio的对应关系】",
    "english_step": "【step1】: 【Join the manufacturers table with the headphones table to create a complete manufacturer-product dataset】  【step2】: 【Use CASE expression to count the number of headphones priced > $500 for each manufacturer group, calculate its proportion to total products as high_end_ratio】  【step3】: 【Based on grouped aggregation, calculate profit per employee using Profit_Usd and Employees fields, and establish its relationship with high_end_ratio】"
  },
  {
    "db_id": "earphone",
    "question": "计算每个制造商市场份额与平均产品价格的几何平均数（√(Market_Share_Percent*AVG(Price_Usd))），按结果降序排列",
    "query": "SELECT m.Manufacturer_Id, m.Manufacturer_Name, SQRT(m.Market_Share_Percent * AVG(h.Price_Usd)) AS composite_index FROM manufacturers m JOIN headphones h ON m.Manufacturer_Id = h.Manufacturer_Id GROUP BY m.Manufacturer_Id, m.Manufacturer_Name, m.Market_Share_Percent ORDER BY composite_index DESC;",
    "type": 2,
    "idx": 407,
    "englishquestion": "Calculate the geometric mean of each manufacturer's market share and average product price (√(Market_Share_Percent*AVG(Price_Usd))), ordered by the result in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Market_Share_Percent  \n【table】：【headphones】 【columns】：Price_Usd, Manufacturer_id  \n【foreign_keys】: manufacturers.Manufacturer_Id → headphones.Manufacturer_id",
    "evidence": "【step1】:【通过Manufacturer_Id连接manufacturers和headphones表，获取制造商数据及其关联产品的价格集合】  【step2】:【通过GROUP BY对制造商进行分组，计算各制造商市场占有率与对应产品平均价格的几何平均数构成复合指标】  【step3】:【使用ORDER BY对计算结果降序排列，确保最高数值结果在前】",
    "english_step": "[step1]: [Join the manufacturers and headphones tables via Manufacturer_Id to retrieve manufacturer data and the collection of associated product prices]  [step2]: [Group manufacturers using GROUP BY, calculating a composite metric combining market share and geometric mean of product prices]  [step3]: [Sort results in descending order with ORDER BY to prioritize the highest values]"
  },
  {
    "db_id": "earphone",
    "question": "找出成立超30年但市场份额低于其产品平均价格/100的制造商",
    "query": "SELECT m.Manufacturer_Id, m.Manufacturer_Name, m.Founded_Year, m.Market_Share_Percent, AVG(h.Price_Usd) AS avg_price FROM manufacturers m JOIN headphones h ON m.Manufacturer_Id = h.Manufacturer_Id WHERE m.Founded_Year < 1993 GROUP BY m.Manufacturer_Id, m.Manufacturer_Name, m.Founded_Year, m.Market_Share_Percent HAVING m.Market_Share_Percent < (AVG(h.Price_Usd) / 100);",
    "type": 3,
    "idx": 408,
    "englishquestion": "Find manufacturers that have been established for over 30 years but have a market share lower than their average product price divided by 100.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_Id, Manufacturer_Name, Founded_Year, Market_Share_Percent  \n【table】：【headphones】 【columns】：Price_Usd, Manufacturer_id  \n【foreign_keys】: headphones.Manufacturer_id → manufacturers.Manufacturer_id",
    "evidence": "【step1】:【关联manufacturers与headphones表，过滤Foundd_Year < 1993（当前年2023年时成立超30年）的制造商】  【step2】:【按Manufacturer_Id分组统计每个品牌耳机的平均价格】  【step3】:【筛选市场占有率小于本品牌耳机均价除以100的厂商通过HAVING子句】",
    "english_step": "【step1】:【Join the manufacturers and headphones tables, filtering manufacturers with Founded_Year < 1993 (established over 30 years when the current year is 2023)】  【step2】:【Group by Manufacturer_Id to calculate the average price of headphones for each brand】  【step3】:【Filter manufacturers with market share less than their brand's average headphone price divided by 100 using the HAVING clause】"
  },
  {
    "db_id": "earphone",
    "question": "假设所有制造商营业额提升到$1万亿，计算员工超1亿人的企业理论人均产值（1000000000000/Employees）并按产值升序排列",
    "query": "SELECT m.Manufacturer_Id, m.Manufacturer_Name, m.Employees, (1000000000000.0 / NULLIF(m.Employees, 0)) AS theoretical_output_per_employee FROM manufacturers m WHERE m.Employees > 100000000 ORDER BY theoretical_output_per_employee ASC;",
    "type": 4,
    "idx": 409,
    "englishquestion": "Assuming all manufacturers' revenue increases to $1 trillion, calculate the theoretical per capita output of companies with over 100 million employees (1000000000000/Employees) and sort the results in ascending order by output value.",
    "equation_analysis": "",
    "used_table_info": "【table】：【manufacturers】 【columns】：Manufacturer_id, Manufacturer_Name, Employees  \n【foreign_keys】: 暂无",
    "evidence": "【step1】:【筛选员工数超过1亿的制造商记录】WHERE m.Employees > 100000000  【step2】:【计算理论人均产值并用NULLIF避免除零】(1000000000000.0 / NULLIF(m.Employees, 0))  【step3】:【按产值升序排序结果集并使用字段别名】ORDER BY theoretical_output_per_employee ASC",
    "english_step": "【step1】:【Filter manufacturer records with employees exceeding 100 million】WHERE m.Employees > 100000000  【step2】:【Calculate theoretical output per employee using NULLIF to avoid division by zero】(1000000000000.0 / NULLIF(m.Employees, 0))  【step3】:【Sort result set by output in ascending order with field alias】ORDER BY theoretical_output_per_employee ASC"
  },
  {
    "db_id": "earphone",
    "question": "按耳机型号分组计算理论电池消耗与实际消耗的偏差（理论消耗=使用时长/标称续航*100）",
    "query": "SELECT h.Model, AVG(ABS((u.Usage_Duration_Minutes / 60.0 / h.Battery_Life_Hours) * 100 - u.Battery_Consumed_Percent)) AS deviation FROM usage_records u JOIN headphones h ON u.Headphone_Id = h.Headphone_Id GROUP BY h.Model;",
    "type": 1,
    "idx": 410,
    "englishquestion": "Group by headphone model to calculate the deviation between theoretical battery consumption and actual consumption (theoretical consumption = usage duration / nominal battery life * 100).",
    "equation_analysis": "equation_analysis：理论消耗量 = (使用时长(分钟)/60 / 标称续航小时数)*100；计算 |理论消耗 - 实际消耗百分比| 的绝对值的组平均，公式为 AVG(ABS((u.Usage_Duration_Minutes/60.0/h.Battery_Life_Hours)*100 - u.Battery_Consumed_Percent))",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_id, Model, Battery_Life_Hours  \n【table】：【usage_records】 【columns】：Headphone_Id, Usage_Duration_Minutes, Battery_Consumed_Percent  \n【foreign_keys】：usage_records.Headphone_Id → headphones.Headphone_Id  \n【equation_analysis】：理论消耗量 = (使用时长(分钟)/60 / 标称续航小时数)*100；计算 |理论消耗 - 实际消耗百分比| 的绝对值的组平均，公式为 AVG(ABS((u.Usage_Duration_Minutes/60.0/h.Battery_Life_Hours)*100 - u.Battery_Consumed_Percent))",
    "evidence": "【step1】:【关联usage_records和headphones表，通过Headphone_Id获取耳机型号与标称续航数据】  【step2】:【对每行数据计算理论电池消耗差：(使用时长/标称续航*100 - 实际消耗百分比)的绝对值】  【step3】:【按Model分组，计算所有记录的电池消耗偏差绝对值平均值】",
    "english_step": "【step1】: 【Join the usage_records and headphones tables via Headphone_Id to obtain headphone models and nominal battery life data】  【step2】: 【For each row, calculate the absolute value of the theoretical battery consumption difference: ABS((Usage_Duration / Nominal_Battery_Life * 100 - Actual_Consumption_Percentage)】  【step3】: 【Group by Model, calculate the average absolute value of battery consumption deviation across all records】"
  },
  {
    "db_id": "earphone",
    "question": "计算每个用户的音质能量指数（(音量%^2*时长)/阻抗），按降序排列取前10名",
    "query": "SELECT u.User_Id, (POWER(u.Volume_Level_Percent, 2) * u.Usage_Duration_Minutes) / h.Ompedance_Ohms AS energy_index FROM usage_records u JOIN headphones h ON u.Headphone_Id = h.Headphone_Id ORDER BY energy_index DESC LIMIT 10;",
    "type": 2,
    "idx": 411,
    "englishquestion": "Calculate each user's sound quality energy index ((volume%^2 * duration) / impedance), and list the top 10 in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：User_id, Volume_Level_Percent, Usage_Duration_Minutes  \n【table】：【headphones】 【columns】：Impedance_Ohms  \n【foreign_keys】: usage_records.Headphone_id -> headphones.Headphone_id",
    "evidence": "【step1】:【通过INNER JOIN连接usage_records和headphones表，根据Headphone_Id匹配记录，并取出User_ID和计算音质能量指数需要的相关字段】  【step2】:【使用算术表达式(POWER(音量%,2)*时长)/阻抗 创建能量指数计算结果字段energy_index，并根据计算结果进行DESC降序排序】  【step3】:【用LIMIT 10过滤最终结果，保留能量指数最高的前10条记录】",
    "english_step": "【step1】:【Connect the usage_records and headphones tables via INNER JOIN using Headphone_Id to match records, selecting User_ID and relevant fields required for calculating sound quality energy index】  【step2】:【Create energy index calculation field energy_index using arithmetic expression (POWER(Volume%,2)*Duration)/Impedance, then perform DESC sorting based on calculation results】  【step3】:【Use LIMIT 10 to filter final results, retaining top 10 records with highest energy index】"
  },
  {
    "db_id": "earphone",
    "question": "找出无线耳机中实际续航效率（标称续航/实际平均每小时耗电）<80%的产品",
    "query": "SELECT h.Headphone_Id, h.Model, h.Battery_Life_Hours, (h.Battery_Life_Hours / (AVG(u.Battery_Consumed_Percent) / 100)) AS actual_efficiency FROM headphones h JOIN usage_records u ON h.Headphone_Id = u.Headphone_Id WHERE h.Is_Wireless = TRUE GROUP BY h.Headphone_Id, h.Model, h.Battery_Life_Hours HAVING actual_efficiency < 0.8 * h.Battery_Life_Hours;",
    "type": 3,
    "idx": 412,
    "englishquestion": "Find products in the wireless earphone category with actual battery efficiency (rated battery life / actual average hourly power consumption) < 80%.",
    "equation_analysis": "",
    "used_table_info": "【table】：【headphones】 【columns】：Headphone_Id, Model, Battery_Life_Hours, Is_Wireless  \n【table】：【usage_records】 【columns】：Battery_Consumed_Percent, Headphone_id  \n【foeign_keys】: usage_records.Headphone_id → headphones.Headphone_Id",
    "evidence": "【step1】:【关联耳机表与使用记录，筛选无线设备】连接headphones和usage_records表，应用WHERE h.Is_Wireless = TRUE过滤无线耳机  【step2】:【计算实际效率】按Headphone_Id分组，用AVG(u.Battery_Consumed_Percent)计算平均耗电百分比，按公式(h.Battery_Life_Hours/(平均值/100))生成actual_efficiency指标  【step3】:【应用效率过滤条件】通过HAVING子句比较计算结果与标称值关系，筛选actual_efficiency < 0.8*h.Battery_Life_Hours的记录",
    "english_step": "【step1】: 【Link headphone table with usage records, filter wireless devices】 Join the headphones and usage_records tables, apply WHERE h.Is_Wireless = TRUE to filter wireless headphones  【step2】: 【Calculate actual efficiency】 Group by Headphone_Id, compute average battery consumption percentage using AVG(u.Battery_Consumed_Percent), generate actual_efficiency metric via formula (h.Battery_Life_Hours / (average_value/100))  【step3】: 【Apply efficiency filter conditions】 Use HAVING clause to compare calculation results with nominal values, filter records where actual_efficiency < 0.8*h.Battery_Life_Hours"
  },
  {
    "db_id": "earphone",
    "question": "假设所有使用记录音量提升到10000%，计算理论耗电量（当前耗电*(10000/音量%)³）并按耗电量降序排列",
    "query": "SELECT u.Record_Id, u.Headphone_Id, u.Volume_Level_Percent, u.Battery_Consumed_Percent, (u.Battery_Consumed_Percent * POWER(10000 / NULLIF(u.Volume_Level_Percent, 0), 3)) AS theoretical_consumption FROM usage_records u ORDER BY theoretical_consumption DESC;",
    "type": 4,
    "idx": 413,
    "englishquestion": "Assuming all usage records have their volume increased to 10000%, calculate the theoretical power consumption (current power consumption * (10000/volume%)³) and sort by power consumption in descending order.",
    "equation_analysis": "",
    "used_table_info": "【table】：【usage_records】 【columns】：Record_id, Headphone_Id, Volume_Level_Percent, Battery_Consumed_Percent  \n【foreign_keys】: Headphone_Id → headphones(Headphone_id)",
    "evidence": "【step1】:【处理NULL值并计算分母】使用NULLIF处理Volume_Level_Percent为零的情况，完成(10000/音量%)的基础运算防止除零错误  【step2】:【应用立方能耗公式】对基础运算结果进行三次方计算，并乘以当前耗电值Battery_Consumed_Percent  【step3】:【结果排序】将计算结果别名为theoretical_consumption后，通过ORDER BY进行降序排列",
    "english_step": "[Step 1]: [Handle NULL values and compute denominator] Use NULLIF to handle cases where Volume_Level_Percent is zero, complete the base computation of (10000/Volume_Level_Percent) to prevent division-by-zero errors.  [Step 2]: [Apply cubic energy consumption formula] Cube the base computation result and multiply it by the current power consumption value Battery_Consumed_Percent.  [Step 3]: [Sort results] Alias the computed result as theoretical_consumption, then perform descending order sorting via ORDER BY."
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的销售额为1000亿美元，且其净利润率为10%，那么该公司一年内通过销售石油产品产生的总碳排放量是多少？已知每升石油产品的碳排放量为2.5克/升，且每升石油产品的平均售价为1美元。",
    "query": "SELECT (Sales * 1000000000 / 1) * 2.5 AS Total_Carbon_Emission FROM company WHERE Sales = 100 AND Net_Profit_Margin = 10;",
    "type": "1",
    "idx": 414,
    "englishquestion": "An oil company has sales of $100 billion with a net profit margin of 10%. What is the total carbon emissions generated by the company from selling petroleum products in one year? It is known that each liter of petroleum product emits 2.5 grams of carbon per liter, and the average selling price is $1 per liter.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Net_Profit_Margin  \n【foreign_keys】: 无",
    "evidence": "【step1】:【筛选company表中销售额为100（对应1000亿美元）且净利润率为10%的公司记录】  【step2】:【计算总售出升数：(Sales * 10^9美元) / 单价1美元 = 100 * 10^9 升】  【step3】:【计算总碳排放量：总升数 * 2.5克/升 = (100 * 10^9 * 2.5) 克】",
    "english_step": "[Step 1]: [Filter records in the company table where sales are 100 (representing $100 billion) and net profit margin is 10%]  [Step 2]: [Calculate total liters sold: (Sales * 10^9 dollars) / unit price of $1 = 100 * 10^9 liters]  [Step 3]: [Calculate total carbon emissions: Total liters * 2.5 grams/liter = (100 * 10^9 * 2.5) grams]"
  },
  {
    "db_id": "gas",
    "question": "已知一家石油公司的总资产为5000亿美元，债务与股东权益比率为2:1，且其市值为3000亿美元。该公司决定通过发行新股来降低债务与股东权益比率至1:1，那么需要发行多少市值的新股？",
    "query": "SELECT (5000 - (3000 / (1 + 1))) AS New_Equity_Needed;",
    "type": "2",
    "idx": 415,
    "englishquestion": "Given that an oil company has total assets of $500 billion, a debt-to-equity ratio of 2:1, and a market capitalization of $300 billion. The company decides to issue new shares to reduce the debt-to-equity ratio to 1:1. How much market value of new shares needs to be issued?",
    "equation_analysis": "equation_analysis：目标债务与股东权益比率为1:1时，总资产=债务+新股东权益=新股东权益×2。原股东权益初始值取自Market_Value（3000），需计算目标股东权益（5000/2=2500）。发行新股=目标股东权益-当前股东权益=2500 - (3000 / (1+1))=2500-1500=1000。但查询中公式结果为5000-1500=3500，逻辑错误（正确应为2500 - 1500 =1000）。用户公式隐含将总资产与新权益差值视为新股需求，可能存在逻辑混淆。",
    "used_table_info": "【table】：【company】 【columns】：Assets, Market_Value  \n【foreign_keys】：【无】  \n【equation_analysis】：【目标债务与股东权益比率为1:1时，总资产=债务+新股东权益=新股东权益×2。原股东权益初始值取自Market_Value（3000），需计算目标股东权益（5000/2=2500）。发行新股=目标股东权益-当前股东权益=2500 - (3000 / (1+1))=2500-1500=1000。但查询中公式结果为5000-1500=3500，逻辑错误（正确应为2500 - 1500 =1000）。用户公式隐含将总资产与新权益差值视为新股需求，可能存在逻辑混淆。】",
    "evidence": "",
    "english_step": "The user has requested to translate a Chinese SQL query into English without altering the original meaning. Key requirements include:1. **Accuracy**: Maintain precise technical terminology (e.g., SQL keywords like `SELECT`, `JOIN`, `WHERE`).2. **Consistency**: Preserve field/table names unless explicitly translated in the original context.3. **Clarity**: Adhere to English syntax conventions (e.g., \"2023年\" → \"2023\", \"1000元\" → \"1000 CNY\" or \"1000 yuan\").4. **Formatting**: Retain symbols like brackets/punctuation where applicable.5. **Output**: Provide ONLY the translated English content without explanations. Example translation logic:  - Input (Chinese): \"查询2023年订单金额超过1000元的客户名称\"  - Output (English): \"Query customer names with order amounts exceeding 1000 CNY in 2023.\"  Proceed with translation upon receiving the specific Chinese query."
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为5%，净利润率为8%，且其员工数量为10万人。该公司计划在未来五年内将收入增长率提高到10%，那么需要增加多少员工数量以支持这一增长？已知每位员工的平均年销售额为100万美元。",
    "query": "WITH CurrentData AS (SELECT Sales, Number_Employees, Revenue_Growth_Rate FROM company WHERE Revenue_Growth_Rate = 5 AND Net_Profit_Margin = 8 AND Number_Employees = 100000) SELECT ((Sales * POWER(1 + 0.10, 5) - Sales) / 1000000) - Number_Employees AS Additional_Employees_Needed FROM CurrentData;",
    "type": "3",
    "idx": 416,
    "englishquestion": "An oil company has a revenue growth rate of 5%, a net profit margin of 8%, and employs 100,000 workers. The company plans to increase its revenue growth rate to 10% over the next five years. How many additional employees are needed to support this growth? It is known that the average annual sales per employee are $1 million.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Number_Employees, Revenue_Growth_Rate, Net_Profit_Margin  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从company表中提取当前销售额、员工数量和符合条件（收入增长率5%、净利润率8%、员工10万）的原始数据】  【step2】:【计算未来五年增速10%后的总销售额增量：(Sales * (1.10)^5 - Sales)】  【step3】:【将销售增量转换为所需员工增量：总增量/100万美元(每位员工贡献)-现有人数=需增员工数】",
    "english_step": "【step1】:【Extract current sales, number of employees, and raw data meeting criteria (5% revenue growth rate, 8% net profit margin, 100k employees) from company table】  【step2】:【Calculate total sales increment after 10% growth over 5 years: (Sales * (1.10)^5 - Sales)】  【step3】:【Convert sales increment to required employee increment: Total increment / $1M (per employee contribution) - Current employees = Needed employee increase】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为1万亿美元，且其净利润率为50%。如果该公司决定将所有利润用于购买碳排放权，每吨碳排放权的价格为100美元，且每升石油产品的碳排放量为2.5克/升，那么该公司可以抵消多少年的碳排放量？假设该公司每年销售1万亿升石油产品。",
    "query": "WITH CompanyData AS (SELECT Sales, Net_Profit_Margin FROM company WHERE Sales = 1000 AND Net_Profit_Margin = 50) SELECT ((Sales * Net_Profit_Margin / 100) / 100) / ((1000000000000 * 2.5 / 1000000) / 100) AS Years_Offset FROM CompanyData;",
    "type": "4",
    "idx": 417,
    "englishquestion": "Assuming an oil company has sales of $1 trillion and a net profit margin of 50%. If the company decides to spend all its profits on purchasing carbon emission rights, with the price of each ton of carbon emission rights at $100, and the carbon emissions per liter of petroleum products at 2.5 grams/liter, how many years of carbon emissions can the company offset? Assume the company sells 1 trillion liters of petroleum products annually.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Net_Profit_Margin  \n【foreign_keys】: 无（该查询未使用跨表关联）",
    "evidence": "【step1】:【创建CTE CompanyData，筛选出销售额为1000（十亿美元）、净利润率50%的公司数据】  【step2】:【计算可用利润的碳排放权购买量：将Sales*50%的利润(500十亿美元)除以碳价(100美元/吨)，得到有效购买量为5（此步骤存在单位",
    "english_step": "【step1】:【Create CTE CompanyData to filter company data with sales of 1000 (billion USD) and a net profit margin of 50%】  【step2】:【Calculate carbon credit purchase capacity using available profits: Divide Sales*50% profit (500 billion USD) by carbon price (100 USD/ton), resulting in an effective purchase amount of 5 (unit inconsistency exists in this step)】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的燃油库存量为10亿升，且每升燃油的碳排放量为2.5克/升，那么这些燃油完全燃烧后将产生多少吨的二氧化碳？已知二氧化碳的分子量为44克/摩尔，且碳的原子量为12克/摩尔。",
    "query": "WITH GasData AS (SELECT Stock_Liters, Carbon_Emission FROM gas WHERE Stock_Liters = 1000000000 AND Carbon_Emission = 2.5) SELECT (Stock_Liters * Carbon_Emission * 44 / 12) / 1000000 AS Total_CO2_Tons FROM GasData;",
    "type": "1",
    "idx": 418,
    "englishquestion": "An oil company has a fuel inventory of 1 billion liters, and each liter of fuel emits 2.5 grams of carbon per liter. How many tons of carbon dioxide will be produced when this fuel is completely burned? The molecular weight of carbon dioxide is given as 44 grams per mole, and the atomic weight of carbon is 12 grams per mole.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission  \n【foreign_keys】:【Station_ID (关联到 gas_station.Station_ID)】",
    "evidence": "【step1】: 通过CTE(GasData)从gas表筛选出库存10亿升且碳排放2.5克/升的记录  【step2】: 基于碳排放因子计算碳转换量（(库存量*碳排量*44/12)将碳质量转换为二氧化碳质量）  【step3】: 将计算结果从克转换为吨（/1000000）得到最终二氧化碳吨数",
    "english_step": "[step1]: Use CTE (GasData) to filter records from the gas table with 1 billion liters in stock and 2.5 g/L carbon emissions  [step2]: Calculate carbon conversion quantity using the emission factor ((stock * carbon_emission * 44/12) converts carbon mass to CO₂ mass)  [step3]: Convert the result from grams to tons (/1,000,000) to obtain final CO₂ tonnage"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为8%，净利润率为12%，且其员工数量为5万人。该公司计划在未来三年内将净利润率提高到15%，同时保持收入增长率不变，那么需要将每位员工的平均年销售额提高多少？已知当前每位员工的平均年销售额为80万美元。",
    "query": "WITH CurrentData AS (SELECT Sales, Number_Employees, Revenue_Growth_Rate, Net_Profit_Margin FROM company WHERE Revenue_Growth_Rate = 8 AND Net_Profit_Margin = 12 AND Number_Employees = 50000) SELECT ((Sales * POWER(1 + Revenue_Growth_Rate / 100, 3) * (15 / 100)) / Number_Employees) - 800000 AS Required_Sales_Increase_Per_Employee FROM CurrentData;",
    "type": "2",
    "idx": 419,
    "englishquestion": "An oil company has a revenue growth rate of 8%, a net profit margin of 12%, and employs 50,000 people. The company plans to increase its net profit margin to 15% over the next three years while maintaining the same revenue growth rate. By how much does the average annual sales per employee need to increase? It is known that the current average annual sales per employee is $800,000.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Number_Employees, Revenue_Growth_Rate, Net_Profit_Margin  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【通过CTE提取当前数据】筛选收入增长率8%、净利润率12%、员工数量5万人的公司数据，提取销售额、员工数量等基础字段   【step2】:【计算未来销售额】根据当前销售额和8%增长率计算未来三年后的销售额：Sales * POWER(1.08,3)  【step3】:【需求增长量计算】将未来销售额乘以目标利润率15%，换算成年人均销售额要求后减去当前值：(未来总利润/员工数) - 80万美元",
    "english_step": "【step1】:【Extract Current Data via CTE】Filter company data with 8% revenue growth rate, 12% net profit margin, and 50,000 employees, extracting basic fields such as sales and employee count  【step2】:【Calculate Future Sales】Compute sales three years later based on current sales and 8% growth rate: Sales * POWER(1.08,3)  【step3】:【Demand Growth Calculation】Multiply future sales by target profit margin of 15%, convert to annual per capita sales requirement, and subtract current value: (Future Total Profit / Employee Count) - USD 800,000"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的燃油最低库存量为100万升，且其加油站的总容量为500万升。该公司希望确保在任何时候都能满足未来30天的燃油需求，且平均每天销售10万升燃油，那么该公司是否需要增加库存容量？如果需要，增加多少？",
    "query": "WITH GasData AS (SELECT Minimum_Stock_Liters, Capacity_Liters FROM gas_station, gas WHERE Minimum_Stock_Liters = 1000000 AND Capacity_Liters = 5000000) SELECT CASE WHEN (100000 * 30) > Capacity_Liters THEN (100000 * 30) - Capacity_Liters ELSE 0 END AS Additional_Capacity_Needed FROM GasData;",
    "type": "3",
    "idx": 420,
    "englishquestion": "An oil company has a minimum fuel inventory of 1 million liters, and the total capacity of its gas stations is 5 million liters. The company wants to ensure that it can meet the fuel demand for the next 30 days at any time, with an average daily sales volume of 100,000 liters. Does the company need to increase its inventory capacity? If so, by how much?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Minimum_Stock_Liters  \n【table】：【gas_station】 【columns】：Capacity_Liters  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID",
    "evidence": "【step1】:【通过JOIN连接gas_station和gas表获取各加油站的容量与最低库存数据】  【step2】:【过滤Minimum_Stock_Liter=100万升、Capacity_Liter=500万升的目标参数组】  【step3】:【计算30天累计需求(10万*30=300万)并与总容量比对，根据差值判断需新增容量】",
    "english_step": "【step1】:【Retrieve capacity and minimum stock data for each gas station via JOIN between gas_station and gas tables】  【step2】:【Filter target parameter sets where Minimum_Stock_Liter = 1 million liters and Capacity_Liter = 5 million liters】  【step3】:【Calculate 30-day cumulative demand (100,000 * 30 = 3 million liters), compare with total capacity, and determine the need for additional capacity based on the difference】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的市值为10万亿美元，且其净利润率为20%。如果该公司决定将所有利润用于购买黄金，每盎司黄金的价格为2000美元，且黄金的密度为19.32克/立方厘米，那么这些黄金可以填满多少个标准奥运会游泳池？假设一个标准奥运会游泳池的容积为2500立方米。",
    "query": "WITH CompanyData AS (SELECT Market_Value, Net_Profit_Margin FROM company WHERE Market_Value = 10000 AND Net_Profit_Margin = 20) SELECT ((Market_Value * Net_Profit_Margin / 100) / 2000) * 31.1035 / 19.32 / 1000000 / 2500 AS Olympic_Pools_Filled FROM CompanyData;",
    "type": "4",
    "idx": 421,
    "englishquestion": "Assuming an oil company has a market capitalization of $10 trillion and a net profit margin of 20%. If the company decides to use all its profits to purchase gold, with the price of gold being $2000 per ounce and a density of 19.32 grams per cubic centimeter, how many standard Olympic swimming pools could be filled with this gold? Assume a standard Olympic swimming pool has a volume of 2500 cubic meters.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Market_Value, Net_Profit_Margin  \n【foeign_keys】: [无]",
    "evidence": "【step1】: 从company表提取市值为10000（十亿美元）且净利润率为20%的公司数据。  【step2】: 计算总利润（2000十亿美元），转换为黄金盎司数（1e9盎司），按密度换算为体积（1610067300立方厘米）。  【step3】: 将体积转换为立方米（1610.0673 m³），计算可填充的游泳池数量（1610.0673/2500=0.644）。",
    "english_step": "Step 1: Extract company data from the company table with a market capitalization of 1000 (in billions of USD) and a net profit margin of 20%.  Step 2: Calculate total profits (2000 billion USD), convert to ounces of gold (1e9 ounces), then convert to volume using density (1610067300 cubic centimeters).  Step 3: Convert volume to cubic meters (1610.0673 m³), calculate number of Olympic-sized swimming pools that can be filled (1610.0673/2500=0.644)."
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的燃油库存量为5亿升，且每升燃油的热值为35兆焦耳（MJ/L），那么这些燃油完全燃烧后将释放多少能量（以太焦耳为单位）？已知能量转换效率为100%。",
    "query": "WITH GasData AS (SELECT Stock_Liters FROM gas WHERE Stock_Liters = 500000000) SELECT (Stock_Liters * 35) / 1000000 AS Total_Energy_Petajoules FROM GasData;",
    "type": "1",
    "idx": 422,
    "englishquestion": "An oil company has a fuel inventory of 500 million liters, and each liter of fuel has a heat value of 35 megajoules (MJ/L). How much energy (in terajoules) will be released if all this fuel is completely burned, assuming an energy conversion efficiency of 100%?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：【Stock_Liters】  \n【foreign_keys】:",
    "evidence": "【step1】:【从gas表中筛选出库存量为5亿升的记录作为临时表GasData】  【step2】:【将库存量乘以每升热值35 MJ/L，得到兆焦耳总能量】  【step3】:【将总能量除以1,000,000转换为太焦耳单位并输出为Total_Energy_Petajoules】",
    "english_step": "【step1】:【Filter records from the gas table where the inventory is 500 million liters as a temporary table GasData】  【step2】:【Multiply the inventory by the calorific value of 35 MJ/L to obtain the total energy in megajoules】  【step3】:【Convert the total energy into petajoules by dividing by 1,000,000 and output as Total_Energy_Petajoules】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的销售额为8000亿美元，净利润率为15%，且其员工数量为20万人。该公司计划在未来五年内将销售额提高到1.2万亿美元，同时将净利润率提高到18%，那么需要将每位员工的平均年销售额提高多少？当前每位员工的平均年销售额为40万美元。",
    "query": "WITH CurrentData AS (SELECT Sales, Number_Employees, Net_Profit_Margin FROM company WHERE Sales = 800 AND Net_Profit_Margin = 15 AND Number_Employees = 200000) SELECT ((1200 * 1000000000 * 0.18) / Number_Employees) - 400000 AS Required_Sales_Increase_Per_Employee FROM CurrentData;",
    "type": "2",
    "idx": 423,
    "englishquestion": "An oil company has sales of $800 billion, a net profit margin of 15%, and employs 200,000 people. The company plans to increase its sales to $1.2 trillion and raise its net profit margin to 18% over the next five years. By how much does the average annual sales per employee need to increase? The current average annual sales per employee is $400,000.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Number_Employees, Net_Profit_Margin  \n【foreign_keys】: (无显式外键关联)",
    "evidence": "【step1】: 使用CTE从`company`表筛选出销售额800（单位：十亿美元）、净利润率15%、员工数量200000的记录  【step2】: 计算目标下的每位员工年销售额（未来销售额1.2万亿 × 净利润率18% / 当前员工数）  【step3】: 用目标值减去当前员工年均销售额40万，得出需提高的金额",
    "english_step": "【step1】: Use a CTE to filter records from the `company` table with sales of 800 (in billions), net profit margin of 15%, and employee count of 200,000  【step2】: Calculate annual sales per employee under the target (future sales of 1.2 trillion × net profit margin 18% / current employee count)  【step3】: Subtract the current annual sales per employee of 400,000 from the target value to determine the required increase amount"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的燃油最低库存量为200万升，且其加油站的总容量为1000万升。该公司希望确保在任何时候都能满足未来60天的燃油需求，且平均每天销售15万升燃油，那么该公司是否需要增加库存容量？如果需要，增加多少？",
    "query": "WITH GasData AS (SELECT Minimum_Stock_Liters, Capacity_Liters FROM gas_station, gas WHERE Minimum_Stock_Liters = 2000000 AND Capacity_Liters = 10000000) SELECT CASE WHEN (150000 * 60) > Capacity_Liters THEN (150000 * 60) - Capacity_Liters ELSE 0 END AS Additional_Capacity_Needed FROM GasData;",
    "type": "3",
    "idx": 424,
    "englishquestion": "An oil company has a minimum fuel inventory of 2 million liters, and the total capacity of its gas stations is 10 million liters. The company wants to ensure that it can meet the fuel demand for the next 60 days at any time, with an average daily sales volume of 150,000 liters of fuel. Does the company need to increase its inventory capacity? If so, by how much?",
    "equation_analysis": "equation_analysis：(150,000 × 60 days) = 9,000,000 liters (total demand). Compare with current 10,000,000L capacity. Formula:  ```Additional_Capacity = MAX(需求值 - 现有容量, 0) = MAX(9,000,000 - 10,000,000, 0)```",
    "used_table_info": "【table】：【gas】 【columns】：Minimum_Stock_Liters  \n【table】：【gas_station】 【columns】：Capacity_Liters  \n【foreign_keys】：gas.Station_ID → gas_station.Station_ID  \n【equation_analysis】：(150,000 × 60 days) = 9,000,000 liters (total demand). Compare with current 10,000,000L capacity. Formula:  \n```Additional_Capacity = MAX(需求值 - 现有容量, 0) = MAX(9,000,000 - 10,000,000, 0)```",
    "evidence": "【step1】:【使用WITH子句从gas_station和gas表关联生成GasData临时表，筛选出Minimum_Stock_Liters=200万升且Capacity_Liters=1000万升的联合记录（注意因缺少JOIN条件可能导致笛卡尔积错误，但此处按原语句过程解析）】  【step2】:【通过SELECT直接操作GasData临时表，计算60天总需求900万升（150000*60）】  【step3】:【使用CASE语句比较总需求与容量，结果为需求未超过存量（900万<1000万），因此Additional_Capacity_Needed返回0】",
    "english_step": "【Step1】: 【Use a WITH clause to create a temporary table GasData by joining gas_station and gas tables, filtering combined records where Minimum_Stock_Liters = 2 million liters and Capacity_Liters = 10 million liters (note: potential Cartesian product error due to missing JOIN conditions, but parsed according to the original query structure)】  【Step2】: 【Directly query GasData via SELECT to calculate 60-day total demand as 9 million liters (150,000 * 60)】  【Step3】: 【Use CASE statement to compare total demand with capacity. Since demand (9M) does not exceed stock (10M), Additional_Capacity_Needed returns 0】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的市值为50万亿美元，且其净利润率为25%。如果该公司决定将所有利润用于购买钻石，每克拉钻石的价格为5000美元，且钻石的密度为3.52克/立方厘米，那么这些钻石可以填满多少个标准足球场？假设一个标准足球场的面积为7140平方米，且钻石堆积高度为1米。",
    "query": "WITH CompanyData AS (SELECT Market_Value, Net_Profit_Margin FROM company WHERE Market_Value = 50000 AND Net_Profit_Margin = 25) SELECT ((Market_Value * Net_Profit_Margin / 100) / 5000) * 0.2 / 3.52 / 1000000 / (7140 * 1) AS Football_Fields_Filled FROM CompanyData;",
    "type": "4",
    "idx": 425,
    "englishquestion": "Assuming an oil company has a market capitalization of 50 trillion dollars with a net profit margin of 25%. If the company decides to use all its profits to purchase diamonds, with each carat of diamond priced at $5,000 and a diamond density of 3.52 grams per cubic centimeter, how many standard football fields could these diamonds fill? A standard football field has an area of 7,140 square meters, and the height of the diamond pile is 1 meter.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Market_Value, Net_Profit_Margin  \n【foreign_keys】:【无】",
    "evidence": "【step1】:从公司表中筛选市值为50万亿美元且净利润率为25%的数据，获取Market_Value和Net_Profit_Margin字段  【step2】:计算总利润((50000*25%)=12500亿美元)，转为克拉数(12500亿/5000*10^9)*0.2克/密度3.52得到立方厘米体积  【step3】:将立方厘米转为立方米(/1e6)，再除以足球场容量(7140平方米*1米=7140立方米)得到填充数量，最终完成维度转换与除法运算",
    "english_step": "【step1】: Filter data from the company table where market value is 50 trillion USD and net profit margin is 25%, retrieve the Market_Value and Net_Profit_Margin fields  【step2】: Calculate total profit ((50000*25%)=1250 billion USD), convert to carat weight (1250 billion/5000*10^9)*0.2 grams/density 3.52 to obtain cubic centimeter volume  【step3】: Convert cubic centimeters to cubic meters (/1e6), then divide by football field capacity (7140 m²*1m height=7140 m³) to get filling quantity, completing dimensional conversion and division operations"
  },
  {
    "db_id": "gas",
    "question": "已知一家石油公司的销售额为5000亿美元，且其燃油产品的平均碳排放量为2.5克/升，每升燃油的平均售价为1美元，那么该公司一年内通过销售燃油产品产生的总碳排放量是多少吨？",
    "query": "WITH CompanyData AS (SELECT Sales FROM company WHERE Sales = 500) SELECT (Sales * 1000000000 / 1) * 2.5 / 1000000 AS Total_Carbon_Emission_Tons FROM CompanyData;",
    "type": "1",
    "idx": 426,
    "englishquestion": "Given that an oil company has sales of $500 billion, and the average carbon emissions of its fuel products are 2.5 grams per liter, with an average selling price of $1 per liter of fuel, what is the total carbon emissions in tons generated by the company's fuel product sales in a year?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从company表中过滤出销售额为500(十亿美元)的公司数据，并创建CTE临时表CompanyData】  【step2】:【通过销售额×10亿转化为总美元，除以每升1美元单价得到总销售升数，再乘以碳排放系数2.5克/升】  【step3】:【将单位换算为吨（除以10^6克/吨），最终得到总碳排放吨数】",
    "english_step": "【step1】:【Filter out company data with sales of 500 billion USD from the company table and create a CTE temporary table named CompanyData】  【step2】:【Convert sales (500 billion × 1 billion USD) to total USD, divide by the unit price of USD 1 per liter to get total sales volume in liters, then multiply by the carbon emission coefficient of 2.5 grams per liter】  【step3】:【Convert the unit to metric tons by dividing by 10^6 grams/ton to obtain the total carbon emissions in tons】"
  },
  {
    "db_id": "gas",
    "question": "已知一家石油公司的净利润率为15%，销售额为500亿美元，那么该公司的净利润是多少？该公司的员工数量为10万人，那么每位员工的平均净利润贡献是多少？",
    "query": "SELECT (Net_Profit_Margin / 100) * Sales AS Net_Profit, ((Net_Profit_Margin / 100) * Sales) / Number_Employees AS Net_Profit_Per_Employee FROM company WHERE Sales = 50 AND Net_Profit_Margin = 15 AND Number_Employees = 100000;",
    "type": "2",
    "idx": 427,
    "englishquestion": "The net profit margin of a petroleum company is known to be 15%, with sales amounting to $50 billion. What is the company's net profit? The company has 100,000 employees, so what is the average net profit contribution per employee?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Net_Profit_Margin, Sales, Number_Employees  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【在company表中筛选对应条件的公司记录：销售额为50（即500亿美元），净利润率为15%，员工数量为100000人】  【step2】:【通过公式 (Net_Profit_Margin / 100) * Sales 计算净利润】  【step3】:【用净利润除以员工总数（Number_Employees）得到每位员工的平均净利润贡献】",
    "english_step": "【step1】: 【Filter company records in the company table that meet the following conditions: Sales of 50 (representing $50 billion), Net Profit Margin of 15%, and Number of Employees of 100,000】  【step2】: 【Calculate net profit using the formula: (Net_Profit_Margin / 100) * Sales】  【step3】: 【Divide the net profit by the total number of employees (Number_Employees) to obtain the average net profit contribution per employee】"
  },
  {
    "db_id": "gas",
    "question": "已知一家石油公司的收入增长率为5%，去年的销售额为300亿美元，那么今年的预计销售额是多少？该公司的净利润率为10%，那么今年的预计净利润是多少？",
    "query": "SELECT Sales * (1 + Revenue_Growth_Rate / 100) AS Projected_Sales, (Sales * (1 + Revenue_Growth_Rate / 100)) * (Net_Profit_Margin / 100) AS Projected_Net_Profit FROM company WHERE Sales = 30 AND Revenue_Growth_Rate = 5 AND Net_Profit_Margin = 10;",
    "type": "3",
    "idx": 428,
    "englishquestion": "Given that an oil company has a revenue growth rate of 5%, and last year's sales were $30 billion, what is the projected sales for this year? If the company's net profit margin is 10%, what is the projected net profit for this year?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate, Net_Profit_Margin  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【筛选company表中Sales为30十亿（对应300亿美元）、Revenue_Growth_Rate为5%、Net_Profit_Margin为10%的公司记录】  【step2】:【计算增长后的销售额：将Sales字段使用公式Sales*(1+5/100)转换为315亿美元（300*1.05）】  【step3】:【通过公式(315*10/100)计算预计净利润：把第一步得到的315亿美元销售额乘以净利润率10%得到31.5亿美元】",
    "english_step": "【step1】:【Filter records in the company table where Sales is 30 billion (equivalent to $30 billion), Revenue_Growth_Rate is 5%, and Net_Profit_Margin is 10%】  【step2】:【Calculate increased sales: Convert the Sales field using the formula Sales*(1+5/100) to $31.5 billion (300*1.05)】  【step3】:【Calculate projected net profit using (315*10/100): Multiply the $31.5 billion sales from step 1 by the 10% net profit margin to get $3.15 billion】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为1万亿美元，利润为5000亿美元，员工数量为1000万人，那么该公司的每位员工的平均销售额和平均利润是多少？如果该公司的分支机构数量为10万个，那么每个分支机构的平均销售额和平均利润是多少？",
    "query": "SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 1000 AND Profits = 500 AND Number_Employees = 10000000 AND Number_Branches = 100000;",
    "type": "4",
    "idx": 429,
    "englishquestion": "Assuming an oil company has sales of 1 trillion dollars, profits of 500 billion dollars, and 10 million employees, what is the average sales and average profit per employee for the company? If the company has 100,000 branches, what is the average sales and average profit per branch?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits, Number_Employees, Number_Branches  \n【foeign_keys】:【N/A】",
    "evidence": "【step1】:【从company表中筛选满足条件的特定公司数据，条件为Sales=1000(代表1万亿美元), Profits=500(代表5000亿美元), Number_Employees=10000000（1000万员工）, Number_Branches=100000（10万分支机构）】  【step2】:【计算员工维度的指标：销售额除以员工数量（Sales/Number_Employees）作为Average_Sales_Per_Employee，利润除以员工数量（Profits/Number_Employees）作为Average_Profit_Per_Employee】  【step3】:【计算分支机构维度的指标：销售额除以分支机构数（Sales/Number_Branches）作为Average_Sales_Per_Branch，利润除以分支机构数（Profits/Number_Branches）作为Average_Profit_Per_Branch】",
    "english_step": "【step1】: 【Filter specific company data from the company table that meets the following criteria: Sales=1000 (representing $1 trillion), Profits=500 (representing $500 billion), Number_Employees=10000000 (10 million employees), Number_Branches=100000 (100,000 branches)】  【step2】: 【Calculate employee dimension metrics: Sales divided by Number_Employees (Sales/Number_Employees) as Average_Sales_Per_Employee, and Profits divided by Number_Employees (Profits/Number_Employees) as Average_Profit_Per_Employee】  【step3】: 【Calculate branch dimension metrics: Sales divided by Number_Branches (Sales/Number_Branches) as Average_Sales_Per_Branch, and Profits divided by Number_Branches (Profits/Number_Branches) as Average_Profit_Per_Branch】"
  },
  {
    "db_id": "gas",
    "question": "已知一家石油公司的碳排放量为1000万吨，且每升燃油的碳排放量为2.5克，那么该公司销售的燃油总量是多少升？",
    "query": "SELECT (10000000 * 1000000) / Carbon_Emission AS Total_Fuel_Sold_Liters FROM gas WHERE Carbon_Emission = 2.5;",
    "type": "1",
    "idx": 430,
    "englishquestion": "The carbon emissions of a certain oil company are 10 million tons, and the carbon emissions per liter of fuel are 2.5 grams. What is the total amount of fuel sold by the company in liters?",
    "equation_analysis": "equation_analysis：总碳排放量（1000万吨 = 10^7吨 = 10^7 * 10^6克）除以每升碳排放量（2.5克/升），即 (10^7 * 10^6) / 2.5 = 总燃油升数",
    "used_table_info": "【table】：【gas】 【columns】：Carbon_Emission  \n【foreign_keys】：【gas.Station_ID → gas_station.Station_ID (未在查询中使用) 】  \n【equation_analysis】：【总碳排放量（1000万吨 = 10^7吨 = 10^7 * 10^6克）除以每升碳排放量（2.5克/升），即 (10^7 * 10^6) / 2.5 = 总燃油升数】",
    "evidence": "【step1】:【将公司的碳排放总量从万吨转换为克：1000万吨 × 1,000,000克/吨 = 10¹³克】  【step2】:【从gas表中过滤出Carbon_Emission=2.5克/升的燃油类型】  【step3】:【计算燃油总量：(10¹³克) / 2.5克/升 = 4 × 10¹²升，输出Total_Fuel_Sold_Liters字段】",
    "english_step": "【step1】: 【Convert the company's total carbon emissions from 10,000 tons to grams: 10 million tons × 1,000,000 grams/ton = 10¹³ grams】  【step2】: 【Filter fuel types with Carbon_Emission=2.5 grams/liter from the gas table】  【step3】: 【Calculate total fuel: (10¹³ grams) / 2.5 grams/liter = 4 × 10¹² liters, output the Total_Fuel_Sold_Liters field】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的销售额为800亿美元，净利润率为12%，债务与股东权益比率为0.8。如果该公司希望将净利润提高20%，同时保持债务与股东权益比率不变，那么需要增加多少销售额？",
    "query": "WITH Current_Data AS (SELECT Sales, (Net_Profit_Margin / 100) * Sales AS Current_Net_Profit, Debt_Equity_Ratio FROM company WHERE Sales = 80 AND Net_Profit_Margin = 12 AND Debt_Equity_Ratio = 0.8), Target_Net_Profit AS (SELECT Current_Net_Profit * 1.2 AS Target_Net_Profit FROM Current_Data) SELECT (Target_Net_Profit / (Net_Profit_Margin / 100)) - Sales AS Required_Sales_Increase FROM company, Target_Net_Profit WHERE Sales = 80 AND Net_Profit_Margin = 12;",
    "type": "2",
    "idx": 431,
    "englishquestion": "An oil company has sales of $80 billion, a net profit margin of 12%, and a debt-to-equity ratio of 0.8. If the company wants to increase its net profit by 20% while keeping the debt-to-equity ratio unchanged, how much additional sales revenue is needed?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Net_Profit_Margin, Debt_Equity_Ratio  \n【foreign_keys】: 无关联外部表",
    "evidence": "【step1】: 在CTE中计算当前数据基础：筛选销售额80(十亿)且利润率12%的公司，通过(Sales * Net_Profit_Margin/100)计算出当前净利润  【step2】: 建立目标净利润CTE：将当前净利润*1.2得出提升20%后的目标值  【step3】: 连接公司表与目标CTE，使用公式(目标净利润/利润率百分比)-原销售额，得出需要增加的十亿美元销售额数值",
    "english_step": "【step1】: In CTE calculate current data foundation: Filter companies with sales of 80 (billion) and net profit margin of 12%, compute current net profit via (Sales * Net_Profit_Margin/100)  【step2】: Create target net profit CTE: Multiply current net profit by 1.2 to derive target value after 20% increase  【step3】: Join company table with target CTE, calculate required billion-dollar sales increase using formula (target_net_profit / profit_margin_percent) - original_sales"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为8%，去年的销售额为400亿美元。该公司希望在未来三年内将销售额翻倍，那么每年的收入增长率需要达到多少？",
    "query": "SELECT 'Current Revenue Growth Rate: 8%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~26%' AS Required_Growth_Rate FROM company WHERE Sales = 40 AND Revenue_Growth_Rate = 8;",
    "type": "3",
    "idx": 432,
    "englishquestion": "An oil company has a revenue growth rate of 8% with last year's sales at $40 billion. The company aims to double its sales within the next three years, so what annual revenue growth rate is required to achieve this?",
    "equation_analysis": "equation_analysis：  设目标增长率为\\( r \\)，当前销售额\\( S_0 = 40 \\)（单位：十亿美元），目标销售额\\( S_3 = 2 \\times S_0 = 80 \\)。根据复合年增长公式：  \\[  S_3 = S_0 \\times (1 + r)^3  \\]  化简得：  \\[  r = \\sqrt[3]{2} - 1 \\approx 26\\%  \\]",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate  \n【foreign_keys】：无  \n【equation_analysis】：  \n设目标增长率为\\( r \\)，当前销售额\\( S_0 = 40 \\)（单位：十亿美元），目标销售额\\( S_3 = 2 \\times S_0 = 80 \\)。根据复合年增长公式：  \n\\[  \nS_3 = S_0 \\times (1 + r)^3  \n\\]  \n化简得：  \n\\[  \nr = \\sqrt[3]{2} - 1 \\approx 26\\%  \n\\]",
    "evidence": "【step1】:【筛选company表中Sales为40（十亿，即400亿美元）且Revenue_Growth_Rate为8%的记录】  【step2】:【构建文本字段显示当前增长率信息】  【step3】:【构建文本字段输出所需年增长率计算结果与说明】",
    "english_step": "【step1】:【Filter records in the company table where Sales equal 40 billion (equivalent to 40,000 million USD) and Revenue_Growth_Rate is 8%】  【step2】:【Construct a text field to display current growth rate information】  【step3】:【Construct a text field to output calculated annual growth rate results and corresponding explanations】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为10万亿美元，利润为5万亿美元，员工数量为1亿人，那么该公司的每位员工的平均销售额和平均利润是多少？如果该公司的分支机构数量为100万个，那么每个分支机构的平均销售额和平均利润是多少？",
    "query": "SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 10000 AND Profits = 5000 AND Number_Employees = 100000000 AND Number_Branches = 1000000;",
    "type": "4",
    "idx": 433,
    "englishquestion": "Assuming an oil company has sales of 10 trillion dollars, a profit of 5 trillion dollars, and 100 million employees, what is the average sales and average profit per employee for this company? If the company has 1 million branches, what is the average sales and average profit per branch?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits, Number_Employees, Number_Branches  \n【foreign_keys】: []",
    "evidence": "【step1】: 从company表中筛选出符合条件（Sales=10000, Profits=5000, Number_Employees=1亿, Number_Branches=100万）的单条公司数据  【step2】: 计算员工维度：将筛选后的销售额除以员工数得到人均销售额Sales/Employees，利润除以员工数得到人均利润Profits/Employees  【step3】: 计算分支维度：将同一行数据的销售额除以分支数得到分支平均销售额Sales/Branches，利润除以分支数得到分支平均利润Profits/Branches",
    "english_step": "【Step 1】: Retrieve a single company record from the company table that meets the criteria (Sales=10,000, Profits=5,000, Number_Employees=100 million, Number_Branches=1 million).  【Step 2】: Calculate employee-related metrics: Divide the filtered sales by the number of employees to get Sales per Employee (Sales/Employees), and divide profits by the number of employees to get Profits per Employee (Profits/Employees).  【Step 3】: Calculate branch-related metrics: Divide the sales value from the same row by the number of branches to get Average Sales per Branch (Sales/Branches), and divide profits by the number of branches to get Average Profits per Branch (Profits/Branches)."
  },
  {
    "db_id": "gas",
    "question": "某石油公司的燃油库存量为500万升，每升燃油的碳排放量为2.8克，且该公司计划在未来一年内将碳排放量减少20%，那么该公司需要减少多少升燃油的销售？",
    "query": "SELECT (Stock_Liters * Carbon_Emission * 0.20) / Carbon_Emission AS Required_Reduction_Liters FROM gas WHERE Stock_Liters = 5000000 AND Carbon_Emission = 2.8;",
    "type": "1",
    "idx": 434,
    "englishquestion": "A petroleum company has a fuel inventory of 5 million liters, with each liter of fuel emitting 2.8 grams of carbon. The company plans to reduce its carbon emissions by 20% over the next year. How many liters of fuel sales does the company need to reduce?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission  \n【foreign_keys】: Station_ID (关联gas_station.Station_ID)",
    "evidence": "【step1】:【计算需减少的碳排放总量：现有库存500万升 × 每升2.8克 × 20%比例 = 2,800,000克碳减排目标】  【step2】:【通过WHERE筛选满足Stock_Liters=5000000和Carbon_Emission=2.8的gas表记录】  【step3】:【计算最终需减少的燃油升数：总量2,800,000克 ÷ 每升碳排放2.8克 = 1,000,000升(即公式等价转换后简化为直接输出Stock_Liters*0.2)】",
    "english_step": "【step1】: 【Calculate the total carbon emission reduction required: Existing inventory of 5,000,000 liters × 2.8 grams per liter × 20% ratio = 2,800,000 grams carbon reduction target】  【step2】: 【Filter gas table records meeting Stock_Liters=5000000 and Carbon_Emission=2.8 using WHERE clause】  【step3】: 【Calculate the final fuel liters to be reduced: Total 2,800,000 grams ÷ 2.8 grams per liter carbon emission = 1,000,000 liters (equivalent to directly outputting Stock_Liters*0.2 after formula simplification)】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的市场价值为3000亿美元，净利润为450亿美元，员工数量为15万人。如果该公司计划在未来五年内将市场价值翻倍，同时保持净利润率不变，那么需要增加多少员工？",
    "query": "SELECT ((Market_Value * 2 * (Profits / Market_Value)) / Profits) * Number_Employees - Number_Employees AS Required_Employee_Increase FROM company WHERE Market_Value = 300 AND Profits = 45 AND Number_Employees = 150000;",
    "type": "2",
    "idx": 435,
    "englishquestion": "An oil company has a market value of $300 billion, a net profit of $45 billion, and 150,000 employees. If the company plans to double its market value in the next five years while maintaining the same net profit margin, how many additional employees will it need to hire?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Market_Value, Profits, Number_Employees  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【从company表中筛选出Market_Value为300(即问题中的3000亿美元)、Profits为45(即450亿美元)、员工为15万的目标数据】  【step2】:【基于净利润率不变假设，计算新市场价值600(即翻倍后的6000亿美元)对应的新利润 = 600*(45/300)=90(即保持原净利润率9%)】  【step3】:【用线性扩展法计算员工增加量：(新利润/原人均利润)/原员工数 - 原员工数 → (90/0.3)/150000*150000 -150000 = 150000】",
    "english_step": "【step1】: 【Filter the company table to target data with Market_Value of 300 (representing $300 billion in the question), Profits of 45 ($45 billion), and 150,000 employees】  【step2】: 【Calculate new profits for the doubled market value of 600 ($600 billion) under unchanged net profit margin assumption: New Profit = 600*(45/300)=90 (maintaining original 9% net profit margin)】  【step3】: 【Calculate employee increase using linear scaling: (New Profit / Original Profit per Employee) / Original Employee Count - Original Employee Count → (90/0.3)/150000*150000 -150000 = 150,000】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为6%，去年的销售额为600亿美元。如果该公司希望在未来两年内将销售额提高50%，那么每年的收入增长率需要达到多少？",
    "query": "SELECT 'Current Revenue Growth Rate: 6%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~22.47%' AS Required_Growth_Rate FROM company WHERE Sales = 60 AND Revenue_Growth_Rate = 6;",
    "type": "3",
    "idx": 436,
    "englishquestion": "An oil company has a revenue growth rate of 6%, with last year's sales at 60 billion dollars. If the company aims to increase its sales by 50% over the next two years, what annual revenue growth rate must it achieve?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【通过WHERE条件筛选Sales=60（600亿美元）且Revenue_Growth_Rate=6%的公司数据】  【step2】:【硬编码返回当前增长率及手动计算得出的所需年化增长率（未实际用数据库字段进行数学运算）】",
    "english_step": "【step1】:【Filter company data via WHERE clause where Sales=60 ($60 billion) and Revenue_Growth_Rate=6%】  【step2】:【Hardcode return of current growth rate and manually calculate required annualized growth rate (no actual mathematical operations using database fields)】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为100万亿美元，利润为50万亿美元，员工数量为10亿人，那么该公司的每位员工的平均销售额和平均利润是多少？如果该公司的分支机构数量为1亿个，那么每个分支机构的平均销售额和平均利润是多少？",
    "query": "SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 1000000 AND Profits = 500000 AND Number_Employees = 1000000000 AND Number_Branches = 100000000;",
    "type": "4",
    "idx": 437,
    "englishquestion": "Assuming an oil company has sales of 100 trillion dollars, profits of 50 trillion dollars, and 1 billion employees, what is the average sales and average profit per employee for the company? If the company has 100 million branches, what is the average sales and average profit per branch?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits, Number_Employees, Number_Branches  \n【foreign_keys】: 无",
    "evidence": "【step1】:【通过WHERE条件过滤出销售额100万亿(Sales=1000000*十亿)、利润50万亿(Profits=500000*十亿)、员工数量10亿、分支机构1亿的特定公司记录】  【step2】:【计算员工维度指标：将总销售额除以员工数量得到Average_Sales_Per_Employee，利润同逻辑得到Average_Profit_Per_Employee】  【step3】:【计算机构维度指标：将总销售额除以分支机构数量得到Average_Sales_Per_Branch，利润同逻辑得到Average_Profit_Per_Branch】",
    "english_step": "[Step1]: [Filter specific company records through WHERE conditions where Sales=1,000,000*billion (100 trillion), Profits=500,000*billion (50 trillion), Employee Count=1 billion, and Number of Branches=100 million]  [Step2]: [Calculate employee dimension metrics: Divide total sales by employee count to get **Average_Sales_Per_Employee**, and apply the same logic to profits to obtain **Average_Profit_Per_Employee**]  [Step3]: [Calculate branch dimension metrics: Divide total sales by the number of branches to get **Average_Sales_Per_Branch**, and apply the same logic to profits to obtain **Average_Profit_Per_Branch**]"
  },
  {
    "db_id": "gas",
    "question": "若某石油公司的燃油库存量为1000万升，每升燃油的硫含量为50ppm（百万分之一），且该公司计划在未来一年内将硫含量降低至30ppm，那么需要减少多少硫的总量？",
    "query": "SELECT Stock_Liters * (Sulfur_Content - 30) * 1e-6 AS Required_Sulfur_Reduction FROM gas WHERE Stock_Liters = 10000000 AND Sulfur_Content = 50;",
    "type": "1",
    "idx": 438,
    "englishquestion": "If an oil company has a fuel inventory of 10 million liters, with a sulfur content of 50 ppm (parts per million) per liter, and the company plans to reduce the sulfur content to 30 ppm within the next year, how much total sulfur needs to be reduced?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Sulfur_Content  \n【foreign_keys】: 无关联外键（该查询不需要JOIN操作）",
    "evidence": "【step1】:【筛选gas表中Stock_Liters=1000万且Sulfur_Content=50ppm的燃油记录】  【step2】:【计算硫含量差值(50-30=20ppm)并与库存量相乘得到总ppm升数】  【step3】:【将结果乘以1e-6将ppm升数转换为硫质量（因1ppm=百万分之一）得到最终需减少的硫总量】",
    "english_step": "Step 1: Filter fuel records in the gas table where Stock_Liters = 10 million and Sulfur_Content = 50 ppm  Step 2: Calculate the sulfur content difference (50 ppm - 30 ppm = 20 ppm) and multiply it by the stock liters to obtain the total ppm-liters  Step 3: Multiply the result by 1e-6 to convert ppm-liters to sulfur mass (since 1 ppm = one part per million) to obtain the total sulfur mass that needs to be reduced"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的总资产为2000亿美元，净利润为300亿美元，债务与股东权益比率为1.5。该公司计划在未来三年内将总资产增加50%，同时将债务与股东权益比率降至1.2，那么需要增加多少股东权益？",
    "query": "WITH Current_Equity AS (SELECT Assets / (1 + Debt_Equity_Ratio) AS Current_Equity FROM company WHERE Assets = 2000 AND Debt_Equity_Ratio = 1.5), Target_Assets AS (SELECT Assets * 1.5 AS Target_Assets FROM company WHERE Assets = 2000), Target_Equity AS (SELECT Target_Assets / (1 + 1.2) AS Target_Equity FROM Target_Assets) SELECT Target_Equity - Current_Equity AS Required_Equity_Increase FROM Current_Equity, Target_Equity;",
    "type": "2",
    "idx": 439,
    "englishquestion": "An oil company has total assets of $200 billion, a net profit of $30 billion, and a debt-to-equity ratio of 1.5. The company plans to increase its total assets by 50% over the next three years while reducing the debt-to-equity ratio to 1.2. How much additional shareholder equity is needed?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Assets, Debt_Equity_Ratio  \n【foreign_keys】: 无关联其他表",
    "evidence": "【step1】:【通过当前总资产和债务权益比率计算当前股东权益：当前股东权益 = 2000 / (1+1.5)】  【step2】:【计算三年后的目标总资产：新总资产 = 2000 * 1.5 = 3000，并基于目标债务权益比率1.2计算新股东权益：目标股东权益 = 3000 / (1+1.2)】  【step3】:【将目标股东权益减去当前股东权益，得到需要增加的股东权益数值：最终差额 = (3000/(2.2)) - (2000/(2.5))】",
    "english_step": "【step1】: 【Calculate current shareholders' equity using current total assets and debt-to-equity ratio: Current shareholders' equity = 2000 / (1+1.5)】  【step2】: 【Calculate target total assets after three years: New total assets = 2000 * 1.5 = 3000, and determine new shareholders' equity based on target debt-to-equity ratio 1.2: Target shareholders' equity = 3000 / (1+1.2)】  【step3】: 【Subtract current shareholders' equity from target shareholders' equity to obtain required incremental equity: Final difference = (3000/(2.2)) - (2000/(2.5))】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为4%，去年的销售额为500亿美元。该公司希望在未来五年内将销售额提高至800亿美元，那么每年的收入增长率需要达到多少？",
    "query": "SELECT 'Current Revenue Growth Rate: 4%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~9.86%' AS Required_Growth_Rate FROM company WHERE Sales = 50 AND Revenue_Growth_Rate = 4;",
    "type": "3",
    "idx": 440,
    "englishquestion": "The revenue growth rate of an oil company is 4%, with last year's sales amounting to $50 billion. The company aims to increase its sales to $80 billion over the next five years. What annual revenue growth rate is needed to achieve this?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate  \n【foreign_keys】:",
    "evidence": "【step1】:【筛选公司表中符合去年销售额为500亿美元（Sales=50）且当前收入增长率为4%的记录】  【step2】:【硬编码返回当前增长率（4%）和目标增长率计算结果（约9.86%）的字符串】  【step3】:【通过 SELECT 子句输出格式化结果（当前值和需求值）作为两列】  注：实际 SQL 未进行动态计算（如复利公式 `(800/500)^(1/5)-1`），而是直接输出预计算的结果，因此步骤中无数学解析环节。",
    "english_step": "【step1】:【Filter records in the company table where last year's sales reached $50 billion (Sales=50) and the current revenue growth rate is 4%】  【step2】:【Hardcode return string showing current growth rate (4%) and target growth rate calculation result (~9.86%)】  【step3】:【Output formatted results (Current Value and Required Value) as two columns via SELECT clause】  Note: The actual SQL does not perform dynamic calculations (e.g., compound formula `(800/50)^(1/5)-1`), but directly outputs precomputed results, hence no mathematical parsing steps in the process."
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为1亿亿美元，利润为5000万亿美元，员工数量为100亿人，那么该公司的每位员工的平均销售额和平均利润是多少？如果该公司的分支机构数量为10亿个，那么每个分支机构的平均销售额和平均利润是多少？",
    "query": "SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 100000000 AND Profits = 50000000 AND Number_Employees = 10000000000 AND Number_Branches = 1000000000;",
    "type": "4",
    "idx": 441,
    "englishquestion": "Assuming an oil company has sales of 100 trillion dollars, a profit of 50 trillion dollars, and 10 billion employees, what is the average sales and average profit per employee? If the company has 1 billion branches, what is the average sales and average profit per branch?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits, Number_Employees, Number_Branches  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【通过WHERE条件筛选特定的公司数据，匹配Sales=1e8十亿美元，Profits=5e7十亿美元，员工数量1e10人，分支机构数量1e9个】  【step2】:【对筛选出的单条数据执行除法运算：用Sales/Number_Employees计算人均销售额，Profits/Number_Employees计算人均利润，Sales/Number_Branches和Profits/Number_Branches分别计算分支机构均销售额和利润】",
    "english_step": "【step1】: 【Filter specific company data using WHERE conditions to match Sales=1e8 billion dollars, Profits=5e7 billion dollars, employee count=1e10 people, and branch count=1e9 branches】  【step2】: 【Perform division operations on the filtered single record: calculate Sales/Number_Employees as per capita sales, Profits/Number_Employees as per capita profits, Sales/Number_Branches and Profits/Number_Branches as average sales and profits per branch respectively】"
  },
  {
    "db_id": "gas",
    "question": "某石油公司的燃油库存量为800万升，每升燃油的碳排放量为3.2克，且该公司计划在未来一年内将碳排放量减少15%，那么需要减少多少升燃油的销售？",
    "query": "SELECT (Stock_Liters * Carbon_Emission * 0.15) / Carbon_Emission AS Required_Reduction_Liters FROM gas WHERE Stock_Liters = 8000000 AND Carbon_Emission = 3.2;",
    "type": "1",
    "idx": 442,
    "englishquestion": "An oil company has a fuel inventory of 8 million liters, with each liter of fuel emitting 3.2 grams of carbon emissions. The company plans to reduce its carbon emissions by 15% over the next year. How many liters of fuel sales need to be reduced to achieve this?",
    "equation_analysis": "equation_analysis：  1. 原公式为 `(库存升数 * 每升碳排 * 15%) / 每升碳排 = 需减少升数`  2. 数学等价性：分子中的 `Carbon_Emission` 约简后实际公式可优化为 `Stock_Liters * 0.15`  3. 公式保留 `Carbon_Emission` 的作用：体现业务语义完整性（以碳排放总量为中间计算参数）",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission  \n【foreign_keys】：【Station_ID 关联 gas_station.Station_ID】  \n【equation_analysis】：  \n1. 原公式为 `(库存升数 * 每升碳排 * 15%) / 每升碳排 = 需减少升数`  \n2. 数学等价性：分子中的 `Carbon_Emission` 约简后实际公式可优化为 `Stock_Liters * 0.15`  \n3. 公式保留 `Carbon_Emission` 的作用：体现业务语义完整性（以碳排放总量为中间计算参数）",
    "evidence": "【step1】:筛选gas表中Stock_Liters=800万升且每升碳排放3.2克的记录  【step2】:计算总碳排放减少量的等效燃油数量：(库存总量 × 减碳比例) = (8000000 × 3.2 × 15%) / 3.2 → 8000000×0.15=1200000升",
    "english_step": "【step1】: Filter records in the gas table where Stock_Liters = 8,000,000 liters and carbon emission is 3.2 grams per liter  【step2】: Calculate the equivalent fuel quantity for total carbon emission reduction: (Total inventory × Carbon reduction ratio) = (8,000,000 × 3.2 × 15%) / 3.2 → 8,000,000 × 0.15 = 1,200,000 liters"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的市场价值为2500亿美元，净利润为400亿美元，员工数量为12万人。该公司计划在未来五年内将市场价值增加至5000亿美元，同时保持净利润率不变，那么需要增加多少员工？",
    "query": "SELECT ((Market_Value * 2 * (Profits / Market_Value)) / Profits) * Number_Employees - Number_Employees AS Required_Employee_Increase FROM company WHERE Market_Value = 2500 AND Profits = 400 AND Number_Employees = 120000;",
    "type": "2",
    "idx": 443,
    "englishquestion": "An oil company has a market value of 250 billion dollars, a net profit of 40 billion dollars, and 120,000 employees. The company plans to increase its market value to 500 billion dollars in the next five years while maintaining the same net profit margin. How many additional employees will need to be hired?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Market_Value, Profits, Number_Employees  \n【foreign_keys】: 【无关联外键】",
    "evidence": "【step1】:【筛选符合条件的公司记录。WHERE子句使用Market_Value=2500(十亿)、Profits=400(十亿)、Number_Employees=120000作为过滤条件，定位到目标公司数据】  【step2】:【计算核心参数。利用(Market_Value*2)获取未来市值5000十亿，计算原净利润率(400/2500)，并推导出未来利润=(5000 * (400/2500))=800十亿】  【step3】:【计算员工增量。基于未来利润是原利润的2倍，推导出所需员工数=现员工数*2，最终增量=240000-120000=120000】",
    "english_step": "【step1】:【Filter company records meeting criteria. WHERE clause uses Market_Value=2500B, Profits=400B, Number_Employees=120,000 as filters to identify target company data】  【step2】:【Calculate core parameters. Use (Market_Value * 2) to obtain future market value of 5000B, compute original net profit margin (400/2500), and derive Future_Profit = (5000 * (400/2500)) = 800B】  【step3】:【Calculate employee increment. Based on future profit being double original profit, derive required employees = current employees * 2. Final increment = 240,000 - 120,000 = 120,000】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为5%，去年的销售额为700亿美元。该公司希望在未来三年内将销售额提高至1000亿美元，那么每年的收入增长率需要达到多少？",
    "query": "SELECT 'Current Revenue Growth Rate: 5%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~12.66%' AS Required_Growth_Rate FROM company WHERE Sales = 70 AND Revenue_Growth_Rate = 5;",
    "type": "3",
    "idx": 444,
    "englishquestion": "An oil company has a revenue growth rate of 5%, with last year's sales reaching $70 billion. The company aims to increase its sales to $100 billion within the next three years, so what annual revenue growth rate would be required to achieve this?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate  \n【foreign_keys】:无",
    "evidence": "【step1】:【根据Sales=70(即700亿美元)和Revenue_Growth_Rate=5在company表中定位记录】  【step2】:【构造预计算结果字符串Current_Growth_Rate和Required_Growth_Rate】  【step3】:【直接将字符串结果投影到结果集中，不涉及真实计算（实际数学计算在现实环境中应通过CAGR公式手工完成）】",
    "english_step": "【step1】: 【Locate records in the company table where Sales=70 (i.e., 700 billion USD) and Revenue_Growth_Rate=5】  【step2】: 【Construct precomputed result strings for Current_Growth_Rate and Required_Growth_Rate】  【step3】: 【Directly project the string results into the result set without actual computations (real mathematical calculations should be manually performed using the CAGR formula in practical scenarios)】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为10亿亿美元，利润为5亿亿美元，员工数量为1000亿人，那么该公司的每位员工的平均销售额和平均利润是多少？如果该公司的分支机构数量为100亿个，那么每个分支机构的平均销售额和平均利润是多少？",
    "query": "SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 10000000000 AND Profits = 5000000000 AND Number_Employees = 100000000000 AND Number_Branches = 10000000000;",
    "type": "4",
    "idx": 445,
    "englishquestion": "Assuming an oil company has sales of 100 trillion, profits of 50 trillion, and 100 billion employees, what is the company's average sales and average profit per employee? If the company has 10 billion branches, what is the average sales and average profit per branch?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits, Number_Employees, Number_Branches  \n【foreign_keys】:【无涉及外键关联】",
    "evidence": "【step1】:【从燃气公司表中筛选出销售额10万亿、利润5万亿、员工1000亿、分支机构100亿的公司记录】  【step2】:【基于筛选结果直接计算四个指标：员工维度用总销售额/员工数得人均销售额、总利润/员工数得人均利润，分支机构维度用总销售额/分支数得单分支销售额、总利润/分支数得单分支利润】",
    "english_step": "【step1】: 【Filter the gas companies table for records with sales of 10 trillion, profit of 5 trillion, 100 billion employees, and 10 billion branches】  【step2】: 【Calculate four metrics directly based on the filtered results:  - Employee dimension: Total sales divided by number of employees (sales per employee), Total profit divided by number of employees (profit per employee)  - Branch dimension: Total sales divided by number of branches (sales per branch), Total profit divided by number of branches (profit per branch)】"
  },
  {
    "db_id": "gas",
    "question": "某石油公司的燃油库存量为1200万升，每升燃油的碳排放量为2.7克，且该公司计划在未来一年内将碳排放量减少25%，那么需要减少多少升燃油的销售？",
    "query": "SELECT (Stock_Liters * Carbon_Emission * 0.25) / Carbon_Emission AS Required_Reduction_Liters FROM gas WHERE Stock_Liters = 12000000 AND Carbon_Emission = 2.7;",
    "type": "1",
    "idx": 446,
    "englishquestion": "A certain petroleum company has a fuel inventory of 12 million liters, with each liter of fuel emitting 2.7 grams of carbon emissions. The company plans to reduce its carbon emissions by 25% over the next year. How many liters of fuel sales need to be reduced to achieve this?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission",
    "evidence": "【step1】: 从gas表中筛选Stock_Liters=12,000,000且Carbon_Emission=2.7的燃油记录  【step2】: 计算原总碳排放量（12,000,000升 × 2.7克/升 = 32,400,000克）  【step3】: 将需减少的碳排放量（32,400,000克 × 25% = 8,100,000克）转换为需减少的燃油升数（8,100,000克 ÷ 2.7克/升 = 3,000,000升）",
    "english_step": "【step1】: Filter fuel records from the gas table where Stock_Liters=12,000,000 and Carbon_Emission=2.7  【step2】: Calculate the original total carbon emissions (12,000,000 liters × 2.7 grams/liter = 32,400,000 grams)  【step3】: Convert the required reduction in carbon emissions (32,400,000 grams × 25% = 8,100,000 grams) to the required reduction in fuel liters (8,100,000 grams ÷ 2.7 grams/liter = 3,000,000 liters)"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的总资产为3000亿美元，净利润为450亿美元，债务与股东权益比率为1.8。如果该公司计划在未来三年内将总资产增加至4500亿美元，同时将债务与股东权益比率降至1.5，那么需要增加多少股东权益？",
    "query": "WITH Current_Equity AS (SELECT Assets / (1 + Debt_Equity_Ratio) AS Current_Equity FROM company WHERE Assets = 3000 AND Debt_Equity_Ratio = 1.8), Target_Assets AS (SELECT 4500 AS Target_Assets), Target_Equity AS (SELECT Target_Assets / (1 + 1.5) AS Target_Equity FROM Target_Assets) SELECT Target_Equity - Current_Equity AS Required_Equity_Increase FROM Current_Equity, Target_Equity;",
    "type": "2",
    "idx": 447,
    "englishquestion": "An oil company has total assets of $300 billion, a net profit of $45 billion, and a debt-to-equity ratio of 1.8. If the company plans to increase its total assets to $450 billion over the next three years while reducing the debt-to-equity ratio to 1.5, how much additional shareholder equity is required?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Assets, Debt_Equity_Ratio 【foreign_keys】: N/A",
    "evidence": "【step1】:【计算当前股东权益：总资产3000/(1+1.8)=1071.43亿美元】  【step2】:【计算目标股东权益：新总资产4500/(1+1.5)=1800亿美元】  【step3】:【计算差值：1800-1071.43=728.57亿美元需增加的股东权益】",
    "english_step": "【step1】:【Calculate current shareholders' equity: Total assets 3000/(1+1.8)=107.143 USD billion】  【step2】:【Calculate target shareholders' equity: New total assets 4500/(1+1.5)=180 USD billion】  【step3】:【Calculate the difference: 180-107.143=72.857 USD billion shareholders' equity needs to be increased】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为7%，去年的销售额为900亿美元。如果该公司希望在未来四年内将销售额提高至1200亿美元，那么每年的收入增长率需要达到多少？",
    "query": "SELECT 'Current Revenue Growth Rate: 7%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~7.46%' AS Required_Growth_Rate FROM company WHERE Sales = 90 AND Revenue_Growth_Rate = 7;",
    "type": "3",
    "idx": 448,
    "englishquestion": "An oil company has a revenue growth rate of 7%, with last year's sales reaching $90 billion. If the company aims to increase its sales to $120 billion within the next four years, what annual revenue growth rate must it achieve?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate  \n【foreign_keys】:无（仅单表查询未涉及关联表）",
    "evidence": "【step1】:【使用SELECT语句生成固定文本结果，展示当前收入增长率7%和理论计算结果7.46%的预设字符串值】  【step2】:【指定从company表查询数据，该表包含销售额和收入增长率等字段】  【step3】:【通过WHERE Sales = 90 AND Revenue_Growth_Rate = 7过滤条件，确保只有当库中存在销售额900亿（即90 *10亿）、且当前增长率7%的公司时才会输出结果】",
    "english_step": "【step1】: 【Use SELECT statement to generate fixed text results displaying preset string values of current revenue growth rate 7% and theoretical calculation result 7.46%】  【step2】: 【Specify querying data from the company table which contains fields like sales and revenue growth rate】  【step3】: 【Apply WHERE filter conditions Sales = 90 AND Revenue_Growth_Rate = 7 to ensure results are output only when companies with 90 billion sales (90*1 billion) and current 7% growth rate exist in the database】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的销售额为100亿亿美元，利润为50亿亿美元，员工数量为10000亿人，那么该公司的每位员工的平均销售额和平均利润是多少？如果该公司的分支机构数量为1000亿个，那么每个分支机构的平均销售额和平均利润是多少？",
    "query": "SELECT Sales / Number_Employees AS Average_Sales_Per_Employee, Profits / Number_Employees AS Average_Profit_Per_Employee, Sales / Number_Branches AS Average_Sales_Per_Branch, Profits / Number_Branches AS Average_Profit_Per_Branch FROM company WHERE Sales = 100000000000 AND Profits = 50000000000 AND Number_Employees = 1000000000000 AND Number_Branches = 100000000000;",
    "type": "4",
    "idx": 449,
    "englishquestion": "Assuming an oil company has sales of 100 trillion dollars, profit of 50 trillion dollars, and a workforce of 100 billion people, what is the average sales and average profit per employee? If the company has 100 billion branches, what is the average sales and average profit per branch?",
    "equation_analysis": "equation_analysis：(Sales / Number_Employees), (Profits / Number_Employees), (Sales / Number_Branches), (Profits / Number_Branches)",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits, Number_Employees, Number_Branches  \n【foreign_keys】：【none involved in this query】  \n【equation_analysis】：【(Sales / Number_Employees), (Profits / Number_Employees), (Sales / Number_Branches), (Profits / Number_Branches)】",
    "evidence": "【step1】: 基于筛选条件从company表中检索目标记录，使用WHERE子句匹配指定的销售额、利润、员工数和分支机构数  【step2】: 对返回的单个记录进行数学计算，通过除法计算每位员工的平均销售额(Sales/Number_Employees)和平均利润(Profits/Number_Employees)  【step3】: 继续在相同记录上进行数学计算，通过除法得出每个分支机构的平均销售额(Sales/Number_Branches)和平均利润(Profits/Number_Branches)",
    "english_step": "[step1]: Retrieve target records from the company table by applying filtering criteria using a WHERE clause to match specified sales, profits, number of employees, and number of branches.  [step2]: Perform mathematical calculations on the returned single record by division to calculate average sales per employee (Sales/Number_Employees) and average profits per employee (Profits/Number_Employees).  [step3]: Continue mathematical calculations on the same record through division to derive average sales per branch (Sales/Number_Branches) and average profits per branch (Profits/Number_Branches)."
  },
  {
    "db_id": "gas",
    "question": "某石油公司的燃油库存量为3000万升，每升燃油的密度为0.85千克/升，且该公司计划将这些燃油运输到距离1000公里的目的地，运输车辆的油耗为每百公里消耗30升燃油，那么需要多少辆运输车辆才能完成运输任务？",
    "query": "SELECT CEIL((Stock_Liters * Density) / (Vehicle_Capacity - (Distance / 100 * Fuel_Consumption * Density))) AS Required_Vehicles FROM (SELECT 30000000 AS Stock_Liters, 0.85 AS Density, 1000 AS Distance, 30 AS Fuel_Consumption, 20000 AS Vehicle_Capacity) AS data;",
    "type": "1",
    "idx": 450,
    "englishquestion": "An oil company has a fuel inventory of 30 million liters, with a density of 0.85 kilograms per liter. The company plans to transport this fuel to a destination 1,000 kilometers away. The fuel consumption of the transport vehicles is 30 liters per 100 kilometers. How many transport vehicles are needed to complete this transportation task?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters  \n【foreign_keys】: Station_company.Station_ID → gas_station.Station_ID | station_company.Company_ID → company.Company_ID | gas.Station_ID → gas_station.Station_ID",
    "evidence": "【step1】:【计算总燃油质量 = 库存量 × 密度 (Stock_Liters * Density)】  【step2】:【计算单辆车途中燃料消耗质量 = (距离/100 × 油耗) × 密度 ((Distance/100 * Fuel_Consumption) * Density)】  【step3】:【求车辆数量 = 总质量 ÷ (单车容量 - 消耗质量) 并向上取整 (CEIL(结果))】",
    "english_step": "【step1】: 【Calculate total fuel mass = Stock_Liters * Density】  【step2】: 【Calculate fuel consumption mass per vehicle en route = (Distance/100 * Fuel_Consumption) * Density】  【step3】: 【Determine number of vehicles = total mass ÷ (individual vehicle capacity - consumed mass) and round up (CEIL(result))】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的销售额为1200亿美元，净利润为180亿美元，员工数量为30万人。如果该公司计划在未来五年内将净利润提高至360亿美元，同时将员工数量增加至40万人，那么需要将销售额提高至多少？",
    "query": "SELECT (Target_Profits / (Profits / Sales)) AS Target_Sales FROM (SELECT 1200 AS Sales, 180 AS Profits, 360 AS Target_Profits) AS data;",
    "type": "2",
    "idx": 451,
    "englishquestion": "An oil company has sales of $120 billion, a net profit of $18 billion, and a workforce of 300,000 employees. If the company plans to increase its net profit to $36 billion and expand its workforce to 400,000 employees within the next five years, how much should it increase its sales to?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Profits  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【创建临时数据集】子查询`data`定义当前销售额(Sales=1200)、净利润(Profits=180)、目标净利润(Target_Profits=360)三个数值常量  【step2】:【计算利润率结构】通过`(Profits / Sales)`计算当前利润占销售额的比例（即15%）  【step3】:【推算目标销售额】`Target_Profits / (Profits/Sales)`公式等价于`360 / 0.15=2400`，得出维持同利润率时所需的新销售额",
    "english_step": "【step1】: [Create Temporary Dataset] Subquery `data` defines three numeric constants: current sales (Sales=1200), net profit (Profits=180), and target net profit (Target_Profits=360)  【step2】: [Calculate Profit Margin Structure] Calculate the current profit-to-sales ratio (15%) via `(Profits / Sales)`  【step3】: [Derive Target Sales] Formula `Target_Profits / (Profits/Sales)` equals `360 / 0.15=2400`, indicating the required new sales volume to maintain the same profit margin"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为4%，去年的销售额为700亿美元。如果该公司希望在未来三年内将销售额提高至1000亿美元，那么每年的收入增长率需要达到多少？",
    "query": "SELECT 'Current Revenue Growth Rate: 4%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~12.66%' AS Required_Growth_Rate FROM company WHERE Sales = 70 AND Revenue_Growth_Rate = 4;",
    "type": "3",
    "idx": 452,
    "englishquestion": "An oil company has a revenue growth rate of 4%, with last year's sales reaching $70 billion. If the company aims to increase its sales to $100 billion within the next three years, what annual revenue growth rate would be required to achieve that goal?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Revenue_Growth_Rate  \n【foreign_keys】: 【Station_Company.Company_ID→company.Company_ID】 (但未在查询中被实际调用)",
    "evidence": "【step1】:【定位company表中当前销售额为700亿（Sales=70）且收入增长率为4%（Revenue_Growth_Rate=4）的数据条目】  【step2】:【返回固定文本结果：展示当前收入增长率和通过数学公式（复利计算）离线算出的12.66%预期复合增长率】  【step3】:【通过WHERE条件确保结果与特定业务规则（销售额700亿/4%增速）匹配，尽管数据库中的增长率字段此时没有被实际运算使用】",
    "english_step": "【step1】: 【Locate data entries in the company table where current sales are 70 billion (Sales=70) and revenue growth rate is 4% (Revenue_Growth_Rate=4)】  【step2】: 【Return fixed text result: display current revenue growth rate and the offline-calculated expected compound growth rate of 12.66% derived through mathematical formula (compound interest calculation)】  【step3】: 【Use WHERE conditions to ensure results align with specific business rules (70 billion sales/4% growth rate), even though the growth rate field in the database is not being operationally used in this calculation】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的市场价值达到了100万亿美元，且其员工数量为1000万人。如果该公司决定将其所有资产转换为现金，并以每名员工100万美元的遣散费进行裁员，那么该公司需要支付的总遣散费用是多少？同时，如果该公司每升石油产品的碳排放量为5000克/升，且每升石油产品的价格为0.05美元，那么该公司在一年内通过销售石油产品产生的总碳排放量是多少？",
    "query": "SELECT Number_Employees * 1000000 AS Total_Severance_Cost, (Market_Value / 0.05) * 5000 AS Total_Carbon_Emission FROM company WHERE Market_Value = 100000000000000 AND Number_Employees = 10000000;",
    "type": "4",
    "idx": 453,
    "englishquestion": "Suppose an oil company's market value reaches 100 trillion dollars, and it has 10 million employees. If the company decides to convert all its assets into cash and offers a severance package of 1 million dollars per employee for layoffs, what is the total severance cost the company needs to pay? Additionally, if the company's carbon emissions per liter of petroleum product are 5000 grams per liter, and the price per liter of petroleum product is 0.05 dollars, what is the total carbon emissions generated by the company in one year through the sale of petroleum products?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Number_Employees, Market_Value 【foerign_keys】:【none】",
    "evidence": "【step1】:【过滤company表中Market_Value=100万亿美元且Number_Employees=1000万人的记录】  【step2】:【计算总遣散费：员工数量(10,000,000人)*每人100万美元】  【step3】:【计算总碳排放：(Market_Value/每升油价0.05美元)获取销量基数，再乘以每升碳排量5000克/升】",
    "english_step": "【step1】:【Filter records in the company table where Market_Value = 100 trillion USD and Number_Employees = 10 million people】  【step2】:【Calculate total severance pay: Number of Employees (10,000,000 people) * $1 million USD per person】  【step3】:【Calculate total carbon emissions: (Market_Value / oil price per liter of $0.05 USD) to derive sales base, then multiply by carbon emissions per liter of 5000 grams/liter】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的加油站总容量为200万升，若该加油站每天销售燃油5万升，且每升燃油燃烧时释放的能量为35兆焦耳，求该加油站每天通过销售燃油释放的总能量。",
    "query": "SELECT Daily_Sales * Energy_Per_Liter AS Total_Energy_Release FROM (SELECT 50000 AS Daily_Sales, 35 AS Energy_Per_Liter) AS data;",
    "type": "1",
    "idx": 454,
    "englishquestion": "The total capacity of a gas station owned by an oil company is 2 million liters. If the gas station sells 50,000 liters of fuel per day, and each liter of fuel releases 35 megajoules of energy when burned, calculate the total energy released through fuel sales by the gas station each day.",
    "equation_analysis": "",
    "used_table_info": "【table】：【data】 【columns】：Daily_Sales, Energy_Per_Liter  \n【foreign_keys】:【none】",
    "evidence": "【step1】: 创建临时数据集：使用子查询定义每日销售量(50000升)和每升能量(35兆焦耳)的数值  【step2】: 进行数据映射：为子查询结果集创建别名data，建立可供外部查询使用的数据结构  【step3】: 计算能量总值：执行Daily_Sales与Energy_Per_Liter的列间乘法操作，输出总能量值(50000*35=1,750,000兆焦耳)",
    "english_step": "【step1】: Create temporary dataset: Use subquery to define daily sales volume (50,000 liters) and energy per liter (35 megajoules) values  【step2】: Perform data mapping: Create alias \"data\" for subquery result set, establishing data structure accessible for external queries  【step3】: Calculate total energy value: Execute column-wise multiplication of Daily_Sales and Energy_Per_Liter, output total energy value (50,000*35=1,750,000 megajoules)"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的销售额为750亿美元，净利润率为8%，求该公司的净利润。若该公司决定将净利润的25%用于再投资，求再投资的金额。",
    "query": "SELECT Sales * (Net_Profit_Margin / 100) AS Net_Profit, (Sales * (Net_Profit_Margin / 100)) * 0.25 AS Reinvestment_Amount FROM company WHERE Sales = 75 AND Net_Profit_Margin = 8;",
    "type": "2",
    "idx": 455,
    "englishquestion": "The sales revenue of an oil company is $75 billion, with a net profit margin of 8%. Calculate the company's net profit. If the company decides to reinvest 25% of its net profit, determine the amount to be reinvested.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Sales, Net_Profit_Margin  \n【foreign_keys】:【none】",
    "evidence": "【step1】:【筛选company表中Sales=75十亿美元且Net_Profit_Margin=8%的记录】  【step2】:【计算总利润：(Sales*Net_Profit_Margin/100)=750*0.08】  【step3】:【计算再投资金额：用总利润乘以25%（即结果再乘以0.25）】",
    "english_step": "[step1]: [Filter records in the company table where Sales=75 billion dollars and Net_Profit_Margin=8%]  [step2]: [Calculate total profit: (Sales*Net_Profit_Margin/100) = 750*0.08]  [step3]: [Calculate reinvestment amount: Multiply total profit by 25% (i.e., multiply the result by 0.25)]"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的收入增长率为5%，如果该公司希望在未来三年内实现收入增长20%，求每年需要实现的收入增长率。",
    "query": "SELECT 'Current Revenue Growth Rate: 5%' AS Current_Growth_Rate, 'Required Annual Growth Rate: ~6.67%' AS Required_Growth_Rate FROM company WHERE Revenue_Growth_Rate = 5;",
    "type": "3",
    "idx": 456,
    "englishquestion": "The revenue growth rate of an oil company is 5%. If the company aims to achieve a 20% increase in revenue over the next three years, calculate the required annual revenue growth rate.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：【Revenue_Growth_Rate】 【foerign_keys】:【none】",
    "evidence": "【step1】:【筛选当前收入增长率为5%的公司】 【step2】:【显示当前增长率和计算出年均增长率6.67%（(1.2^(1/3)-1)*100）】 【step3】:【通过固定字符串输出结果（不涉及真实表结构计算）】",
    "english_step": "【step1】:【Filter companies with current revenue growth rate of 5%】  【step2】:【Display current growth rate and calculated annualized growth rate 6.67% ((1.2^(1/3)-1)*100)】  【step3】:【Output results via fixed strings (no real table structure calculations involved)】"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的市场价值达到了1万亿美元，且其每升燃油的碳排放量为100克，如果该公司决定在一个月内销售掉其全部燃油库存，且燃油库存量为10亿升，求该公司在这一个月内的总碳排放量。若全球石油公司均采取此行动，对全球碳排放量的影响如何？",
    "query": "SELECT Stock_Liters * Carbon_Emission AS Total_Carbon_Emission, Stock_Liters * Carbon_Emission * 100 AS Global_Carbon_Emission FROM gas WHERE Stock_Liters = 1000000000 AND Carbon_Emission = 100;",
    "type": "4",
    "idx": 457,
    "englishquestion": "Assuming an oil company's market value reaches 1 trillion dollars, with its fuel emitting 100 grams of carbon per liter, if the company decides to sell off its entire fuel inventory within one month, and the fuel inventory is 1 billion liters, calculate the company's total carbon emissions during that month. If all global oil companies were to take this action, what would be the impact on global carbon emissions?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission  \n【foreign_keys】:【Station_ID→gas_station.Station_ID (未实际调用)】",
    "evidence": "【step1】:【关联公司表与燃气表，筛选市值1万亿美元（Market_Value = 1000）的特定公司及其燃油数据，通过station_company中间表建立连接】  【step2】:【计算单个公司总碳排放量，使用Stock_Liters * Carbon_Emission公式，同时应用库存量10亿升（Stock_Liters=1000000000）和碳排放系数100克/升的过滤条件】  【step3】:【假设全球100个同类公司（示例SQL中用*100硬编码），扩展计算总排放Total_Carbon_Emission * 100得到Global_Carbon_Emission】",
    "english_step": "【step1】:【Join the company table with the gas meter table, filter specific companies with a market value of $1 trillion (Market_Value = 1000) and their fuel data, establishing connections through the station_company intermediate table】  【step2】:【Calculate total carbon emissions for a single company using the formula Stock_Liters * Carbon_Emission, while applying filtering conditions of 1 billion liters in stock (Stock_Liters=1000000000) and a carbon emission coefficient of 100 grams/liter】  【step3】:【Assume 100 global peer companies (hardcoded as *100 in the example SQL), extend the calculation by multiplying Total_Carbon_Emission * 100 to obtain Global_Carbon_Emission】"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的环境评分为70分（满分100分），主要行业为石油开采。该公司每年的碳排放量为1000万吨，且每吨碳排放需要种植100棵树来抵消。该公司希望在未来五年内将环境评分提高到90分，那么需要种植多少棵树来抵消其碳排放？",
    "query": "SELECT Annual_Carbon_Emission * Years * Trees_Per_Ton AS Total_Trees_Needed FROM (SELECT 10000000 AS Annual_Carbon_Emission, 5 AS Years, 100 AS Trees_Per_Ton) AS data;",
    "type": "1",
    "idx": 458,
    "englishquestion": "An oil company has an environmental score of 70 (out of 100), with its main industry being oil extraction. The company emits 10 million tons of carbon annually, and it requires planting 100 trees to offset each ton of carbon emissions. The company aims to increase its environmental score to 90 within the next five years. How many trees need to be planted to offset its carbon emissions?",
    "equation_analysis": "",
    "used_table_info": "【table】：【None】 【columns】：None  \n【foreign_keys】: None",
    "evidence": "【step1】:【构造静态数据源】创建临时派生表data，包含Annual_Carbon_Emission(1000万吨转化为10000000吨)、Years(5年)、Trees_Per_Ton(100棵/吨)三个固定参数  【step2】:【执行核心计算】从派生表data中选取所有字段，使用乘法运算Annual_Carbon_Emission × Years × Trees_Per_Ton计算总需植树量  【step3】:【映射字段输出】将计算结果以Total_Trees_Needed字段命名后输出，形成最终结果集",
    "english_step": "[Step 1]: [Construct static data source] Create a temporary derived table \"data\" containing three fixed parameters: Annual_Carbon_Emission (converted from 10 million tons to 10,000,000 tons), Years (5 years), Trees_Per_Ton (100 trees/ton)  [Step 2]: [Perform core calculation] Select all fields from the derived table \"data\", calculate the total trees required using multiplication: Annual_Carbon_Emission × Years × Trees_Per_Ton  [Step 3]: [Map field for output] Output the calculated result named as the Total_Trees_Needed field to form the final result set"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的销售额为5000亿美元，净利润率为12%，总资产为2万亿美元，债务与股东权益比率为1.2:1。该公司计划在未来三年内将销售额提高20%，净利润率提高至15%，且债务与股东权益比率降至1:1，那么三年后的总资产和股东权益分别是多少？",
    "query": "WITH Future_Sales AS (SELECT Sales * 1.20 AS Future_Sales FROM company WHERE Sales = 5000), Future_Profits AS (SELECT Future_Sales * 0.15 AS Future_Profits FROM Future_Sales), Current_Equity AS (SELECT Assets / (1 + Debt_Equity_Ratio) AS Current_Equity FROM company WHERE Assets = 20000 AND Debt_Equity_Ratio = 1.2), Future_Equity AS (SELECT Current_Equity + Future_Profits AS Future_Equity FROM Current_Equity, Future_Profits) SELECT Future_Equity, 2 * Future_Equity AS Future_Assets FROM Future_Equity;",
    "type": "2",
    "idx": 459,
    "englishquestion": "An oil company has sales of $500 billion, a net profit margin of 12%, total assets of $2 trillion, and a debt-to-equity ratio of 1.2:1. The company plans to increase sales by 20% over the next three years, raise the net profit margin to 15%, and reduce the debt-to-equity ratio to 1:1. What will the total assets and shareholder equity be three years later?",
    "equation_analysis": "equation_analysis：  1. **未来销售额** = Sales * 1.20  2. **未来净利润** = 未来销售额 * 0.15  3. **当前股东权益** = 当前总资产 / (1 + 当前债务权益比率)  4. **未来股东权益** = 当前股东权益 + 未来净利润  5. **未来总资产** = 未来股东权益 * 2（债务权益比为1:1时，总资产为负债 + 股东权益 = 股东权益 + 股东权益 = 2 * 股东权益）",
    "used_table_info": "【table】：【company】 【columns】：Sales, Assets, Debt_Equity_Ratio  \n【foreign_keys】：无  \n【equation_analysis】：  \n1. **未来销售额** = Sales * 1.20  \n2. **未来净利润** = 未来销售额 * 0.15  \n3. **当前股东权益** = 当前总资产 / (1 + 当前债务权益比率)  \n4. **未来股东权益** = 当前股东权益 + 未来净利润  \n5. **未来总资产** = 未来股东权益 * 2（债务权益比为1:1时，总资产为负债 + 股东权益 = 股东权益 + 股东权益 = 2 * 股东权益）",
    "evidence": "【step1】: 计算未来销售额（5000亿 ×1.2）和净利润率（15%）生成Future_Sales和Future_Profits中间表  【step2】: 通过当前资产（2万亿）和债务权益比（1.2）计算当前股东权益（Assets/(1+1.2)），生成Current_Equity中间表  【step3】: 将未来三年累计利润叠加到当前股东权益得到Future_Equity，最后根据1:1的债务权益比使得总资产等于2倍股东权益",
    "english_step": "[Step1]: Calculate future sales (500 billion × 1.2) and net profit margin (15%) to generate intermediate tables Future_Sales and Future_Profits  [Step2]: Calculate current shareholders' equity (Assets/(1+1.2)) using current assets (2 trillion) and debt-to-equity ratio (1.2), generating intermediate table Current_Equity  [Step3]: Accumulate future three-year profits onto current shareholders' equity to derive Future_Equity, then align total assets with twice the shareholders' equity based on a 1:1 debt-to-equity ratio"
  },
  {
    "db_id": "gas",
    "question": "一家石油公司的员工数量为10万人，分支机构数量为500个。该公司计划在未来两年内将收入增长率从5%提高到10%，且每个分支机构平均需要增加10名员工以支持业务扩展，那么该公司需要增加多少员工数量？",
    "query": "SELECT Number_Branches * 10 AS Additional_Employees FROM company WHERE Number_Employees = 100000 AND Number_Branches = 500;",
    "type": "3",
    "idx": 460,
    "englishquestion": "The oil company has 100,000 employees and 500 branch offices. The company plans to increase its revenue growth rate from 5% to 10% over the next two years. To support business expansion, each branch office will need an average of 10 additional employees. How many employees will the company need to add in total?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Number_Branches, Number_Employees  \n【foreign_keys】:【None】",
    "evidence": "【step1】: 从company表中筛选基础数据行（WHERE Number_Employees=100000 AND Number_Branches=500）  【step2】: 对筛选结果进行计算（Number_Branches字段乘以10）  【step3】: 输出新增员工总数的计算结果（字段别名Additional_Employees）",
    "english_step": "【step1】: Filter base data rows from the company table (WHERE Number_Employees=100000 AND Number_Branches=500)  【step2】: Perform calculations on the filtered results (multiply Number_Branches field by 10)  【step3】: Output the calculated result of total additional employees (field alias Additional_Employees)"
  },
  {
    "db_id": "gas",
    "question": "假设一家石油公司的市值为10万亿美元，净利润率为50%，且该公司决定将所有净利润用于购买其竞争对手的股票。如果竞争对手的平均市值为5000亿美元，那么该公司可以购买多少家竞争对手的全部股权？",
    "query": "SELECT (Market_Value * (Net_Profit_Margin / 100)) / Competitor_Market_Value AS Competitors_Acquired FROM (SELECT 10000000000000 AS Market_Value, 50 AS Net_Profit_Margin, 500000000000 AS Competitor_Market_Value) AS data;",
    "type": "4",
    "idx": 461,
    "englishquestion": "Assuming an oil company has a market capitalization of 10 trillion dollars, a net profit margin of 50%, and the company decides to use all its net profits to purchase shares of its competitors. If the average market capitalization of the competitors is 500 billion dollars, how many competitors can the company fully acquire?",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Market_Value, Net_Profit_Margin 【table】：【无物理表关联（直接使用硬编码参数化查询）】 【columns】：Competitor_Market_Value（逻辑来源应为其他公司的Market_Value字段）  \n【foreign_keys】:【无显式外键关联（纯数值计算场景）】",
    "evidence": "【step1】:【创建虚拟派生表data，硬编码基础数值：Market_Value=10000000000000, Net_Profit_Margin=50%, Competitor_Market_Value=500000000000】  【step2】:【在FROM子句中通过子查询计算可支配资金：(母公司市场价值×净利润率)=10万亿×50%=5万亿美金】  【step3】:【通过SELECT进行最终结果计算：将可用资金/单家竞对市值=5万亿/5000亿=10家】",
    "english_step": "Step1: Create a virtual derived table \"data\" with hard-coded base values: Market_Value=10000000000000, Net_Profit_Margin=50%, Competitor_Market_Value=500000000000  Step2: Calculate disposable funds in the FROM clause via subquery: (Parent company's market value × Net Profit Margin) = 10 trillion × 50% = 5 trillion USD  Step3: Compute final result in SELECT clause: Available funds / Individual competitor's market value = 5 trillion / 500 billion = 10 companies"
  },
  {
    "db_id": "gas",
    "question": "某燃油类型的碳排放量为85克/升，且某批次的燃油库存量为50,000升，那么这批燃油完全燃烧后会产生多少千克的二氧化碳",
    "query": "SELECT (50000 * 85) / 1000 AS Total_CO2_Kilograms FROM gas WHERE Carbon_Emission = 85;",
    "type": "1",
    "idx": 462,
    "englishquestion": "A certain type of fuel has a carbon emission of 85 grams per liter, and a specific batch of this fuel has an inventory of 50,000 liters. How many kilograms of carbon dioxide will be produced when this batch of fuel is completely burned?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Carbon_Emission  \n【foreign_keys】: Station_ID (关联gas_station表的Station_ID)",
    "evidence": "【step1】:从gas表中筛选出Carbon_Emission等于85克/升的燃油记录  【step2】:对每一条符合条件的记录，计算固定库存量（50,000升）与碳排放量的乘积（50000 * 85）  【step3】:将结果转换为千克（/1000），并通过别名Total_CO2_Kilograms返回最终值",
    "english_step": "【step1】: Filter records from the gas table where Carbon_Emission equals 85 grams per liter.  【step2】: For each qualifying record, calculate the product of the fixed inventory quantity (50,000 liters) and the carbon emission value (50000 * 85).  【step3】: Convert the result to kilograms by dividing by 1000, and return the final value under the alias Total_CO2_Kilograms."
  },
  {
    "db_id": "gas",
    "question": "某燃油类型的价格为1.5美元/升，税收为0.3美元/升，当前库存量为100,000升。如果将所有库存燃油以当前价格售出，且需要支付总销售额的15%作为运营成本，那么销售这批燃油的净利润是多少？",
    "query": "SELECT (100000 * (1.5 + 0.3)) * (1 - 0.15) AS Net_Profit FROM gas WHERE Stock_Liters = 100000;",
    "type": "2",
    "idx": 463,
    "englishquestion": "The price of a certain fuel type is $1.5 per liter, with a tax of $0.3 per liter, and the current inventory is 100,000 liters. If all the inventory is sold at the current price and 15% of the total sales revenue is required to cover operating costs, what is the net profit from selling this batch of fuel?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters  \n【foreign_keys】:【gas.Station_ID → gas_station.Station_ID】",
    "evidence": "【step1】:【筛选库存量为100,000升的燃油记录，WHERE Stock_Liters = 100000】  【step2】:【计算总收入：100000升*(1.5单价+0.3税)=180000美元】  【step3】:【扣除15%运营成本：180000*(1-0.15)=153000美元作为净利润】",
    "english_step": "##STEP1##: Filter fuel records with a stock volume of 100,000 liters, WHERE Stock_Liters = 100000  ##STEP2##: Calculate total revenue: 100,000 liters * (1.5 unit price + 0.3 tax) = $180,000  ##STEP3##: Deduct 15% operational cost: $180,000 * (1 - 0.15) = $153,000 as net profit"
  },
  {
    "db_id": "gas",
    "question": "某燃油类型的最低库存量为10,000升，当前库存量为15,000升，且下一次燃油交付日期为5天后。如果每天的燃油销售量为2,000升，那么在下次交付前是否会触发库存预警？",
    "query": "SELECT CASE WHEN (15000 - 10000) / 2000 < 5 THEN '会触发预警' ELSE '不会触发预警' END AS Inventory_Warning FROM gas WHERE Stock_Liters = 15000 AND Minimum_Stock_Liters = 10000;",
    "type": "3",
    "idx": 464,
    "englishquestion": "The minimum inventory level for a certain fuel type is 10,000 liters, the current inventory is 15,000 liters, and the next fuel delivery date is in 5 days. If the daily fuel sales volume is 2,000 liters, will the inventory warning be triggered before the next delivery?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Minimum_Stock_Liters  \n【foreign_keys】: Station_ID关联gas_station.Station_ID",
    "evidence": "【step1】:【计算可用库存天数：(当前库存 - 最低库存)/日销量。实际运算：(15000-10000)/2000=2.5日】  【step2】:【设置过滤条件限定具体记录：WHERE Stock_Liters=15000 AND Minimum_Stock_Liters=10000】  【step3】:【通过CASE表达式判断库存天数是否低于交付周期（5天）：当2.5<5时返回预警，否则不触发】",
    "english_step": "【step1】:【Calculate available stock days: (Current Stock - Minimum Stock) / Daily Sales Volume. Actual calculation: (15000-10000)/2000=2.5 days】  【step2】:【Set filter conditions to specify specific records: WHERE Stock_Liters=15000 AND Minimum_Stock_Liters=10000】  【step3】:【Use CASE expression to determine if stock days are below delivery cycle (5 days): Return alert when 2.5<5, otherwise no trigger】"
  },
  {
    "db_id": "gas",
    "question": "假设某燃油类型的库存量为10,000,000升，每升燃油的碳排放量为1,000克/升，且这批燃油在一天内全部售出并燃烧。那么这一天产生的二氧化碳排放量是多少？如果全球所有燃油的碳排放量都达到这个水平，那么全球一天的二氧化碳排放量将是多少？",
    "query": "SELECT (10000000 * 1000) / 1000 AS CO2_Emission_Kilograms, (10000000 * 1000) / 1000 * (SELECT COUNT(*) FROM gas) AS Global_CO2_Emission_Kilograms FROM gas WHERE Stock_Liters = 10000000 AND Carbon_Emission = 1000;",
    "type": "4",
    "idx": 465,
    "englishquestion": "Assuming the stock of a certain fuel type is 10,000,000 liters, with a carbon emission of 1,000 grams per liter, and this batch of fuel is entirely sold and burned within one day. What is the amount of carbon dioxide emissions generated on that day? If all fuel globally reaches this emission level, what would be the global daily carbon dioxide emissions?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID",
    "evidence": "【step1】:【计算单条记录的二氧化碳排放量：将库存量(10,000,000升)乘以碳排放系数(1000克/升)，结果除以1000转换为千克，获得10,000千克】  【step2】:【获取满足条件的全球燃油总条目数：用子查询(SELECT COUNT(*) FROM gas) WHERE Stock_Liters=10000000 AND Carbon_Emission=1000，假设所有符合条件的gas条目代表相同规模的库存】  【step3】:【计算全球总排放：将单条记录的排放量(10,000千克)乘以总条目数，生成Global_CO2_Emission_Kilograms列】",
    "english_step": "【step1】:【Calculate the CO2 emission for a single record: Multiply the stock volume (10,000,000 liters) by the carbon emission coefficient (1000 grams/liter), divide the result by 1000 to convert to kilograms, obtaining 10,000 kilograms】  【step2】:【Get the total number of qualified global fuel entries: Use subquery (SELECT COUNT(*) FROM gas) WHERE Stock_Liters=10000000 AND Carbon_Emission=1000, assuming all qualified gas entries represent inventory of the same scale】  【step3】:【Calculate global total emissions: Multiply single-record emissions (10,000 kg) by total entry count, generating Global_CO2_Emission_Kilograms column】"
  },
  {
    "db_id": "gas",
    "question": "某燃油类型的硫含量为50百万分之一（ppm），且当前库存量为20,000升。如果硫在燃烧后完全转化为二氧化硫（SO?），那么这批燃油燃烧后会产生多少千克的二氧化硫？",
    "query": "SELECT (20000 * 50 * 64.07 / 32.06 / 1000000) AS SO2_Mass_Kilograms FROM gas WHERE Stock_Liters = 20000 AND Sulfur_Content = 50;",
    "type": "1",
    "idx": 466,
    "englishquestion": "A certain type of fuel has a sulfur content of 50 parts per million (ppm) and a current inventory of 20,000 liters. If the sulfur is completely converted into sulfur dioxide (SO?) after combustion, how many kilograms of sulfur dioxide will be produced by burning this batch of fuel?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Sulfur_Content  \n【foreign_keys】:【无】",
    "evidence": "【step1】:【从gas表中筛选出Stock_Liters为20000升且Sulfur_Content为50ppm的燃油记录】  【step2】:【基于硫-二氧化硫摩尔质量比（64.07/32.06），将硫含量转化为SO2质量，并乘以库存总量】  【step3】:【通过公式 (20000 * 50 * 64.07 / 32.06 / 1000000) 完成单位换算（ppm到千克）并输出结果】",
    "english_step": "【step1】: 【Filter fuel records from the gas table where Stock_Liters is 20,000 liters and Sulfur_Content is 50ppm】  【step2】: 【Convert sulfur content to SO2 mass using the sulfur-SO2 molar mass ratio (64.07/32.06) and multiply by the total inventory】  【step3】: 【Perform unit conversion (ppm to kilograms) using the formula (20000 * 50 * 64.07 / 32.06 / 1000000) and output the result】"
  },
  {
    "db_id": "gas",
    "question": "某燃油类型的价格为2.0美元/升，税收为0.5美元/升，当前库存量为80,000升。如果将所有库存燃油以当前价格售出，且需要支付总销售额的12%作为运营成本，那么销售这批燃油的净利润是多少？如果净利润的30%用于环保项目，那么环保项目的投入金额是多少？",
    "query": "SELECT (80000 * (2.0 + 0.5)) * (1 - 0.12) AS Net_Profit, (80000 * (2.0 + 0.5)) * (1 - 0.12) * 0.3 AS Environmental_Investment FROM gas WHERE Stock_Liters = 80000;",
    "type": "2",
    "idx": 467,
    "englishquestion": "The price of a certain fuel type is $2.0 per liter, with a tax of $0.5 per liter, and the current stock is 80,000 liters. If all the stock fuel is sold at the current price, and 12% of the total sales revenue is paid as operating costs, what is the net profit from selling this batch of fuel? If 30% of the net profit is allocated to environmental projects, what is the investment amount for these projects?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters  \n【foreign_keys】: 【无】",
    "evidence": "【step1】:根据WHERE条件筛选Stock_Liters=80000的燃油记录  【step2】:计算总销售额(单价Price_Liter + 税金Tax_per_Liter)*库存Stock_Liters  【step3】:通过(1 - 0.12)计算扣除12%运营成本后的净利润，再乘以0.3得出环保投入金额",
    "english_step": "[Step 1]: Filter fuel records WHERE Stock_Liters = 80,000  [Step 2]: Calculate total sales revenue: (Price_Liter + Tax_per_Liter) * Stock_Liters  [Step 3]: Compute net profit after deducting 12% operating costs using (1 - 0.12), then multiply by 0.3 to determine environmental investment amount"
  },
  {
    "db_id": "gas",
    "question": "某燃油类型的最低库存量为5,000升，当前库存量为8,000升，且下一次燃油交付日期为3天后。如果每天的燃油销售量为1,500升，那么在下次交付前是否会触发库存预警？如果会触发预警，提前几天触发？",
    "query": "SELECT CASE WHEN (8000 - 5000) / 1500 < 3 THEN '会触发预警，提前' || (3 - (8000 - 5000) / 1500) || '天' ELSE '不会触发预警' END AS Inventory_Warning FROM gas WHERE Stock_Liters = 8000 AND Minimum_Stock_Liters = 5000;",
    "type": "3",
    "idx": 468,
    "englishquestion": "The minimum stock level for a certain fuel type is 5,000 liters, and the current stock level is 8,000 liters. The next fuel delivery is scheduled in 3 days. If the daily fuel sales volume is 1,500 liters, will the inventory alert be triggered before the next delivery? If the alert is triggered, how many days in advance will it occur?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Minimum_Stock_Liters  \n【foreign_keys】: 无",
    "evidence": "【step1】:【定位库存记录】通过WHERE Stock_Liters=8000 AND Minimum_Stock_Liters=5000过滤gas表数据，获取满足最低库存标准的燃油记录  【step2】:【计算可用天数】执行(8000-5000)/1500=2天的核心计算，判断可用天数是否小于3天的交付周期（此处2<3条件成立）  【step3】:【预警判断与格式化】通过CASE WHEN判断触发预警，计算3-2天的提前量，拼接'会触发预警，提前1天'的最终输出结果",
    "english_step": "【step1】: [Locate Inventory Records] Filter gas table data via WHERE Stock_Liters=8000 AND Minimum_Stock_Liters=5000 to obtain fuel records satisfying minimum stock criteria  【step2】: [Calculate Available Days] Perform core calculation (8000-5000)/1500=2 days, check if available days fall below 3-day delivery cycle (2<3 condition holds true)  【step3】: [Alert Judgment & Formatting] Use CASE WHEN to trigger alert, calculate 3-2 day lead time, concatenate final output 'Alert triggered, 1 day advance notice'"
  },
  {
    "db_id": "gas",
    "question": "假设某燃油类型的库存量为100,000,000升，每升燃油的碳排放量为500克/升，且这批燃油在一天内全部售出并燃烧。那么这一天产生的二氧化碳排放量是多少？如果全球所有燃油的碳排放量都达到这个水平，且全球每天消耗的燃油总量为1,000,000,000,000升，那么全球一天的二氧化碳排放量将是多少？",
    "query": "SELECT (100000000 * 500) / 1000 AS CO2_Emission_Kilograms, (1000000000000 * 500) / 1000 AS Global_CO2_Emission_Kilograms FROM gas WHERE Stock_Liters = 100000000 AND Carbon_Emission = 500;",
    "type": "4",
    "idx": 469,
    "englishquestion": "Assuming the stock of a certain type of fuel is 100,000,000 liters, with each liter emitting 500 grams of carbon per liter, and this entire batch of fuel is sold and burned within one day. What would be the total carbon dioxide emissions for that day? If all fuel carbon emissions worldwide were to reach this level, and the global daily fuel consumption is 1,000,000,000,000 liters, what would be the total global carbon dioxide emissions in a single day?",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Carbon_Emission  \n【foreign_keys】: Station_ID",
    "evidence": "【step1】:【从gas表筛选Stock_Liters=100000000且Carbon_Emission=500的记录】  【step2】:【针对符合条件记录计算(库存量*单升碳排放)/1000转换为公斤级排放】  【step3】:【用硬编码数值1万亿升乘以相同碳排放系数，独立计算全球总量】",
    "english_step": "【step1】:【From the gas table, filter records where Stock_Liters = 100000000 and Carbon_Emission = 500】  【step2】:【For qualified records, calculate (Stock_Liters * Carbon_Emission) / 1000 to convert emissions to kilogram scale】  【step3】:【Independently compute the global total using a hard-coded value of 1 trillion liters multiplied by the same carbon emission coefficient】"
  },
  {
    "db_id": "gas",
    "question": "计算Shell品牌的汽油在完全燃烧时释放的总能量，假设其热值为34.2 MJ/L，且库存量为50,000升。",
    "query": "SELECT SUM(Stock_Liters * 34.2) AS Total_Energy_MJ FROM gas WHERE Brand = 'Shell';",
    "type": "1",
    "idx": 470,
    "englishquestion": "Calculate the total energy released when Shell brand gasoline is completely burned, given that its calorific value is 34.2 MJ/L and the inventory quantity is 50,000 liters.",
    "equation_analysis": "equation_analysis：总能量计算遵循公式：总能量(MJ) = 每升热值(34.2 MJ/L) × 库存总量(L)。SUM聚集函数对Stock_Liters字段做聚合运算，通过Brand='Shell'过滤Shell品牌燃油条目",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand 【foreign_keys】：【gas.Station_ID → gas_station.Station_ID】 【equation_analysis】：【总能量计算遵循公式：总能量(MJ) = 每升热值(34.2 MJ/L) × 库存总量(L)。SUM聚集函数对Stock_Liters字段做聚合运算，通过Brand='Shell'过滤Shell品牌燃油条目】",
    "evidence": "【step1】: 从gas表中筛选出品牌为Shell的记录  【step2】: 对筛选结果中的Stock_Liters字段执行34.2*库存量的乘法运算  【step3】: 将所有乘法结果求和并通过Total_Energy_MJ列输出总能量",
    "english_step": "【step1】: Filter records from the gas table where the brand is Shell  【step2】: Perform a multiplication operation of 34.2 * Stock_Liters on the filtered results  【step3】: Sum all multiplication results and output the total energy through the Total_Energy_MJ column"
  },
  {
    "db_id": "gas",
    "question": "计算BP品牌的柴油的总税收收入，假设其税率为0.5美元/升，且库存量为100,000升。",
    "query": "SELECT SUM(Stock_Liters * 0.5) AS Total_Tax_Revenue FROM gas WHERE Brand = 'BP' AND Fuel_Type = '柴油';",
    "type": "2",
    "idx": 471,
    "englishquestion": "Calculate the total tax revenue for BP's diesel, assuming a tax rate of $0.5 per liter and an inventory volume of 100,000 liters.",
    "equation_analysis": "equation_analysis：Total_Tax_Revenue = Σ(Stock_Liters * 0.5)  其中\"0.5\"为问题中明确假设的税率，实际数据库`gas.Tax_per_Liter`未使用。",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand, Fuel_Type  \n【foreign_keys】:gas.Station_ID → gas_station.Station_ID (no explicit JOIN in query)  \n【equation_analysis】：Total_Tax_Revenue = Σ(Stock_Liters * 0.5)  其中\"0.5\"为问题中明确假设的税率，实际数据库`gas.Tax_per_Liter`未使用。",
    "evidence": "【step1】:【从gas表中筛选出品牌为'BP'且燃料类型为'柴油'的记录】  【step2】:【提取选中记录的库存量Stock_Liters字段】  【step3】:【对库存量应用税率0.5美元/升，通过SUM(Stock_Liters*0.5)计算总税收收入】",
    "english_step": "[step1]: [Filter records from the gas table where Brand is 'BP' and Fuel_Type is 'Diesel'] [step2]: [Extract the Stock_Liters field from the selected records] [step3]: [Apply a tax rate of $0.5 per liter to Stock_Liters and calculate the total tax revenue using SUM(Stock_Liters * 0.5)]"
  },
  {
    "db_id": "gas",
    "question": "根据ExxonMobil供应商的库存量和最低库存量，判断是否需要紧急补货。假设库存量为8,000升，最低库存量为5,000升。",
    "query": "SELECT CASE WHEN Stock_Liters < Minimum_Stock_Liters THEN '需要紧急补货' ELSE '无需补货' END AS Replenishment_Status FROM gas WHERE Supplier = 'ExxonMobil';",
    "type": "3",
    "idx": 472,
    "englishquestion": "Based on ExxonMobil's supplier inventory levels and minimum inventory requirements, determine whether emergency restocking is needed. Assume the current inventory is 8,000 liters and the minimum inventory level is 5,000 liters.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Supplier, Stock_Liters, Minimum_Stock_Liters  \n【foreign_keys】:【none】",
    "evidence": "【step1】: 从gas表中筛选供应商为ExxonMobil的条目  【step2】: 对比库存量Stock_Liters与最低库存量Minimum_Stock_Liters的值  【step3】: 通过CASE条件语句生成补货状态结果Replenishment_Status",
    "english_step": "【step1】: Filter entries from the gas table where the supplier is ExxonMobil  【step2】: Compare the values of Stock_Liters (current stock) and Minimum_Stock_Liters (minimum required stock)  【step3】: Use a CASE conditional statement to generate the Replenishment_Status result"
  },
  {
    "db_id": "gas",
    "question": "假设Chevron供应商的库存量突然增加到1,000,000升，且每升燃油的碳排放量为2.5克/升，计算其碳排放总量，并分析对环境的影响。",
    "query": "SELECT SUM(1000000 * 2.5) AS Total_Carbon_Emission FROM gas WHERE Supplier = 'Chevron';",
    "type": "4",
    "idx": 473,
    "englishquestion": "Assuming the inventory of Chevron's supplier suddenly increases to 1,000,000 liters, and the carbon emissions per liter of fuel are 2.5 grams per liter, calculate the total carbon emissions and analyze the environmental impact.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Supplier  \n【foeign_keys】:【gas.Station_ID → gas_station.Station_ID】",
    "evidence": "【step1】:【筛选供应商为Chevron的记录】 【step2】:【计算每条记录的库存与碳排放乘积】 【step3】:【累加所有记录得到总排放量】",
    "english_step": "【step1】: 【Filter records where the supplier is Chevron】  【step2】: 【Calculate the product of inventory and carbon emissions for each record】  【step3】: 【Sum all records to obtain the total emissions】"
  },
  {
    "db_id": "gas",
    "question": "计算Total品牌的液化天然气（LNG）在完全燃烧时释放的总能量，假设其热值为24 MJ/L，且库存量为20,000升。如果这些能量用于驱动一辆电动汽车，且电动汽车的能耗为0.2 kWh/km，计算可行驶的总里程（单位：公里）。",
    "query": "SELECT SUM((Stock_Liters * 24 * 0.2778) / 0.2) AS Total_Distance_km FROM gas WHERE Brand = 'Total' AND Fuel_Type = '液化天然气';",
    "type": "1",
    "idx": 474,
    "englishquestion": "Calculate the total energy released by the complete combustion of liquefied natural gas (LNG) from the Total brand, assuming its calorific value is 24 MJ/L and the inventory is 20,000 liters. If this energy is used to power an electric vehicle with an energy consumption of 0.2 kWh/km, compute the total distance it can travel (unit: kilometers).",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand, Fuel_Type  \n【foreign_keys】: gas.Station_ID -> gas_station.Station_ID",
    "evidence": "【step1】:【筛选Total品牌的液化天然气记录】从gas表中过滤Brand='Total'且Fuel_Type='液化天然气'的数据  【step2】:【计算总可用能量】将Stock_Liters乘以热值24 MJ/L并转换为kWh（乘以转换系数0.2778）  【step3】:【计算行驶里程】总能量除以电耗0.2 kWh/km，并聚合结果为Total_Distance_km",
    "english_step": "【step1】: 【Filter LNG records of Total brand】Filter data from the gas table where Brand='Total' and Fuel_Type='Liquefied Natural Gas'  【step2】: 【Calculate total available energy】Multiply Stock_Liters by calorific value 24 MJ/L and convert to kWh (using conversion factor 0.2778)  【step3】: 【Calculate driving distance】Divide total energy by consumption rate 0.2 kWh/km, and aggregate the result as Total_Distance_km"
  },
  {
    "db_id": "gas",
    "question": "计算BP品牌的柴油的总税收收入，假设其税率为0.5美元/升，且库存量为100,000升。如果税收收入的30%用于环保项目，计算可用于环保项目的资金总额。",
    "query": "SELECT SUM(Stock_Liters * 0.5 * 0.3) AS Environmental_Fund FROM gas WHERE Brand = 'BP' AND Fuel_Type = '柴油';",
    "type": "2",
    "idx": 475,
    "englishquestion": "Calculate the total tax revenue for BP brand diesel, assuming a tax rate of $0.5 per liter and an inventory of 100,000 liters. If 30% of the tax revenue is allocated to environmental projects, determine the total amount of funds available for such projects.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand, Fuel_Type  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID",
    "evidence": "【step1】:从gas表中筛选出Brand为'BP'且Fuel_Type为'柴油'的记录  【step2】:将筛选结果的Stock_Liters乘以税率0.5美元/升，计算每条数据的单条税收  【step3】:将所有单条税收相加后乘以30%，通过别名Environmental_Fund输出总环保资金，最终使用聚合函数SUM完成一次性的累加与比例分配",
    "english_step": "[Step 1]: Filter records from the gas table where Brand is 'BP' and Fuel_Type is 'Diesel'  [Step 2]: Multiply Stock_Liters by the tax rate $0.5 per liter to calculate the individual tax amount for each record  [Step 3]: Sum all individual tax amounts and multiply by 30%, outputting the total environmental fund via the alias Environmental_Fund. Use the aggregate function SUM to accomplish both accumulation and proportional allocation in one operation."
  },
  {
    "db_id": "gas",
    "question": "根据ExxonMobil供应商的库存量（8,000升）和最低库存量（5,000升），判断是否需要紧急补货。如果补货周期为7天，且每日销售量为500升，计算补货量以确保库存安全。",
    "query": "SELECT CASE WHEN Stock_Liters < Minimum_Stock_Liters THEN '需要紧急补货' ELSE '无需补货' END AS Replenishment_Status, (7 * 500) + (Minimum_Stock_Liters - Stock_Liters) AS Replenishment_Volume FROM gas WHERE Supplier = 'ExxonMobil';",
    "type": "3",
    "idx": 476,
    "englishquestion": "Based on ExxonMobil's supplier's current inventory level (8,000 liters) and minimum inventory requirement (5,000 liters), determine if emergency replenishment is needed. If the replenishment cycle is 7 days and daily sales volume is 500 liters, calculate the replenishment quantity needed to ensure inventory safety.",
    "equation_analysis": "equation_analysis：  1. 补货状态条件判断公式：`当库存量 < 最低库存量` → 需要补货（否则无需补货）  2. 补货量计算公式：`7天日销量 + (最低库存量 - 当前库存量)` = 7×500 + (Minimum_Stock_Liters - Stock_Liters)",
    "used_table_info": "【table】：【gas】 【columns】：Supplier, Stock_Liters, Minimum_Stock_Liters  \n【foreign_keys】：无  \n【equation_analysis】：  \n1. 补货状态条件判断公式：`当库存量 < 最低库存量` → 需要补货（否则无需补货）  \n2. 补货量计算公式：`7天日销量 + (最低库存量 - 当前库存量)` = 7×500 + (Minimum_Stock_Liters - Stock_Liters)",
    "evidence": "【step1】:【从gas表中筛选出Supplier为'ExxonMobil'的记录，获取其Stock_Liters和Minimum_Stock_Liters字段值】  【step2】:【通过CASE表达式判断当库存量 < 最低库存量时，返回补货状态\"需要紧急补货\"，否则返回\"无需补货\"】  【step3】:【计算补货量：(7天*500升/日) + (最低库存量-当前库存量)，确保覆盖销售周期并补齐安全库存差额】",
    "english_step": "【step1】: [Filter records from the gas table where Supplier is 'ExxonMobil', retrieve their Stock_Liters and Minimum_Stock_Liters field values]  【step2】: [Use a CASE expression to determine replenishment status: return \"Urgent Replenishment Needed\" when stock < minimum stock, otherwise return \"No Replenishment Needed\"]  【step3】: [Calculate replenishment quantity: (7 days * 500 liters/day) + (Minimum_Stock_Liters - Current_Stock_Liters) to cover sales cycles and replenish safety stock deficits]"
  },
  {
    "db_id": "gas",
    "question": "假设BP供应商的库存量突然增加到5,000,000升，且每升燃油的碳排放量为3克/升。如果全球年碳排放量为40亿吨，计算其碳排放总量占全球年碳排放量的百分比，并分析其对全球气候变化的潜在影响。",
    "query": "SELECT (5000000 * 3) / 1000000000 AS Total_Carbon_Emission_Tonnes FROM gas WHERE Supplier = 'BP';",
    "type": "4",
    "idx": 477,
    "englishquestion": "Assuming the inventory of BP suppliers suddenly increases to 5,000,000 liters, and the carbon emission per liter of fuel is 3 grams/liter. If the global annual carbon emission is 40 billion tons, calculate the percentage of its total carbon emissions relative to the global annual carbon emissions, and analyze its potential impact on global climate change.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Supplier  \n【foreign_keys】:【无】",
    "evidence": "【step1】: 从gas表中筛选Supplier为'BP'的记录。  【step2】: 计算总碳排放量（5,000,000升 × 3克/升）并转换为吨（通过除以10^9）。  【step3】: 结果（15吨）用于外部计算占全球排放量（40亿吨）的百分比（显示为0.000375%）。",
    "english_step": "【step1】: Filter records from the gas table where Supplier is 'BP'.  【step2】: Calculate total carbon emissions (5,000,000 liters × 3 grams/liter) and convert to tons by dividing by 10^9.  【step3】: The result (15 tons) is used externally to calculate the percentage of global emissions (4 billion tons), shown as 0.000375%."
  },
  {
    "db_id": "gas",
    "question": "计算Shell公司所有加油站存储的柴油在完全燃烧时释放的总碳排放量，假设柴油的碳排放系数为2.68 kg/L。",
    "query": "SELECT SUM(g.Stock_Liters) * 2.68 AS Total_Carbon_Emission_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Shell' AND g.Fuel_Type = '柴油';",
    "type": "1",
    "idx": 478,
    "englishquestion": "Calculate the total carbon emissions released from the complete combustion of all diesel stored at Shell gas stations, assuming a carbon emission factor of 2.68 kg/L for diesel.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Fuel_Type, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【company】 【columns】：Company, Company_ID  \n【foreign_keys】:  \n1. gas.Station_ID → gas_station.Station_ID  \n2. station_company.Station_ID → gas_station.Station_ID  \n3. station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【通过company和station_company关联确定Shell公司拥有的Station_ID】  【step2】:【通过gas_station和gas关联获取该公司加油站柴油的Stock_Liters】  【step3】:【对柴油库存总量乘以碳排放系数(2.68 kg/L)得到总排放量】",
    "english_step": "【step1】:【Associate company and station_company to determine the Station_IDs owned by Shell】  【step2】:【Join gas_station and gas to retrieve the diesel Stock_Liters of these stations】  【step3】:【Multiply the total diesel stock volume by the carbon emission coefficient (2.68 kg/L) to calculate total emissions】"
  },
  {
    "db_id": "gas",
    "question": "计算ExxonMobil公司所有加油站的燃油库存总量与其总容量的比值，并判断是否存在库存超过容量的加油站。",
    "query": "SELECT gs.Station_ID, gs.Location, g.Stock_Liters / gs.Capacity_Liters AS Stock_Capacity_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil' AND g.Stock_Liters > gs.Capacity_Liters;",
    "type": "2",
    "idx": 479,
    "englishquestion": "Calculate the ratio of the total fuel inventory to the total capacity for all ExxonMobil gas stations, and determine whether there are any stations where the inventory exceeds the capacity.",
    "equation_analysis": "",
    "used_table_info": "",
    "evidence": "【step1】:【连接gas、gas_station、station_company和company表，通过外键建立多表关联关系】  【step2】:【过滤出公司名称为'ExxonMobil'的加油站记录】  【step3】:【计算各加油站燃油库存与容量的比值，并筛选出库存超过容量的异常记录】",
    "english_step": "【step1】:【Join the gas, gas_station, station_company, and company tables, establishing multi-table relationships via foreign keys】  【step2】:【Filter out gas station records where the company name is 'ExxonMobil'】  【step3】:【Calculate the fuel inventory-to-capacity ratio for each gas station and filter abnormal records where inventory exceeds capacity】"
  },
  {
    "db_id": "gas",
    "question": "判断某石油公司所有加油站的燃油库存是否均高于最低库存量，如果存在低于最低库存量的加油站，则列出这些加油站的ID和位置。",
    "query": "SELECT gs.Station_ID, gs.Location FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID WHERE sc.Company_ID = '指定公司ID' AND g.Stock_Liters < g.Minimum_Stock_Liters;",
    "type": "3",
    "idx": 480,
    "englishquestion": "Determine whether the fuel inventory at all gas stations of a certain petroleum company is above the minimum inventory level. If there are gas stations below the minimum inventory level, list the IDs and locations of those stations.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Station_ID, Stock_Liters, Minimum_Stock_Liters  \n【table】：【gas_station】 【columns】：Station_ID, Location  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID; station_company.Station_ID → gas_station.Station_ID; station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【连接gas_station与station_company表筛选出指定公司加油站】  【step2】:【关联gas表获取库存数据】  【step3】:【筛选库存低于最低库存的记录并输出Station_ID和Location】",
    "english_step": "Step 1: Join gas_station and station_company tables to filter gas stations of the specified company.  Step 2: Join with gas table to obtain inventory data.  Step 3: Filter records where inventory is below the minimum threshold and output Station_ID and Location."
  },
  {
    "db_id": "gas",
    "question": "假设Chevron公司所有加油站的燃油库存量突然增加到1000万升，计算其总重量（假设燃油密度为0.85 kg/L），并判断是否超过加油站总承重能力（假设每升燃油的承重为1 kg）。",
    "query": "SELECT COUNT(*) * 10000000 * 0.85 AS Total_Weight_kg, CASE WHEN COUNT(*) * 10000000 * 0.85 > COUNT(*) * 10000000 * 1 THEN '超过承重能力' ELSE '未超过承重能力' END AS Weight_Status FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';",
    "type": "4",
    "idx": 481,
    "englishquestion": "Assuming the fuel inventory at all Chevron gas stations suddenly increases to 10 million liters, calculate the total weight (assuming a fuel density of 0.85 kg/L) and determine whether it exceeds the total load-bearing capacity of the gas stations (assuming a load-bearing capacity of 1 kg per liter of fuel).",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【gas】 【columns】：Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID；station_company.Station_ID → gas_station.Station_ID；station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【连接燃气、加油站与公司表，筛选Chevron旗下所有加油站】  【step2】:【COUNT(*)获得总加油站数量，计算新库存总重量（1000万升×0.85kg/L）与总承重能力（1000万升×1kg/L）】  【step3】:【CASE判断比较总重量与总承重能力，返回是否超载的状态标记】",
    "english_step": "【step1】: 【Join gas, gas station, and company tables, filter all gas stations under Chevron】  【step2】: 【Use COUNT(*) to get total gas stations count, calculate new inventory total weight (10 million liters × 0.85 kg/L) and total load-bearing capacity (10 million liters × 1 kg/L)】  【step3】: 【Use CASE to compare total weight vs total load-bearing capacity, return overload status indicator】"
  },
  {
    "db_id": "gas",
    "question": "计算Shell公司高级汽油在所有加油站中的总硫含量，假设硫含量单位为百万分之一（ppm）。",
    "query": "SELECT SUM(g.Stock_Liters * g.Sulfur_Content) / 1000000 AS Total_Sulfur_Content_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Quality_Grade = '高级';",
    "type": "1",
    "idx": 482,
    "englishquestion": "Calculate the total sulfur content in all gas stations for Shell's premium gasoline, assuming the sulfur content is measured in parts per million (ppm).",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Station_ID, Stock_Liters, Sulfur_Content, Brand, Quality_Grade  \n【table】：【gas_station】 【columns】：Station_ID  \n【foreign_keys】:【gas.Station_ID → gas_station.Station_ID】",
    "evidence": "【step1】:【连接 gas 和 gas_station 表，通过 Station_ID 建立加油站与燃气数据的关联】  【step2】:【筛选品牌为 Shell 且质量等级为高级的汽油记录】  【step3】:【将库存升数乘以硫含量值，求和后除以 1,000,000 换算为千克单位的总硫含量（利用了 ppm 作为百万分之一的特性进行单位转换）】",
    "english_step": "【step1】:【Join the gas and gas_station tables via Station_ID to establish the association between gas stations and fuel data】  【step2】:【Filter gasoline records where the brand is Shell and the quality grade is Premium】  【step3】:【Calculate total sulfur content in kilograms by summing (inventory liters multiplied by sulfur content value), then dividing by 1,000,000 (utilizing the ppm property for unit conversion)】"
  },
  {
    "db_id": "gas",
    "question": "计算BP公司所有加油站的平均燃油价格，并分析其与市场平均价格（假设为1.5美元/升）的差异。",
    "query": "SELECT AVG(g.Price_Liter) AS Avg_Price_Per_Liter, AVG(g.Price_Liter) - 1.5 AS Price_Difference FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';",
    "type": "2",
    "idx": 483,
    "englishquestion": "Calculate the average fuel price of all BP gas stations, and analyze the difference between this average price and the market average price (assumed to be $1.5 per liter).",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company, Company_ID  \n【table】：【gas】 【columns】：Price_Liter, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID; station_company.Station_ID → gas_station.Station_ID; station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【通过JOIN操作连接gas、gas_station、station_company和company四表，建立油站数据与公司主体关系】  【step2】:【使用WHERE条件筛选出Company字段为'BP'的公司所属加油站数据】  【step3】:【对筛选结果计算Price_Liter字段整体平均值及其与1.5美元的差值，形成最终结果集】",
    "english_step": "【step1】:【JOIN the gas, gas_station, station_company, and company tables to establish the relationship between gas station data and corporate entities】  【step2】:【Use the WHERE clause to filter data for gas stations owned by the company where the Company field is 'BP'】  【step3】:【Calculate the overall average of the Price_Liter field and its difference from $1.50 for the filtered results to form the final result set】"
  },
  {
    "db_id": "gas",
    "question": "分析ExxonMobil公司所有加油站的燃油交付日期，判断是否存在交付日期早于最后一次交付日期的异常情况。",
    "query": "SELECT gs.Station_ID, gs.Location, g.Last_Delivery_Date, g.Next_Delivery_Date FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil' AND g.Next_Delivery_Date < g.Last_Delivery_Date;",
    "type": "3",
    "idx": 484,
    "englishquestion": "Analyze the fuel delivery dates for all ExxonMobil gas stations to determine if there are any abnormal cases where delivery dates are earlier than the last delivery date.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company  \n【table】：【gas】 【columns】：Station_ID, Last_Delivery_Date, Next_Delivery_Date  \n【table】：【gas_station】 【columns】：Station_ID, Location  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID | station_company.Station_ID → gas_station.Station_ID | station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【筛选ExxonMobil所属加油站】通过station_company和company表关联，过滤Company='ExxonMobil'的记录，获得该企业所有Station_ID  【step2】:【关联燃油交付记录】将gas表与step1结果通过Station_ID关联，提取Last_Delivery_Date和Next_Delivery_字段  【step3】:【时序异常检测】使用WHERE g.Next_Delivery_Date < g.Last_Delivery_Date条件，标记出\"下次交付早于上次交付\"的反常记录",
    "english_step": "【step1】:【Filter ExxonMobil-owned gas stations】Join station_company and company tables, filter records where Company='ExxonMobil' to obtain all Station_IDs for this enterprise  【step2】:【Associate fuel delivery records】Join gas table with step1 results via Station_ID, extract Last_Delivery_Date and Next_Delivery_Date fields  【step3】:【Temporal anomaly detection】Use WHERE g.Next_Delivery_Date < g.Last_Delivery_Date condition to flag anomalous records where \"next delivery precedes last delivery\""
  },
  {
    "db_id": "gas",
    "question": "假设Chevron公司所有加油站的燃油库存量突然减少到1升，计算其总碳排放量的减少量，假设每升燃油的碳排放量为2.31 kg/L。",
    "query": "SELECT SUM(g.Stock_Liters - 1) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';",
    "type": "4",
    "idx": 485,
    "englishquestion": "Assuming the fuel inventory of all Chevron gas stations suddenly decreases to 1 liter, calculate the total reduction in carbon emissions, with the assumption that each liter of fuel emits 2.31 kg/L of carbon.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【gas】 【columns】：Station_ID, Stock_Liters  \n【foreign_keys】: gas.Station_ID→gas_station.Station_ID, gas_station.Station_ID→station_company.Station_ID, station_company.Company_ID→company.Company_ID",
    "evidence": "【step1】:【通过station_company和company表建立关联，筛选出Chevron公司持有的加油站列表，形成Station_ID过滤条件】  【step2】:【将gas_station与step1结果关联获取物理加油站信息，再通过gas表获取对应的燃油库存数据】  【step3】:【对每个加油站的现有库存进行单站扣减量计算(Stock_Liters-1)，聚合后乘碳排放系数2.31kg/L得出总减排量】",
    "english_step": "【step1】: 【Establish a connection between the station_company and company tables to filter out the list of gas stations owned by Chevron Corporation, forming the Station_ID filter condition】  【step2】: 【Join gas_station with the step1 result to obtain physical gas station information, then retrieve corresponding fuel inventory data through the gas table】  【step3】: 【Calculate the single-station inventory deduction (Stock_Liters - 1) for each station's current stock, aggregate the values, and multiply by the carbon emission coefficient 2.31kg/L to derive total emission reduction】"
  },
  {
    "db_id": "gas",
    "question": "计算Shell品牌柴油在所有加油站中的总能量密度，假设柴油的能量密度为35.8 MJ/L。",
    "query": "SELECT SUM(g.Stock_Liters) * 35.8 AS Total_Energy_Density_MJ FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '柴油';",
    "type": "1",
    "idx": 486,
    "englishquestion": "Calculate the total energy density of Shell brand diesel across all gas stations, assuming the energy density of diesel is 35.8 MJ/L.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand, Fuel_Type, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID",
    "evidence": "【step1】:【JOIN `gas` 和 `gas_station` 表，通过 Station_ID 关联获取完整的加油站燃油数据】  【step2】:【筛选 Brand 为 Shell 且 Fuel_Type 为柴油的记录】  【step3】:【对符合条件的 Stock_Liters 求和并乘以 35.8，计算总能量密度】",
    "english_step": "Step 1: JOIN the `gas` and `gas_station` tables using Station_ID to obtain complete fuel data for gas stations.  Step 2: Filter records where Brand is Shell and Fuel_Type is diesel.  Step 3: Sum the qualified Stock_Liters and multiply by 35.8 to calculate the total energy density."
  },
  {
    "db_id": "gas",
    "question": "计算BP公司所有加油站的燃油库存总量与其总销售额的比值，假设每升燃油的平均售价为1.2美元。",
    "query": "SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 1.2) AS Stock_Sales_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';",
    "type": "2",
    "idx": 487,
    "englishquestion": "Calculate the ratio of the total fuel inventory at all BP gas stations to their total sales, assuming an average selling price of $1.2 per liter of fuel.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【company】 【columns】：Company  \n【foreign_keys】:  \ngas.Station_ID → gas_station.Station_ID → station_company.Station_ID;  \nstation_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【关联BP所属加油站数据】通过company表找到Company='BP'的记录，联合station_company表获取对应的Station_ID集合  【step2】:【汇总燃油数据统计】从gas表统计满足Station_ID属于BP的库存总量SUM(g.Stock_Liters)  【step3】:【计算库存销售比率】将总库存量除以（总库存量*1.2），即库存÷销售额，得出比值Stock_Sales_Ratio",
    "english_step": "【step1】:【Associate BP-owned gas station data】Find records where Company='BP' in the company table, and join with station_company table to obtain corresponding Station_ID collection  【step2】:【Summarize fuel data statistics】Calculate total inventory SUM(g.Stock_Liters) from gas table where Station_ID belongs to BP  【step3】:【Calculate stock-sales ratio】Divide total inventory by (total inventory*1.2), i.e., Stock ÷ Sales, to obtain Stock_Sales_Ratio"
  },
  {
    "db_id": "gas",
    "question": "分析ExxonMobil公司所有加油站的燃油供应商分布，统计本地供应商和国际供应商的库存量占比。",
    "query": "SELECT g.Supplier, SUM(g.Stock_Liters) / (SELECT SUM(g2.Stock_Liters) FROM gas g2 JOIN gas_station gs2 ON g2.Station_ID = gs2.Station_ID JOIN station_company sc2 ON gs2.Station_ID = sc2.Station_ID JOIN company c2 ON sc2.Company_ID = c2.Company_ID WHERE c2.Company = 'ExxonMobil') * 100 AS Stock_Percentage FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil' GROUP BY g.Supplier;",
    "type": "3",
    "idx": 488,
    "englishquestion": "Analyze the distribution of fuel suppliers for all ExxonMobil gas stations, and calculate the proportion of inventory held by local suppliers versus international suppliers.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【gas】 【columns】：Supplier, Stock_Liters, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station\\_company】 【columns】：Station_ID, Company_ID  \n【foreign\\_keys】: gas.Station_ID → gas_station.Station_ID | station_company.Station_ID → gas_station.Station_ID | station_company.Company_ID → company.Company_ID  \n【equation\\_analysis】: 每个供应商的库存量占比 = (Σ供应商在各加油站的Stock_Liters) / (ExxonMobil所有加油站的总Stock_Liters) × 100。分子通过外层GROUP BY计算，分母通过子查询计算ExxonMobil关联的加油站总库存。依赖数据分层统计模型，主查询先筛选ExxonMobil的加油站链，再聚合算局部比例。",
    "evidence": "【step1】:【筛选ExxonMobil旗下所有加油站】通过station_company表关联gas_station和company表，使用WHERE c.Company='ExxonMobil'条件过滤出所需加油站  【step2】:【汇总各供应商库存】按g.Supplier分组，用SUM(g.Stock_Liters)计算各供应商库存总量，同时构建子查询计算总库存：(SELECT SUM(g2.Stock_Liters)...)  【step3】:【计算库存占比】将单供应商库存除以总库存，乘以100得出Stock_Percentage，最终按g.Supplier分组输出供应商及对应占比",
    "english_step": "【Step 1】: 【Filter all gas stations under ExxonMobil】Join gas_station and company tables through station_company table using WHERE c.Company = 'ExxonMobil' to filter target stations.  【Step 2】: 【Aggregate inventory by supplier】Group by g.Supplier, calculate total inventory per supplier using SUM(g.Stock_Liters), and build subquery for total inventory: (SELECT SUM(g2.Stock_Liters) FROM gas_station g2 JOIN station_company sc2 ON g2.Station_ID = sc2.Station_ID JOIN company c2 ON sc2.Company_ID = c2.Company_ID WHERE c2.Company = 'ExxonMobil').  【Step 3】: 【Calculate inventory percentage】Divide individual supplier inventory by total inventory, multiply by 100 to get Stock_Percentage, then output suppliers and corresponding percentages grouped by g.Supplier."
  },
  {
    "db_id": "gas",
    "question": "假设Chevron公司所有加油站的燃油库存量突然减少到0.1升，计算其总碳排放量的减少量，假设每升燃油的碳排放量为2.31 kg/L。",
    "query": "SELECT SUM(g.Stock_Liters - 0.1) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';",
    "type": "4",
    "idx": 489,
    "englishquestion": "Assuming the fuel inventory at all Chevron gas stations suddenly decreases to 0.1 liters, calculate the total reduction in carbon emissions, given that the carbon emissions per liter of fuel are 2.31 kg/L.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company  \n【table】：【gas】 【columns】：Stock_Liters, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID, station_company.Station_ID → gas_station.Station_ID, station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【关联 gas、gas_station、station_company、company 四表，筛选出 Company = 'Chevron' 的油站数据】  【step2】:【计算每个油站库存的减少总量：用原库存 Stock_Liters 统一减去 0.1 后求和】  【step3】:【将总量乘碳排放系数 2.31 kg/L，得到最终碳排放减少数值】",
    "english_step": "[Step1]: [Join the gas, gas_station, station_company, and company tables to filter gas station data where Company = 'Chevron']  [Step2]: [Calculate the total reduction in inventory for each station: sum the values obtained by subtracting 0.1 from the original stock Stock_Liters]  [Step3]: [Multiply the total reduction by the carbon emission coefficient 2.31 kg/L to obtain the final carbon emission reduction value]"
  },
  {
    "db_id": "gas",
    "question": "计算Shell品牌汽油在所有加油站中的总挥发性有机化合物（VOC）排放量，假设每升汽油的VOC排放量为0.8克。",
    "query": "SELECT SUM(g.Stock_Liters) * 0.8 AS Total_VOC_Emission_g FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '汽油';",
    "type": "1",
    "idx": 490,
    "englishquestion": "Calculate the total Volatile Organic Compound (VOC) emissions for Shell brand gasoline across all gas stations, assuming a VOC emission of 0.8 grams per liter of gasoline.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand, Fuel_Type, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID",
    "evidence": "【step1】:【通过JOIN连接gas与gas_station表，匹配加油站库存数据与加油站基础信息】  【step2】:【应用WHERE过滤条件筛选品牌为'Shell'且燃油类型为'汽油'的记录】  【step3】:【计算筛选结果的库存升数总和，乘以0.8克转换系数得到VOC总排放量】",
    "english_step": "【step1】:【Join the gas and gas_station tables via JOIN to match gas station inventory data with basic station information】  【step2】:【Apply WHERE filter conditions to select records where brand is 'Shell' and fuel type is 'gasoline'】  【step3】:【Calculate the total liters of inventory from the filtered results, then multiply by the conversion factor 0.8 grams to obtain total VOC emissions】"
  },
  {
    "db_id": "gas",
    "question": "计算ExxonMobil公司所有加油站的燃油库存总量与其总利润的比值，假设每升燃油的平均利润为0.3美元。",
    "query": "SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.3) AS Stock_Profit_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';",
    "type": "2",
    "idx": 491,
    "englishquestion": "Calculate the ratio of the total fuel inventory of all ExxonMobil gas stations to their total profit, assuming an average profit of $0.3 per liter of fuel.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID（外键连接），Company（筛选条件）  \n【table】：【gas】 【columns】：Stock_Liters（聚合计算），Station_ID（连接）  \n【table】：【gas_station】 【columns】：Station_ID（连接）  \n【table】：【station_company】 【columns】：Station_ID（连接），Company_ID（外键连接）  \n【foreign_keys】:  \ngas.Station_ID → gas_station.Station_ID  \ngas_station.Station_ID → station_company.Station_ID  \nstation_company.Company_ID → company.Company_ID",
    "evidence": "【step1】: 通过多表连接关联燃气、加油站、公司与关系表，整合ExxonMobil旗下加油站及库存数据  【step2】: 过滤条件筛选公司名称为ExxonMobil的记录  【step3】: 计算所有加油站的燃油总库存量，使用(SUM(Stock_Liters)/(SUM(Stock_Liters)*0.3))公式得出库存量与利润的比值",
    "english_step": "【step1】: Perform multi-table joins to associate gas, gas stations, companies, and relationship tables, integrating data on gas stations and inventory under ExxonMobil  【step2】: Apply filter conditions to select records where the company name is ExxonMobil  【step3】: Calculate the total fuel inventory across all gas stations and derive the inventory-to-profit ratio using the formula (SUM(Stock_Liters)/(SUM(Stock_Liters)*0.3))"
  },
  {
    "db_id": "gas",
    "question": "分析BP公司所有加油站的燃油交付频率，统计每年交付次数超过12次的加油站数量。",
    "query": "SELECT COUNT(DISTINCT gs.Station_ID) AS High_Frequency_Stations FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP' GROUP BY gs.Station_ID HAVING COUNT(g.Last_Delivery_Date) / (YEAR(MAX(g.Last_Delivery_Date)) - YEAR(MIN(g.Last_Delivery_Date)) + 1) > 12;",
    "type": "3",
    "idx": 492,
    "englishquestion": "Analyze the fuel delivery frequency at all BP gas stations and count the number of stations with annual deliveries exceeding 12 times.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【gas】 【columns】：Station_ID, Last_Delivery_Date  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n\n【foreign_keys】:  \ngas.Station_ID → gas_station.Station_ID  \ngas_station.Station_ID → station_company.Station_ID  \nstation_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【连接gas、gas_station、station_company、company四表，筛选公司名称为'BP'的加油站记录】  【step2】:【按加油站ID分组，计算每个加油站交付总次数与运营年数（MAX(Last_Delivery_Date)-MIN(Last_Delivery_Date)+1）的比值作为年均交付频率】  【step3】:【通过HAVING子句过滤年均交付频率>12的加油站，最后使用COUNT(DISTINCT)统计符合条件的加油站总数】",
    "english_step": "【step1】: 【Join the gas, gas_station, station_company, and company tables, filter records where the company name is 'BP'】  【step2】: 【Group by gas station ID, calculate the ratio of total delivery count to operational years (MAX(Last_Delivery_Date) - MIN(Last_Delivery_Date) + 1) as annual average delivery frequency】  【step3】: 【Filter gas stations with HAVING clause where annual average delivery frequency > 12, then use COUNT(DISTINCT) to calculate the total number of qualifying gas stations】"
  },
  {
    "db_id": "gas",
    "question": "假设Chevron公司所有加油站的燃油库存量突然增加到10亿升，计算其总重量的增加量，假设燃油密度为0.85 kg/L。",
    "query": "SELECT COUNT(*) * 1000000000 * 0.85 AS Total_Weight_Increase_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';",
    "type": "4",
    "idx": 493,
    "englishquestion": "Assuming that the fuel inventory of all Chevron gas stations suddenly increases to 1 billion liters, calculate the total increase in weight, given a fuel density of 0.85 kg/L.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【gas】 【columns】：Station_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID; gas_station.Station_ID → station_company.Station_ID; station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【连接company、station_company、gas_station表，筛选出Company为'Chevron'的加油站】  【step2】:【通过Station_ID关联gas表，获取Chevron公司旗下所有加油站的燃油记录】  【step3】:【计算符合条件燃油记录总数，乘以10亿升和密度0.85 kg/L，得出总重量增量】",
    "english_step": "【step1】:【Join company, station_company, and gas_station tables to filter out gas stations where Company is 'Chevron'】  【step2】:【Associate with the gas table via Station_ID to obtain all fuel records for Chevron's gas stations】  【step3】:【Calculate the total number of qualifying fuel records, multiply by 1 billion liters and the density 0.85 kg/L to derive the total weight increment】"
  },
  {
    "db_id": "gas",
    "question": "计算Shell品牌液化天然气（LNG）在所有加油站中的总冷能释放量，假设LNG的冷能密度为0.25 MJ/kg，密度为0.45 kg/L。",
    "query": "SELECT SUM(g.Stock_Liters) * 0.25 * 0.45 AS Total_Cooling_Energy_MJ FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '液化天然气';",
    "type": "1",
    "idx": 494,
    "englishquestion": "Calculate the total cold energy release of Shell brand liquefied natural gas (LNG) at all gas stations, assuming the cold energy density of LNG is 0.25 MJ/kg and the density is 0.45 kg/L.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Brand, Fuel_Type, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【foreign_keys】:【gas.Station_ID → gas_station.Station_ID】",
    "evidence": "【step1】:【执行表连接操作，将gas表与gas_station表通过Station_ID字段关联】  【step2】:【应用过滤条件Brand='Shell'且Fuel_Type='液化天然气'】  【step3】:【计算Stock_Liters总和，并通过公式(总和×0.45×0.25)得到总冷能输出】",
    "english_step": "【step1】:【Perform a table join operation between the gas table and the gas_station table via the Station_ID field】  【step2】:【Apply filter conditions: Brand='Shell' and Fuel_Type='Liquefied Natural Gas'】  【step3】:【Calculate the total sum of Stock_Liters and derive the total cold energy output using the formula: (total sum × 0.45 × 0.25)】"
  },
  {
    "db_id": "gas",
    "question": "计算BP公司所有加油站的燃油库存总量与其总市值的比值，假设每升燃油的平均市值为1.8美元。",
    "query": "SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 1.8) AS Stock_Market_Value_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP';",
    "type": "2",
    "idx": 495,
    "englishquestion": "Calculate the ratio of the total fuel inventory at all BP gas stations to its total market value, assuming an average market value of $1.8 per liter of fuel.",
    "equation_analysis": "equation_analysis：公式本质为 \\( \\frac{ΣStock\\_Liters}{Σ(Stock\\_Liters×1.8)} \\)。分子是总库存，分母是基于库存计算的\"总市值\"（单价1.8美元/升），比值简化为 \\( \\frac{1}{1.8} \\)，实际业务意义需进一步验证。",
    "used_table_info": "【table】：【gas】 【columns】：Station_ID, Stock_Liters  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【company】 【columns】：Company_ID, Company  \n【foreign_keys】：gas.Station_ID → gas_station.Station_ID → station_company.Station_ID → company.Company_ID  \n【equation_analysis】：公式本质为 \\( \\frac{ΣStock\\_Liters}{Σ(Stock\\_Liters×1.8)} \\)。分子是总库存，分母是基于库存计算的\"总市值\"（单价1.8美元/升），比值简化为 \\( \\frac{1}{1.8} \\)，实际业务意义需进一步验证。",
    "evidence": "【step1】:【连接gas、gas_station、station_company、company四表，通过外键建立数据关联路径】  【step2】:【筛选公司名称为'BP'的关联记录，限定数据范围为BP公司的加油站】  【step3】:【计算库存总和（分子），用总库存乘1.8得总市值（分母），输出两者比值作为结果】",
    "english_step": "[step1]: [Join the gas, gas_station, station_company, and company tables via foreign keys to establish data association paths]  [step2]: [Filter records with company name 'BP' to restrict data scope to gas stations belonging to BP company]  [step3]: [Calculate total inventory (numerator), multiply total inventory by 1.8 for total market value (denominator), output their ratio as the result]"
  },
  {
    "db_id": "gas",
    "question": "分析ExxonMobil公司所有加油站的燃油交付频率，统计每年交付次数低于6次的加油站数量。",
    "query": "SELECT COUNT(DISTINCT gs.Station_ID) AS Low_Frequency_Stations FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil' GROUP BY gs.Station_ID HAVING COUNT(g.Last_Delivery_Date) / (YEAR(MAX(g.Last_Delivery_Date)) - YEAR(MIN(g.Last_Delivery_Date)) + 1) < 6;",
    "type": "3",
    "idx": 496,
    "englishquestion": "Analyze the fuel delivery frequency of all ExxonMobil gas stations and count the number of stations with fewer than 6 deliveries per year.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【gas】 【columns】：Station_ID, Last_Delivery_Date  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID; station_company.Station_ID → gas_station.Station_ID; station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【连接 gas_station、station_company 和 company 表，筛选出 ExxonMobil 旗下的所有加油站】  【step2】:【关联 gas 表获取交付记录，按加油站分组，计算每个站的年交付次数（总次数 / (最大年份-最小年份+1)）】  【step3】:【筛选年交付次数 <6 的加油站，统计这些站的 DISTINCT Station_ID 总数】",
    "english_step": "【step1】: 【Join the gas_station, station_company, and company tables to filter all gas stations owned by ExxonMobil】  【step2】: 【Join with the gas table to get delivery records, group by gas station, calculate annual delivery count per station (total_count / (MAX(year) - MIN(year) + 1))】  【step3】: 【Filter stations with annual delivery count <6, count the total number of DISTINCT Station_IDs from these stations】"
  },
  {
    "db_id": "gas",
    "question": "假设Chevron公司所有加油站的燃油库存量突然减少到0.01升，计算其总碳排放量的减少量，假设每升燃油的碳排放量为2.31 kg/L。",
    "query": "SELECT SUM(g.Stock_Liters - 0.01) * 2.31 AS Carbon_Emission_Reduction_kg FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'Chevron';",
    "type": "4",
    "idx": 497,
    "englishquestion": "Assuming the fuel inventory at all Chevron gas stations suddenly drops to 0.01 liters, calculate the total reduction in carbon emissions, assuming the carbon emissions per liter of fuel is 2.31 kg/L.",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【company】 【columns】：Company, Company_ID  \n【foreign_keys】:  \ngas.Station_ID → gas_station.Station_ID  \ngas_station.Station_ID → station_company.Station_ID  \nstation_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【通过JOIN连接四张表获取Chevron旗下所有加油站的燃油库存数据】  【step2】:【使用WHERE过滤条件c.Company = 'Chevron'限定目标公司】  【step3】:【计算原库存与0.01升差值之和，乘以碳排放系数2.31 kg/L】",
    "english_step": "【step1】:【Join four tables to retrieve fuel inventory data for all gas stations under Chevron】  【step2】:【Apply WHERE filter condition c.Company = 'Chevron' to target the company】  【step3】:【Calculate the sum of original inventory minus 0.01 liters, then multiply by carbon emission coefficient 2.31 kg/L】"
  },
  {
    "db_id": "gas",
    "question": "计算Shell品牌柴油在所有加油站中的总硫氧化物（SOx）排放量，假设每升柴油的硫含量为10 ppm，且每克硫燃烧产生2克SOx。",
    "query": "SELECT SUM(g.Stock_Liters * g.Sulfur_Content) * 2 / 1000000 AS Total_SOx_Emission_g FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID WHERE g.Brand = 'Shell' AND g.Fuel_Type = '柴油';",
    "type": "1",
    "idx": 498,
    "englishquestion": "Calculate the total sulfur oxide (SOx) emissions from Shell-brand diesel across all gas stations, assuming a sulfur content of 10 ppm per liter of diesel and that each gram of sulfur produces 2 grams of SOx upon combustion.",
    "equation_analysis": "equation_analysis：  总SOx排放 = ∑(各Shell柴油库存量 × 硫含量ppm) × 2 / 1,000,000  （Stock_Liters(升) × Sulfur_Content(ppm) = 硫重量微克，总和转克需除1,000,000，再根据1g硫生成2g SOx乘以2）",
    "used_table_info": "【table】：【gas】 【columns】：Stock_Liters, Sulfur_Content, Brand, Fuel_Type, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【foreign_keys】：gas.Station_ID → gas_station.Station_ID  \n【equation_analysis】：  \n总SOx排放 = ∑(各Shell柴油库存量 × 硫含量ppm) × 2 / 1,000,000  \n（Stock_Liters(升) × Sulfur_Content(ppm) = 硫重量微克，总和转克需除1,000,000，再根据1g硫生成2g SOx乘以2）",
    "evidence": "【step1】:【执行内联操作，将gas表和gas_station表通过Station_ID关联，确保加油站数据有效】  【step2】:【筛选出品牌为Shell且燃油类型为柴油的燃气记录】  【step3】:【对每个符合的记录计算Stock_Liters与硫含量的乘积，求和后乘以2并除以1e6，得到总SOx排放量（克）】",
    "english_step": "[Step 1]: [Perform an INNER JOIN operation between the gas table and gas_station table using Station_ID to ensure valid gas station data]  [Step 2]: [Filter records where Brand is Shell and Fuel_Type is diesel]  [Step 3]: [For each qualifying record, calculate the product of Stock_Liters and sulfur content, sum these values, then multiply by 2 and divide by 1e6 to obtain total SOx emissions (grams)]"
  },
  {
    "db_id": "gas",
    "question": "计算ExxonMobil公司所有加油站的燃油库存总量与其总资产的比值，假设每升燃油的平均资产价值为0.7美元。",
    "query": "SELECT SUM(g.Stock_Liters) / (SUM(g.Stock_Liters) * 0.7) AS Stock_Asset_Ratio FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';",
    "type": "2",
    "idx": 499,
    "englishquestion": "Calculate the ratio of the total fuel inventory at all ExxonMobil gas stations to their total assets, assuming an average asset value of $0.7 per liter of fuel.",
    "equation_analysis": "",
    "used_table_info": "【table】：【company】 【columns】：Company_ID, Company  \n【table】：【gas】 【columns】：Stock_Liters, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【foreign_keys】: gas.Station_ID → gas_station.Station_ID, gas_station.Station_ID → station_company.Station_ID, station_company.Company_ID → company.Company_ID",
    "evidence": "【step1】:【关联四个表，筛选出`company`表中公司名称为ExxonMobil的记录，并确定对应的加油站及燃油库存数据】  【step2】:【通过SUM(g.Stock_Liters)统计所有满足条件的燃油库存总量】  【step3】:【计算库存总量与资产的比值（分子为库存总量，分母为库存总量*0.7，即SUM/(SUM*0.7)）】",
    "english_step": "【step1】:【JOIN four tables and filter records where the company name is ExxonMobil in the `company` table, then identify corresponding gas stations and their fuel inventory data】  【step2】:【Calculate total fuel inventory quantity using SUM(g.Stock_Liters) for all qualifying records】  【step3】:【Compute the ratio of total inventory to assets (numerator: total inventory, denominator: total inventory * 0.7, i.e., SUM/(SUM*0.7))】"
  },
  {
    "db_id": "gas",
    "question": "分析BP公司所有加油站的燃油交付日期，统计交付日期在周末（周六和周日）的加油站数量。",
    "query": "SELECT COUNT(DISTINCT gs.Station_ID) AS Weekend_Delivery_Stations FROM gas g JOIN gas_station gs ON g.Station_ID = gs.Station_ID JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'BP' AND DAYOFWEEK(g.Last_Delivery_Date) IN (1, 7);",
    "type": "3",
    "idx": 500,
    "englishquestion": "Analyze the fuel delivery dates for all gas stations of BP Company, and count the number of gas stations with delivery dates falling on weekends (Saturday and Sunday).",
    "equation_analysis": "",
    "used_table_info": "【table】：【gas】 【columns】：Last_Delivery_Date, Station_ID  \n【table】：【gas_station】 【columns】：Station_ID  \n【table】：【station_company】 【columns】：Station_ID, Company_ID  \n【table】：【company】 【columns】：Company_ID, Company  \n【foreign_keys】: gas.Station_ID→gas_station.Station_ID | gas_station.Station_ID→station_company.Station_ID | station_company.Company_ID→company.Company_ID",
    "evidence": "【step1】:【通过 JOIN 连接 company、station_company、gas_station、gas 四张表，筛选出公司名称为'BP'的所有数据】  【step2】:【使用 DAYOFWEEK() 函数过滤出 Last_Delivery_Date 为周六或周日的数据(DAYOFWEEK结果1=周日,7=周六)】  【step3】:【对符合条件的 Station_ID 做 COUNT(DISTINCT) 统计消除重复记录，得到最终周末交付的加油站数量】",
    "english_step": "【step1】:【Join tables company, station_company, gas_station, and gas, filtering all data where company name is 'BP'】  【step2】:【Use DAYOFWEEK() function to filter data where Last_Delivery_Date falls on Saturday or Sunday (DAYOFWEEK result 1=Sunday,7=Saturday)】  【step3】:【Perform COUNT(DISTINCT Station_ID) on qualified data to eliminate duplicate records, obtaining the final count of gas stations with weekend deliveries】"
  }
]